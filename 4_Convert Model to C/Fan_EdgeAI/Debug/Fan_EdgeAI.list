
Fan_EdgeAI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009874  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003550  08009a20  08009a20  00019a20  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf70  0800cf70  00020944  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf70  0800cf70  0001cf70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf78  0800cf78  00020944  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf78  0800cf78  0001cf78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf7c  0800cf7c  0001cf7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000944  20000000  0800cf80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a04  20000944  0800d8c4  00020944  2**2
                  ALLOC
 10 ._user_heap_stack 00008800  20001348  0800d8c4  00021348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020944  2**0
                  CONTENTS, READONLY
 12 .debug_info   000185a2  00000000  00000000  00020974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035b6  00000000  00000000  00038f16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000d802  00000000  00000000  0003c4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc8  00000000  00000000  00049cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011d8  00000000  00000000  0004a998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002886f  00000000  00000000  0004bb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017a9e  00000000  00000000  000743df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f949c  00000000  00000000  0008be7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000cb  00000000  00000000  00185319  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003720  00000000  00000000  001853e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000b4  00000000  00000000  00188b04  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      00000183  00000000  00000000  00188bb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000944 	.word	0x20000944
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080099ec 	.word	0x080099ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000948 	.word	0x20000948
 80001cc:	080099ec 	.word	0x080099ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <AccelWrite>:
/* USER CODE BEGIN 0 */


/* Write the value into corresponding register address*/
void AccelWrite (uint8_t reg, uint8_t value)
{
 8000f4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t data[2];
    data[0] = reg;
    data[1] = value;
    HAL_I2C_Master_Transmit(&hi2c1, adxl_address, data, 2, 100);
 8000f4e:	2364      	movs	r3, #100	; 0x64
    data[0] = reg;
 8000f50:	f88d 000c 	strb.w	r0, [sp, #12]
    data[1] = value;
 8000f54:	f88d 100d 	strb.w	r1, [sp, #13]
    HAL_I2C_Master_Transmit(&hi2c1, adxl_address, data, 2, 100);
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	aa03      	add	r2, sp, #12
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	21a6      	movs	r1, #166	; 0xa6
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <AccelWrite+0x20>)
 8000f62:	f000 fead 	bl	8001cc0 <HAL_I2C_Master_Transmit>
}
 8000f66:	b005      	add	sp, #20
 8000f68:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f6c:	20001190 	.word	0x20001190

08000f70 <AccelReadValues>:

/* Read the values from corresponding register address*/
void AccelReadValues (uint8_t reg, uint8_t numberofbytes)
{
 8000f70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    HAL_I2C_Mem_Read(&hi2c1, adxl_address, reg, 1, (uint8_t *) AccelData,
 8000f72:	2364      	movs	r3, #100	; 0x64
 8000f74:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <AccelReadValues+0x20>)
 8000f7a:	9300      	str	r3, [sp, #0]
{
 8000f7c:	4602      	mov	r2, r0
    HAL_I2C_Mem_Read(&hi2c1, adxl_address, reg, 1, (uint8_t *) AccelData,
 8000f7e:	2301      	movs	r3, #1
 8000f80:	21a6      	movs	r1, #166	; 0xa6
 8000f82:	4804      	ldr	r0, [pc, #16]	; (8000f94 <AccelReadValues+0x24>)
 8000f84:	f000 ff32 	bl	8001dec <HAL_I2C_Mem_Read>
            numberofbytes, 100);
}
 8000f88:	b005      	add	sp, #20
 8000f8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f8e:	bf00      	nop
 8000f90:	2000096c 	.word	0x2000096c
 8000f94:	20001190 	.word	0x20001190

08000f98 <AccelInit>:
    HAL_I2C_Mem_Read(&hi2c1, adxl_address, reg, 1, &chipid, 1, 100);

}

void AccelInit(void)
{
 8000f98:	b508      	push	{r3, lr}
    AccelReadValues(0x00, 1);
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f7ff ffe7 	bl	8000f70 <AccelReadValues>
    AccelWrite(0x2d, 0x00);  // reset all bits
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	202d      	movs	r0, #45	; 0x2d
 8000fa6:	f7ff ffd1 	bl	8000f4c <AccelWrite>
    AccelWrite(0x2d, 0x08);  // power_cntl measure and wake up 8hz*/
 8000faa:	2108      	movs	r1, #8
 8000fac:	202d      	movs	r0, #45	; 0x2d
 8000fae:	f7ff ffcd 	bl	8000f4c <AccelWrite>
    AccelWrite(0x31, 0x00);  // data_format range= +- 2g

}
 8000fb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    AccelWrite(0x31, 0x00);  // data_format range= +- 2g
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2031      	movs	r0, #49	; 0x31
 8000fba:	f7ff bfc7 	b.w	8000f4c <AccelWrite>

08000fbe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fbe:	b500      	push	{lr}
 8000fc0:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc2:	2244      	movs	r2, #68	; 0x44
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	a805      	add	r0, sp, #20
 8000fc8:	f005 ffc6 	bl	8006f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fcc:	2214      	movs	r2, #20
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4668      	mov	r0, sp
 8000fd2:	f005 ffc1 	bl	8006f58 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fd6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fda:	f001 f839 	bl	8002050 <HAL_PWREx_ControlVoltageScaling>
 8000fde:	b108      	cbz	r0, 8000fe4 <SystemClock_Config+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <SystemClock_Config+0x24>
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe4:	2210      	movs	r2, #16
 8000fe6:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000fea:	2001      	movs	r0, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fec:	e9cd 1208 	strd	r1, r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ff0:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff2:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ff4:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ff8:	2207      	movs	r2, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffa:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ffc:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001000:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001004:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001006:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001008:	f001 f8e8 	bl	80021dc <HAL_RCC_OscConfig>
 800100c:	b108      	cbz	r0, 8001012 <SystemClock_Config+0x54>
 800100e:	b672      	cpsid	i
  while (1)
 8001010:	e7fe      	b.n	8001010 <SystemClock_Config+0x52>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001012:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001016:	220f      	movs	r2, #15
 8001018:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800101a:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800101c:	2104      	movs	r1, #4
 800101e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001020:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001024:	f001 fb5a 	bl	80026dc <HAL_RCC_ClockConfig>
 8001028:	b108      	cbz	r0, 800102e <SystemClock_Config+0x70>
 800102a:	b672      	cpsid	i
  while (1)
 800102c:	e7fe      	b.n	800102c <SystemClock_Config+0x6e>
}
 800102e:	b017      	add	sp, #92	; 0x5c
 8001030:	f85d fb04 	ldr.w	pc, [sp], #4
 8001034:	0000      	movs	r0, r0
	...

08001038 <main>:
{
 8001038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103c:	4cb2      	ldr	r4, [pc, #712]	; (8001308 <main+0x2d0>)
{
 800103e:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8001040:	f000 faf2 	bl	8001628 <HAL_Init>
  SystemClock_Config();
 8001044:	f7ff ffbb 	bl	8000fbe <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	2214      	movs	r2, #20
 800104a:	2100      	movs	r1, #0
 800104c:	a809      	add	r0, sp, #36	; 0x24
 800104e:	f005 ff83 	bl	8006f58 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001052:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001054:	f043 0304 	orr.w	r3, r3, #4
 8001058:	64e3      	str	r3, [r4, #76]	; 0x4c
 800105a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	9305      	str	r3, [sp, #20]
 8001062:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001064:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800106a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800106c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800106e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001072:	9306      	str	r3, [sp, #24]
 8001074:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800107e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	9307      	str	r3, [sp, #28]
 8001086:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001088:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800108a:	f043 0302 	orr.w	r3, r3, #2
 800108e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001090:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001092:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001098:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800109a:	2120      	movs	r1, #32
 800109c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a0:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010a2:	f000 fc91 	bl	80019c8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010a6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010b0:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010b4:	4895      	ldr	r0, [pc, #596]	; (800130c <main+0x2d4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010b8:	a909      	add	r1, sp, #36	; 0x24
 80010ba:	f000 fba7 	bl	800180c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2601      	movs	r6, #1
 80010c0:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c6:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c8:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f000 fb9c 	bl	800180c <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 80010d4:	488e      	ldr	r0, [pc, #568]	; (8001310 <main+0x2d8>)
 80010d6:	4b8f      	ldr	r3, [pc, #572]	; (8001314 <main+0x2dc>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80010d8:	8085      	strh	r5, [r0, #4]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80010da:	e9c0 5505 	strd	r5, r5, [r0, #20]
  hcrc.Instance = CRC;
 80010de:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80010e0:	6206      	str	r6, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010e2:	f000 fb35 	bl	8001750 <HAL_CRC_Init>
 80010e6:	b108      	cbz	r0, 80010ec <main+0xb4>
 80010e8:	b672      	cpsid	i
  while (1)
 80010ea:	e7fe      	b.n	80010ea <main+0xb2>
  hi2c1.Instance = I2C1;
 80010ec:	4d8a      	ldr	r5, [pc, #552]	; (8001318 <main+0x2e0>)
  hi2c1.Init.Timing = 0x00702991;
 80010ee:	4a8b      	ldr	r2, [pc, #556]	; (800131c <main+0x2e4>)
 80010f0:	4b8b      	ldr	r3, [pc, #556]	; (8001320 <main+0x2e8>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f2:	6228      	str	r0, [r5, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f4:	e9c5 0602 	strd	r0, r6, [r5, #8]
  hi2c1.Init.OwnAddress2 = 0;
 80010f8:	e9c5 0004 	strd	r0, r0, [r5, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010fc:	e9c5 0006 	strd	r0, r0, [r5, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001100:	4628      	mov	r0, r5
  hi2c1.Init.Timing = 0x00702991;
 8001102:	e9c5 2300 	strd	r2, r3, [r5]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001106:	f000 fd8a 	bl	8001c1e <HAL_I2C_Init>
 800110a:	4601      	mov	r1, r0
 800110c:	b108      	cbz	r0, 8001112 <main+0xda>
 800110e:	b672      	cpsid	i
  while (1)
 8001110:	e7fe      	b.n	8001110 <main+0xd8>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001112:	4628      	mov	r0, r5
 8001114:	f000 ff48 	bl	8001fa8 <HAL_I2CEx_ConfigAnalogFilter>
 8001118:	4601      	mov	r1, r0
 800111a:	b108      	cbz	r0, 8001120 <main+0xe8>
 800111c:	b672      	cpsid	i
  while (1)
 800111e:	e7fe      	b.n	800111e <main+0xe6>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001120:	4628      	mov	r0, r5
 8001122:	f000 ff67 	bl	8001ff4 <HAL_I2CEx_ConfigDigitalFilter>
 8001126:	4605      	mov	r5, r0
 8001128:	b108      	cbz	r0, 800112e <main+0xf6>
 800112a:	b672      	cpsid	i
  while (1)
 800112c:	e7fe      	b.n	800112c <main+0xf4>
  __HAL_RCC_CRC_CLK_ENABLE();
 800112e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8001130:	4f7c      	ldr	r7, [pc, #496]	; (8001324 <main+0x2ec>)
  __HAL_RCC_CRC_CLK_ENABLE();
 8001132:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001136:	64a3      	str	r3, [r4, #72]	; 0x48
 8001138:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800113a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800113e:	9304      	str	r3, [sp, #16]
 8001140:	9b04      	ldr	r3, [sp, #16]
  MX_X_CUBE_AI_Init();
 8001142:	f002 f983 	bl	800344c <MX_X_CUBE_AI_Init>
  printf("Hello World \n");
 8001146:	4878      	ldr	r0, [pc, #480]	; (8001328 <main+0x2f0>)
 8001148:	f006 fcde 	bl	8007b08 <puts>
  AccelInit();
 800114c:	f7ff ff24 	bl	8000f98 <AccelInit>
  const ai_handle act_addr[] = { activations };
 8001150:	4b76      	ldr	r3, [pc, #472]	; (800132c <main+0x2f4>)
 8001152:	9309      	str	r3, [sp, #36]	; 0x24
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8001154:	a909      	add	r1, sp, #36	; 0x24
 8001156:	462a      	mov	r2, r5
 8001158:	4638      	mov	r0, r7
 800115a:	f002 fa2f 	bl	80035bc <ai_network_create_and_init>
  if (err.type != AI_ERROR_NONE) {
 800115e:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 8001162:	d005      	beq.n	8001170 <main+0x138>
    printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 8001164:	0a02      	lsrs	r2, r0, #8
 8001166:	4872      	ldr	r0, [pc, #456]	; (8001330 <main+0x2f8>)
 8001168:	f006 fc48 	bl	80079fc <iprintf>
 800116c:	b672      	cpsid	i
  while (1)
 800116e:	e7fe      	b.n	800116e <main+0x136>
  ai_input = ai_network_inputs_get(network, NULL);
 8001170:	6838      	ldr	r0, [r7, #0]
 8001172:	9103      	str	r1, [sp, #12]
 8001174:	f002 f97c 	bl	8003470 <ai_network_inputs_get>
 8001178:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 8001374 <main+0x33c>
  ai_output = ai_network_outputs_get(network, NULL);
 800117c:	9903      	ldr	r1, [sp, #12]
  ai_input = ai_network_inputs_get(network, NULL);
 800117e:	f8ca 0000 	str.w	r0, [sl]
  ai_output = ai_network_outputs_get(network, NULL);
 8001182:	6838      	ldr	r0, [r7, #0]
 8001184:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 8001378 <main+0x340>
  ai_output[0].data = AI_HANDLE_PTR(pOut);
 8001188:	4e6a      	ldr	r6, [pc, #424]	; (8001334 <main+0x2fc>)
  ai_output = ai_network_outputs_get(network, NULL);
 800118a:	f002 f97b 	bl	8003484 <ai_network_outputs_get>
 800118e:	f8c9 0000 	str.w	r0, [r9]
 8001192:	4c69      	ldr	r4, [pc, #420]	; (8001338 <main+0x300>)
{
 8001194:	f04f 0800 	mov.w	r8, #0
	AccelReadValues(0x32, 6);
 8001198:	2106      	movs	r1, #6
 800119a:	2032      	movs	r0, #50	; 0x32
 800119c:	f7ff fee8 	bl	8000f70 <AccelReadValues>
	x = ((AccelData[1] << 8) | AccelData[0]);
 80011a0:	4a66      	ldr	r2, [pc, #408]	; (800133c <main+0x304>)
 80011a2:	4b67      	ldr	r3, [pc, #412]	; (8001340 <main+0x308>)
 80011a4:	f9b2 0000 	ldrsh.w	r0, [r2]
 80011a8:	8018      	strh	r0, [r3, #0]
	y = ((AccelData[3] << 8) | AccelData[2]);
 80011aa:	4b66      	ldr	r3, [pc, #408]	; (8001344 <main+0x30c>)
 80011ac:	f9b2 b002 	ldrsh.w	fp, [r2, #2]
 80011b0:	f8a3 b000 	strh.w	fp, [r3]
	z = ((AccelData[5] << 8) | AccelData[4]);
 80011b4:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 80011b8:	9303      	str	r3, [sp, #12]
 80011ba:	4b63      	ldr	r3, [pc, #396]	; (8001348 <main+0x310>)
 80011bc:	9a03      	ldr	r2, [sp, #12]
 80011be:	801a      	strh	r2, [r3, #0]
	ACC_Value_Raw.AccX = (x * .039);
 80011c0:	f7ff f9b0 	bl	8000524 <__aeabi_i2d>
 80011c4:	a34e      	add	r3, pc, #312	; (adr r3, 8001300 <main+0x2c8>)
 80011c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ca:	f7ff fa15 	bl	80005f8 <__aeabi_dmul>
 80011ce:	f7ff fceb 	bl	8000ba8 <__aeabi_d2f>
 80011d2:	4d5e      	ldr	r5, [pc, #376]	; (800134c <main+0x314>)
 80011d4:	6028      	str	r0, [r5, #0]
	ACC_Value_Raw.AccY = (y * .039);
 80011d6:	4658      	mov	r0, fp
 80011d8:	f7ff f9a4 	bl	8000524 <__aeabi_i2d>
 80011dc:	a348      	add	r3, pc, #288	; (adr r3, 8001300 <main+0x2c8>)
 80011de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e2:	f7ff fa09 	bl	80005f8 <__aeabi_dmul>
 80011e6:	f7ff fcdf 	bl	8000ba8 <__aeabi_d2f>
 80011ea:	6068      	str	r0, [r5, #4]
	ACC_Value_Raw.AccZ = (z * .039);
 80011ec:	9803      	ldr	r0, [sp, #12]
 80011ee:	f7ff f999 	bl	8000524 <__aeabi_i2d>
 80011f2:	a343      	add	r3, pc, #268	; (adr r3, 8001300 <main+0x2c8>)
 80011f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f8:	f7ff f9fe 	bl	80005f8 <__aeabi_dmul>
 80011fc:	f7ff fcd4 	bl	8000ba8 <__aeabi_d2f>
 8001200:	60a8      	str	r0, [r5, #8]
	HAL_Delay(50);
 8001202:	2032      	movs	r0, #50	; 0x32
 8001204:	f000 fa38 	bl	8001678 <HAL_Delay>
	printf("%d\r\n", write_index);
 8001208:	4641      	mov	r1, r8
 800120a:	4851      	ldr	r0, [pc, #324]	; (8001350 <main+0x318>)
 800120c:	f006 fbf6 	bl	80079fc <iprintf>
	aiInData[write_index++] = ACC_Value_Raw.AccX;
 8001210:	682b      	ldr	r3, [r5, #0]
	aiInData[write_index++] = ACC_Value_Raw.AccZ;
 8001212:	68a8      	ldr	r0, [r5, #8]
	aiInData[write_index++] = ACC_Value_Raw.AccX;
 8001214:	6023      	str	r3, [r4, #0]
	aiInData[write_index++] = ACC_Value_Raw.AccY;
 8001216:	686b      	ldr	r3, [r5, #4]
 8001218:	6063      	str	r3, [r4, #4]
	aiInData[write_index++] = ACC_Value_Raw.AccZ;
 800121a:	60a0      	str	r0, [r4, #8]
	printf("%d -- %f, %f\r\n", write_index, ACC_Value_Raw.AccZ, aiInData[write_index-1]);
 800121c:	f7ff f994 	bl	8000548 <__aeabi_f2d>
	aiInData[write_index++] = ACC_Value_Raw.AccZ;
 8001220:	f108 0803 	add.w	r8, r8, #3
	printf("%d -- %f, %f\r\n", write_index, ACC_Value_Raw.AccZ, aiInData[write_index-1]);
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	e9cd 2300 	strd	r2, r3, [sp]
 800122c:	4849      	ldr	r0, [pc, #292]	; (8001354 <main+0x31c>)
 800122e:	4641      	mov	r1, r8
 8001230:	f006 fbe4 	bl	80079fc <iprintf>
	if (write_index >= AI_NETWORK_IN_1_SIZE)
 8001234:	f1b8 0f48 	cmp.w	r8, #72	; 0x48
 8001238:	f104 040c 	add.w	r4, r4, #12
 800123c:	d1ac      	bne.n	8001198 <main+0x160>
	    printf("Running inference\r\n");
 800123e:	4846      	ldr	r0, [pc, #280]	; (8001358 <main+0x320>)
 8001240:	f006 fc62 	bl	8007b08 <puts>
  ai_input[0].data = AI_HANDLE_PTR(pIn);
 8001244:	f8da 3000 	ldr.w	r3, [sl]
 8001248:	4a3b      	ldr	r2, [pc, #236]	; (8001338 <main+0x300>)
 800124a:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(pOut);
 800124c:	f8d9 3000 	ldr.w	r3, [r9]
  printf("------------------\n");
 8001250:	4842      	ldr	r0, [pc, #264]	; (800135c <main+0x324>)
  ai_output[0].data = AI_HANDLE_PTR(pOut);
 8001252:	605e      	str	r6, [r3, #4]
  printf("------------------\n");
 8001254:	f006 fc58 	bl	8007b08 <puts>
  batch = ai_network_run(network, ai_input, ai_output);
 8001258:	f8d9 2000 	ldr.w	r2, [r9]
 800125c:	f8da 1000 	ldr.w	r1, [sl]
 8001260:	6838      	ldr	r0, [r7, #0]
 8001262:	f002 f9f2 	bl	800364a <ai_network_run>
 8001266:	4604      	mov	r4, r0
  printf("a----------------\n");
 8001268:	483d      	ldr	r0, [pc, #244]	; (8001360 <main+0x328>)
 800126a:	f006 fc4d 	bl	8007b08 <puts>
  if (batch != 1) {
 800126e:	2c01      	cmp	r4, #1
 8001270:	d009      	beq.n	8001286 <main+0x24e>
    err = ai_network_get_error(network);
 8001272:	6838      	ldr	r0, [r7, #0]
 8001274:	f002 f8ec 	bl	8003450 <ai_network_get_error>
    printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 8001278:	0a02      	lsrs	r2, r0, #8
 800127a:	b2c1      	uxtb	r1, r0
 800127c:	4839      	ldr	r0, [pc, #228]	; (8001364 <main+0x32c>)
 800127e:	f006 fbbd 	bl	80079fc <iprintf>
 8001282:	b672      	cpsid	i
  while (1)
 8001284:	e7fe      	b.n	8001284 <main+0x24c>
	    printf("AF-R\r\n");
 8001286:	4838      	ldr	r0, [pc, #224]	; (8001368 <main+0x330>)
 8001288:	4d2a      	ldr	r5, [pc, #168]	; (8001334 <main+0x2fc>)
	    	printf("%8.6f ", aiOutData[i]);
 800128a:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800137c <main+0x344>
	    printf("AF-R\r\n");
 800128e:	f006 fc3b 	bl	8007b08 <puts>
 8001292:	2404      	movs	r4, #4
	    	printf("%8.6f ", aiOutData[i]);
 8001294:	f855 0b04 	ldr.w	r0, [r5], #4
 8001298:	f7ff f956 	bl	8000548 <__aeabi_f2d>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4640      	mov	r0, r8
 80012a2:	f006 fbab 	bl	80079fc <iprintf>
	    for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 80012a6:	3c01      	subs	r4, #1
 80012a8:	d1f4      	bne.n	8001294 <main+0x25c>
  float max_value = values[0];
 80012aa:	edd6 7a00 	vldr	s15, [r6]
    if (values[i] > max_value) {
 80012ae:	ed96 7a01 	vldr	s14, [r6, #4]
	    printf(": %d - %s\r\n", (int) class, activities[class]);
 80012b2:	4b2e      	ldr	r3, [pc, #184]	; (800136c <main+0x334>)
 80012b4:	482e      	ldr	r0, [pc, #184]	; (8001370 <main+0x338>)
    if (values[i] > max_value) {
 80012b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012be:	bfc8      	it	gt
 80012c0:	eef0 7a47 	vmovgt.f32	s15, s14
 80012c4:	ed96 7a02 	vldr	s14, [r6, #8]
 80012c8:	eef4 7ac7 	vcmpe.f32	s15, s14
  for (uint32_t i = 1; i < len; i++) {
 80012cc:	bfc8      	it	gt
 80012ce:	2401      	movgt	r4, #1
    if (values[i] > max_value) {
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	bf48      	it	mi
 80012d6:	eef0 7a47 	vmovmi.f32	s15, s14
 80012da:	ed96 7a03 	vldr	s14, [r6, #12]
  for (uint32_t i = 1; i < len; i++) {
 80012de:	eef4 7a47 	vcmp.f32	s15, s14
 80012e2:	bf48      	it	mi
 80012e4:	2402      	movmi	r4, #2
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	bf48      	it	mi
 80012ec:	2403      	movmi	r4, #3
	    printf(": %d - %s\r\n", (int) class, activities[class]);
 80012ee:	4621      	mov	r1, r4
 80012f0:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 80012f4:	f006 fb82 	bl	80079fc <iprintf>
	    write_index = 0;
 80012f8:	e74b      	b.n	8001192 <main+0x15a>
 80012fa:	bf00      	nop
 80012fc:	f3af 8000 	nop.w
 8001300:	d916872b 	.word	0xd916872b
 8001304:	3fa3f7ce 	.word	0x3fa3f7ce
 8001308:	40021000 	.word	0x40021000
 800130c:	48000800 	.word	0x48000800
 8001310:	2000116c 	.word	0x2000116c
 8001314:	40023000 	.word	0x40023000
 8001318:	20001190 	.word	0x20001190
 800131c:	40005400 	.word	0x40005400
 8001320:	00702991 	.word	0x00702991
 8001324:	20001268 	.word	0x20001268
 8001328:	08009a34 	.word	0x08009a34
 800132c:	20000972 	.word	0x20000972
 8001330:	08009a41 	.word	0x08009a41
 8001334:	20001154 	.word	0x20001154
 8001338:	20001034 	.word	0x20001034
 800133c:	2000096c 	.word	0x2000096c
 8001340:	2000126c 	.word	0x2000126c
 8001344:	2000126e 	.word	0x2000126e
 8001348:	20001270 	.word	0x20001270
 800134c:	20000960 	.word	0x20000960
 8001350:	08009a68 	.word	0x08009a68
 8001354:	08009a6d 	.word	0x08009a6d
 8001358:	08009a7c 	.word	0x08009a7c
 800135c:	08009a8f 	.word	0x08009a8f
 8001360:	08009aa2 	.word	0x08009aa2
 8001364:	08009ab4 	.word	0x08009ab4
 8001368:	08009ae0 	.word	0x08009ae0
 800136c:	20000000 	.word	0x20000000
 8001370:	08009aed 	.word	0x08009aed
 8001374:	20001164 	.word	0x20001164
 8001378:	20001168 	.word	0x20001168
 800137c:	08009ae6 	.word	0x08009ae6

08001380 <MX_USART2_UART_Init>:
  huart2.Instance = USART2;
 8001380:	480b      	ldr	r0, [pc, #44]	; (80013b0 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 9600;
 8001382:	4a0c      	ldr	r2, [pc, #48]	; (80013b4 <MX_USART2_UART_Init+0x34>)
{
 8001384:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 9600;
 8001386:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800138a:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800138e:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001390:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001392:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001396:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800139a:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.Init.Parity = UART_PARITY_NONE;
 800139e:	6103      	str	r3, [r0, #16]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013a0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013a2:	f001 ffdc 	bl	800335e <HAL_UART_Init>
 80013a6:	b108      	cbz	r0, 80013ac <MX_USART2_UART_Init+0x2c>
 80013a8:	b672      	cpsid	i
  while (1)
 80013aa:	e7fe      	b.n	80013aa <MX_USART2_UART_Init+0x2a>
}
 80013ac:	bd08      	pop	{r3, pc}
 80013ae:	bf00      	nop
 80013b0:	200011e4 	.word	0x200011e4
 80013b4:	40004400 	.word	0x40004400

080013b8 <Error_Handler>:
 80013b8:	b672      	cpsid	i
  while (1)
 80013ba:	e7fe      	b.n	80013ba <Error_Handler+0x2>

080013bc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <HAL_MspInit+0x2c>)
 80013be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013c0:	f042 0201 	orr.w	r2, r2, #1
 80013c4:	661a      	str	r2, [r3, #96]	; 0x60
 80013c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80013c8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	f002 0201 	and.w	r2, r2, #1
 80013ce:	9200      	str	r2, [sp, #0]
 80013d0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013d8:	659a      	str	r2, [r3, #88]	; 0x58
 80013da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e4:	b002      	add	sp, #8
 80013e6:	4770      	bx	lr
 80013e8:	40021000 	.word	0x40021000

080013ec <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80013ec:	6802      	ldr	r2, [r0, #0]
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <HAL_CRC_MspInit+0x24>)
 80013f0:	429a      	cmp	r2, r3
{
 80013f2:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80013f4:	d10a      	bne.n	800140c <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013f6:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80013fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80013fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001400:	649a      	str	r2, [r3, #72]	; 0x48
 8001402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001404:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001408:	9301      	str	r3, [sp, #4]
 800140a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800140c:	b002      	add	sp, #8
 800140e:	4770      	bx	lr
 8001410:	40023000 	.word	0x40023000

08001414 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001414:	b510      	push	{r4, lr}
 8001416:	b0aa      	sub	sp, #168	; 0xa8
 8001418:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141a:	2214      	movs	r2, #20
 800141c:	2100      	movs	r1, #0
 800141e:	a803      	add	r0, sp, #12
 8001420:	f005 fd9a 	bl	8006f58 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001424:	2288      	movs	r2, #136	; 0x88
 8001426:	2100      	movs	r1, #0
 8001428:	a808      	add	r0, sp, #32
 800142a:	f005 fd95 	bl	8006f58 <memset>
  if(hi2c->Instance==I2C1)
 800142e:	6822      	ldr	r2, [r4, #0]
 8001430:	4b17      	ldr	r3, [pc, #92]	; (8001490 <HAL_I2C_MspInit+0x7c>)
 8001432:	429a      	cmp	r2, r3
 8001434:	d129      	bne.n	800148a <HAL_I2C_MspInit+0x76>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001436:	2340      	movs	r3, #64	; 0x40
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001438:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800143a:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800143c:	f001 fb22 	bl	8002a84 <HAL_RCCEx_PeriphCLKConfig>
 8001440:	b108      	cbz	r0, 8001446 <HAL_I2C_MspInit+0x32>
    {
      Error_Handler();
 8001442:	f7ff ffb9 	bl	80013b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	4c13      	ldr	r4, [pc, #76]	; (8001494 <HAL_I2C_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001448:	4813      	ldr	r0, [pc, #76]	; (8001498 <HAL_I2C_MspInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001452:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	9301      	str	r3, [sp, #4]
 800145a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800145c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001460:	2312      	movs	r3, #18
 8001462:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001466:	2100      	movs	r1, #0
 8001468:	2303      	movs	r3, #3
 800146a:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800146e:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001470:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001472:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001474:	f000 f9ca 	bl	800180c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001478:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800147a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800147e:	65a3      	str	r3, [r4, #88]	; 0x58
 8001480:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001482:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001486:	9302      	str	r3, [sp, #8]
 8001488:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800148a:	b02a      	add	sp, #168	; 0xa8
 800148c:	bd10      	pop	{r4, pc}
 800148e:	bf00      	nop
 8001490:	40005400 	.word	0x40005400
 8001494:	40021000 	.word	0x40021000
 8001498:	48000400 	.word	0x48000400

0800149c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800149c:	b510      	push	{r4, lr}
 800149e:	b0aa      	sub	sp, #168	; 0xa8
 80014a0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	2214      	movs	r2, #20
 80014a4:	2100      	movs	r1, #0
 80014a6:	a803      	add	r0, sp, #12
 80014a8:	f005 fd56 	bl	8006f58 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014ac:	2288      	movs	r2, #136	; 0x88
 80014ae:	2100      	movs	r1, #0
 80014b0:	a808      	add	r0, sp, #32
 80014b2:	f005 fd51 	bl	8006f58 <memset>
  if(huart->Instance==USART2)
 80014b6:	6822      	ldr	r2, [r4, #0]
 80014b8:	4b17      	ldr	r3, [pc, #92]	; (8001518 <HAL_UART_MspInit+0x7c>)
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d129      	bne.n	8001512 <HAL_UART_MspInit+0x76>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014be:	2302      	movs	r3, #2
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c0:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014c2:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c4:	f001 fade 	bl	8002a84 <HAL_RCCEx_PeriphCLKConfig>
 80014c8:	b108      	cbz	r0, 80014ce <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 80014ca:	f7ff ff75 	bl	80013b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <HAL_UART_MspInit+0x80>)
 80014d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014d2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80014d6:	659a      	str	r2, [r3, #88]	; 0x58
 80014d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014da:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80014de:	9201      	str	r2, [sp, #4]
 80014e0:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014e4:	f042 0201 	orr.w	r2, r2, #1
 80014e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80014ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	9302      	str	r3, [sp, #8]
 80014f2:	9b02      	ldr	r3, [sp, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	220c      	movs	r2, #12
 80014f6:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2100      	movs	r1, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fe:	2303      	movs	r3, #3
 8001500:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001508:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800150c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	f000 f97d 	bl	800180c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001512:	b02a      	add	sp, #168	; 0xa8
 8001514:	bd10      	pop	{r4, pc}
 8001516:	bf00      	nop
 8001518:	40004400 	.word	0x40004400
 800151c:	40021000 	.word	0x40021000

08001520 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <NMI_Handler>

08001522 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <HardFault_Handler>

08001524 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001524:	e7fe      	b.n	8001524 <MemManage_Handler>

08001526 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001526:	e7fe      	b.n	8001526 <BusFault_Handler>

08001528 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <UsageFault_Handler>

0800152a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152a:	4770      	bx	lr

0800152c <DebugMon_Handler>:
 800152c:	4770      	bx	lr

0800152e <PendSV_Handler>:
 800152e:	4770      	bx	lr

08001530 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001530:	f000 b890 	b.w	8001654 <HAL_IncTick>

08001534 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001534:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <_sbrk+0x30>)
 8001536:	6811      	ldr	r1, [r2, #0]
{
 8001538:	b510      	push	{r4, lr}
 800153a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800153c:	b909      	cbnz	r1, 8001542 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800153e:	490a      	ldr	r1, [pc, #40]	; (8001568 <_sbrk+0x34>)
 8001540:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001542:	6810      	ldr	r0, [r2, #0]
 8001544:	4909      	ldr	r1, [pc, #36]	; (800156c <_sbrk+0x38>)
 8001546:	4c0a      	ldr	r4, [pc, #40]	; (8001570 <_sbrk+0x3c>)
 8001548:	4403      	add	r3, r0
 800154a:	1b09      	subs	r1, r1, r4
 800154c:	428b      	cmp	r3, r1
 800154e:	d906      	bls.n	800155e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001550:	f005 fb06 	bl	8006b60 <__errno>
 8001554:	230c      	movs	r3, #12
 8001556:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001558:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800155c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800155e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001560:	e7fc      	b.n	800155c <_sbrk+0x28>
 8001562:	bf00      	nop
 8001564:	20001274 	.word	0x20001274
 8001568:	20001348 	.word	0x20001348
 800156c:	20018000 	.word	0x20018000
 8001570:	00000800 	.word	0x00000800

08001574 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001574:	4a03      	ldr	r2, [pc, #12]	; (8001584 <SystemInit+0x10>)
 8001576:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800157a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800157e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800158c:	f7ff fff2 	bl	8001574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001590:	480c      	ldr	r0, [pc, #48]	; (80015c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001592:	490d      	ldr	r1, [pc, #52]	; (80015c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001594:	4a0d      	ldr	r2, [pc, #52]	; (80015cc <LoopForever+0xe>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001598:	e002      	b.n	80015a0 <LoopCopyDataInit>

0800159a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800159c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159e:	3304      	adds	r3, #4

080015a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a4:	d3f9      	bcc.n	800159a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015a8:	4c0a      	ldr	r4, [pc, #40]	; (80015d4 <LoopForever+0x16>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ac:	e001      	b.n	80015b2 <LoopFillZerobss>

080015ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b0:	3204      	adds	r2, #4

080015b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b4:	d3fb      	bcc.n	80015ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015b6:	f005 fc91 	bl	8006edc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ba:	f7ff fd3d 	bl	8001038 <main>

080015be <LoopForever>:

LoopForever:
    b LoopForever
 80015be:	e7fe      	b.n	80015be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c8:	20000944 	.word	0x20000944
  ldr r2, =_sidata
 80015cc:	0800cf80 	.word	0x0800cf80
  ldr r2, =_sbss
 80015d0:	20000944 	.word	0x20000944
  ldr r4, =_ebss
 80015d4:	20001348 	.word	0x20001348

080015d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015d8:	e7fe      	b.n	80015d8 <ADC1_2_IRQHandler>
	...

080015dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015de:	4b0f      	ldr	r3, [pc, #60]	; (800161c <HAL_InitTick+0x40>)
{
 80015e0:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 80015e2:	7818      	ldrb	r0, [r3, #0]
 80015e4:	b908      	cbnz	r0, 80015ea <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80015e6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80015e8:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015ea:	4a0d      	ldr	r2, [pc, #52]	; (8001620 <HAL_InitTick+0x44>)
 80015ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f0:	fbb3 f3f0 	udiv	r3, r3, r0
 80015f4:	6810      	ldr	r0, [r2, #0]
 80015f6:	fbb0 f0f3 	udiv	r0, r0, r3
 80015fa:	f000 f895 	bl	8001728 <HAL_SYSTICK_Config>
 80015fe:	4604      	mov	r4, r0
 8001600:	2800      	cmp	r0, #0
 8001602:	d1f0      	bne.n	80015e6 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001604:	2d0f      	cmp	r5, #15
 8001606:	d8ee      	bhi.n	80015e6 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001608:	4602      	mov	r2, r0
 800160a:	4629      	mov	r1, r5
 800160c:	f04f 30ff 	mov.w	r0, #4294967295
 8001610:	f000 f858 	bl	80016c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <HAL_InitTick+0x48>)
 8001616:	4620      	mov	r0, r4
 8001618:	601d      	str	r5, [r3, #0]
  return status;
 800161a:	e7e5      	b.n	80015e8 <HAL_InitTick+0xc>
 800161c:	20000014 	.word	0x20000014
 8001620:	20000010 	.word	0x20000010
 8001624:	20000018 	.word	0x20000018

08001628 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001628:	4a09      	ldr	r2, [pc, #36]	; (8001650 <HAL_Init+0x28>)
 800162a:	6813      	ldr	r3, [r2, #0]
 800162c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001630:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001632:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001634:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001636:	f000 f833 	bl	80016a0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800163a:	2000      	movs	r0, #0
 800163c:	f7ff ffce 	bl	80015dc <HAL_InitTick>
 8001640:	4604      	mov	r4, r0
 8001642:	b918      	cbnz	r0, 800164c <HAL_Init+0x24>
    HAL_MspInit();
 8001644:	f7ff feba 	bl	80013bc <HAL_MspInit>
}
 8001648:	4620      	mov	r0, r4
 800164a:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800164c:	2401      	movs	r4, #1
 800164e:	e7fb      	b.n	8001648 <HAL_Init+0x20>
 8001650:	40022000 	.word	0x40022000

08001654 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001654:	4a03      	ldr	r2, [pc, #12]	; (8001664 <HAL_IncTick+0x10>)
 8001656:	4b04      	ldr	r3, [pc, #16]	; (8001668 <HAL_IncTick+0x14>)
 8001658:	6811      	ldr	r1, [r2, #0]
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	440b      	add	r3, r1
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	20001278 	.word	0x20001278
 8001668:	20000014 	.word	0x20000014

0800166c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800166c:	4b01      	ldr	r3, [pc, #4]	; (8001674 <HAL_GetTick+0x8>)
 800166e:	6818      	ldr	r0, [r3, #0]
}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20001278 	.word	0x20001278

08001678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001678:	b538      	push	{r3, r4, r5, lr}
 800167a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800167c:	f7ff fff6 	bl	800166c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001680:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8001682:	bf1c      	itt	ne
 8001684:	4b05      	ldrne	r3, [pc, #20]	; (800169c <HAL_Delay+0x24>)
 8001686:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001688:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 800168a:	bf18      	it	ne
 800168c:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800168e:	f7ff ffed 	bl	800166c <HAL_GetTick>
 8001692:	1b43      	subs	r3, r0, r5
 8001694:	42a3      	cmp	r3, r4
 8001696:	d3fa      	bcc.n	800168e <HAL_Delay+0x16>
  {
  }
}
 8001698:	bd38      	pop	{r3, r4, r5, pc}
 800169a:	bf00      	nop
 800169c:	20000014 	.word	0x20000014

080016a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a0:	4907      	ldr	r1, [pc, #28]	; (80016c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016a2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016aa:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80016bc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c4:	4b16      	ldr	r3, [pc, #88]	; (8001720 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c6:	b530      	push	{r4, r5, lr}
 80016c8:	68dc      	ldr	r4, [r3, #12]
 80016ca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ce:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d2:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d4:	2d04      	cmp	r5, #4
 80016d6:	bf28      	it	cs
 80016d8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016da:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e0:	bf8c      	ite	hi
 80016e2:	3c03      	subhi	r4, #3
 80016e4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e6:	fa03 f505 	lsl.w	r5, r3, r5
 80016ea:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ee:	40a3      	lsls	r3, r4
 80016f0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80016f6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fc:	bfac      	ite	ge
 80016fe:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001702:	4a08      	ldrlt	r2, [pc, #32]	; (8001724 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001704:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001708:	bfb8      	it	lt
 800170a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170e:	b2db      	uxtb	r3, r3
 8001710:	bfaa      	itet	ge
 8001712:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001716:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001718:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800171c:	bd30      	pop	{r4, r5, pc}
 800171e:	bf00      	nop
 8001720:	e000ed00 	.word	0xe000ed00
 8001724:	e000ed14 	.word	0xe000ed14

08001728 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001728:	3801      	subs	r0, #1
 800172a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800172e:	d20b      	bcs.n	8001748 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001730:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001734:	4a05      	ldr	r2, [pc, #20]	; (800174c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001736:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001738:	21f0      	movs	r1, #240	; 0xf0
 800173a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800173e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001740:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001742:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001744:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001746:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001748:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001750:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001752:	4604      	mov	r4, r0
 8001754:	b908      	cbnz	r0, 800175a <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8001756:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001758:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800175a:	7f43      	ldrb	r3, [r0, #29]
 800175c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001760:	b913      	cbnz	r3, 8001768 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8001762:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8001764:	f7ff fe42 	bl	80013ec <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001768:	2302      	movs	r3, #2
 800176a:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800176c:	7923      	ldrb	r3, [r4, #4]
 800176e:	b9e3      	cbnz	r3, 80017aa <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001770:	6823      	ldr	r3, [r4, #0]
 8001772:	4a13      	ldr	r2, [pc, #76]	; (80017c0 <HAL_CRC_Init+0x70>)
 8001774:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	f022 0218 	bic.w	r2, r2, #24
 800177c:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800177e:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001780:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001782:	b9d2      	cbnz	r2, 80017ba <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001784:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001788:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	6961      	ldr	r1, [r4, #20]
 800178e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001792:	430a      	orrs	r2, r1
 8001794:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	69a1      	ldr	r1, [r4, #24]
 800179a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800179e:	430a      	orrs	r2, r1
 80017a0:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80017a2:	2301      	movs	r3, #1
 80017a4:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80017a6:	2000      	movs	r0, #0
 80017a8:	e7d6      	b.n	8001758 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80017aa:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80017ae:	4620      	mov	r0, r4
 80017b0:	f000 f808 	bl	80017c4 <HAL_CRCEx_Polynomial_Set>
 80017b4:	2800      	cmp	r0, #0
 80017b6:	d0e2      	beq.n	800177e <HAL_CRC_Init+0x2e>
 80017b8:	e7cd      	b.n	8001756 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80017ba:	6922      	ldr	r2, [r4, #16]
 80017bc:	e7e4      	b.n	8001788 <HAL_CRC_Init+0x38>
 80017be:	bf00      	nop
 80017c0:	04c11db7 	.word	0x04c11db7

080017c4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80017c4:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80017c6:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80017c8:	3b01      	subs	r3, #1
 80017ca:	d31c      	bcc.n	8001806 <HAL_CRCEx_Polynomial_Set+0x42>
 80017cc:	fa21 f403 	lsr.w	r4, r1, r3
 80017d0:	07e4      	lsls	r4, r4, #31
 80017d2:	d5f9      	bpl.n	80017c8 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80017d4:	2a10      	cmp	r2, #16
 80017d6:	d012      	beq.n	80017fe <HAL_CRCEx_Polynomial_Set+0x3a>
 80017d8:	d804      	bhi.n	80017e4 <HAL_CRCEx_Polynomial_Set+0x20>
 80017da:	b13a      	cbz	r2, 80017ec <HAL_CRCEx_Polynomial_Set+0x28>
 80017dc:	2a08      	cmp	r2, #8
 80017de:	d010      	beq.n	8001802 <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 80017e0:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80017e2:	e00b      	b.n	80017fc <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 80017e4:	2a18      	cmp	r2, #24
 80017e6:	d1fb      	bne.n	80017e0 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 80017e8:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 80017ea:	d8f9      	bhi.n	80017e0 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80017ec:	6800      	ldr	r0, [r0, #0]
 80017ee:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80017f0:	6883      	ldr	r3, [r0, #8]
 80017f2:	f023 0318 	bic.w	r3, r3, #24
 80017f6:	431a      	orrs	r2, r3
 80017f8:	6082      	str	r2, [r0, #8]
 80017fa:	2000      	movs	r0, #0
}
 80017fc:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 80017fe:	2b07      	cmp	r3, #7
 8001800:	e7f3      	b.n	80017ea <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8001802:	2b0f      	cmp	r3, #15
 8001804:	e7f1      	b.n	80017ea <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 8001806:	2a00      	cmp	r2, #0
 8001808:	d1ea      	bne.n	80017e0 <HAL_CRCEx_Polynomial_Set+0x1c>
 800180a:	e7ef      	b.n	80017ec <HAL_CRCEx_Polynomial_Set+0x28>

0800180c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800180c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001810:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 80019c4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001814:	4c69      	ldr	r4, [pc, #420]	; (80019bc <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 8001816:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001818:	680a      	ldr	r2, [r1, #0]
 800181a:	fa32 f503 	lsrs.w	r5, r2, r3
 800181e:	d102      	bne.n	8001826 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8001820:	b003      	add	sp, #12
 8001822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001826:	f04f 0e01 	mov.w	lr, #1
 800182a:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 800182e:	ea1e 0202 	ands.w	r2, lr, r2
 8001832:	f000 8090 	beq.w	8001956 <HAL_GPIO_Init+0x14a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001836:	684d      	ldr	r5, [r1, #4]
 8001838:	f005 0603 	and.w	r6, r5, #3
 800183c:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001840:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001844:	1e77      	subs	r7, r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001846:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800184a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800184c:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001850:	f200 8083 	bhi.w	800195a <HAL_GPIO_Init+0x14e>
        temp = GPIOx->OSPEEDR;
 8001854:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001856:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 800185a:	68cf      	ldr	r7, [r1, #12]
 800185c:	fa07 f708 	lsl.w	r7, r7, r8
 8001860:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001864:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001866:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001868:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800186c:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001870:	409f      	lsls	r7, r3
 8001872:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001876:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001878:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800187a:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800187e:	688f      	ldr	r7, [r1, #8]
 8001880:	fa07 f708 	lsl.w	r7, r7, r8
 8001884:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001888:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 800188a:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800188c:	d071      	beq.n	8001972 <HAL_GPIO_Init+0x166>
      temp = GPIOx->MODER;
 800188e:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001890:	fa06 f608 	lsl.w	r6, r6, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001894:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001898:	4337      	orrs	r7, r6
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800189a:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 800189e:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018a0:	d059      	beq.n	8001956 <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a2:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80018a6:	f046 0601 	orr.w	r6, r6, #1
 80018aa:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 80018ae:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80018b2:	f023 0703 	bic.w	r7, r3, #3
 80018b6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80018ba:	f006 0601 	and.w	r6, r6, #1
 80018be:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80018c2:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018c4:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c8:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80018ca:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018cc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80018d0:	f04f 0c0f 	mov.w	ip, #15
 80018d4:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018d8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018dc:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018e0:	d05f      	beq.n	80019a2 <HAL_GPIO_Init+0x196>
 80018e2:	4e37      	ldr	r6, [pc, #220]	; (80019c0 <HAL_GPIO_Init+0x1b4>)
 80018e4:	42b0      	cmp	r0, r6
 80018e6:	d05e      	beq.n	80019a6 <HAL_GPIO_Init+0x19a>
 80018e8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80018ec:	42b0      	cmp	r0, r6
 80018ee:	d05c      	beq.n	80019aa <HAL_GPIO_Init+0x19e>
 80018f0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80018f4:	42b0      	cmp	r0, r6
 80018f6:	d05a      	beq.n	80019ae <HAL_GPIO_Init+0x1a2>
 80018f8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80018fc:	42b0      	cmp	r0, r6
 80018fe:	d058      	beq.n	80019b2 <HAL_GPIO_Init+0x1a6>
 8001900:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001904:	42b0      	cmp	r0, r6
 8001906:	d056      	beq.n	80019b6 <HAL_GPIO_Init+0x1aa>
 8001908:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800190c:	42b0      	cmp	r0, r6
 800190e:	bf0c      	ite	eq
 8001910:	2606      	moveq	r6, #6
 8001912:	2607      	movne	r6, #7
 8001914:	fa06 f60e 	lsl.w	r6, r6, lr
 8001918:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 800191c:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 800191e:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 8001920:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001922:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001926:	bf0c      	ite	eq
 8001928:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800192a:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 800192c:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 800192e:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001930:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8001934:	bf0c      	ite	eq
 8001936:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001938:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 800193a:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 800193c:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800193e:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001942:	bf0c      	ite	eq
 8001944:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001946:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8001948:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 800194a:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800194c:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 800194e:	bf54      	ite	pl
 8001950:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001952:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 8001954:	6026      	str	r6, [r4, #0]
    position++;
 8001956:	3301      	adds	r3, #1
 8001958:	e75e      	b.n	8001818 <HAL_GPIO_Init+0xc>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800195a:	2e03      	cmp	r6, #3
 800195c:	d18c      	bne.n	8001878 <HAL_GPIO_Init+0x6c>
        temp = GPIOx->ASCR;
 800195e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001960:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001964:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 8001968:	409f      	lsls	r7, r3
 800196a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->ASCR = temp;
 800196e:	62c7      	str	r7, [r0, #44]	; 0x2c
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001970:	e78d      	b.n	800188e <HAL_GPIO_Init+0x82>
        temp = GPIOx->AFR[position >> 3u];
 8001972:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001976:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800197a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800197e:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001982:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001986:	f04f 0e0f 	mov.w	lr, #15
 800198a:	fa0e fe0b 	lsl.w	lr, lr, fp
 800198e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001992:	690f      	ldr	r7, [r1, #16]
 8001994:	fa07 f70b 	lsl.w	r7, r7, fp
 8001998:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 800199c:	f8ca 7020 	str.w	r7, [sl, #32]
 80019a0:	e775      	b.n	800188e <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019a2:	2600      	movs	r6, #0
 80019a4:	e7b6      	b.n	8001914 <HAL_GPIO_Init+0x108>
 80019a6:	2601      	movs	r6, #1
 80019a8:	e7b4      	b.n	8001914 <HAL_GPIO_Init+0x108>
 80019aa:	2602      	movs	r6, #2
 80019ac:	e7b2      	b.n	8001914 <HAL_GPIO_Init+0x108>
 80019ae:	2603      	movs	r6, #3
 80019b0:	e7b0      	b.n	8001914 <HAL_GPIO_Init+0x108>
 80019b2:	2604      	movs	r6, #4
 80019b4:	e7ae      	b.n	8001914 <HAL_GPIO_Init+0x108>
 80019b6:	2605      	movs	r6, #5
 80019b8:	e7ac      	b.n	8001914 <HAL_GPIO_Init+0x108>
 80019ba:	bf00      	nop
 80019bc:	40010400 	.word	0x40010400
 80019c0:	48000400 	.word	0x48000400
 80019c4:	40021000 	.word	0x40021000

080019c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019c8:	b10a      	cbz	r2, 80019ce <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019ca:	6181      	str	r1, [r0, #24]
 80019cc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ce:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80019d0:	4770      	bx	lr

080019d2 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019d2:	6803      	ldr	r3, [r0, #0]
 80019d4:	699a      	ldr	r2, [r3, #24]
 80019d6:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 80019d8:	bf44      	itt	mi
 80019da:	2200      	movmi	r2, #0
 80019dc:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019de:	699a      	ldr	r2, [r3, #24]
 80019e0:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019e2:	bf5e      	ittt	pl
 80019e4:	699a      	ldrpl	r2, [r3, #24]
 80019e6:	f042 0201 	orrpl.w	r2, r2, #1
 80019ea:	619a      	strpl	r2, [r3, #24]
  }
}
 80019ec:	4770      	bx	lr
	...

080019f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80019f0:	b530      	push	{r4, r5, lr}
 80019f2:	9d03      	ldr	r5, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80019f4:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019f6:	432b      	orrs	r3, r5
 80019f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80019fc:	4a06      	ldr	r2, [pc, #24]	; (8001a18 <I2C_TransferConfig+0x28>)
 80019fe:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a00:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001a04:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001a06:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8001a0e:	ea20 0002 	bic.w	r0, r0, r2
 8001a12:	4303      	orrs	r3, r0
 8001a14:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001a16:	bd30      	pop	{r4, r5, pc}
 8001a18:	03ff63ff 	.word	0x03ff63ff

08001a1c <I2C_IsErrorOccurred>:
{
 8001a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a20:	6803      	ldr	r3, [r0, #0]
 8001a22:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a24:	f014 0410 	ands.w	r4, r4, #16
{
 8001a28:	4605      	mov	r5, r0
 8001a2a:	4688      	mov	r8, r1
 8001a2c:	4617      	mov	r7, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a2e:	d079      	beq.n	8001b24 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a30:	2210      	movs	r2, #16
 8001a32:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001a34:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8001a36:	f04f 0920 	mov.w	r9, #32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a3a:	682b      	ldr	r3, [r5, #0]
 8001a3c:	699a      	ldr	r2, [r3, #24]
 8001a3e:	0694      	lsls	r4, r2, #26
 8001a40:	d436      	bmi.n	8001ab0 <I2C_IsErrorOccurred+0x94>
 8001a42:	b10e      	cbz	r6, 8001a48 <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8001a44:	2404      	movs	r4, #4
 8001a46:	e039      	b.n	8001abc <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8001a48:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001a4c:	d0f6      	beq.n	8001a3c <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a4e:	f7ff fe0d 	bl	800166c <HAL_GetTick>
 8001a52:	1bc0      	subs	r0, r0, r7
 8001a54:	4540      	cmp	r0, r8
 8001a56:	d802      	bhi.n	8001a5e <I2C_IsErrorOccurred+0x42>
 8001a58:	f1b8 0f00 	cmp.w	r8, #0
 8001a5c:	d1ed      	bne.n	8001a3a <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001a5e:	682b      	ldr	r3, [r5, #0]
 8001a60:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8001a62:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001a66:	6998      	ldr	r0, [r3, #24]
 8001a68:	0400      	lsls	r0, r0, #16
          tmp2 = hi2c->Mode;
 8001a6a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001a6c:	d50a      	bpl.n	8001a84 <I2C_IsErrorOccurred+0x68>
 8001a6e:	0449      	lsls	r1, r1, #17
 8001a70:	d408      	bmi.n	8001a84 <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 8001a72:	2a20      	cmp	r2, #32
 8001a74:	d006      	beq.n	8001a84 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a7c:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8001a7e:	f7ff fdf5 	bl	800166c <HAL_GetTick>
 8001a82:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a84:	682b      	ldr	r3, [r5, #0]
 8001a86:	699c      	ldr	r4, [r3, #24]
 8001a88:	f014 0420 	ands.w	r4, r4, #32
 8001a8c:	d1d5      	bne.n	8001a3a <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001a8e:	f7ff fded 	bl	800166c <HAL_GetTick>
 8001a92:	1bc0      	subs	r0, r0, r7
 8001a94:	2819      	cmp	r0, #25
 8001a96:	d9f5      	bls.n	8001a84 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a98:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              __HAL_UNLOCK(hi2c);
 8001a9a:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a9e:	f043 0320 	orr.w	r3, r3, #32
 8001aa2:	646b      	str	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 8001aa4:	2601      	movs	r6, #1
              hi2c->State = HAL_I2C_STATE_READY;
 8001aa6:	f885 9041 	strb.w	r9, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aaa:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 8001aae:	e7e9      	b.n	8001a84 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8001ab0:	2e00      	cmp	r6, #0
 8001ab2:	d1c7      	bne.n	8001a44 <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ab4:	2220      	movs	r2, #32
 8001ab6:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8001ab8:	2404      	movs	r4, #4
    status = HAL_ERROR;
 8001aba:	2601      	movs	r6, #1
  itflag = hi2c->Instance->ISR;
 8001abc:	682b      	ldr	r3, [r5, #0]
 8001abe:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001ac0:	05d0      	lsls	r0, r2, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ac2:	bf41      	itttt	mi
 8001ac4:	f44f 7180 	movmi.w	r1, #256	; 0x100
 8001ac8:	61d9      	strmi	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8001aca:	f044 0401 	orrmi.w	r4, r4, #1
    status = HAL_ERROR;
 8001ace:	2601      	movmi	r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ad0:	0551      	lsls	r1, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ad2:	bf41      	itttt	mi
 8001ad4:	f44f 6180 	movmi.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8001ad8:	f044 0408 	orrmi.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001adc:	61d9      	strmi	r1, [r3, #28]
    status = HAL_ERROR;
 8001ade:	2601      	movmi	r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ae0:	0592      	lsls	r2, r2, #22
 8001ae2:	d521      	bpl.n	8001b28 <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8001ae8:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001aec:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001aee:	4628      	mov	r0, r5
 8001af0:	f7ff ff6f 	bl	80019d2 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001af4:	682a      	ldr	r2, [r5, #0]
 8001af6:	6853      	ldr	r3, [r2, #4]
 8001af8:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001afc:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001b00:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8001b0a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001b0c:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8001b0e:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8001b10:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b12:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001b1c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8001b20:	2601      	movs	r6, #1
 8001b22:	e003      	b.n	8001b2c <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8001b24:	4626      	mov	r6, r4
 8001b26:	e7c9      	b.n	8001abc <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 8001b28:	2e00      	cmp	r6, #0
 8001b2a:	d1e0      	bne.n	8001aee <I2C_IsErrorOccurred+0xd2>
}
 8001b2c:	4630      	mov	r0, r6
 8001b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001b32 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001b32:	b570      	push	{r4, r5, r6, lr}
 8001b34:	4604      	mov	r4, r0
 8001b36:	460d      	mov	r5, r1
 8001b38:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b3a:	6823      	ldr	r3, [r4, #0]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	079b      	lsls	r3, r3, #30
 8001b40:	d501      	bpl.n	8001b46 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8001b42:	2000      	movs	r0, #0
}
 8001b44:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b46:	4632      	mov	r2, r6
 8001b48:	4629      	mov	r1, r5
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f7ff ff66 	bl	8001a1c <I2C_IsErrorOccurred>
 8001b50:	b9a0      	cbnz	r0, 8001b7c <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8001b52:	1c6a      	adds	r2, r5, #1
 8001b54:	d0f1      	beq.n	8001b3a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b56:	f7ff fd89 	bl	800166c <HAL_GetTick>
 8001b5a:	1b80      	subs	r0, r0, r6
 8001b5c:	42a8      	cmp	r0, r5
 8001b5e:	d801      	bhi.n	8001b64 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001b60:	2d00      	cmp	r5, #0
 8001b62:	d1ea      	bne.n	8001b3a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b64:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b66:	f043 0320 	orr.w	r3, r3, #32
 8001b6a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b6c:	2320      	movs	r3, #32
 8001b6e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001b78:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	e7e1      	b.n	8001b44 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08001b80 <I2C_WaitOnFlagUntilTimeout>:
{
 8001b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b84:	9f06      	ldr	r7, [sp, #24]
 8001b86:	4604      	mov	r4, r0
 8001b88:	4688      	mov	r8, r1
 8001b8a:	4616      	mov	r6, r2
 8001b8c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b8e:	6822      	ldr	r2, [r4, #0]
 8001b90:	6993      	ldr	r3, [r2, #24]
 8001b92:	ea38 0303 	bics.w	r3, r8, r3
 8001b96:	bf0c      	ite	eq
 8001b98:	2301      	moveq	r3, #1
 8001b9a:	2300      	movne	r3, #0
 8001b9c:	42b3      	cmp	r3, r6
 8001b9e:	d001      	beq.n	8001ba4 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	e015      	b.n	8001bd0 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001ba4:	1c6b      	adds	r3, r5, #1
 8001ba6:	d0f3      	beq.n	8001b90 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ba8:	f7ff fd60 	bl	800166c <HAL_GetTick>
 8001bac:	1bc0      	subs	r0, r0, r7
 8001bae:	42a8      	cmp	r0, r5
 8001bb0:	d801      	bhi.n	8001bb6 <I2C_WaitOnFlagUntilTimeout+0x36>
 8001bb2:	2d00      	cmp	r5, #0
 8001bb4:	d1eb      	bne.n	8001b8e <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bb6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001bb8:	f043 0320 	orr.w	r3, r3, #32
 8001bbc:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bbe:	2320      	movs	r3, #32
 8001bc0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001bca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001bce:	2001      	movs	r0, #1
}
 8001bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001bd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001bd4:	b570      	push	{r4, r5, r6, lr}
 8001bd6:	4604      	mov	r4, r0
 8001bd8:	460d      	mov	r5, r1
 8001bda:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bdc:	6823      	ldr	r3, [r4, #0]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	069b      	lsls	r3, r3, #26
 8001be2:	d501      	bpl.n	8001be8 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8001be4:	2000      	movs	r0, #0
}
 8001be6:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001be8:	4632      	mov	r2, r6
 8001bea:	4629      	mov	r1, r5
 8001bec:	4620      	mov	r0, r4
 8001bee:	f7ff ff15 	bl	8001a1c <I2C_IsErrorOccurred>
 8001bf2:	b990      	cbnz	r0, 8001c1a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bf4:	f7ff fd3a 	bl	800166c <HAL_GetTick>
 8001bf8:	1b80      	subs	r0, r0, r6
 8001bfa:	42a8      	cmp	r0, r5
 8001bfc:	d801      	bhi.n	8001c02 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8001bfe:	2d00      	cmp	r5, #0
 8001c00:	d1ec      	bne.n	8001bdc <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c04:	f043 0320 	orr.w	r3, r3, #32
 8001c08:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c0a:	2320      	movs	r3, #32
 8001c0c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001c16:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	e7e3      	b.n	8001be6 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08001c1e <HAL_I2C_Init>:
{
 8001c1e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001c20:	4604      	mov	r4, r0
 8001c22:	2800      	cmp	r0, #0
 8001c24:	d04a      	beq.n	8001cbc <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c26:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001c2a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c2e:	b91b      	cbnz	r3, 8001c38 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001c30:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001c34:	f7ff fbee 	bl	8001414 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c38:	2324      	movs	r3, #36	; 0x24
 8001c3a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001c3e:	6823      	ldr	r3, [r4, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	f022 0201 	bic.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c48:	6862      	ldr	r2, [r4, #4]
 8001c4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c4e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c56:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c58:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c5c:	2901      	cmp	r1, #1
 8001c5e:	d124      	bne.n	8001caa <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c64:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001c6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c70:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c72:	68da      	ldr	r2, [r3, #12]
 8001c74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c78:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c7a:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8001c7e:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c80:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c82:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001c86:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c88:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	f042 0201 	orr.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c98:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001c9a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c9c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c9e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ca2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8001ca8:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001caa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cae:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cb0:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001cb2:	bf04      	itt	eq
 8001cb4:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001cb8:	605a      	streq	r2, [r3, #4]
 8001cba:	e7d4      	b.n	8001c66 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	e7f3      	b.n	8001ca8 <HAL_I2C_Init+0x8a>

08001cc0 <HAL_I2C_Master_Transmit>:
{
 8001cc0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001cc4:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cc6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001cca:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ccc:	2b20      	cmp	r3, #32
{
 8001cce:	4604      	mov	r4, r0
 8001cd0:	460e      	mov	r6, r1
 8001cd2:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cd4:	f040 8086 	bne.w	8001de4 <HAL_I2C_Master_Transmit+0x124>
    __HAL_LOCK(hi2c);
 8001cd8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	f000 8081 	beq.w	8001de4 <HAL_I2C_Master_Transmit+0x124>
 8001ce2:	f04f 0a01 	mov.w	sl, #1
 8001ce6:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001cea:	f7ff fcbf 	bl	800166c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cee:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8001cf0:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cf2:	9000      	str	r0, [sp, #0]
 8001cf4:	4652      	mov	r2, sl
 8001cf6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	f7ff ff40 	bl	8001b80 <I2C_WaitOnFlagUntilTimeout>
 8001d00:	b118      	cbz	r0, 8001d0a <HAL_I2C_Master_Transmit+0x4a>
      return HAL_ERROR;
 8001d02:	2001      	movs	r0, #1
}
 8001d04:	b002      	add	sp, #8
 8001d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d0a:	2321      	movs	r3, #33	; 0x21
 8001d0c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d10:	2310      	movs	r3, #16
 8001d12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d16:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8001d18:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8001d1e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8001d26:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d28:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <HAL_I2C_Master_Transmit+0x128>)
 8001d2a:	d926      	bls.n	8001d7a <HAL_I2C_Master_Transmit+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d2c:	22ff      	movs	r2, #255	; 0xff
 8001d2e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d30:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d36:	4631      	mov	r1, r6
 8001d38:	4620      	mov	r0, r4
 8001d3a:	f7ff fe59 	bl	80019f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d3e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d40:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d42:	462a      	mov	r2, r5
 8001d44:	4639      	mov	r1, r7
 8001d46:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8001d48:	b9fb      	cbnz	r3, 8001d8a <HAL_I2C_Master_Transmit+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d4a:	f7ff ff43 	bl	8001bd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d4e:	2800      	cmp	r0, #0
 8001d50:	d1d7      	bne.n	8001d02 <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d52:	6823      	ldr	r3, [r4, #0]
 8001d54:	2120      	movs	r1, #32
 8001d56:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001d5e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001d62:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001d66:	f022 0201 	bic.w	r2, r2, #1
 8001d6a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001d6c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001d70:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d74:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001d78:	e7c4      	b.n	8001d04 <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8001d7a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d7c:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001d7e:	b292      	uxth	r2, r2
 8001d80:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	e7d5      	b.n	8001d36 <HAL_I2C_Master_Transmit+0x76>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d8a:	f7ff fed2 	bl	8001b32 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d8e:	2800      	cmp	r0, #0
 8001d90:	d1b7      	bne.n	8001d02 <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d94:	6822      	ldr	r2, [r4, #0]
 8001d96:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001d9a:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001d9c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001d9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001da0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001da2:	3b01      	subs	r3, #1
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001da8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001daa:	3a01      	subs	r2, #1
 8001dac:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001dae:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001db0:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0c3      	beq.n	8001d3e <HAL_I2C_Master_Transmit+0x7e>
 8001db6:	2a00      	cmp	r2, #0
 8001db8:	d1c1      	bne.n	8001d3e <HAL_I2C_Master_Transmit+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001dba:	9500      	str	r5, [sp, #0]
 8001dbc:	463b      	mov	r3, r7
 8001dbe:	2180      	movs	r1, #128	; 0x80
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	f7ff fedd 	bl	8001b80 <I2C_WaitOnFlagUntilTimeout>
 8001dc6:	2800      	cmp	r0, #0
 8001dc8:	d19b      	bne.n	8001d02 <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	2bff      	cmp	r3, #255	; 0xff
 8001dd0:	d903      	bls.n	8001dda <HAL_I2C_Master_Transmit+0x11a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dd2:	22ff      	movs	r2, #255	; 0xff
 8001dd4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dd6:	9000      	str	r0, [sp, #0]
 8001dd8:	e7ab      	b.n	8001d32 <HAL_I2C_Master_Transmit+0x72>
          hi2c->XferSize = hi2c->XferCount;
 8001dda:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ddc:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001dde:	b292      	uxth	r2, r2
 8001de0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001de2:	e7ce      	b.n	8001d82 <HAL_I2C_Master_Transmit+0xc2>
    return HAL_BUSY;
 8001de4:	2002      	movs	r0, #2
 8001de6:	e78d      	b.n	8001d04 <HAL_I2C_Master_Transmit+0x44>
 8001de8:	80002000 	.word	0x80002000

08001dec <HAL_I2C_Mem_Read>:
{
 8001dec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001df0:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001df2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001df6:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8001dfa:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dfe:	2b20      	cmp	r3, #32
{
 8001e00:	4604      	mov	r4, r0
 8001e02:	460f      	mov	r7, r1
 8001e04:	4616      	mov	r6, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e06:	f040 80c9 	bne.w	8001f9c <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8001e0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001e0c:	b113      	cbz	r3, 8001e14 <HAL_I2C_Mem_Read+0x28>
 8001e0e:	f1ba 0f00 	cmp.w	sl, #0
 8001e12:	d106      	bne.n	8001e22 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e18:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001e1a:	2001      	movs	r0, #1
}
 8001e1c:	b003      	add	sp, #12
 8001e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001e22:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	f000 80b8 	beq.w	8001f9c <HAL_I2C_Mem_Read+0x1b0>
 8001e2c:	f04f 0b01 	mov.w	fp, #1
 8001e30:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001e34:	f7ff fc1a 	bl	800166c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e38:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8001e3a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e3c:	9000      	str	r0, [sp, #0]
 8001e3e:	465a      	mov	r2, fp
 8001e40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e44:	4620      	mov	r0, r4
 8001e46:	f7ff fe9b 	bl	8001b80 <I2C_WaitOnFlagUntilTimeout>
 8001e4a:	2800      	cmp	r0, #0
 8001e4c:	d1e5      	bne.n	8001e1a <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e4e:	2322      	movs	r3, #34	; 0x22
 8001e50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e54:	2340      	movs	r3, #64	; 0x40
 8001e56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001e5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001e5c:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001e5e:	4b50      	ldr	r3, [pc, #320]	; (8001fa0 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e60:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 8001e62:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	fa5f f289 	uxtb.w	r2, r9
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	4639      	mov	r1, r7
 8001e6e:	4620      	mov	r0, r4
    hi2c->XferCount = Size;
 8001e70:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001e74:	f7ff fdbc 	bl	80019f0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e78:	462a      	mov	r2, r5
 8001e7a:	4641      	mov	r1, r8
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	f7ff fe58 	bl	8001b32 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e82:	bb20      	cbnz	r0, 8001ece <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e84:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e88:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e8a:	d116      	bne.n	8001eba <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e8c:	b2f6      	uxtb	r6, r6
 8001e8e:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001e90:	2200      	movs	r2, #0
 8001e92:	9500      	str	r5, [sp, #0]
 8001e94:	4643      	mov	r3, r8
 8001e96:	2140      	movs	r1, #64	; 0x40
 8001e98:	4620      	mov	r0, r4
 8001e9a:	f7ff fe71 	bl	8001b80 <I2C_WaitOnFlagUntilTimeout>
 8001e9e:	b9b0      	cbnz	r0, 8001ece <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ea0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	2bff      	cmp	r3, #255	; 0xff
 8001ea6:	4b3f      	ldr	r3, [pc, #252]	; (8001fa4 <HAL_I2C_Mem_Read+0x1b8>)
 8001ea8:	d815      	bhi.n	8001ed6 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8001eaa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001eac:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001eae:	b292      	uxth	r2, r2
 8001eb0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001eb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	e012      	b.n	8001ee0 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001eba:	0a32      	lsrs	r2, r6, #8
 8001ebc:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ebe:	4641      	mov	r1, r8
 8001ec0:	462a      	mov	r2, r5
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	f7ff fe35 	bl	8001b32 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ec8:	b908      	cbnz	r0, 8001ece <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001eca:	6823      	ldr	r3, [r4, #0]
 8001ecc:	e7de      	b.n	8001e8c <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001ed4:	e7a1      	b.n	8001e1a <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ed6:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ed8:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001eda:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001edc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ee0:	4639      	mov	r1, r7
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	f7ff fd84 	bl	80019f0 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001ee8:	9500      	str	r5, [sp, #0]
 8001eea:	4643      	mov	r3, r8
 8001eec:	2200      	movs	r2, #0
 8001eee:	2104      	movs	r1, #4
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	f7ff fe45 	bl	8001b80 <I2C_WaitOnFlagUntilTimeout>
 8001ef6:	2800      	cmp	r0, #0
 8001ef8:	d18f      	bne.n	8001e1a <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001efa:	6823      	ldr	r3, [r4, #0]
 8001efc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001efe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f00:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001f02:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001f04:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001f06:	3301      	adds	r3, #1
 8001f08:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001f0a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001f14:	3a01      	subs	r2, #1
 8001f16:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f18:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001f1a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f1c:	b1b3      	cbz	r3, 8001f4c <HAL_I2C_Mem_Read+0x160>
 8001f1e:	b9aa      	cbnz	r2, 8001f4c <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f20:	9500      	str	r5, [sp, #0]
 8001f22:	4643      	mov	r3, r8
 8001f24:	2180      	movs	r1, #128	; 0x80
 8001f26:	4620      	mov	r0, r4
 8001f28:	f7ff fe2a 	bl	8001b80 <I2C_WaitOnFlagUntilTimeout>
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	f47f af74 	bne.w	8001e1a <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	2bff      	cmp	r3, #255	; 0xff
 8001f38:	d928      	bls.n	8001f8c <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f3a:	22ff      	movs	r2, #255	; 0xff
 8001f3c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001f3e:	9000      	str	r0, [sp, #0]
 8001f40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f44:	4639      	mov	r1, r7
 8001f46:	4620      	mov	r0, r4
 8001f48:	f7ff fd52 	bl	80019f0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8001f4c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1c9      	bne.n	8001ee8 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f54:	462a      	mov	r2, r5
 8001f56:	4641      	mov	r1, r8
 8001f58:	4620      	mov	r0, r4
 8001f5a:	f7ff fe3b 	bl	8001bd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f5e:	2800      	cmp	r0, #0
 8001f60:	f47f af5b 	bne.w	8001e1a <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f64:	6823      	ldr	r3, [r4, #0]
 8001f66:	2120      	movs	r1, #32
 8001f68:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001f70:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001f74:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001f78:	f022 0201 	bic.w	r2, r2, #1
 8001f7c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f7e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001f82:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f86:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001f8a:	e747      	b.n	8001e1c <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8001f8c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f8e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001f90:	b292      	uxth	r2, r2
 8001f92:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	e7d3      	b.n	8001f44 <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 8001f9c:	2002      	movs	r0, #2
 8001f9e:	e73d      	b.n	8001e1c <HAL_I2C_Mem_Read+0x30>
 8001fa0:	80002000 	.word	0x80002000
 8001fa4:	80002400 	.word	0x80002400

08001fa8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fa8:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001faa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001fae:	2b20      	cmp	r3, #32
 8001fb0:	b2dc      	uxtb	r4, r3
 8001fb2:	d11d      	bne.n	8001ff0 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fb4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d019      	beq.n	8001ff0 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fbc:	2324      	movs	r3, #36	; 0x24
 8001fbe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fc2:	6803      	ldr	r3, [r0, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	f022 0201 	bic.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	4311      	orrs	r1, r2
 8001fd8:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	f042 0201 	orr.w	r2, r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe2:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001fe4:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001fe8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001fec:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001fee:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8001ff0:	2002      	movs	r0, #2
 8001ff2:	e7fc      	b.n	8001fee <HAL_I2CEx_ConfigAnalogFilter+0x46>

08001ff4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ff4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001ffa:	2b20      	cmp	r3, #32
 8001ffc:	b2dc      	uxtb	r4, r3
 8001ffe:	d11c      	bne.n	800203a <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002000:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002004:	2b01      	cmp	r3, #1
 8002006:	d018      	beq.n	800203a <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002008:	2324      	movs	r3, #36	; 0x24
 800200a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800200e:	6803      	ldr	r3, [r0, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	f022 0201 	bic.w	r2, r2, #1
 8002016:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002018:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800201a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800201e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002022:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	f042 0201 	orr.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800202c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800202e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002032:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002036:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002038:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800203a:	2002      	movs	r0, #2
 800203c:	e7fc      	b.n	8002038 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

08002040 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002040:	4b02      	ldr	r3, [pc, #8]	; (800204c <HAL_PWREx_GetVoltageRange+0xc>)
 8002042:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002044:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40007000 	.word	0x40007000

08002050 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002050:	4a17      	ldr	r2, [pc, #92]	; (80020b0 <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002052:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002054:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002058:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800205c:	d11d      	bne.n	800209a <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800205e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002062:	d101      	bne.n	8002068 <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002064:	2000      	movs	r0, #0
 8002066:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002068:	6813      	ldr	r3, [r2, #0]
 800206a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800206e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002072:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002074:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2132      	movs	r1, #50	; 0x32
 800207a:	434b      	muls	r3, r1
 800207c:	490e      	ldr	r1, [pc, #56]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x68>)
 800207e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002082:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002084:	6951      	ldr	r1, [r2, #20]
 8002086:	0549      	lsls	r1, r1, #21
 8002088:	d500      	bpl.n	800208c <HAL_PWREx_ControlVoltageScaling+0x3c>
 800208a:	b923      	cbnz	r3, 8002096 <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800208c:	6953      	ldr	r3, [r2, #20]
 800208e:	055b      	lsls	r3, r3, #21
 8002090:	d5e8      	bpl.n	8002064 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 8002092:	2003      	movs	r0, #3
}
 8002094:	4770      	bx	lr
        wait_loop_index--;
 8002096:	3b01      	subs	r3, #1
 8002098:	e7f4      	b.n	8002084 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800209a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800209e:	bf1f      	itttt	ne
 80020a0:	6813      	ldrne	r3, [r2, #0]
 80020a2:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 80020a6:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 80020aa:	6013      	strne	r3, [r2, #0]
 80020ac:	e7da      	b.n	8002064 <HAL_PWREx_ControlVoltageScaling+0x14>
 80020ae:	bf00      	nop
 80020b0:	40007000 	.word	0x40007000
 80020b4:	20000010 	.word	0x20000010
 80020b8:	000f4240 	.word	0x000f4240

080020bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020be:	4d1e      	ldr	r5, [pc, #120]	; (8002138 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80020c0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80020c2:	00da      	lsls	r2, r3, #3
{
 80020c4:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020c6:	d518      	bpl.n	80020fa <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020c8:	f7ff ffba 	bl	8002040 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020cc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80020d0:	d123      	bne.n	800211a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020d2:	2c80      	cmp	r4, #128	; 0x80
 80020d4:	d929      	bls.n	800212a <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020d6:	2ca0      	cmp	r4, #160	; 0xa0
 80020d8:	bf8c      	ite	hi
 80020da:	2002      	movhi	r0, #2
 80020dc:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020de:	4a17      	ldr	r2, [pc, #92]	; (800213c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80020e0:	6813      	ldr	r3, [r2, #0]
 80020e2:	f023 0307 	bic.w	r3, r3, #7
 80020e6:	4303      	orrs	r3, r0
 80020e8:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020ea:	6813      	ldr	r3, [r2, #0]
 80020ec:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80020f0:	1a18      	subs	r0, r3, r0
 80020f2:	bf18      	it	ne
 80020f4:	2001      	movne	r0, #1
 80020f6:	b003      	add	sp, #12
 80020f8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80020fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002100:	65ab      	str	r3, [r5, #88]	; 0x58
 8002102:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800210c:	f7ff ff98 	bl	8002040 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002110:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002116:	65ab      	str	r3, [r5, #88]	; 0x58
 8002118:	e7d8      	b.n	80020cc <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800211a:	2c80      	cmp	r4, #128	; 0x80
 800211c:	d807      	bhi.n	800212e <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800211e:	d008      	beq.n	8002132 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8002120:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8002124:	4258      	negs	r0, r3
 8002126:	4158      	adcs	r0, r3
 8002128:	e7d9      	b.n	80020de <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800212a:	2000      	movs	r0, #0
 800212c:	e7d7      	b.n	80020de <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800212e:	2003      	movs	r0, #3
 8002130:	e7d5      	b.n	80020de <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002132:	2002      	movs	r0, #2
 8002134:	e7d3      	b.n	80020de <RCC_SetFlashLatencyFromMSIRange+0x22>
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000
 800213c:	40022000 	.word	0x40022000

08002140 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002140:	4b22      	ldr	r3, [pc, #136]	; (80021cc <HAL_RCC_GetSysClockFreq+0x8c>)
 8002142:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002144:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002146:	f012 020c 	ands.w	r2, r2, #12
 800214a:	d005      	beq.n	8002158 <HAL_RCC_GetSysClockFreq+0x18>
 800214c:	2a0c      	cmp	r2, #12
 800214e:	d115      	bne.n	800217c <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002150:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002154:	2901      	cmp	r1, #1
 8002156:	d118      	bne.n	800218a <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002158:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 800215a:	481d      	ldr	r0, [pc, #116]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800215c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800215e:	bf55      	itete	pl
 8002160:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002164:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002166:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800216a:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800216e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002172:	b34a      	cbz	r2, 80021c8 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002174:	2a0c      	cmp	r2, #12
 8002176:	d009      	beq.n	800218c <HAL_RCC_GetSysClockFreq+0x4c>
 8002178:	2000      	movs	r0, #0
  return sysclockfreq;
 800217a:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800217c:	2a04      	cmp	r2, #4
 800217e:	d022      	beq.n	80021c6 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002180:	2a08      	cmp	r2, #8
 8002182:	4814      	ldr	r0, [pc, #80]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002184:	bf18      	it	ne
 8002186:	2000      	movne	r0, #0
 8002188:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800218a:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8002192:	2a02      	cmp	r2, #2
 8002194:	d015      	beq.n	80021c2 <HAL_RCC_GetSysClockFreq+0x82>
 8002196:	490f      	ldr	r1, [pc, #60]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002198:	2a03      	cmp	r2, #3
 800219a:	bf08      	it	eq
 800219c:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800219e:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80021a6:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021a8:	68d8      	ldr	r0, [r3, #12]
 80021aa:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021ae:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021b2:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021b4:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021b6:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021b8:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 80021bc:	fbb2 f0f0 	udiv	r0, r2, r0
 80021c0:	4770      	bx	lr
      pllvco = HSI_VALUE;
 80021c2:	4805      	ldr	r0, [pc, #20]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80021c4:	e7eb      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 80021c6:	4804      	ldr	r0, [pc, #16]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x98>)
}
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000
 80021d0:	08009b20 	.word	0x08009b20
 80021d4:	007a1200 	.word	0x007a1200
 80021d8:	00f42400 	.word	0x00f42400

080021dc <HAL_RCC_OscConfig>:
{
 80021dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 80021e0:	4605      	mov	r5, r0
 80021e2:	b918      	cbnz	r0, 80021ec <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80021e4:	2001      	movs	r0, #1
}
 80021e6:	b003      	add	sp, #12
 80021e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ec:	4c92      	ldr	r4, [pc, #584]	; (8002438 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021ee:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021f0:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021f2:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021f4:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021f6:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021fa:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021fe:	d53d      	bpl.n	800227c <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002200:	b11e      	cbz	r6, 800220a <HAL_RCC_OscConfig+0x2e>
 8002202:	2e0c      	cmp	r6, #12
 8002204:	d166      	bne.n	80022d4 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002206:	2f01      	cmp	r7, #1
 8002208:	d164      	bne.n	80022d4 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800220a:	6823      	ldr	r3, [r4, #0]
 800220c:	0798      	lsls	r0, r3, #30
 800220e:	d502      	bpl.n	8002216 <HAL_RCC_OscConfig+0x3a>
 8002210:	69ab      	ldr	r3, [r5, #24]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0e6      	beq.n	80021e4 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002216:	6823      	ldr	r3, [r4, #0]
 8002218:	6a28      	ldr	r0, [r5, #32]
 800221a:	0719      	lsls	r1, r3, #28
 800221c:	bf56      	itet	pl
 800221e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8002222:	6823      	ldrmi	r3, [r4, #0]
 8002224:	091b      	lsrpl	r3, r3, #4
 8002226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800222a:	4298      	cmp	r0, r3
 800222c:	d93b      	bls.n	80022a6 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800222e:	f7ff ff45 	bl	80020bc <RCC_SetFlashLatencyFromMSIRange>
 8002232:	2800      	cmp	r0, #0
 8002234:	d1d6      	bne.n	80021e4 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002236:	6823      	ldr	r3, [r4, #0]
 8002238:	f043 0308 	orr.w	r3, r3, #8
 800223c:	6023      	str	r3, [r4, #0]
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	6a2a      	ldr	r2, [r5, #32]
 8002242:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002246:	4313      	orrs	r3, r2
 8002248:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800224a:	6863      	ldr	r3, [r4, #4]
 800224c:	69ea      	ldr	r2, [r5, #28]
 800224e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002252:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002256:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002258:	f7ff ff72 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 800225c:	68a3      	ldr	r3, [r4, #8]
 800225e:	4a77      	ldr	r2, [pc, #476]	; (800243c <HAL_RCC_OscConfig+0x260>)
 8002260:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002264:	5cd3      	ldrb	r3, [r2, r3]
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	40d8      	lsrs	r0, r3
 800226c:	4b74      	ldr	r3, [pc, #464]	; (8002440 <HAL_RCC_OscConfig+0x264>)
 800226e:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002270:	4b74      	ldr	r3, [pc, #464]	; (8002444 <HAL_RCC_OscConfig+0x268>)
 8002272:	6818      	ldr	r0, [r3, #0]
 8002274:	f7ff f9b2 	bl	80015dc <HAL_InitTick>
        if(status != HAL_OK)
 8002278:	2800      	cmp	r0, #0
 800227a:	d1b4      	bne.n	80021e6 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227c:	682b      	ldr	r3, [r5, #0]
 800227e:	07d8      	lsls	r0, r3, #31
 8002280:	d45f      	bmi.n	8002342 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002282:	682b      	ldr	r3, [r5, #0]
 8002284:	0799      	lsls	r1, r3, #30
 8002286:	f100 809e 	bmi.w	80023c6 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800228a:	682b      	ldr	r3, [r5, #0]
 800228c:	0718      	lsls	r0, r3, #28
 800228e:	f100 80db 	bmi.w	8002448 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002292:	682b      	ldr	r3, [r5, #0]
 8002294:	0759      	lsls	r1, r3, #29
 8002296:	f100 8101 	bmi.w	800249c <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800229a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800229c:	2b00      	cmp	r3, #0
 800229e:	f040 816a 	bne.w	8002576 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 80022a2:	2000      	movs	r0, #0
 80022a4:	e79f      	b.n	80021e6 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022a6:	6823      	ldr	r3, [r4, #0]
 80022a8:	f043 0308 	orr.w	r3, r3, #8
 80022ac:	6023      	str	r3, [r4, #0]
 80022ae:	6823      	ldr	r3, [r4, #0]
 80022b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022b4:	4303      	orrs	r3, r0
 80022b6:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022b8:	6863      	ldr	r3, [r4, #4]
 80022ba:	69ea      	ldr	r2, [r5, #28]
 80022bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80022c4:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022c6:	2e00      	cmp	r6, #0
 80022c8:	d1c6      	bne.n	8002258 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022ca:	f7ff fef7 	bl	80020bc <RCC_SetFlashLatencyFromMSIRange>
 80022ce:	2800      	cmp	r0, #0
 80022d0:	d0c2      	beq.n	8002258 <HAL_RCC_OscConfig+0x7c>
 80022d2:	e787      	b.n	80021e4 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022d4:	69ab      	ldr	r3, [r5, #24]
 80022d6:	b31b      	cbz	r3, 8002320 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80022e0:	f7ff f9c4 	bl	800166c <HAL_GetTick>
 80022e4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022e6:	6823      	ldr	r3, [r4, #0]
 80022e8:	079a      	lsls	r2, r3, #30
 80022ea:	d511      	bpl.n	8002310 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ec:	6823      	ldr	r3, [r4, #0]
 80022ee:	f043 0308 	orr.w	r3, r3, #8
 80022f2:	6023      	str	r3, [r4, #0]
 80022f4:	6823      	ldr	r3, [r4, #0]
 80022f6:	6a2a      	ldr	r2, [r5, #32]
 80022f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022fc:	4313      	orrs	r3, r2
 80022fe:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002300:	6863      	ldr	r3, [r4, #4]
 8002302:	69ea      	ldr	r2, [r5, #28]
 8002304:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002308:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800230c:	6063      	str	r3, [r4, #4]
 800230e:	e7b5      	b.n	800227c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002310:	f7ff f9ac 	bl	800166c <HAL_GetTick>
 8002314:	eba0 0008 	sub.w	r0, r0, r8
 8002318:	2802      	cmp	r0, #2
 800231a:	d9e4      	bls.n	80022e6 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 800231c:	2003      	movs	r0, #3
 800231e:	e762      	b.n	80021e6 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8002320:	6823      	ldr	r3, [r4, #0]
 8002322:	f023 0301 	bic.w	r3, r3, #1
 8002326:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002328:	f7ff f9a0 	bl	800166c <HAL_GetTick>
 800232c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800232e:	6823      	ldr	r3, [r4, #0]
 8002330:	079b      	lsls	r3, r3, #30
 8002332:	d5a3      	bpl.n	800227c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002334:	f7ff f99a 	bl	800166c <HAL_GetTick>
 8002338:	eba0 0008 	sub.w	r0, r0, r8
 800233c:	2802      	cmp	r0, #2
 800233e:	d9f6      	bls.n	800232e <HAL_RCC_OscConfig+0x152>
 8002340:	e7ec      	b.n	800231c <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002342:	2e08      	cmp	r6, #8
 8002344:	d003      	beq.n	800234e <HAL_RCC_OscConfig+0x172>
 8002346:	2e0c      	cmp	r6, #12
 8002348:	d108      	bne.n	800235c <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800234a:	2f03      	cmp	r7, #3
 800234c:	d106      	bne.n	800235c <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	039a      	lsls	r2, r3, #14
 8002352:	d596      	bpl.n	8002282 <HAL_RCC_OscConfig+0xa6>
 8002354:	686b      	ldr	r3, [r5, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d193      	bne.n	8002282 <HAL_RCC_OscConfig+0xa6>
 800235a:	e743      	b.n	80021e4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800235c:	686b      	ldr	r3, [r5, #4]
 800235e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002362:	d110      	bne.n	8002386 <HAL_RCC_OscConfig+0x1aa>
 8002364:	6823      	ldr	r3, [r4, #0]
 8002366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800236c:	f7ff f97e 	bl	800166c <HAL_GetTick>
 8002370:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002372:	6823      	ldr	r3, [r4, #0]
 8002374:	039b      	lsls	r3, r3, #14
 8002376:	d484      	bmi.n	8002282 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002378:	f7ff f978 	bl	800166c <HAL_GetTick>
 800237c:	eba0 0008 	sub.w	r0, r0, r8
 8002380:	2864      	cmp	r0, #100	; 0x64
 8002382:	d9f6      	bls.n	8002372 <HAL_RCC_OscConfig+0x196>
 8002384:	e7ca      	b.n	800231c <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002386:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800238a:	d104      	bne.n	8002396 <HAL_RCC_OscConfig+0x1ba>
 800238c:	6823      	ldr	r3, [r4, #0]
 800238e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002392:	6023      	str	r3, [r4, #0]
 8002394:	e7e6      	b.n	8002364 <HAL_RCC_OscConfig+0x188>
 8002396:	6822      	ldr	r2, [r4, #0]
 8002398:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800239c:	6022      	str	r2, [r4, #0]
 800239e:	6822      	ldr	r2, [r4, #0]
 80023a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023a4:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1e0      	bne.n	800236c <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 80023aa:	f7ff f95f 	bl	800166c <HAL_GetTick>
 80023ae:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023b0:	6823      	ldr	r3, [r4, #0]
 80023b2:	0398      	lsls	r0, r3, #14
 80023b4:	f57f af65 	bpl.w	8002282 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b8:	f7ff f958 	bl	800166c <HAL_GetTick>
 80023bc:	eba0 0008 	sub.w	r0, r0, r8
 80023c0:	2864      	cmp	r0, #100	; 0x64
 80023c2:	d9f5      	bls.n	80023b0 <HAL_RCC_OscConfig+0x1d4>
 80023c4:	e7aa      	b.n	800231c <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023c6:	2e04      	cmp	r6, #4
 80023c8:	d003      	beq.n	80023d2 <HAL_RCC_OscConfig+0x1f6>
 80023ca:	2e0c      	cmp	r6, #12
 80023cc:	d110      	bne.n	80023f0 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023ce:	2f02      	cmp	r7, #2
 80023d0:	d10e      	bne.n	80023f0 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023d2:	6823      	ldr	r3, [r4, #0]
 80023d4:	0559      	lsls	r1, r3, #21
 80023d6:	d503      	bpl.n	80023e0 <HAL_RCC_OscConfig+0x204>
 80023d8:	68eb      	ldr	r3, [r5, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f43f af02 	beq.w	80021e4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e0:	6863      	ldr	r3, [r4, #4]
 80023e2:	692a      	ldr	r2, [r5, #16]
 80023e4:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80023e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80023ec:	6063      	str	r3, [r4, #4]
 80023ee:	e74c      	b.n	800228a <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023f0:	68eb      	ldr	r3, [r5, #12]
 80023f2:	b17b      	cbz	r3, 8002414 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 80023f4:	6823      	ldr	r3, [r4, #0]
 80023f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80023fc:	f7ff f936 	bl	800166c <HAL_GetTick>
 8002400:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002402:	6823      	ldr	r3, [r4, #0]
 8002404:	055a      	lsls	r2, r3, #21
 8002406:	d4eb      	bmi.n	80023e0 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002408:	f7ff f930 	bl	800166c <HAL_GetTick>
 800240c:	1bc0      	subs	r0, r0, r7
 800240e:	2802      	cmp	r0, #2
 8002410:	d9f7      	bls.n	8002402 <HAL_RCC_OscConfig+0x226>
 8002412:	e783      	b.n	800231c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8002414:	6823      	ldr	r3, [r4, #0]
 8002416:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800241a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800241c:	f7ff f926 	bl	800166c <HAL_GetTick>
 8002420:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002422:	6823      	ldr	r3, [r4, #0]
 8002424:	055b      	lsls	r3, r3, #21
 8002426:	f57f af30 	bpl.w	800228a <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800242a:	f7ff f91f 	bl	800166c <HAL_GetTick>
 800242e:	1bc0      	subs	r0, r0, r7
 8002430:	2802      	cmp	r0, #2
 8002432:	d9f6      	bls.n	8002422 <HAL_RCC_OscConfig+0x246>
 8002434:	e772      	b.n	800231c <HAL_RCC_OscConfig+0x140>
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000
 800243c:	08009b05 	.word	0x08009b05
 8002440:	20000010 	.word	0x20000010
 8002444:	20000018 	.word	0x20000018
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002448:	696b      	ldr	r3, [r5, #20]
 800244a:	b19b      	cbz	r3, 8002474 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 800244c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002458:	f7ff f908 	bl	800166c <HAL_GetTick>
 800245c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800245e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002462:	079a      	lsls	r2, r3, #30
 8002464:	f53f af15 	bmi.w	8002292 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002468:	f7ff f900 	bl	800166c <HAL_GetTick>
 800246c:	1bc0      	subs	r0, r0, r7
 800246e:	2802      	cmp	r0, #2
 8002470:	d9f5      	bls.n	800245e <HAL_RCC_OscConfig+0x282>
 8002472:	e753      	b.n	800231c <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8002474:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002480:	f7ff f8f4 	bl	800166c <HAL_GetTick>
 8002484:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002486:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800248a:	079b      	lsls	r3, r3, #30
 800248c:	f57f af01 	bpl.w	8002292 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002490:	f7ff f8ec 	bl	800166c <HAL_GetTick>
 8002494:	1bc0      	subs	r0, r0, r7
 8002496:	2802      	cmp	r0, #2
 8002498:	d9f5      	bls.n	8002486 <HAL_RCC_OscConfig+0x2aa>
 800249a:	e73f      	b.n	800231c <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800249c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800249e:	00df      	lsls	r7, r3, #3
 80024a0:	d429      	bmi.n	80024f6 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80024a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a8:	65a3      	str	r3, [r4, #88]	; 0x58
 80024aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80024ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b0:	9301      	str	r3, [sp, #4]
 80024b2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80024b4:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024b8:	4f85      	ldr	r7, [pc, #532]	; (80026d0 <HAL_RCC_OscConfig+0x4f4>)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	05d8      	lsls	r0, r3, #23
 80024be:	d51d      	bpl.n	80024fc <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c0:	68ab      	ldr	r3, [r5, #8]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d12b      	bne.n	800251e <HAL_RCC_OscConfig+0x342>
 80024c6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80024d2:	f7ff f8cb 	bl	800166c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d6:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80024da:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024dc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80024e0:	079a      	lsls	r2, r3, #30
 80024e2:	d542      	bpl.n	800256a <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 80024e4:	f1b8 0f00 	cmp.w	r8, #0
 80024e8:	f43f aed7 	beq.w	800229a <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80024ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f2:	65a3      	str	r3, [r4, #88]	; 0x58
 80024f4:	e6d1      	b.n	800229a <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 80024f6:	f04f 0800 	mov.w	r8, #0
 80024fa:	e7dd      	b.n	80024b8 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002502:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002504:	f7ff f8b2 	bl	800166c <HAL_GetTick>
 8002508:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	05d9      	lsls	r1, r3, #23
 800250e:	d4d7      	bmi.n	80024c0 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002510:	f7ff f8ac 	bl	800166c <HAL_GetTick>
 8002514:	eba0 0009 	sub.w	r0, r0, r9
 8002518:	2802      	cmp	r0, #2
 800251a:	d9f6      	bls.n	800250a <HAL_RCC_OscConfig+0x32e>
 800251c:	e6fe      	b.n	800231c <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800251e:	2b05      	cmp	r3, #5
 8002520:	d106      	bne.n	8002530 <HAL_RCC_OscConfig+0x354>
 8002522:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002526:	f043 0304 	orr.w	r3, r3, #4
 800252a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800252e:	e7ca      	b.n	80024c6 <HAL_RCC_OscConfig+0x2ea>
 8002530:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002534:	f022 0201 	bic.w	r2, r2, #1
 8002538:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800253c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002540:	f022 0204 	bic.w	r2, r2, #4
 8002544:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1c2      	bne.n	80024d2 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 800254c:	f7ff f88e 	bl	800166c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002550:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002554:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002556:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800255a:	079b      	lsls	r3, r3, #30
 800255c:	d5c2      	bpl.n	80024e4 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255e:	f7ff f885 	bl	800166c <HAL_GetTick>
 8002562:	1bc0      	subs	r0, r0, r7
 8002564:	4548      	cmp	r0, r9
 8002566:	d9f6      	bls.n	8002556 <HAL_RCC_OscConfig+0x37a>
 8002568:	e6d8      	b.n	800231c <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256a:	f7ff f87f 	bl	800166c <HAL_GetTick>
 800256e:	1bc0      	subs	r0, r0, r7
 8002570:	4548      	cmp	r0, r9
 8002572:	d9b3      	bls.n	80024dc <HAL_RCC_OscConfig+0x300>
 8002574:	e6d2      	b.n	800231c <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002576:	2b02      	cmp	r3, #2
 8002578:	f040 808f 	bne.w	800269a <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 800257c:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800257e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002580:	f003 0103 	and.w	r1, r3, #3
 8002584:	4291      	cmp	r1, r2
 8002586:	d124      	bne.n	80025d2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002588:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800258a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800258e:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002590:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002594:	d11d      	bne.n	80025d2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002596:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8002598:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800259c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80025a0:	d117      	bne.n	80025d2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025a2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80025a4:	3a07      	subs	r2, #7
 80025a6:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 80025aa:	bf18      	it	ne
 80025ac:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ae:	4291      	cmp	r1, r2
 80025b0:	d10f      	bne.n	80025d2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025b2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80025b4:	0852      	lsrs	r2, r2, #1
 80025b6:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80025ba:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025bc:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80025c0:	d107      	bne.n	80025d2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025c2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80025c4:	0852      	lsrs	r2, r2, #1
 80025c6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80025ca:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025cc:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80025d0:	d04a      	beq.n	8002668 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025d2:	2e0c      	cmp	r6, #12
 80025d4:	f43f ae06 	beq.w	80021e4 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025d8:	6823      	ldr	r3, [r4, #0]
 80025da:	015f      	lsls	r7, r3, #5
 80025dc:	f53f ae02 	bmi.w	80021e4 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80025e0:	6823      	ldr	r3, [r4, #0]
 80025e2:	00de      	lsls	r6, r3, #3
 80025e4:	f53f adfe 	bmi.w	80021e4 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 80025e8:	6823      	ldr	r3, [r4, #0]
 80025ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ee:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 80025f0:	f7ff f83c 	bl	800166c <HAL_GetTick>
 80025f4:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f6:	6823      	ldr	r3, [r4, #0]
 80025f8:	0198      	lsls	r0, r3, #6
 80025fa:	d42f      	bmi.n	800265c <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025fc:	68e2      	ldr	r2, [r4, #12]
 80025fe:	4b35      	ldr	r3, [pc, #212]	; (80026d4 <HAL_RCC_OscConfig+0x4f8>)
 8002600:	4013      	ands	r3, r2
 8002602:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002604:	4313      	orrs	r3, r2
 8002606:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002608:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800260c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800260e:	3a01      	subs	r2, #1
 8002610:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002614:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002616:	0912      	lsrs	r2, r2, #4
 8002618:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800261c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800261e:	0852      	lsrs	r2, r2, #1
 8002620:	3a01      	subs	r2, #1
 8002622:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002626:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002628:	0852      	lsrs	r2, r2, #1
 800262a:	3a01      	subs	r2, #1
 800262c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002630:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8002632:	6823      	ldr	r3, [r4, #0]
 8002634:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002638:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800263a:	68e3      	ldr	r3, [r4, #12]
 800263c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002640:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8002642:	f7ff f813 	bl	800166c <HAL_GetTick>
 8002646:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002648:	6823      	ldr	r3, [r4, #0]
 800264a:	0199      	lsls	r1, r3, #6
 800264c:	f53f ae29 	bmi.w	80022a2 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002650:	f7ff f80c 	bl	800166c <HAL_GetTick>
 8002654:	1b40      	subs	r0, r0, r5
 8002656:	2802      	cmp	r0, #2
 8002658:	d9f6      	bls.n	8002648 <HAL_RCC_OscConfig+0x46c>
 800265a:	e65f      	b.n	800231c <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265c:	f7ff f806 	bl	800166c <HAL_GetTick>
 8002660:	1b80      	subs	r0, r0, r6
 8002662:	2802      	cmp	r0, #2
 8002664:	d9c7      	bls.n	80025f6 <HAL_RCC_OscConfig+0x41a>
 8002666:	e659      	b.n	800231c <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002668:	6823      	ldr	r3, [r4, #0]
 800266a:	019a      	lsls	r2, r3, #6
 800266c:	f53f ae19 	bmi.w	80022a2 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8002670:	6823      	ldr	r3, [r4, #0]
 8002672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002676:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002678:	68e3      	ldr	r3, [r4, #12]
 800267a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800267e:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8002680:	f7fe fff4 	bl	800166c <HAL_GetTick>
 8002684:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002686:	6823      	ldr	r3, [r4, #0]
 8002688:	019b      	lsls	r3, r3, #6
 800268a:	f53f ae0a 	bmi.w	80022a2 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268e:	f7fe ffed 	bl	800166c <HAL_GetTick>
 8002692:	1b40      	subs	r0, r0, r5
 8002694:	2802      	cmp	r0, #2
 8002696:	d9f6      	bls.n	8002686 <HAL_RCC_OscConfig+0x4aa>
 8002698:	e640      	b.n	800231c <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800269a:	2e0c      	cmp	r6, #12
 800269c:	f43f ada2 	beq.w	80021e4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80026a0:	6823      	ldr	r3, [r4, #0]
 80026a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026a6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80026a8:	f7fe ffe0 	bl	800166c <HAL_GetTick>
 80026ac:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 80026b4:	d105      	bne.n	80026c2 <HAL_RCC_OscConfig+0x4e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026b6:	68e1      	ldr	r1, [r4, #12]
 80026b8:	4a07      	ldr	r2, [pc, #28]	; (80026d8 <HAL_RCC_OscConfig+0x4fc>)
 80026ba:	400a      	ands	r2, r1
 80026bc:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 80026be:	4618      	mov	r0, r3
 80026c0:	e591      	b.n	80021e6 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c2:	f7fe ffd3 	bl	800166c <HAL_GetTick>
 80026c6:	1b40      	subs	r0, r0, r5
 80026c8:	2802      	cmp	r0, #2
 80026ca:	d9f0      	bls.n	80026ae <HAL_RCC_OscConfig+0x4d2>
 80026cc:	e626      	b.n	800231c <HAL_RCC_OscConfig+0x140>
 80026ce:	bf00      	nop
 80026d0:	40007000 	.word	0x40007000
 80026d4:	f99d808c 	.word	0xf99d808c
 80026d8:	feeefffc 	.word	0xfeeefffc

080026dc <HAL_RCC_ClockConfig>:
{
 80026dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026e0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80026e2:	4604      	mov	r4, r0
 80026e4:	b910      	cbnz	r0, 80026ec <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80026e6:	2001      	movs	r0, #1
}
 80026e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026ec:	4a4b      	ldr	r2, [pc, #300]	; (800281c <HAL_RCC_ClockConfig+0x140>)
 80026ee:	6813      	ldr	r3, [r2, #0]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	428b      	cmp	r3, r1
 80026f6:	d32c      	bcc.n	8002752 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f8:	6820      	ldr	r0, [r4, #0]
 80026fa:	0786      	lsls	r6, r0, #30
 80026fc:	d434      	bmi.n	8002768 <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026fe:	07c1      	lsls	r1, r0, #31
 8002700:	d43f      	bmi.n	8002782 <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002702:	6821      	ldr	r1, [r4, #0]
 8002704:	078a      	lsls	r2, r1, #30
 8002706:	d468      	bmi.n	80027da <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002708:	4a44      	ldr	r2, [pc, #272]	; (800281c <HAL_RCC_ClockConfig+0x140>)
 800270a:	6813      	ldr	r3, [r2, #0]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	42ab      	cmp	r3, r5
 8002712:	d86f      	bhi.n	80027f4 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002714:	f011 0f04 	tst.w	r1, #4
 8002718:	4d41      	ldr	r5, [pc, #260]	; (8002820 <HAL_RCC_ClockConfig+0x144>)
 800271a:	d177      	bne.n	800280c <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271c:	070b      	lsls	r3, r1, #28
 800271e:	d506      	bpl.n	800272e <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002720:	68ab      	ldr	r3, [r5, #8]
 8002722:	6922      	ldr	r2, [r4, #16]
 8002724:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002728:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800272c:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800272e:	f7ff fd07 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 8002732:	68ab      	ldr	r3, [r5, #8]
 8002734:	4a3b      	ldr	r2, [pc, #236]	; (8002824 <HAL_RCC_ClockConfig+0x148>)
 8002736:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800273a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800273e:	5cd3      	ldrb	r3, [r2, r3]
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	40d8      	lsrs	r0, r3
 8002746:	4b38      	ldr	r3, [pc, #224]	; (8002828 <HAL_RCC_ClockConfig+0x14c>)
 8002748:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800274a:	4b38      	ldr	r3, [pc, #224]	; (800282c <HAL_RCC_ClockConfig+0x150>)
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	f7fe bf45 	b.w	80015dc <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002752:	6813      	ldr	r3, [r2, #0]
 8002754:	f023 0307 	bic.w	r3, r3, #7
 8002758:	430b      	orrs	r3, r1
 800275a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800275c:	6813      	ldr	r3, [r2, #0]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	428b      	cmp	r3, r1
 8002764:	d1bf      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xa>
 8002766:	e7c7      	b.n	80026f8 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002768:	4a2d      	ldr	r2, [pc, #180]	; (8002820 <HAL_RCC_ClockConfig+0x144>)
 800276a:	68a6      	ldr	r6, [r4, #8]
 800276c:	6891      	ldr	r1, [r2, #8]
 800276e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 8002772:	428e      	cmp	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002774:	bf81      	itttt	hi
 8002776:	6893      	ldrhi	r3, [r2, #8]
 8002778:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 800277c:	4333      	orrhi	r3, r6
 800277e:	6093      	strhi	r3, [r2, #8]
 8002780:	e7bd      	b.n	80026fe <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002782:	6862      	ldr	r2, [r4, #4]
 8002784:	4e26      	ldr	r6, [pc, #152]	; (8002820 <HAL_RCC_ClockConfig+0x144>)
 8002786:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002788:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800278a:	d11a      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800278c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002790:	d0a9      	beq.n	80026e6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002792:	68b3      	ldr	r3, [r6, #8]
 8002794:	f023 0303 	bic.w	r3, r3, #3
 8002798:	4313      	orrs	r3, r2
 800279a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800279c:	f7fe ff66 	bl	800166c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80027a4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a6:	68b3      	ldr	r3, [r6, #8]
 80027a8:	6862      	ldr	r2, [r4, #4]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80027b2:	d0a6      	beq.n	8002702 <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b4:	f7fe ff5a 	bl	800166c <HAL_GetTick>
 80027b8:	1bc0      	subs	r0, r0, r7
 80027ba:	4540      	cmp	r0, r8
 80027bc:	d9f3      	bls.n	80027a6 <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 80027be:	2003      	movs	r0, #3
 80027c0:	e792      	b.n	80026e8 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c2:	2a02      	cmp	r2, #2
 80027c4:	d102      	bne.n	80027cc <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027c6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80027ca:	e7e1      	b.n	8002790 <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027cc:	b912      	cbnz	r2, 80027d4 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027ce:	f013 0f02 	tst.w	r3, #2
 80027d2:	e7dd      	b.n	8002790 <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027d4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80027d8:	e7da      	b.n	8002790 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027da:	4a11      	ldr	r2, [pc, #68]	; (8002820 <HAL_RCC_ClockConfig+0x144>)
 80027dc:	68a6      	ldr	r6, [r4, #8]
 80027de:	6890      	ldr	r0, [r2, #8]
 80027e0:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 80027e4:	4286      	cmp	r6, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e6:	bf3f      	itttt	cc
 80027e8:	6893      	ldrcc	r3, [r2, #8]
 80027ea:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 80027ee:	4333      	orrcc	r3, r6
 80027f0:	6093      	strcc	r3, [r2, #8]
 80027f2:	e789      	b.n	8002708 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f4:	6813      	ldr	r3, [r2, #0]
 80027f6:	f023 0307 	bic.w	r3, r3, #7
 80027fa:	432b      	orrs	r3, r5
 80027fc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	6813      	ldr	r3, [r2, #0]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	42ab      	cmp	r3, r5
 8002806:	f47f af6e 	bne.w	80026e6 <HAL_RCC_ClockConfig+0xa>
 800280a:	e783      	b.n	8002714 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800280c:	68ab      	ldr	r3, [r5, #8]
 800280e:	68e2      	ldr	r2, [r4, #12]
 8002810:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002814:	4313      	orrs	r3, r2
 8002816:	60ab      	str	r3, [r5, #8]
 8002818:	e780      	b.n	800271c <HAL_RCC_ClockConfig+0x40>
 800281a:	bf00      	nop
 800281c:	40022000 	.word	0x40022000
 8002820:	40021000 	.word	0x40021000
 8002824:	08009b05 	.word	0x08009b05
 8002828:	20000010 	.word	0x20000010
 800282c:	20000018 	.word	0x20000018

08002830 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002830:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002832:	4a06      	ldr	r2, [pc, #24]	; (800284c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800283a:	5cd3      	ldrb	r3, [r2, r3]
 800283c:	4a04      	ldr	r2, [pc, #16]	; (8002850 <HAL_RCC_GetPCLK1Freq+0x20>)
 800283e:	6810      	ldr	r0, [r2, #0]
 8002840:	f003 031f 	and.w	r3, r3, #31
}
 8002844:	40d8      	lsrs	r0, r3
 8002846:	4770      	bx	lr
 8002848:	40021000 	.word	0x40021000
 800284c:	08009b15 	.word	0x08009b15
 8002850:	20000010 	.word	0x20000010

08002854 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002856:	4a06      	ldr	r2, [pc, #24]	; (8002870 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800285e:	5cd3      	ldrb	r3, [r2, r3]
 8002860:	4a04      	ldr	r2, [pc, #16]	; (8002874 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002862:	6810      	ldr	r0, [r2, #0]
 8002864:	f003 031f 	and.w	r3, r3, #31
}
 8002868:	40d8      	lsrs	r0, r3
 800286a:	4770      	bx	lr
 800286c:	40021000 	.word	0x40021000
 8002870:	08009b15 	.word	0x08009b15
 8002874:	20000010 	.word	0x20000010

08002878 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800287a:	4c43      	ldr	r4, [pc, #268]	; (8002988 <RCCEx_PLLSAI1_Config+0x110>)
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800287c:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800287e:	68e2      	ldr	r2, [r4, #12]
{
 8002880:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002882:	0790      	lsls	r0, r2, #30
{
 8002884:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002886:	d029      	beq.n	80028dc <RCCEx_PLLSAI1_Config+0x64>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002888:	68e2      	ldr	r2, [r4, #12]
 800288a:	f002 0203 	and.w	r2, r2, #3
 800288e:	429a      	cmp	r2, r3
 8002890:	d178      	bne.n	8002984 <RCCEx_PLLSAI1_Config+0x10c>
       ||
 8002892:	2a00      	cmp	r2, #0
 8002894:	d076      	beq.n	8002984 <RCCEx_PLLSAI1_Config+0x10c>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002896:	68e3      	ldr	r3, [r4, #12]
       ||
 8002898:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800289a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800289e:	3301      	adds	r3, #1
       ||
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d16f      	bne.n	8002984 <RCCEx_PLLSAI1_Config+0x10c>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028a4:	6823      	ldr	r3, [r4, #0]
 80028a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028aa:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ac:	f7fe fede 	bl	800166c <HAL_GetTick>
 80028b0:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028b2:	6823      	ldr	r3, [r4, #0]
 80028b4:	011a      	lsls	r2, r3, #4
 80028b6:	d430      	bmi.n	800291a <RCCEx_PLLSAI1_Config+0xa2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028b8:	68ab      	ldr	r3, [r5, #8]
 80028ba:	021f      	lsls	r7, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 80028bc:	b3a6      	cbz	r6, 8002928 <RCCEx_PLLSAI1_Config+0xb0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028be:	2e01      	cmp	r6, #1
 80028c0:	d14d      	bne.n	800295e <RCCEx_PLLSAI1_Config+0xe6>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028c2:	692a      	ldr	r2, [r5, #16]
 80028c4:	6921      	ldr	r1, [r4, #16]
 80028c6:	0852      	lsrs	r2, r2, #1
 80028c8:	1e53      	subs	r3, r2, #1
 80028ca:	f421 02c0 	bic.w	r2, r1, #6291456	; 0x600000
 80028ce:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80028d2:	433a      	orrs	r2, r7
 80028d4:	ea42 5243 	orr.w	r2, r2, r3, lsl #21
 80028d8:	6122      	str	r2, [r4, #16]
 80028da:	e030      	b.n	800293e <RCCEx_PLLSAI1_Config+0xc6>
    switch(PllSai1->PLLSAI1Source)
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d011      	beq.n	8002904 <RCCEx_PLLSAI1_Config+0x8c>
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	d013      	beq.n	800290c <RCCEx_PLLSAI1_Config+0x94>
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d14d      	bne.n	8002984 <RCCEx_PLLSAI1_Config+0x10c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028e8:	6822      	ldr	r2, [r4, #0]
 80028ea:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028ee:	d049      	beq.n	8002984 <RCCEx_PLLSAI1_Config+0x10c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028f0:	68e0      	ldr	r0, [r4, #12]
 80028f2:	686a      	ldr	r2, [r5, #4]
 80028f4:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 80028f8:	3a01      	subs	r2, #1
 80028fa:	4318      	orrs	r0, r3
 80028fc:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002900:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 8002902:	e7cf      	b.n	80028a4 <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002904:	6822      	ldr	r2, [r4, #0]
 8002906:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800290a:	e7f0      	b.n	80028ee <RCCEx_PLLSAI1_Config+0x76>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800290c:	6822      	ldr	r2, [r4, #0]
 800290e:	0391      	lsls	r1, r2, #14
 8002910:	d4ee      	bmi.n	80028f0 <RCCEx_PLLSAI1_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002912:	6822      	ldr	r2, [r4, #0]
 8002914:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002918:	e7e9      	b.n	80028ee <RCCEx_PLLSAI1_Config+0x76>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800291a:	f7fe fea7 	bl	800166c <HAL_GetTick>
 800291e:	1bc0      	subs	r0, r0, r7
 8002920:	2802      	cmp	r0, #2
 8002922:	d9c6      	bls.n	80028b2 <RCCEx_PLLSAI1_Config+0x3a>
        status = HAL_TIMEOUT;
 8002924:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8002926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002928:	6921      	ldr	r1, [r4, #16]
 800292a:	68eb      	ldr	r3, [r5, #12]
 800292c:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8002930:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	4339      	orrs	r1, r7
 8002938:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 800293c:	6121      	str	r1, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800293e:	6823      	ldr	r3, [r4, #0]
 8002940:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002944:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8002946:	f7fe fe91 	bl	800166c <HAL_GetTick>
 800294a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800294c:	6823      	ldr	r3, [r4, #0]
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	d512      	bpl.n	8002978 <RCCEx_PLLSAI1_Config+0x100>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002952:	6923      	ldr	r3, [r4, #16]
 8002954:	69aa      	ldr	r2, [r5, #24]
 8002956:	4313      	orrs	r3, r2
 8002958:	6123      	str	r3, [r4, #16]
 800295a:	2000      	movs	r0, #0
  return status;
 800295c:	e7e3      	b.n	8002926 <RCCEx_PLLSAI1_Config+0xae>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800295e:	696b      	ldr	r3, [r5, #20]
 8002960:	6922      	ldr	r2, [r4, #16]
 8002962:	085b      	lsrs	r3, r3, #1
 8002964:	1e59      	subs	r1, r3, #1
 8002966:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 800296a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800296e:	433b      	orrs	r3, r7
 8002970:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002974:	6123      	str	r3, [r4, #16]
 8002976:	e7e2      	b.n	800293e <RCCEx_PLLSAI1_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002978:	f7fe fe78 	bl	800166c <HAL_GetTick>
 800297c:	1b80      	subs	r0, r0, r6
 800297e:	2802      	cmp	r0, #2
 8002980:	d9e4      	bls.n	800294c <RCCEx_PLLSAI1_Config+0xd4>
 8002982:	e7cf      	b.n	8002924 <RCCEx_PLLSAI1_Config+0xac>
      status = HAL_ERROR;
 8002984:	2001      	movs	r0, #1
 8002986:	e7ce      	b.n	8002926 <RCCEx_PLLSAI1_Config+0xae>
 8002988:	40021000 	.word	0x40021000

0800298c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800298c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800298e:	4c3c      	ldr	r4, [pc, #240]	; (8002a80 <RCCEx_PLLSAI2_Config+0xf4>)
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002990:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002992:	68e2      	ldr	r2, [r4, #12]
{
 8002994:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002996:	0790      	lsls	r0, r2, #30
{
 8002998:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800299a:	d027      	beq.n	80029ec <RCCEx_PLLSAI2_Config+0x60>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800299c:	68e2      	ldr	r2, [r4, #12]
 800299e:	f002 0203 	and.w	r2, r2, #3
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d169      	bne.n	8002a7a <RCCEx_PLLSAI2_Config+0xee>
       ||
 80029a6:	2a00      	cmp	r2, #0
 80029a8:	d067      	beq.n	8002a7a <RCCEx_PLLSAI2_Config+0xee>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029aa:	68e3      	ldr	r3, [r4, #12]
       ||
 80029ac:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029ae:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80029b2:	3301      	adds	r3, #1
       ||
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d160      	bne.n	8002a7a <RCCEx_PLLSAI2_Config+0xee>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80029b8:	6823      	ldr	r3, [r4, #0]
 80029ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029be:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029c0:	f7fe fe54 	bl	800166c <HAL_GetTick>
 80029c4:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	009a      	lsls	r2, r3, #2
 80029ca:	d42e      	bmi.n	8002a2a <RCCEx_PLLSAI2_Config+0x9e>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029cc:	68ab      	ldr	r3, [r5, #8]
 80029ce:	0218      	lsls	r0, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 80029d0:	b396      	cbz	r6, 8002a38 <RCCEx_PLLSAI2_Config+0xac>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029d2:	6963      	ldr	r3, [r4, #20]
 80029d4:	6929      	ldr	r1, [r5, #16]
 80029d6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029da:	0849      	lsrs	r1, r1, #1
 80029dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029e0:	3901      	subs	r1, #1
 80029e2:	4303      	orrs	r3, r0
 80029e4:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80029e8:	6163      	str	r3, [r4, #20]
 80029ea:	e030      	b.n	8002a4e <RCCEx_PLLSAI2_Config+0xc2>
    switch(PllSai2->PLLSAI2Source)
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d011      	beq.n	8002a14 <RCCEx_PLLSAI2_Config+0x88>
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d013      	beq.n	8002a1c <RCCEx_PLLSAI2_Config+0x90>
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d140      	bne.n	8002a7a <RCCEx_PLLSAI2_Config+0xee>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029f8:	6822      	ldr	r2, [r4, #0]
 80029fa:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029fe:	d03c      	beq.n	8002a7a <RCCEx_PLLSAI2_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a00:	68e0      	ldr	r0, [r4, #12]
 8002a02:	686a      	ldr	r2, [r5, #4]
 8002a04:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 8002a08:	3a01      	subs	r2, #1
 8002a0a:	4318      	orrs	r0, r3
 8002a0c:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002a10:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 8002a12:	e7d1      	b.n	80029b8 <RCCEx_PLLSAI2_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a14:	6822      	ldr	r2, [r4, #0]
 8002a16:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002a1a:	e7f0      	b.n	80029fe <RCCEx_PLLSAI2_Config+0x72>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a1c:	6822      	ldr	r2, [r4, #0]
 8002a1e:	0391      	lsls	r1, r2, #14
 8002a20:	d4ee      	bmi.n	8002a00 <RCCEx_PLLSAI2_Config+0x74>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a22:	6822      	ldr	r2, [r4, #0]
 8002a24:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002a28:	e7e9      	b.n	80029fe <RCCEx_PLLSAI2_Config+0x72>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a2a:	f7fe fe1f 	bl	800166c <HAL_GetTick>
 8002a2e:	1bc0      	subs	r0, r0, r7
 8002a30:	2802      	cmp	r0, #2
 8002a32:	d9c8      	bls.n	80029c6 <RCCEx_PLLSAI2_Config+0x3a>
        status = HAL_TIMEOUT;
 8002a34:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8002a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a38:	6962      	ldr	r2, [r4, #20]
 8002a3a:	68eb      	ldr	r3, [r5, #12]
 8002a3c:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8002a40:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	4302      	orrs	r2, r0
 8002a48:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8002a4c:	6162      	str	r2, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a54:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8002a56:	f7fe fe09 	bl	800166c <HAL_GetTick>
 8002a5a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a5c:	6823      	ldr	r3, [r4, #0]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	d505      	bpl.n	8002a6e <RCCEx_PLLSAI2_Config+0xe2>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a62:	6963      	ldr	r3, [r4, #20]
 8002a64:	696a      	ldr	r2, [r5, #20]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	6163      	str	r3, [r4, #20]
 8002a6a:	2000      	movs	r0, #0
  return status;
 8002a6c:	e7e3      	b.n	8002a36 <RCCEx_PLLSAI2_Config+0xaa>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a6e:	f7fe fdfd 	bl	800166c <HAL_GetTick>
 8002a72:	1b80      	subs	r0, r0, r6
 8002a74:	2802      	cmp	r0, #2
 8002a76:	d9f1      	bls.n	8002a5c <RCCEx_PLLSAI2_Config+0xd0>
 8002a78:	e7dc      	b.n	8002a34 <RCCEx_PLLSAI2_Config+0xa8>
      status = HAL_ERROR;
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	e7db      	b.n	8002a36 <RCCEx_PLLSAI2_Config+0xaa>
 8002a7e:	bf00      	nop
 8002a80:	40021000 	.word	0x40021000

08002a84 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002a84:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a88:	6806      	ldr	r6, [r0, #0]
 8002a8a:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8002a8e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a90:	d009      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002a92:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8002a94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002a98:	d022      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002a9a:	d813      	bhi.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002a9c:	b331      	cbz	r1, 8002aec <HAL_RCCEx_PeriphCLKConfig+0x68>
 8002a9e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002aa2:	d02a      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002aa4:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002aa6:	6823      	ldr	r3, [r4, #0]
 8002aa8:	04d8      	lsls	r0, r3, #19
 8002aaa:	d509      	bpl.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002aac:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002aae:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8002ab2:	d02c      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8002ab4:	d826      	bhi.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8002ab6:	b381      	cbz	r1, 8002b1a <HAL_RCCEx_PeriphCLKConfig+0x96>
 8002ab8:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002abc:	d070      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002abe:	2601      	movs	r6, #1
 8002ac0:	4635      	mov	r5, r6
 8002ac2:	e039      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002ac4:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002ac8:	d1ec      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002aca:	4a3b      	ldr	r2, [pc, #236]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002acc:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002ace:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002ad2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002ad6:	430b      	orrs	r3, r1
 8002ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002adc:	2600      	movs	r6, #0
 8002ade:	e7e2      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ae0:	4a35      	ldr	r2, [pc, #212]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ae2:	68d3      	ldr	r3, [r2, #12]
 8002ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae8:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 8002aea:	e7ee      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002aec:	3004      	adds	r0, #4
 8002aee:	f7ff fec3 	bl	8002878 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002af2:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002af4:	2800      	cmp	r0, #0
 8002af6:	d1d6      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8002af8:	e7e7      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002afa:	2100      	movs	r1, #0
 8002afc:	3020      	adds	r0, #32
 8002afe:	f7ff ff45 	bl	800298c <RCCEx_PLLSAI2_Config>
 8002b02:	e7f6      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002b04:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002b08:	d1d9      	bne.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8002b0a:	4635      	mov	r5, r6
 8002b0c:	e009      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b0e:	4a2a      	ldr	r2, [pc, #168]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b10:	68d3      	ldr	r3, [r2, #12]
 8002b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b16:	60d3      	str	r3, [r2, #12]
      break;
 8002b18:	e7f7      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b1a:	1d20      	adds	r0, r4, #4
 8002b1c:	f7ff feac 	bl	8002878 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b20:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002b22:	2d00      	cmp	r5, #0
 8002b24:	d142      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x128>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b26:	4a24      	ldr	r2, [pc, #144]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b28:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002b2a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002b2e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002b32:	430b      	orrs	r3, r1
 8002b34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b38:	6823      	ldr	r3, [r4, #0]
 8002b3a:	0399      	lsls	r1, r3, #14
 8002b3c:	f140 815e 	bpl.w	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x378>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b40:	4f1d      	ldr	r7, [pc, #116]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b44:	00da      	lsls	r2, r3, #3
 8002b46:	d433      	bmi.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b56:	9301      	str	r3, [sp, #4]
 8002b58:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002b5a:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b5e:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8002bbc <HAL_RCCEx_PeriphCLKConfig+0x138>
 8002b62:	f8d9 3000 	ldr.w	r3, [r9]
 8002b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6a:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8002b6e:	f7fe fd7d 	bl	800166c <HAL_GetTick>
 8002b72:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b74:	f8d9 3000 	ldr.w	r3, [r9]
 8002b78:	05db      	lsls	r3, r3, #23
 8002b7a:	d521      	bpl.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    if(ret == HAL_OK)
 8002b7c:	bb3d      	cbnz	r5, 8002bce <HAL_RCCEx_PeriphCLKConfig+0x14a>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b82:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002b86:	f040 810f 	bne.w	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x324>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b8e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b9c:	4635      	mov	r5, r6
 8002b9e:	e016      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x14a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	f104 0020 	add.w	r0, r4, #32
 8002ba6:	f7ff fef1 	bl	800298c <RCCEx_PLLSAI2_Config>
 8002baa:	e7b9      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002bac:	462e      	mov	r6, r5
 8002bae:	e7c3      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 8002bb0:	f04f 0800 	mov.w	r8, #0
 8002bb4:	e7d3      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002bb6:	bf00      	nop
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc0:	f7fe fd54 	bl	800166c <HAL_GetTick>
 8002bc4:	eba0 000a 	sub.w	r0, r0, sl
 8002bc8:	2802      	cmp	r0, #2
 8002bca:	d9d3      	bls.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 8002bcc:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002bce:	f1b8 0f00 	cmp.w	r8, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x158>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bda:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bdc:	6823      	ldr	r3, [r4, #0]
 8002bde:	07da      	lsls	r2, r3, #31
 8002be0:	d508      	bpl.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x170>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002be2:	499d      	ldr	r1, [pc, #628]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002be4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002be6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002bea:	f022 0203 	bic.w	r2, r2, #3
 8002bee:	4302      	orrs	r2, r0
 8002bf0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bf4:	079f      	lsls	r7, r3, #30
 8002bf6:	d508      	bpl.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x186>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bf8:	4997      	ldr	r1, [pc, #604]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002bfa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002bfc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c00:	f022 020c 	bic.w	r2, r2, #12
 8002c04:	4302      	orrs	r2, r0
 8002c06:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c0a:	075e      	lsls	r6, r3, #29
 8002c0c:	d508      	bpl.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c0e:	4992      	ldr	r1, [pc, #584]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002c10:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002c12:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c16:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002c1a:	4302      	orrs	r2, r0
 8002c1c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c20:	0718      	lsls	r0, r3, #28
 8002c22:	d508      	bpl.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c24:	498c      	ldr	r1, [pc, #560]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002c26:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002c28:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c2c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002c30:	4302      	orrs	r2, r0
 8002c32:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c36:	06d9      	lsls	r1, r3, #27
 8002c38:	d508      	bpl.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c3a:	4987      	ldr	r1, [pc, #540]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002c3c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002c3e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c42:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c46:	4302      	orrs	r2, r0
 8002c48:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c4c:	069a      	lsls	r2, r3, #26
 8002c4e:	d508      	bpl.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c50:	4981      	ldr	r1, [pc, #516]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002c52:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002c54:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c58:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002c5c:	4302      	orrs	r2, r0
 8002c5e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c62:	059f      	lsls	r7, r3, #22
 8002c64:	d508      	bpl.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c66:	497c      	ldr	r1, [pc, #496]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002c68:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002c6a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c6e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002c72:	4302      	orrs	r2, r0
 8002c74:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c78:	055e      	lsls	r6, r3, #21
 8002c7a:	d508      	bpl.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c7c:	4976      	ldr	r1, [pc, #472]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002c7e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002c80:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c84:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002c88:	4302      	orrs	r2, r0
 8002c8a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c8e:	0658      	lsls	r0, r3, #25
 8002c90:	d508      	bpl.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c92:	4971      	ldr	r1, [pc, #452]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002c94:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002c96:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c9a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002c9e:	4302      	orrs	r2, r0
 8002ca0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ca4:	0619      	lsls	r1, r3, #24
 8002ca6:	d508      	bpl.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ca8:	496b      	ldr	r1, [pc, #428]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002caa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002cac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002cb0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002cb4:	4302      	orrs	r2, r0
 8002cb6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cba:	05da      	lsls	r2, r3, #23
 8002cbc:	d508      	bpl.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cbe:	4966      	ldr	r1, [pc, #408]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cc2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002cc6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002cca:	4302      	orrs	r2, r0
 8002ccc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cd0:	049b      	lsls	r3, r3, #18
 8002cd2:	d510      	bpl.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x272>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cd4:	4a60      	ldr	r2, [pc, #384]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002cd6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002cd8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002cdc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002ce0:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ce2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ce6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cea:	f040 8089 	bne.w	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cee:	68d3      	ldr	r3, [r2, #12]
 8002cf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cf4:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002cf6:	6823      	ldr	r3, [r4, #0]
 8002cf8:	031f      	lsls	r7, r3, #12
 8002cfa:	d510      	bpl.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x29a>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cfc:	4a56      	ldr	r2, [pc, #344]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002cfe:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002d00:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002d04:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002d08:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d0a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d0e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d12:	f040 8081 	bne.w	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x394>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d16:	68d3      	ldr	r3, [r2, #12]
 8002d18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d1c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d1e:	6823      	ldr	r3, [r4, #0]
 8002d20:	035e      	lsls	r6, r3, #13
 8002d22:	d50f      	bpl.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d24:	4a4c      	ldr	r2, [pc, #304]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002d26:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002d28:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002d2c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002d30:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d32:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d36:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d3a:	d179      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d3c:	68d3      	ldr	r3, [r2, #12]
 8002d3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d42:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d44:	6823      	ldr	r3, [r4, #0]
 8002d46:	0458      	lsls	r0, r3, #17
 8002d48:	d512      	bpl.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d4a:	4943      	ldr	r1, [pc, #268]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002d4c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002d4e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002d52:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002d56:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d58:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d60:	d171      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d62:	2102      	movs	r1, #2
 8002d64:	1d20      	adds	r0, r4, #4
 8002d66:	f7ff fd87 	bl	8002878 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002d6a:	2800      	cmp	r0, #0
 8002d6c:	bf18      	it	ne
 8002d6e:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d70:	6822      	ldr	r2, [r4, #0]
 8002d72:	0411      	lsls	r1, r2, #16
 8002d74:	d508      	bpl.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x304>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d76:	4938      	ldr	r1, [pc, #224]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002d78:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002d7a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002d7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d82:	4303      	orrs	r3, r0
 8002d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d88:	03d3      	lsls	r3, r2, #15
 8002d8a:	d509      	bpl.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d8c:	4a32      	ldr	r2, [pc, #200]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002d8e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002d92:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002d96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d9a:	430b      	orrs	r3, r1
 8002d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002da0:	4628      	mov	r0, r5
 8002da2:	b002      	add	sp, #8
 8002da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002da8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002dac:	4293      	cmp	r3, r2
 8002dae:	f43f aeec 	beq.w	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x106>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002db2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002db6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dc6:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002dce:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002dd4:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002dd8:	f57f aed7 	bpl.w	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 8002ddc:	f7fe fc46 	bl	800166c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002de0:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002de4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002de6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002dea:	0799      	lsls	r1, r3, #30
 8002dec:	f53f aecd 	bmi.w	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x106>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df0:	f7fe fc3c 	bl	800166c <HAL_GetTick>
 8002df4:	1b40      	subs	r0, r0, r5
 8002df6:	4548      	cmp	r0, r9
 8002df8:	d9f5      	bls.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002dfa:	e6e7      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002dfc:	4635      	mov	r5, r6
 8002dfe:	e6ed      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x158>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e00:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002e04:	f47f af77 	bne.w	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x272>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e08:	2101      	movs	r1, #1
 8002e0a:	1d20      	adds	r0, r4, #4
 8002e0c:	f7ff fd34 	bl	8002878 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002e10:	2800      	cmp	r0, #0
 8002e12:	bf18      	it	ne
 8002e14:	4605      	movne	r5, r0
 8002e16:	e76e      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x272>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e18:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002e1c:	f47f af7f 	bne.w	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x29a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e20:	2101      	movs	r1, #1
 8002e22:	1d20      	adds	r0, r4, #4
 8002e24:	f7ff fd28 	bl	8002878 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002e28:	2800      	cmp	r0, #0
 8002e2a:	bf18      	it	ne
 8002e2c:	4605      	movne	r5, r0
 8002e2e:	e776      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x29a>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e30:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002e34:	d186      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e36:	2101      	movs	r1, #1
 8002e38:	1d20      	adds	r0, r4, #4
 8002e3a:	f7ff fd1d 	bl	8002878 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002e3e:	2800      	cmp	r0, #0
 8002e40:	bf18      	it	ne
 8002e42:	4605      	movne	r5, r0
 8002e44:	e77e      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e46:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002e4a:	d191      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e4c:	2102      	movs	r1, #2
 8002e4e:	f104 0020 	add.w	r0, r4, #32
 8002e52:	f7ff fd9b 	bl	800298c <RCCEx_PLLSAI2_Config>
 8002e56:	e788      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8002e58:	40021000 	.word	0x40021000

08002e5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e5c:	b570      	push	{r4, r5, r6, lr}
 8002e5e:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e60:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e62:	6921      	ldr	r1, [r4, #16]
 8002e64:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e66:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e68:	69c0      	ldr	r0, [r0, #28]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	6961      	ldr	r1, [r4, #20]
 8002e6e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e70:	498f      	ldr	r1, [pc, #572]	; (80030b0 <UART_SetConfig+0x254>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e72:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e74:	4029      	ands	r1, r5
 8002e76:	430a      	orrs	r2, r1
 8002e78:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	68e1      	ldr	r1, [r4, #12]
 8002e7e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002e82:	430a      	orrs	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e86:	4a8b      	ldr	r2, [pc, #556]	; (80030b4 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e88:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e8a:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e8c:	bf1c      	itt	ne
 8002e8e:	6a22      	ldrne	r2, [r4, #32]
 8002e90:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e9c:	4a86      	ldr	r2, [pc, #536]	; (80030b8 <UART_SetConfig+0x25c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d117      	bne.n	8002ed2 <UART_SetConfig+0x76>
 8002ea2:	4b86      	ldr	r3, [pc, #536]	; (80030bc <UART_SetConfig+0x260>)
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	f200 80cf 	bhi.w	8003052 <UART_SetConfig+0x1f6>
 8002eb4:	4a82      	ldr	r2, [pc, #520]	; (80030c0 <UART_SetConfig+0x264>)
 8002eb6:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eb8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002ebc:	f040 8099 	bne.w	8002ff2 <UART_SetConfig+0x196>
  {
    switch (clocksource)
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d822      	bhi.n	8002f0a <UART_SetConfig+0xae>
 8002ec4:	e8df f003 	tbb	[pc, r3]
 8002ec8:	2193c8d9 	.word	0x2193c8d9
 8002ecc:	212121ce 	.word	0x212121ce
 8002ed0:	dd          	.byte	0xdd
 8002ed1:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ed2:	4a7c      	ldr	r2, [pc, #496]	; (80030c4 <UART_SetConfig+0x268>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d106      	bne.n	8002ee6 <UART_SetConfig+0x8a>
 8002ed8:	4b78      	ldr	r3, [pc, #480]	; (80030bc <UART_SetConfig+0x260>)
 8002eda:	4a7b      	ldr	r2, [pc, #492]	; (80030c8 <UART_SetConfig+0x26c>)
 8002edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee0:	f003 030c 	and.w	r3, r3, #12
 8002ee4:	e7e7      	b.n	8002eb6 <UART_SetConfig+0x5a>
 8002ee6:	4a79      	ldr	r2, [pc, #484]	; (80030cc <UART_SetConfig+0x270>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d119      	bne.n	8002f20 <UART_SetConfig+0xc4>
 8002eec:	4b73      	ldr	r3, [pc, #460]	; (80030bc <UART_SetConfig+0x260>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ef6:	2b20      	cmp	r3, #32
 8002ef8:	f000 80b7 	beq.w	800306a <UART_SetConfig+0x20e>
 8002efc:	d807      	bhi.n	8002f0e <UART_SetConfig+0xb2>
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 80b8 	beq.w	8003074 <UART_SetConfig+0x218>
 8002f04:	2b10      	cmp	r3, #16
 8002f06:	f000 80aa 	beq.w	800305e <UART_SetConfig+0x202>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f0a:	2001      	movs	r0, #1
 8002f0c:	e04e      	b.n	8002fac <UART_SetConfig+0x150>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f0e:	2b30      	cmp	r3, #48	; 0x30
 8002f10:	d1fb      	bne.n	8002f0a <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f12:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002f16:	f000 80b4 	beq.w	8003082 <UART_SetConfig+0x226>
 8002f1a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002f1e:	e083      	b.n	8003028 <UART_SetConfig+0x1cc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f20:	4a6b      	ldr	r2, [pc, #428]	; (80030d0 <UART_SetConfig+0x274>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d10f      	bne.n	8002f46 <UART_SetConfig+0xea>
 8002f26:	4b65      	ldr	r3, [pc, #404]	; (80030bc <UART_SetConfig+0x260>)
 8002f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f30:	2b80      	cmp	r3, #128	; 0x80
 8002f32:	f000 809a 	beq.w	800306a <UART_SetConfig+0x20e>
 8002f36:	d804      	bhi.n	8002f42 <UART_SetConfig+0xe6>
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 809b 	beq.w	8003074 <UART_SetConfig+0x218>
 8002f3e:	2b40      	cmp	r3, #64	; 0x40
 8002f40:	e7e1      	b.n	8002f06 <UART_SetConfig+0xaa>
 8002f42:	2bc0      	cmp	r3, #192	; 0xc0
 8002f44:	e7e4      	b.n	8002f10 <UART_SetConfig+0xb4>
 8002f46:	4a63      	ldr	r2, [pc, #396]	; (80030d4 <UART_SetConfig+0x278>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d112      	bne.n	8002f72 <UART_SetConfig+0x116>
 8002f4c:	4b5b      	ldr	r3, [pc, #364]	; (80030bc <UART_SetConfig+0x260>)
 8002f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f5a:	f000 8086 	beq.w	800306a <UART_SetConfig+0x20e>
 8002f5e:	d805      	bhi.n	8002f6c <UART_SetConfig+0x110>
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 8087 	beq.w	8003074 <UART_SetConfig+0x218>
 8002f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f6a:	e7cc      	b.n	8002f06 <UART_SetConfig+0xaa>
 8002f6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f70:	e7ce      	b.n	8002f10 <UART_SetConfig+0xb4>
 8002f72:	4a50      	ldr	r2, [pc, #320]	; (80030b4 <UART_SetConfig+0x258>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d1c8      	bne.n	8002f0a <UART_SetConfig+0xae>
 8002f78:	4b50      	ldr	r3, [pc, #320]	; (80030bc <UART_SetConfig+0x260>)
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f86:	d015      	beq.n	8002fb4 <UART_SetConfig+0x158>
 8002f88:	d806      	bhi.n	8002f98 <UART_SetConfig+0x13c>
 8002f8a:	b15b      	cbz	r3, 8002fa4 <UART_SetConfig+0x148>
 8002f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f90:	d1bb      	bne.n	8002f0a <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 8002f92:	f7ff f8d5 	bl	8002140 <HAL_RCC_GetSysClockFreq>
        break;
 8002f96:	e007      	b.n	8002fa8 <UART_SetConfig+0x14c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f9c:	d1b5      	bne.n	8002f0a <UART_SetConfig+0xae>
        pclk = (uint32_t) LSE_VALUE;
 8002f9e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002fa2:	e008      	b.n	8002fb6 <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fa4:	f7ff fc44 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002fa8:	b928      	cbnz	r0, 8002fb6 <UART_SetConfig+0x15a>
 8002faa:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fac:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8002fae:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 8002fb2:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 8002fb4:	4848      	ldr	r0, [pc, #288]	; (80030d8 <UART_SetConfig+0x27c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002fb6:	6862      	ldr	r2, [r4, #4]
 8002fb8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002fbc:	4283      	cmp	r3, r0
 8002fbe:	d8a4      	bhi.n	8002f0a <UART_SetConfig+0xae>
 8002fc0:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002fc4:	d8a1      	bhi.n	8002f0a <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002fc6:	0851      	lsrs	r1, r2, #1
 8002fc8:	2500      	movs	r5, #0
 8002fca:	468c      	mov	ip, r1
 8002fcc:	f44f 7680 	mov.w	r6, #256	; 0x100
 8002fd0:	4629      	mov	r1, r5
 8002fd2:	fbe0 c106 	umlal	ip, r1, r0, r6
 8002fd6:	462b      	mov	r3, r5
 8002fd8:	4660      	mov	r0, ip
 8002fda:	f7fd fe35 	bl	8000c48 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002fde:	4b3f      	ldr	r3, [pc, #252]	; (80030dc <UART_SetConfig+0x280>)
 8002fe0:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d890      	bhi.n	8002f0a <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 8002fe8:	6823      	ldr	r3, [r4, #0]
 8002fea:	60d8      	str	r0, [r3, #12]
 8002fec:	e7dd      	b.n	8002faa <UART_SetConfig+0x14e>
        pclk = (uint32_t) HSI_VALUE;
 8002fee:	483a      	ldr	r0, [pc, #232]	; (80030d8 <UART_SetConfig+0x27c>)
 8002ff0:	e047      	b.n	8003082 <UART_SetConfig+0x226>
    switch (clocksource)
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d889      	bhi.n	8002f0a <UART_SetConfig+0xae>
 8002ff6:	a201      	add	r2, pc, #4	; (adr r2, 8002ffc <UART_SetConfig+0x1a0>)
 8002ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffc:	08003021 	.word	0x08003021
 8003000:	08003047 	.word	0x08003047
 8003004:	08003071 	.word	0x08003071
 8003008:	08002f0b 	.word	0x08002f0b
 800300c:	0800304d 	.word	0x0800304d
 8003010:	08002f0b 	.word	0x08002f0b
 8003014:	08002f0b 	.word	0x08002f0b
 8003018:	08002f0b 	.word	0x08002f0b
 800301c:	08002f1b 	.word	0x08002f1b
        pclk = HAL_RCC_GetPCLK1Freq();
 8003020:	f7ff fc06 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003024:	2800      	cmp	r0, #0
 8003026:	d0c0      	beq.n	8002faa <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003028:	6862      	ldr	r2, [r4, #4]
 800302a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800302e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003032:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003036:	f1a3 0110 	sub.w	r1, r3, #16
 800303a:	4291      	cmp	r1, r2
 800303c:	f63f af65 	bhi.w	8002f0a <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003040:	6822      	ldr	r2, [r4, #0]
 8003042:	60d3      	str	r3, [r2, #12]
 8003044:	e7b1      	b.n	8002faa <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003046:	f7ff fc05 	bl	8002854 <HAL_RCC_GetPCLK2Freq>
        break;
 800304a:	e7eb      	b.n	8003024 <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 800304c:	f7ff f878 	bl	8002140 <HAL_RCC_GetSysClockFreq>
        break;
 8003050:	e7e8      	b.n	8003024 <UART_SetConfig+0x1c8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003052:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003056:	d1f6      	bne.n	8003046 <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003058:	f7ff fbfc 	bl	8002854 <HAL_RCC_GetPCLK2Freq>
        break;
 800305c:	e00f      	b.n	800307e <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800305e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003062:	d1f3      	bne.n	800304c <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetSysClockFreq();
 8003064:	f7ff f86c 	bl	8002140 <HAL_RCC_GetSysClockFreq>
        break;
 8003068:	e009      	b.n	800307e <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800306a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800306e:	d0be      	beq.n	8002fee <UART_SetConfig+0x192>
        pclk = (uint32_t) HSI_VALUE;
 8003070:	4819      	ldr	r0, [pc, #100]	; (80030d8 <UART_SetConfig+0x27c>)
 8003072:	e7d9      	b.n	8003028 <UART_SetConfig+0x1cc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003074:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003078:	d1d2      	bne.n	8003020 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK1Freq();
 800307a:	f7ff fbd9 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800307e:	2800      	cmp	r0, #0
 8003080:	d093      	beq.n	8002faa <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003082:	6862      	ldr	r2, [r4, #4]
 8003084:	0853      	lsrs	r3, r2, #1
 8003086:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800308a:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800308e:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003092:	f1a0 0210 	sub.w	r2, r0, #16
 8003096:	429a      	cmp	r2, r3
 8003098:	f63f af37 	bhi.w	8002f0a <UART_SetConfig+0xae>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800309c:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 80030a0:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030a2:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030a4:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 80030a8:	4318      	orrs	r0, r3
 80030aa:	60d0      	str	r0, [r2, #12]
 80030ac:	e77d      	b.n	8002faa <UART_SetConfig+0x14e>
 80030ae:	bf00      	nop
 80030b0:	efff69f3 	.word	0xefff69f3
 80030b4:	40008000 	.word	0x40008000
 80030b8:	40013800 	.word	0x40013800
 80030bc:	40021000 	.word	0x40021000
 80030c0:	08009b50 	.word	0x08009b50
 80030c4:	40004400 	.word	0x40004400
 80030c8:	08009b53 	.word	0x08009b53
 80030cc:	40004800 	.word	0x40004800
 80030d0:	40004c00 	.word	0x40004c00
 80030d4:	40005000 	.word	0x40005000
 80030d8:	00f42400 	.word	0x00f42400
 80030dc:	000ffcff 	.word	0x000ffcff

080030e0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80030e2:	07da      	lsls	r2, r3, #31
{
 80030e4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030e6:	d506      	bpl.n	80030f6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030e8:	6801      	ldr	r1, [r0, #0]
 80030ea:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80030ec:	684a      	ldr	r2, [r1, #4]
 80030ee:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80030f2:	4322      	orrs	r2, r4
 80030f4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030f6:	079c      	lsls	r4, r3, #30
 80030f8:	d506      	bpl.n	8003108 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030fa:	6801      	ldr	r1, [r0, #0]
 80030fc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80030fe:	684a      	ldr	r2, [r1, #4]
 8003100:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003104:	4322      	orrs	r2, r4
 8003106:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003108:	0759      	lsls	r1, r3, #29
 800310a:	d506      	bpl.n	800311a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800310c:	6801      	ldr	r1, [r0, #0]
 800310e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003110:	684a      	ldr	r2, [r1, #4]
 8003112:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003116:	4322      	orrs	r2, r4
 8003118:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800311a:	071a      	lsls	r2, r3, #28
 800311c:	d506      	bpl.n	800312c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800311e:	6801      	ldr	r1, [r0, #0]
 8003120:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003122:	684a      	ldr	r2, [r1, #4]
 8003124:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003128:	4322      	orrs	r2, r4
 800312a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800312c:	06dc      	lsls	r4, r3, #27
 800312e:	d506      	bpl.n	800313e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003130:	6801      	ldr	r1, [r0, #0]
 8003132:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003134:	688a      	ldr	r2, [r1, #8]
 8003136:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800313a:	4322      	orrs	r2, r4
 800313c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800313e:	0699      	lsls	r1, r3, #26
 8003140:	d506      	bpl.n	8003150 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003142:	6801      	ldr	r1, [r0, #0]
 8003144:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003146:	688a      	ldr	r2, [r1, #8]
 8003148:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800314c:	4322      	orrs	r2, r4
 800314e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003150:	065a      	lsls	r2, r3, #25
 8003152:	d50f      	bpl.n	8003174 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003154:	6801      	ldr	r1, [r0, #0]
 8003156:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003158:	684a      	ldr	r2, [r1, #4]
 800315a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800315e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003160:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003164:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003166:	d105      	bne.n	8003174 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003168:	684a      	ldr	r2, [r1, #4]
 800316a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800316c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003170:	4322      	orrs	r2, r4
 8003172:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003174:	061b      	lsls	r3, r3, #24
 8003176:	d506      	bpl.n	8003186 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003178:	6802      	ldr	r2, [r0, #0]
 800317a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800317c:	6853      	ldr	r3, [r2, #4]
 800317e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003182:	430b      	orrs	r3, r1
 8003184:	6053      	str	r3, [r2, #4]
  }
}
 8003186:	bd10      	pop	{r4, pc}

08003188 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800318c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003190:	4604      	mov	r4, r0
 8003192:	460e      	mov	r6, r1
 8003194:	4615      	mov	r5, r2
 8003196:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003198:	6822      	ldr	r2, [r4, #0]
 800319a:	69d3      	ldr	r3, [r2, #28]
 800319c:	ea36 0303 	bics.w	r3, r6, r3
 80031a0:	bf0c      	ite	eq
 80031a2:	2301      	moveq	r3, #1
 80031a4:	2300      	movne	r3, #0
 80031a6:	42ab      	cmp	r3, r5
 80031a8:	d001      	beq.n	80031ae <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80031aa:	2000      	movs	r0, #0
 80031ac:	e025      	b.n	80031fa <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 80031ae:	f1b8 3fff 	cmp.w	r8, #4294967295
 80031b2:	d0f2      	beq.n	800319a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b4:	f7fe fa5a 	bl	800166c <HAL_GetTick>
 80031b8:	1bc0      	subs	r0, r0, r7
 80031ba:	4540      	cmp	r0, r8
 80031bc:	6820      	ldr	r0, [r4, #0]
 80031be:	d802      	bhi.n	80031c6 <UART_WaitOnFlagUntilTimeout+0x3e>
 80031c0:	f1b8 0f00 	cmp.w	r8, #0
 80031c4:	d11b      	bne.n	80031fe <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c6:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ce:	e840 3200 	strex	r2, r3, [r0]
 80031d2:	2a00      	cmp	r2, #0
 80031d4:	d1f7      	bne.n	80031c6 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d6:	f100 0308 	add.w	r3, r0, #8
 80031da:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031de:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e2:	f100 0108 	add.w	r1, r0, #8
 80031e6:	e841 3200 	strex	r2, r3, [r1]
 80031ea:	2a00      	cmp	r2, #0
 80031ec:	d1f3      	bne.n	80031d6 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 80031ee:	2320      	movs	r3, #32
 80031f0:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80031f2:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80031f4:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 80031f8:	2003      	movs	r0, #3
}
 80031fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031fe:	6803      	ldr	r3, [r0, #0]
 8003200:	075a      	lsls	r2, r3, #29
 8003202:	d5c9      	bpl.n	8003198 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003204:	69c3      	ldr	r3, [r0, #28]
 8003206:	051b      	lsls	r3, r3, #20
 8003208:	d5c6      	bpl.n	8003198 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800320a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800320e:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003210:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003214:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003218:	e840 3200 	strex	r2, r3, [r0]
 800321c:	2a00      	cmp	r2, #0
 800321e:	d1f7      	bne.n	8003210 <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003220:	f100 0308 	add.w	r3, r0, #8
 8003224:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003228:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322c:	f100 0108 	add.w	r1, r0, #8
 8003230:	e841 3200 	strex	r2, r3, [r1]
 8003234:	2a00      	cmp	r2, #0
 8003236:	d1f3      	bne.n	8003220 <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 8003238:	2320      	movs	r3, #32
 800323a:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800323c:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800323e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8003242:	e7d7      	b.n	80031f4 <UART_WaitOnFlagUntilTimeout+0x6c>

08003244 <HAL_UART_Transmit>:
{
 8003244:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003248:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800324a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800324c:	2b20      	cmp	r3, #32
{
 800324e:	4604      	mov	r4, r0
 8003250:	460e      	mov	r6, r1
 8003252:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003254:	d14e      	bne.n	80032f4 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 8003256:	2900      	cmp	r1, #0
 8003258:	d04a      	beq.n	80032f0 <HAL_UART_Transmit+0xac>
 800325a:	2a00      	cmp	r2, #0
 800325c:	d048      	beq.n	80032f0 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 800325e:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8003262:	2b01      	cmp	r3, #1
 8003264:	d046      	beq.n	80032f4 <HAL_UART_Transmit+0xb0>
 8003266:	2301      	movs	r3, #1
 8003268:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800326c:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800326e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003270:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003274:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8003276:	f7fe f9f9 	bl	800166c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800327a:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 800327c:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003280:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003284:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 8003286:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800328a:	d103      	bne.n	8003294 <HAL_UART_Transmit+0x50>
 800328c:	6922      	ldr	r2, [r4, #16]
 800328e:	b90a      	cbnz	r2, 8003294 <HAL_UART_Transmit+0x50>
 8003290:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003292:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8003294:	2200      	movs	r2, #0
 8003296:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 800329a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800329e:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80032a2:	b292      	uxth	r2, r2
 80032a4:	b93a      	cbnz	r2, 80032b6 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032a6:	2140      	movs	r1, #64	; 0x40
 80032a8:	4620      	mov	r0, r4
 80032aa:	f7ff ff6d 	bl	8003188 <UART_WaitOnFlagUntilTimeout>
 80032ae:	b950      	cbnz	r0, 80032c6 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80032b0:	2320      	movs	r3, #32
 80032b2:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80032b4:	e008      	b.n	80032c8 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032b6:	2200      	movs	r2, #0
 80032b8:	2180      	movs	r1, #128	; 0x80
 80032ba:	4620      	mov	r0, r4
 80032bc:	9303      	str	r3, [sp, #12]
 80032be:	f7ff ff63 	bl	8003188 <UART_WaitOnFlagUntilTimeout>
 80032c2:	9b03      	ldr	r3, [sp, #12]
 80032c4:	b118      	cbz	r0, 80032ce <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 80032c6:	2003      	movs	r0, #3
}
 80032c8:	b004      	add	sp, #16
 80032ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032ce:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 80032d0:	b95e      	cbnz	r6, 80032ea <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032d2:	f835 2b02 	ldrh.w	r2, [r5], #2
 80032d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032da:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 80032dc:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80032e0:	3a01      	subs	r2, #1
 80032e2:	b292      	uxth	r2, r2
 80032e4:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80032e8:	e7d7      	b.n	800329a <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ea:	f816 2b01 	ldrb.w	r2, [r6], #1
 80032ee:	e7f4      	b.n	80032da <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 80032f0:	2001      	movs	r0, #1
 80032f2:	e7e9      	b.n	80032c8 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 80032f4:	2002      	movs	r0, #2
 80032f6:	e7e7      	b.n	80032c8 <HAL_UART_Transmit+0x84>

080032f8 <UART_CheckIdleState>:
{
 80032f8:	b530      	push	{r4, r5, lr}
 80032fa:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032fc:	2500      	movs	r5, #0
{
 80032fe:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003300:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8003304:	f7fe f9b2 	bl	800166c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003308:	6822      	ldr	r2, [r4, #0]
 800330a:	6812      	ldr	r2, [r2, #0]
 800330c:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800330e:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003310:	d415      	bmi.n	800333e <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003312:	6822      	ldr	r2, [r4, #0]
 8003314:	6812      	ldr	r2, [r2, #0]
 8003316:	0752      	lsls	r2, r2, #29
 8003318:	d509      	bpl.n	800332e <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800331a:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800331e:	9200      	str	r2, [sp, #0]
 8003320:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003324:	2200      	movs	r2, #0
 8003326:	4620      	mov	r0, r4
 8003328:	f7ff ff2e 	bl	8003188 <UART_WaitOnFlagUntilTimeout>
 800332c:	b9a0      	cbnz	r0, 8003358 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 800332e:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003330:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003332:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8003334:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003338:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800333a:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 800333c:	e00d      	b.n	800335a <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800333e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003342:	9200      	str	r2, [sp, #0]
 8003344:	9003      	str	r0, [sp, #12]
 8003346:	462a      	mov	r2, r5
 8003348:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800334c:	4620      	mov	r0, r4
 800334e:	f7ff ff1b 	bl	8003188 <UART_WaitOnFlagUntilTimeout>
 8003352:	9b03      	ldr	r3, [sp, #12]
 8003354:	2800      	cmp	r0, #0
 8003356:	d0dc      	beq.n	8003312 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003358:	2003      	movs	r0, #3
}
 800335a:	b005      	add	sp, #20
 800335c:	bd30      	pop	{r4, r5, pc}

0800335e <HAL_UART_Init>:
{
 800335e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003360:	4604      	mov	r4, r0
 8003362:	b340      	cbz	r0, 80033b6 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003364:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8003366:	b91b      	cbnz	r3, 8003370 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8003368:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 800336c:	f7fe f896 	bl	800149c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003370:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003372:	2324      	movs	r3, #36	; 0x24
 8003374:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8003376:	6813      	ldr	r3, [r2, #0]
 8003378:	f023 0301 	bic.w	r3, r3, #1
 800337c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800337e:	4620      	mov	r0, r4
 8003380:	f7ff fd6c 	bl	8002e5c <UART_SetConfig>
 8003384:	2801      	cmp	r0, #1
 8003386:	d016      	beq.n	80033b6 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003388:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800338a:	b113      	cbz	r3, 8003392 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800338c:	4620      	mov	r0, r4
 800338e:	f7ff fea7 	bl	80030e0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003392:	6823      	ldr	r3, [r4, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800339a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033a2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80033aa:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80033ac:	601a      	str	r2, [r3, #0]
}
 80033ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80033b2:	f7ff bfa1 	b.w	80032f8 <UART_CheckIdleState>
}
 80033b6:	2001      	movs	r0, #1
 80033b8:	bd10      	pop	{r4, pc}
	...

080033bc <_write>:
#if defined(__GNUC__) && !defined(__ARMCC_VERSION)

int _write(int fd, const void *buff, int count);

int _write(int fd, const void *buff, int count)
{
 80033bc:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status;

  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 80033be:	1e14      	subs	r4, r2, #0
 80033c0:	da0a      	bge.n	80033d8 <_write+0x1c>
 80033c2:	3801      	subs	r0, #1
 80033c4:	2801      	cmp	r0, #1
 80033c6:	d907      	bls.n	80033d8 <_write+0x1c>
    errno = EBADF;
 80033c8:	f003 fbca 	bl	8006b60 <__errno>
 80033cc:	2309      	movs	r3, #9
 80033ce:	6003      	str	r3, [r0, #0]
    return -1;
 80033d0:	f04f 34ff 	mov.w	r4, #4294967295
        HAL_MAX_DELAY);
  else
    status = HAL_OK;

  return (status == HAL_OK ? count : 0);
}
 80033d4:	4620      	mov	r0, r4
 80033d6:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <_write+0x38>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f9      	beq.n	80033d4 <_write+0x18>
    status = HAL_UART_Transmit(&UartHandle, (uint8_t *)buff, count,
 80033e0:	b2a2      	uxth	r2, r4
 80033e2:	4805      	ldr	r0, [pc, #20]	; (80033f8 <_write+0x3c>)
 80033e4:	f04f 33ff 	mov.w	r3, #4294967295
 80033e8:	f7ff ff2c 	bl	8003244 <HAL_UART_Transmit>
  return (status == HAL_OK ? count : 0);
 80033ec:	2800      	cmp	r0, #0
 80033ee:	bf18      	it	ne
 80033f0:	2400      	movne	r4, #0
 80033f2:	e7ef      	b.n	80033d4 <_write+0x18>
 80033f4:	2000001c 	.word	0x2000001c
 80033f8:	200011e4 	.word	0x200011e4

080033fc <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 80033fc:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 80033fe:	4d11      	ldr	r5, [pc, #68]	; (8003444 <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 8003400:	3003      	adds	r0, #3
  io_malloc.cfg |= 1 << 1;
 8003402:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8003404:	f020 0403 	bic.w	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8003408:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 800340c:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 8003410:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8003412:	f003 fd8b 	bl	8006f2c <malloc>

  /* remember size */
  if (ptr) {
 8003416:	b1a0      	cbz	r0, 8003442 <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8003418:	1903      	adds	r3, r0, r4
 800341a:	4a0b      	ldr	r2, [pc, #44]	; (8003448 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 800341c:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 800341e:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 8003420:	682b      	ldr	r3, [r5, #0]
 8003422:	07db      	lsls	r3, r3, #31
 8003424:	d50c      	bpl.n	8003440 <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 8003426:	68eb      	ldr	r3, [r5, #12]
 8003428:	3301      	adds	r3, #1
 800342a:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 800342c:	686b      	ldr	r3, [r5, #4]
 800342e:	4423      	add	r3, r4
 8003430:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 8003432:	69ab      	ldr	r3, [r5, #24]
 8003434:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 8003436:	696b      	ldr	r3, [r5, #20]
    io_malloc.used += bytes;
 8003438:	61ac      	str	r4, [r5, #24]
    if (io_malloc.used > io_malloc.max) {
 800343a:	429c      	cmp	r4, r3
      io_malloc.max = io_malloc.used;
 800343c:	bf88      	it	hi
 800343e:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 8003440:	3004      	adds	r0, #4
}
 8003442:	bd38      	pop	{r3, r4, r5, pc}
 8003444:	2000127c 	.word	0x2000127c
 8003448:	efdcba98 	.word	0xefdcba98

0800344c <MX_X_CUBE_AI_Init>:

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
    MX_UARTx_Init();
 800344c:	f7fd bf98 	b.w	8001380 <MX_USART2_UART_Init>

08003450 <ai_network_get_error>:
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8003450:	f000 ba24 	b.w	800389c <ai_platform_network_get_error>

08003454 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8003454:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8003456:	2305      	movs	r3, #5
 8003458:	2200      	movs	r2, #0
 800345a:	e9cd 3200 	strd	r3, r2, [sp]
 800345e:	4a03      	ldr	r2, [pc, #12]	; (800346c <ai_network_create+0x18>)
 8003460:	2301      	movs	r3, #1
 8003462:	f000 fc89 	bl	8003d78 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8003466:	b003      	add	sp, #12
 8003468:	f85d fb04 	ldr.w	pc, [sp], #4
 800346c:	200006a8 	.word	0x200006a8

08003470 <ai_network_inputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8003470:	b910      	cbnz	r0, 8003478 <ai_network_inputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8003472:	4802      	ldr	r0, [pc, #8]	; (800347c <ai_network_inputs_get+0xc>)
 8003474:	4b02      	ldr	r3, [pc, #8]	; (8003480 <ai_network_inputs_get+0x10>)
 8003476:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8003478:	f000 ba90 	b.w	800399c <ai_platform_inputs_get>
 800347c:	200006a8 	.word	0x200006a8
 8003480:	a1c00100 	.word	0xa1c00100

08003484 <ai_network_outputs_get>:
}

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8003484:	b910      	cbnz	r0, 800348c <ai_network_outputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8003486:	4802      	ldr	r0, [pc, #8]	; (8003490 <ai_network_outputs_get+0xc>)
 8003488:	4b02      	ldr	r3, [pc, #8]	; (8003494 <ai_network_outputs_get+0x10>)
 800348a:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800348c:	f000 bb7a 	b.w	8003b84 <ai_platform_outputs_get>
 8003490:	200006a8 	.word	0x200006a8
 8003494:	a1c00100 	.word	0xa1c00100

08003498 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8003498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800349a:	4607      	mov	r7, r0
 800349c:	460e      	mov	r6, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800349e:	f000 fd4b 	bl	8003f38 <ai_platform_network_init>
  if (!net_ctx) return false;
 80034a2:	4604      	mov	r4, r0
 80034a4:	2800      	cmp	r0, #0
 80034a6:	d064      	beq.n	8003572 <ai_network_init+0xda>
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 80034a8:	2300      	movs	r3, #0
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 80034aa:	4632      	mov	r2, r6
 80034ac:	2101      	movs	r1, #1
 80034ae:	a801      	add	r0, sp, #4
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 80034b0:	9301      	str	r3, [sp, #4]
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 80034b2:	f000 f935 	bl	8003720 <ai_platform_get_weights_map>
 80034b6:	4605      	mov	r5, r0
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d05c      	beq.n	8003576 <ai_network_init+0xde>
    conv2d_2_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80034bc:	4a34      	ldr	r2, [pc, #208]	; (8003590 <ai_network_init+0xf8>)
 80034be:	6813      	ldr	r3, [r2, #0]
 80034c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034c4:	6013      	str	r3, [r2, #0]
    conv2d_2_conv2d_weights_array.data = AI_PTR(weights_map[0] + 0);
 80034c6:	9b01      	ldr	r3, [sp, #4]
    conv2d_2_conv2d_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 80034c8:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_2_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80034cc:	4a31      	ldr	r2, [pc, #196]	; (8003594 <ai_network_init+0xfc>)
 80034ce:	6811      	ldr	r1, [r2, #0]
 80034d0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80034d4:	6011      	str	r1, [r2, #0]
    conv2d_2_conv2d_bias_array.data = AI_PTR(weights_map[0] + 1536);
 80034d6:	f503 61c0 	add.w	r1, r3, #1536	; 0x600
    conv2d_2_conv2d_bias_array.data_start = AI_PTR(weights_map[0] + 1536);
 80034da:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_4_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80034de:	4a2e      	ldr	r2, [pc, #184]	; (8003598 <ai_network_init+0x100>)
 80034e0:	6811      	ldr	r1, [r2, #0]
 80034e2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80034e6:	6011      	str	r1, [r2, #0]
    dense_4_dense_weights_array.data = AI_PTR(weights_map[0] + 1632);
 80034e8:	f503 61cc 	add.w	r1, r3, #1632	; 0x660
    dense_4_dense_weights_array.data_start = AI_PTR(weights_map[0] + 1632);
 80034ec:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_4_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80034f0:	4a2a      	ldr	r2, [pc, #168]	; (800359c <ai_network_init+0x104>)
 80034f2:	6811      	ldr	r1, [r2, #0]
 80034f4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80034f8:	6011      	str	r1, [r2, #0]
    dense_4_dense_bias_array.data = AI_PTR(weights_map[0] + 12000);
 80034fa:	f503 513b 	add.w	r1, r3, #11968	; 0x2ec0
 80034fe:	3120      	adds	r1, #32
    dense_4_dense_bias_array.data_start = AI_PTR(weights_map[0] + 12000);
 8003500:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_5_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8003504:	4a26      	ldr	r2, [pc, #152]	; (80035a0 <ai_network_init+0x108>)
 8003506:	6811      	ldr	r1, [r2, #0]
 8003508:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800350c:	6011      	str	r1, [r2, #0]
    dense_5_dense_weights_array.data = AI_PTR(weights_map[0] + 12048);
 800350e:	f503 513c 	add.w	r1, r3, #12032	; 0x2f00
 8003512:	3110      	adds	r1, #16
    dense_5_dense_weights_array.data_start = AI_PTR(weights_map[0] + 12048);
 8003514:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_5_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003518:	4a22      	ldr	r2, [pc, #136]	; (80035a4 <ai_network_init+0x10c>)
    dense_5_dense_bias_array.data = AI_PTR(weights_map[0] + 12240);
 800351a:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
    dense_5_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800351e:	6811      	ldr	r1, [r2, #0]
    dense_5_dense_bias_array.data = AI_PTR(weights_map[0] + 12240);
 8003520:	3310      	adds	r3, #16
    dense_5_dense_bias_array.data_start = AI_PTR(weights_map[0] + 12240);
 8003522:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_5_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003526:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800352a:	6011      	str	r1, [r2, #0]
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 800352c:	2300      	movs	r3, #0
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 800352e:	4632      	mov	r2, r6
 8003530:	2101      	movs	r1, #1
 8003532:	a801      	add	r0, sp, #4
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8003534:	9301      	str	r3, [sp, #4]
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8003536:	f000 f943 	bl	80037c0 <ai_platform_get_activations_map>
 800353a:	4606      	mov	r6, r0
 800353c:	b308      	cbz	r0, 8003582 <ai_network_init+0xea>
    conv2d_2_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 800353e:	9b01      	ldr	r3, [sp, #4]
 8003540:	4a19      	ldr	r2, [pc, #100]	; (80035a8 <ai_network_init+0x110>)
    conv2d_2_conv2d_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 8003542:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_2_conv2d_output_array.data = AI_PTR(activations_map[0] + 864);
 8003546:	4a19      	ldr	r2, [pc, #100]	; (80035ac <ai_network_init+0x114>)
 8003548:	f503 7158 	add.w	r1, r3, #864	; 0x360
    conv2d_2_conv2d_output_array.data_start = AI_PTR(activations_map[0] + 864);
 800354c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_4_dense_output_array.data = AI_PTR(activations_map[0] + 0);
 8003550:	4a17      	ldr	r2, [pc, #92]	; (80035b0 <ai_network_init+0x118>)
    dense_4_dense_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8003552:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_4_output_array.data = AI_PTR(activations_map[0] + 48);
 8003556:	4a17      	ldr	r2, [pc, #92]	; (80035b4 <ai_network_init+0x11c>)
 8003558:	f103 0130 	add.w	r1, r3, #48	; 0x30
    dense_4_output_array.data_start = AI_PTR(activations_map[0] + 48);
 800355c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_5_dense_output_array.data = AI_PTR(activations_map[0] + 0);
 8003560:	4a15      	ldr	r2, [pc, #84]	; (80035b8 <ai_network_init+0x120>)
    dense_5_dense_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8003562:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8003566:	4638      	mov	r0, r7
 8003568:	f000 fdf2 	bl	8004150 <ai_platform_network_post_init>
 800356c:	4030      	ands	r0, r6
 800356e:	4028      	ands	r0, r5
 8003570:	b2c0      	uxtb	r0, r0

  return ok;
}
 8003572:	b003      	add	sp, #12
 8003574:	bdf0      	pop	{r4, r5, r6, r7, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8003576:	2212      	movs	r2, #18
 8003578:	2130      	movs	r1, #48	; 0x30
 800357a:	4620      	mov	r0, r4
 800357c:	f000 fa08 	bl	8003990 <ai_platform_network_set_error>
  return false;
 8003580:	e7d4      	b.n	800352c <ai_network_init+0x94>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8003582:	2213      	movs	r2, #19
 8003584:	2130      	movs	r1, #48	; 0x30
 8003586:	4620      	mov	r0, r4
 8003588:	f000 fa02 	bl	8003990 <ai_platform_network_set_error>
  return false;
 800358c:	e7eb      	b.n	8003566 <ai_network_init+0xce>
 800358e:	bf00      	nop
 8003590:	200004c0 	.word	0x200004c0
 8003594:	200003c4 	.word	0x200003c4
 8003598:	20000560 	.word	0x20000560
 800359c:	200004ec 	.word	0x200004ec
 80035a0:	2000064c 	.word	0x2000064c
 80035a4:	200005d8 	.word	0x200005d8
 80035a8:	20000494 	.word	0x20000494
 80035ac:	20000468 	.word	0x20000468
 80035b0:	20000534 	.word	0x20000534
 80035b4:	200005ac 	.word	0x200005ac
 80035b8:	20000620 	.word	0x20000620

080035bc <ai_network_create_and_init>:
{
 80035bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035c0:	4688      	mov	r8, r1
 80035c2:	b08f      	sub	sp, #60	; 0x3c
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 80035c4:	2100      	movs	r1, #0
{
 80035c6:	4606      	mov	r6, r0
 80035c8:	4617      	mov	r7, r2
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 80035ca:	f7ff ff43 	bl	8003454 <ai_network_create>
    if (err.type != AI_ERROR_NONE)
 80035ce:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 80035d2:	4604      	mov	r4, r0
    if (err.type != AI_ERROR_NONE)
 80035d4:	d001      	beq.n	80035da <ai_network_create_and_init+0x1e>
    return err;
 80035d6:	4620      	mov	r0, r4
 80035d8:	e006      	b.n	80035e8 <ai_network_create_and_init+0x2c>
    if (ai_network_data_params_get(&params) != true) {
 80035da:	4668      	mov	r0, sp
 80035dc:	f000 f838 	bl	8003650 <ai_network_data_params_get>
 80035e0:	b928      	cbnz	r0, 80035ee <ai_network_create_and_init+0x32>
  return ai_platform_network_get_error(network);
 80035e2:	6830      	ldr	r0, [r6, #0]
 80035e4:	f000 f95a 	bl	800389c <ai_platform_network_get_error>
}
 80035e8:	b00f      	add	sp, #60	; 0x3c
 80035ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (activations) {
 80035ee:	f1b8 0f00 	cmp.w	r8, #0
 80035f2:	d11a      	bne.n	800362a <ai_network_create_and_init+0x6e>
    if (weights) {
 80035f4:	bb3f      	cbnz	r7, 8003646 <ai_network_create_and_init+0x8a>
    if (ai_network_init(*network, &params) != true) {
 80035f6:	6830      	ldr	r0, [r6, #0]
 80035f8:	4669      	mov	r1, sp
 80035fa:	f7ff ff4d 	bl	8003498 <ai_network_init>
 80035fe:	b928      	cbnz	r0, 800360c <ai_network_create_and_init+0x50>
  return ai_platform_network_get_error(network);
 8003600:	6830      	ldr	r0, [r6, #0]
 8003602:	f000 f94b 	bl	800389c <ai_platform_network_get_error>
 8003606:	fa5f f980 	uxtb.w	r9, r0
 800360a:	4604      	mov	r4, r0
    return err;
 800360c:	f369 0407 	bfi	r4, r9, #0, #8
 8003610:	e7e1      	b.n	80035d6 <ai_network_create_and_init+0x1a>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8003612:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 8003616:	4629      	mov	r1, r5
 8003618:	a803      	add	r0, sp, #12
 800361a:	f000 f86b 	bl	80036f4 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800361e:	3501      	adds	r5, #1
 8003620:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8003624:	42ab      	cmp	r3, r5
 8003626:	dcf4      	bgt.n	8003612 <ai_network_create_and_init+0x56>
 8003628:	e7e4      	b.n	80035f4 <ai_network_create_and_init+0x38>
 800362a:	464d      	mov	r5, r9
 800362c:	e7f8      	b.n	8003620 <ai_network_create_and_init+0x64>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800362e:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 8003632:	4629      	mov	r1, r5
 8003634:	a801      	add	r0, sp, #4
 8003636:	f000 f85d 	bl	80036f4 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 800363a:	3501      	adds	r5, #1
 800363c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8003640:	42ab      	cmp	r3, r5
 8003642:	dcf4      	bgt.n	800362e <ai_network_create_and_init+0x72>
 8003644:	e7d7      	b.n	80035f6 <ai_network_create_and_init+0x3a>
 8003646:	2500      	movs	r5, #0
 8003648:	e7f8      	b.n	800363c <ai_network_create_and_init+0x80>

0800364a <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 800364a:	f000 be15 	b.w	8004278 <ai_platform_network_process>
	...

08003650 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8003650:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 8003652:	4603      	mov	r3, r0
{
 8003654:	b085      	sub	sp, #20
  if (!params) return false;
 8003656:	b170      	cbz	r0, 8003676 <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8003658:	4c08      	ldr	r4, [pc, #32]	; (800367c <ai_network_data_params_get+0x2c>)
 800365a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800365e:	466a      	mov	r2, sp
 8003660:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8003664:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8003668:	ad02      	add	r5, sp, #8
 800366a:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800366e:	4629      	mov	r1, r5
 8003670:	4618      	mov	r0, r3
 8003672:	f000 f8f7 	bl	8003864 <ai_platform_bind_network_params>
}
 8003676:	b005      	add	sp, #20
 8003678:	bd30      	pop	{r4, r5, pc}
 800367a:	bf00      	nop
 800367c:	08009a20 	.word	0x08009a20

08003680 <ai_buffer_get_size>:
 8003680:	b358      	cbz	r0, 80036da <ai_buffer_get_size+0x5a>
 8003682:	b430      	push	{r4, r5}
 8003684:	6803      	ldr	r3, [r0, #0]
 8003686:	4d15      	ldr	r5, [pc, #84]	; (80036dc <ai_buffer_get_size+0x5c>)
 8003688:	6984      	ldr	r4, [r0, #24]
 800368a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800368e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003692:	42ab      	cmp	r3, r5
 8003694:	6862      	ldr	r2, [r4, #4]
 8003696:	d01a      	beq.n	80036ce <ai_buffer_get_size+0x4e>
 8003698:	7d03      	ldrb	r3, [r0, #20]
 800369a:	6941      	ldr	r1, [r0, #20]
 800369c:	f1a3 0301 	sub.w	r3, r3, #1
 80036a0:	fab3 f383 	clz	r3, r3
 80036a4:	095b      	lsrs	r3, r3, #5
 80036a6:	f3c1 2117 	ubfx	r1, r1, #8, #24
 80036aa:	428b      	cmp	r3, r1
 80036ac:	da0b      	bge.n	80036c6 <ai_buffer_get_size+0x46>
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d102      	bne.n	80036b8 <ai_buffer_get_size+0x38>
 80036b2:	2902      	cmp	r1, #2
 80036b4:	d007      	beq.n	80036c6 <ai_buffer_get_size+0x46>
 80036b6:	2302      	movs	r3, #2
 80036b8:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80036bc:	3301      	adds	r3, #1
 80036be:	428b      	cmp	r3, r1
 80036c0:	fb00 f202 	mul.w	r2, r0, r2
 80036c4:	d1f3      	bne.n	80036ae <ai_buffer_get_size+0x2e>
 80036c6:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80036ca:	bc30      	pop	{r4, r5}
 80036cc:	4770      	bx	lr
 80036ce:	2900      	cmp	r1, #0
 80036d0:	d0e2      	beq.n	8003698 <ai_buffer_get_size+0x18>
 80036d2:	321f      	adds	r2, #31
 80036d4:	f022 021f 	bic.w	r2, r2, #31
 80036d8:	e7de      	b.n	8003698 <ai_buffer_get_size+0x18>
 80036da:	4770      	bx	lr
 80036dc:	000400c0 	.word	0x000400c0

080036e0 <ai_buffer_array_sane>:
 80036e0:	b138      	cbz	r0, 80036f2 <ai_buffer_array_sane+0x12>
 80036e2:	6843      	ldr	r3, [r0, #4]
 80036e4:	b123      	cbz	r3, 80036f0 <ai_buffer_array_sane+0x10>
 80036e6:	8840      	ldrh	r0, [r0, #2]
 80036e8:	3000      	adds	r0, #0
 80036ea:	bf18      	it	ne
 80036ec:	2001      	movne	r0, #1
 80036ee:	4770      	bx	lr
 80036f0:	4618      	mov	r0, r3
 80036f2:	4770      	bx	lr

080036f4 <ai_buffer_array_item_set_address>:
 80036f4:	b120      	cbz	r0, 8003700 <ai_buffer_array_item_set_address+0xc>
 80036f6:	6843      	ldr	r3, [r0, #4]
 80036f8:	b11b      	cbz	r3, 8003702 <ai_buffer_array_item_set_address+0xe>
 80036fa:	8840      	ldrh	r0, [r0, #2]
 80036fc:	b918      	cbnz	r0, 8003706 <ai_buffer_array_item_set_address+0x12>
 80036fe:	4770      	bx	lr
 8003700:	4770      	bx	lr
 8003702:	4618      	mov	r0, r3
 8003704:	4770      	bx	lr
 8003706:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800370a:	eb13 0081 	adds.w	r0, r3, r1, lsl #2
 800370e:	d0f7      	beq.n	8003700 <ai_buffer_array_item_set_address+0xc>
 8003710:	6042      	str	r2, [r0, #4]
 8003712:	2001      	movs	r0, #1
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop

08003718 <_ai_platform_acquire_crc>:
 8003718:	2001      	movs	r0, #1
 800371a:	4770      	bx	lr

0800371c <_ai_platform_release_crc>:
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop

08003720 <ai_platform_get_weights_map>:
 8003720:	b192      	cbz	r2, 8003748 <ai_platform_get_weights_map+0x28>
 8003722:	b188      	cbz	r0, 8003748 <ai_platform_get_weights_map+0x28>
 8003724:	b181      	cbz	r1, 8003748 <ai_platform_get_weights_map+0x28>
 8003726:	b570      	push	{r4, r5, r6, lr}
 8003728:	4b24      	ldr	r3, [pc, #144]	; (80037bc <ai_platform_get_weights_map+0x9c>)
 800372a:	6814      	ldr	r4, [r2, #0]
 800372c:	429c      	cmp	r4, r3
 800372e:	d00d      	beq.n	800374c <ai_platform_get_weights_map+0x2c>
 8003730:	6854      	ldr	r4, [r2, #4]
 8003732:	b194      	cbz	r4, 800375a <ai_platform_get_weights_map+0x3a>
 8003734:	6825      	ldr	r5, [r4, #0]
 8003736:	429d      	cmp	r5, r3
 8003738:	d027      	beq.n	800378a <ai_platform_get_weights_map+0x6a>
 800373a:	6004      	str	r4, [r0, #0]
 800373c:	f1a1 0001 	sub.w	r0, r1, #1
 8003740:	fab0 f080 	clz	r0, r0
 8003744:	0940      	lsrs	r0, r0, #5
 8003746:	bd70      	pop	{r4, r5, r6, pc}
 8003748:	2000      	movs	r0, #0
 800374a:	4770      	bx	lr
 800374c:	4605      	mov	r5, r0
 800374e:	1d10      	adds	r0, r2, #4
 8003750:	4616      	mov	r6, r2
 8003752:	460c      	mov	r4, r1
 8003754:	f7ff ffc4 	bl	80036e0 <ai_buffer_array_sane>
 8003758:	b908      	cbnz	r0, 800375e <ai_platform_get_weights_map+0x3e>
 800375a:	2000      	movs	r0, #0
 800375c:	bd70      	pop	{r4, r5, r6, pc}
 800375e:	88f3      	ldrh	r3, [r6, #6]
 8003760:	429c      	cmp	r4, r3
 8003762:	d1fa      	bne.n	800375a <ai_platform_get_weights_map+0x3a>
 8003764:	2100      	movs	r1, #0
 8003766:	1f2b      	subs	r3, r5, #4
 8003768:	4608      	mov	r0, r1
 800376a:	68b2      	ldr	r2, [r6, #8]
 800376c:	440a      	add	r2, r1
 800376e:	311c      	adds	r1, #28
 8003770:	6852      	ldr	r2, [r2, #4]
 8003772:	b12a      	cbz	r2, 8003780 <ai_platform_get_weights_map+0x60>
 8003774:	3001      	adds	r0, #1
 8003776:	4284      	cmp	r4, r0
 8003778:	f843 2f04 	str.w	r2, [r3, #4]!
 800377c:	d1f5      	bne.n	800376a <ai_platform_get_weights_map+0x4a>
 800377e:	4620      	mov	r0, r4
 8003780:	1a20      	subs	r0, r4, r0
 8003782:	fab0 f080 	clz	r0, r0
 8003786:	0940      	lsrs	r0, r0, #5
 8003788:	bd70      	pop	{r4, r5, r6, pc}
 800378a:	6863      	ldr	r3, [r4, #4]
 800378c:	42ab      	cmp	r3, r5
 800378e:	f104 0404 	add.w	r4, r4, #4
 8003792:	d0e2      	beq.n	800375a <ai_platform_get_weights_map+0x3a>
 8003794:	3804      	subs	r0, #4
 8003796:	4626      	mov	r6, r4
 8003798:	2200      	movs	r2, #0
 800379a:	e003      	b.n	80037a4 <ai_platform_get_weights_map+0x84>
 800379c:	f856 3f04 	ldr.w	r3, [r6, #4]!
 80037a0:	42ab      	cmp	r3, r5
 80037a2:	d0da      	beq.n	800375a <ai_platform_get_weights_map+0x3a>
 80037a4:	3201      	adds	r2, #1
 80037a6:	4291      	cmp	r1, r2
 80037a8:	f840 3f04 	str.w	r3, [r0, #4]!
 80037ac:	d1f6      	bne.n	800379c <ai_platform_get_weights_map+0x7c>
 80037ae:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 80037b2:	4b02      	ldr	r3, [pc, #8]	; (80037bc <ai_platform_get_weights_map+0x9c>)
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d1d0      	bne.n	800375a <ai_platform_get_weights_map+0x3a>
 80037b8:	2001      	movs	r0, #1
 80037ba:	bd70      	pop	{r4, r5, r6, pc}
 80037bc:	a1facade 	.word	0xa1facade

080037c0 <ai_platform_get_activations_map>:
 80037c0:	b192      	cbz	r2, 80037e8 <ai_platform_get_activations_map+0x28>
 80037c2:	b188      	cbz	r0, 80037e8 <ai_platform_get_activations_map+0x28>
 80037c4:	b181      	cbz	r1, 80037e8 <ai_platform_get_activations_map+0x28>
 80037c6:	b570      	push	{r4, r5, r6, lr}
 80037c8:	4b25      	ldr	r3, [pc, #148]	; (8003860 <ai_platform_get_activations_map+0xa0>)
 80037ca:	6814      	ldr	r4, [r2, #0]
 80037cc:	429c      	cmp	r4, r3
 80037ce:	d00d      	beq.n	80037ec <ai_platform_get_activations_map+0x2c>
 80037d0:	6a14      	ldr	r4, [r2, #32]
 80037d2:	b19c      	cbz	r4, 80037fc <ai_platform_get_activations_map+0x3c>
 80037d4:	6825      	ldr	r5, [r4, #0]
 80037d6:	429d      	cmp	r5, r3
 80037d8:	d028      	beq.n	800382c <ai_platform_get_activations_map+0x6c>
 80037da:	6004      	str	r4, [r0, #0]
 80037dc:	f1a1 0001 	sub.w	r0, r1, #1
 80037e0:	fab0 f080 	clz	r0, r0
 80037e4:	0940      	lsrs	r0, r0, #5
 80037e6:	bd70      	pop	{r4, r5, r6, pc}
 80037e8:	2000      	movs	r0, #0
 80037ea:	4770      	bx	lr
 80037ec:	4605      	mov	r5, r0
 80037ee:	f102 000c 	add.w	r0, r2, #12
 80037f2:	4616      	mov	r6, r2
 80037f4:	460c      	mov	r4, r1
 80037f6:	f7ff ff73 	bl	80036e0 <ai_buffer_array_sane>
 80037fa:	b908      	cbnz	r0, 8003800 <ai_platform_get_activations_map+0x40>
 80037fc:	2000      	movs	r0, #0
 80037fe:	bd70      	pop	{r4, r5, r6, pc}
 8003800:	89f3      	ldrh	r3, [r6, #14]
 8003802:	429c      	cmp	r4, r3
 8003804:	d1fa      	bne.n	80037fc <ai_platform_get_activations_map+0x3c>
 8003806:	2100      	movs	r1, #0
 8003808:	1f2b      	subs	r3, r5, #4
 800380a:	4608      	mov	r0, r1
 800380c:	6932      	ldr	r2, [r6, #16]
 800380e:	440a      	add	r2, r1
 8003810:	311c      	adds	r1, #28
 8003812:	6852      	ldr	r2, [r2, #4]
 8003814:	b12a      	cbz	r2, 8003822 <ai_platform_get_activations_map+0x62>
 8003816:	3001      	adds	r0, #1
 8003818:	4284      	cmp	r4, r0
 800381a:	f843 2f04 	str.w	r2, [r3, #4]!
 800381e:	d1f5      	bne.n	800380c <ai_platform_get_activations_map+0x4c>
 8003820:	4620      	mov	r0, r4
 8003822:	1a20      	subs	r0, r4, r0
 8003824:	fab0 f080 	clz	r0, r0
 8003828:	0940      	lsrs	r0, r0, #5
 800382a:	bd70      	pop	{r4, r5, r6, pc}
 800382c:	6863      	ldr	r3, [r4, #4]
 800382e:	42ab      	cmp	r3, r5
 8003830:	f104 0404 	add.w	r4, r4, #4
 8003834:	d0e2      	beq.n	80037fc <ai_platform_get_activations_map+0x3c>
 8003836:	3804      	subs	r0, #4
 8003838:	4626      	mov	r6, r4
 800383a:	2200      	movs	r2, #0
 800383c:	e003      	b.n	8003846 <ai_platform_get_activations_map+0x86>
 800383e:	f856 3f04 	ldr.w	r3, [r6, #4]!
 8003842:	42ab      	cmp	r3, r5
 8003844:	d0da      	beq.n	80037fc <ai_platform_get_activations_map+0x3c>
 8003846:	3201      	adds	r2, #1
 8003848:	4291      	cmp	r1, r2
 800384a:	f840 3f04 	str.w	r3, [r0, #4]!
 800384e:	d1f6      	bne.n	800383e <ai_platform_get_activations_map+0x7e>
 8003850:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8003854:	4b02      	ldr	r3, [pc, #8]	; (8003860 <ai_platform_get_activations_map+0xa0>)
 8003856:	429a      	cmp	r2, r3
 8003858:	d1d0      	bne.n	80037fc <ai_platform_get_activations_map+0x3c>
 800385a:	2001      	movs	r0, #1
 800385c:	bd70      	pop	{r4, r5, r6, pc}
 800385e:	bf00      	nop
 8003860:	a1facade 	.word	0xa1facade

08003864 <ai_platform_bind_network_params>:
 8003864:	4603      	mov	r3, r0
 8003866:	b190      	cbz	r0, 800388e <ai_platform_bind_network_params+0x2a>
 8003868:	b1a1      	cbz	r1, 8003894 <ai_platform_bind_network_params+0x30>
 800386a:	b18a      	cbz	r2, 8003890 <ai_platform_bind_network_params+0x2c>
 800386c:	b410      	push	{r4}
 800386e:	4604      	mov	r4, r0
 8003870:	4809      	ldr	r0, [pc, #36]	; (8003898 <ai_platform_bind_network_params+0x34>)
 8003872:	f844 0b04 	str.w	r0, [r4], #4
 8003876:	c903      	ldmia	r1, {r0, r1}
 8003878:	e884 0003 	stmia.w	r4, {r0, r1}
 800387c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003880:	330c      	adds	r3, #12
 8003882:	e883 0003 	stmia.w	r3, {r0, r1}
 8003886:	2001      	movs	r0, #1
 8003888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	4770      	bx	lr
 8003890:	4610      	mov	r0, r2
 8003892:	4770      	bx	lr
 8003894:	4608      	mov	r0, r1
 8003896:	4770      	bx	lr
 8003898:	a1facade 	.word	0xa1facade

0800389c <ai_platform_network_get_error>:
 800389c:	b510      	push	{r4, lr}
 800389e:	b120      	cbz	r0, 80038aa <ai_platform_network_get_error+0xe>
 80038a0:	4b32      	ldr	r3, [pc, #200]	; (800396c <ai_platform_network_get_error+0xd0>)
 80038a2:	6802      	ldr	r2, [r0, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	4604      	mov	r4, r0
 80038a8:	d02e      	beq.n	8003908 <ai_platform_network_get_error+0x6c>
 80038aa:	4a31      	ldr	r2, [pc, #196]	; (8003970 <ai_platform_network_get_error+0xd4>)
 80038ac:	6813      	ldr	r3, [r2, #0]
 80038ae:	f023 0301 	bic.w	r3, r3, #1
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	f7ff ff30 	bl	8003718 <_ai_platform_acquire_crc>
 80038b8:	4b2e      	ldr	r3, [pc, #184]	; (8003974 <ai_platform_network_get_error+0xd8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c4:	d00d      	beq.n	80038e2 <ai_platform_network_get_error+0x46>
 80038c6:	4b2c      	ldr	r3, [pc, #176]	; (8003978 <ai_platform_network_get_error+0xdc>)
 80038c8:	2201      	movs	r2, #1
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	2a00      	cmp	r2, #0
 80038d0:	d1fc      	bne.n	80038cc <ai_platform_network_get_error+0x30>
 80038d2:	4b2a      	ldr	r3, [pc, #168]	; (800397c <ai_platform_network_get_error+0xe0>)
 80038d4:	4a2a      	ldr	r2, [pc, #168]	; (8003980 <ai_platform_network_get_error+0xe4>)
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	4b2a      	ldr	r3, [pc, #168]	; (8003984 <ai_platform_network_get_error+0xe8>)
 80038dc:	429a      	cmp	r2, r3
 80038de:	d00d      	beq.n	80038fc <ai_platform_network_get_error+0x60>
 80038e0:	e7fe      	b.n	80038e0 <ai_platform_network_get_error+0x44>
 80038e2:	4b29      	ldr	r3, [pc, #164]	; (8003988 <ai_platform_network_get_error+0xec>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	2a00      	cmp	r2, #0
 80038ec:	d1fc      	bne.n	80038e8 <ai_platform_network_get_error+0x4c>
 80038ee:	4b27      	ldr	r3, [pc, #156]	; (800398c <ai_platform_network_get_error+0xf0>)
 80038f0:	4a23      	ldr	r2, [pc, #140]	; (8003980 <ai_platform_network_get_error+0xe4>)
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4b23      	ldr	r3, [pc, #140]	; (8003984 <ai_platform_network_get_error+0xe8>)
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d104      	bne.n	8003906 <ai_platform_network_get_error+0x6a>
 80038fc:	f7ff ff0e 	bl	800371c <_ai_platform_release_crc>
 8003900:	f241 0010 	movw	r0, #4112	; 0x1010
 8003904:	bd10      	pop	{r4, pc}
 8003906:	e7fe      	b.n	8003906 <ai_platform_network_get_error+0x6a>
 8003908:	4a19      	ldr	r2, [pc, #100]	; (8003970 <ai_platform_network_get_error+0xd4>)
 800390a:	6813      	ldr	r3, [r2, #0]
 800390c:	f023 0301 	bic.w	r3, r3, #1
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	f7ff ff01 	bl	8003718 <_ai_platform_acquire_crc>
 8003916:	4b17      	ldr	r3, [pc, #92]	; (8003974 <ai_platform_network_get_error+0xd8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800391e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003922:	d00d      	beq.n	8003940 <ai_platform_network_get_error+0xa4>
 8003924:	4b14      	ldr	r3, [pc, #80]	; (8003978 <ai_platform_network_get_error+0xdc>)
 8003926:	2201      	movs	r2, #1
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	2a00      	cmp	r2, #0
 800392e:	d1fc      	bne.n	800392a <ai_platform_network_get_error+0x8e>
 8003930:	4b12      	ldr	r3, [pc, #72]	; (800397c <ai_platform_network_get_error+0xe0>)
 8003932:	4a13      	ldr	r2, [pc, #76]	; (8003980 <ai_platform_network_get_error+0xe4>)
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	4b12      	ldr	r3, [pc, #72]	; (8003984 <ai_platform_network_get_error+0xe8>)
 800393a:	429a      	cmp	r2, r3
 800393c:	d00e      	beq.n	800395c <ai_platform_network_get_error+0xc0>
 800393e:	e7fe      	b.n	800393e <ai_platform_network_get_error+0xa2>
 8003940:	4b11      	ldr	r3, [pc, #68]	; (8003988 <ai_platform_network_get_error+0xec>)
 8003942:	2201      	movs	r2, #1
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	2a00      	cmp	r2, #0
 800394a:	d1fc      	bne.n	8003946 <ai_platform_network_get_error+0xaa>
 800394c:	4b0f      	ldr	r3, [pc, #60]	; (800398c <ai_platform_network_get_error+0xf0>)
 800394e:	4a0c      	ldr	r2, [pc, #48]	; (8003980 <ai_platform_network_get_error+0xe4>)
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <ai_platform_network_get_error+0xe8>)
 8003956:	429a      	cmp	r2, r3
 8003958:	d000      	beq.n	800395c <ai_platform_network_get_error+0xc0>
 800395a:	e7fe      	b.n	800395a <ai_platform_network_get_error+0xbe>
 800395c:	f7ff fede 	bl	800371c <_ai_platform_release_crc>
 8003960:	f104 0010 	add.w	r0, r4, #16
 8003964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003968:	f000 bef4 	b.w	8004754 <core_get_error>
 800396c:	a1c00100 	.word	0xa1c00100
 8003970:	e0002000 	.word	0xe0002000
 8003974:	e0042000 	.word	0xe0042000
 8003978:	58024c08 	.word	0x58024c08
 800397c:	58024c00 	.word	0x58024c00
 8003980:	f407a5c2 	.word	0xf407a5c2
 8003984:	b5e8b5cd 	.word	0xb5e8b5cd
 8003988:	40023008 	.word	0x40023008
 800398c:	40023000 	.word	0x40023000

08003990 <ai_platform_network_set_error>:
 8003990:	b110      	cbz	r0, 8003998 <ai_platform_network_set_error+0x8>
 8003992:	3010      	adds	r0, #16
 8003994:	f000 bee4 	b.w	8004760 <core_set_error>
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop

0800399c <ai_platform_inputs_get>:
 800399c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039a0:	b085      	sub	sp, #20
 80039a2:	2800      	cmp	r0, #0
 80039a4:	f000 80a1 	beq.w	8003aea <ai_platform_inputs_get+0x14e>
 80039a8:	4b6d      	ldr	r3, [pc, #436]	; (8003b60 <ai_platform_inputs_get+0x1c4>)
 80039aa:	6802      	ldr	r2, [r0, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	4607      	mov	r7, r0
 80039b0:	f040 809b 	bne.w	8003aea <ai_platform_inputs_get+0x14e>
 80039b4:	4a6b      	ldr	r2, [pc, #428]	; (8003b64 <ai_platform_inputs_get+0x1c8>)
 80039b6:	6813      	ldr	r3, [r2, #0]
 80039b8:	f023 0301 	bic.w	r3, r3, #1
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	468b      	mov	fp, r1
 80039c0:	f7ff feaa 	bl	8003718 <_ai_platform_acquire_crc>
 80039c4:	4b68      	ldr	r3, [pc, #416]	; (8003b68 <ai_platform_inputs_get+0x1cc>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d0:	d00d      	beq.n	80039ee <ai_platform_inputs_get+0x52>
 80039d2:	4b66      	ldr	r3, [pc, #408]	; (8003b6c <ai_platform_inputs_get+0x1d0>)
 80039d4:	2201      	movs	r2, #1
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	2a00      	cmp	r2, #0
 80039dc:	d1fc      	bne.n	80039d8 <ai_platform_inputs_get+0x3c>
 80039de:	4b64      	ldr	r3, [pc, #400]	; (8003b70 <ai_platform_inputs_get+0x1d4>)
 80039e0:	4a64      	ldr	r2, [pc, #400]	; (8003b74 <ai_platform_inputs_get+0x1d8>)
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	4b64      	ldr	r3, [pc, #400]	; (8003b78 <ai_platform_inputs_get+0x1dc>)
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d00d      	beq.n	8003a08 <ai_platform_inputs_get+0x6c>
 80039ec:	e7fe      	b.n	80039ec <ai_platform_inputs_get+0x50>
 80039ee:	4b63      	ldr	r3, [pc, #396]	; (8003b7c <ai_platform_inputs_get+0x1e0>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	2a00      	cmp	r2, #0
 80039f8:	d1fc      	bne.n	80039f4 <ai_platform_inputs_get+0x58>
 80039fa:	4b61      	ldr	r3, [pc, #388]	; (8003b80 <ai_platform_inputs_get+0x1e4>)
 80039fc:	4a5d      	ldr	r2, [pc, #372]	; (8003b74 <ai_platform_inputs_get+0x1d8>)
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	4b5d      	ldr	r3, [pc, #372]	; (8003b78 <ai_platform_inputs_get+0x1dc>)
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d16f      	bne.n	8003ae8 <ai_platform_inputs_get+0x14c>
 8003a08:	f7ff fe88 	bl	800371c <_ai_platform_release_crc>
 8003a0c:	f1bb 0f00 	cmp.w	fp, #0
 8003a10:	d002      	beq.n	8003a18 <ai_platform_inputs_get+0x7c>
 8003a12:	2300      	movs	r3, #0
 8003a14:	f8ab 3000 	strh.w	r3, [fp]
 8003a18:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 8081 	beq.w	8003b22 <ai_platform_inputs_get+0x186>
 8003a20:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8003a22:	2e00      	cmp	r6, #0
 8003a24:	d07d      	beq.n	8003b22 <ai_platform_inputs_get+0x186>
 8003a26:	8833      	ldrh	r3, [r6, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d07a      	beq.n	8003b22 <ai_platform_inputs_get+0x186>
 8003a2c:	6873      	ldr	r3, [r6, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d077      	beq.n	8003b22 <ai_platform_inputs_get+0x186>
 8003a32:	681d      	ldr	r5, [r3, #0]
 8003a34:	2d00      	cmp	r5, #0
 8003a36:	d074      	beq.n	8003b22 <ai_platform_inputs_get+0x186>
 8003a38:	f04f 0800 	mov.w	r8, #0
 8003a3c:	f8cd b008 	str.w	fp, [sp, #8]
 8003a40:	46c1      	mov	r9, r8
 8003a42:	46bb      	mov	fp, r7
 8003a44:	68b0      	ldr	r0, [r6, #8]
 8003a46:	69aa      	ldr	r2, [r5, #24]
 8003a48:	68ab      	ldr	r3, [r5, #8]
 8003a4a:	6844      	ldr	r4, [r0, #4]
 8003a4c:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8003a50:	6810      	ldr	r0, [r2, #0]
 8003a52:	68ef      	ldr	r7, [r5, #12]
 8003a54:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8003a58:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a5c:	9301      	str	r3, [sp, #4]
 8003a5e:	9203      	str	r2, [sp, #12]
 8003a60:	f002 fff4 	bl	8006a4c <ai_array_to_buffer_fmt>
 8003a64:	9a03      	ldr	r2, [sp, #12]
 8003a66:	4601      	mov	r1, r0
 8003a68:	69a8      	ldr	r0, [r5, #24]
 8003a6a:	eb0a 0302 	add.w	r3, sl, r2
 8003a6e:	4444      	add	r4, r8
 8003a70:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8003a74:	b16b      	cbz	r3, 8003a92 <ai_platform_inputs_get+0xf6>
 8003a76:	2000      	movs	r0, #0
 8003a78:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8003a7c:	6828      	ldr	r0, [r5, #0]
 8003a7e:	6058      	str	r0, [r3, #4]
 8003a80:	2800      	cmp	r0, #0
 8003a82:	d058      	beq.n	8003b36 <ai_platform_inputs_get+0x19a>
 8003a84:	8840      	ldrh	r0, [r0, #2]
 8003a86:	2800      	cmp	r0, #0
 8003a88:	d055      	beq.n	8003b36 <ai_platform_inputs_get+0x19a>
 8003a8a:	2001      	movs	r0, #1
 8003a8c:	f84a 0002 	str.w	r0, [sl, r2]
 8003a90:	69a8      	ldr	r0, [r5, #24]
 8003a92:	6842      	ldr	r2, [r0, #4]
 8003a94:	6122      	str	r2, [r4, #16]
 8003a96:	f04f 0001 	mov.w	r0, #1
 8003a9a:	7520      	strb	r0, [r4, #20]
 8003a9c:	9a01      	ldr	r2, [sp, #4]
 8003a9e:	6960      	ldr	r0, [r4, #20]
 8003aa0:	60a3      	str	r3, [r4, #8]
 8003aa2:	f362 201f 	bfi	r0, r2, #8, #24
 8003aa6:	e9c4 1e00 	strd	r1, lr, [r4]
 8003aaa:	e9c4 0705 	strd	r0, r7, [r4, #20]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60e3      	str	r3, [r4, #12]
 8003ab2:	8830      	ldrh	r0, [r6, #0]
 8003ab4:	f109 0301 	add.w	r3, r9, #1
 8003ab8:	4283      	cmp	r3, r0
 8003aba:	4699      	mov	r9, r3
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	d207      	bcs.n	8003ad0 <ai_platform_inputs_get+0x134>
 8003ac0:	6870      	ldr	r0, [r6, #4]
 8003ac2:	b128      	cbz	r0, 8003ad0 <ai_platform_inputs_get+0x134>
 8003ac4:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8003ac8:	f108 081c 	add.w	r8, r8, #28
 8003acc:	2d00      	cmp	r5, #0
 8003ace:	d1b9      	bne.n	8003a44 <ai_platform_inputs_get+0xa8>
 8003ad0:	465f      	mov	r7, fp
 8003ad2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003ad6:	b322      	cbz	r2, 8003b22 <ai_platform_inputs_get+0x186>
 8003ad8:	68b3      	ldr	r3, [r6, #8]
 8003ada:	6858      	ldr	r0, [r3, #4]
 8003adc:	f1bb 0f00 	cmp.w	fp, #0
 8003ae0:	d026      	beq.n	8003b30 <ai_platform_inputs_get+0x194>
 8003ae2:	f8ab 2000 	strh.w	r2, [fp]
 8003ae6:	e023      	b.n	8003b30 <ai_platform_inputs_get+0x194>
 8003ae8:	e7fe      	b.n	8003ae8 <ai_platform_inputs_get+0x14c>
 8003aea:	4a1e      	ldr	r2, [pc, #120]	; (8003b64 <ai_platform_inputs_get+0x1c8>)
 8003aec:	6813      	ldr	r3, [r2, #0]
 8003aee:	f023 0301 	bic.w	r3, r3, #1
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	f7ff fe10 	bl	8003718 <_ai_platform_acquire_crc>
 8003af8:	4b1b      	ldr	r3, [pc, #108]	; (8003b68 <ai_platform_inputs_get+0x1cc>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b04:	d01a      	beq.n	8003b3c <ai_platform_inputs_get+0x1a0>
 8003b06:	4b19      	ldr	r3, [pc, #100]	; (8003b6c <ai_platform_inputs_get+0x1d0>)
 8003b08:	2201      	movs	r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	2a00      	cmp	r2, #0
 8003b10:	d1fc      	bne.n	8003b0c <ai_platform_inputs_get+0x170>
 8003b12:	4b17      	ldr	r3, [pc, #92]	; (8003b70 <ai_platform_inputs_get+0x1d4>)
 8003b14:	4a17      	ldr	r2, [pc, #92]	; (8003b74 <ai_platform_inputs_get+0x1d8>)
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	4b17      	ldr	r3, [pc, #92]	; (8003b78 <ai_platform_inputs_get+0x1dc>)
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d01b      	beq.n	8003b58 <ai_platform_inputs_get+0x1bc>
 8003b20:	e7fe      	b.n	8003b20 <ai_platform_inputs_get+0x184>
 8003b22:	f107 0010 	add.w	r0, r7, #16
 8003b26:	2218      	movs	r2, #24
 8003b28:	2111      	movs	r1, #17
 8003b2a:	f000 fe19 	bl	8004760 <core_set_error>
 8003b2e:	2000      	movs	r0, #0
 8003b30:	b005      	add	sp, #20
 8003b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b36:	69a8      	ldr	r0, [r5, #24]
 8003b38:	2300      	movs	r3, #0
 8003b3a:	e7aa      	b.n	8003a92 <ai_platform_inputs_get+0xf6>
 8003b3c:	4b0f      	ldr	r3, [pc, #60]	; (8003b7c <ai_platform_inputs_get+0x1e0>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	2a00      	cmp	r2, #0
 8003b46:	d1fc      	bne.n	8003b42 <ai_platform_inputs_get+0x1a6>
 8003b48:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <ai_platform_inputs_get+0x1e4>)
 8003b4a:	4a0a      	ldr	r2, [pc, #40]	; (8003b74 <ai_platform_inputs_get+0x1d8>)
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	4b09      	ldr	r3, [pc, #36]	; (8003b78 <ai_platform_inputs_get+0x1dc>)
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d000      	beq.n	8003b58 <ai_platform_inputs_get+0x1bc>
 8003b56:	e7fe      	b.n	8003b56 <ai_platform_inputs_get+0x1ba>
 8003b58:	f7ff fde0 	bl	800371c <_ai_platform_release_crc>
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	e7e7      	b.n	8003b30 <ai_platform_inputs_get+0x194>
 8003b60:	a1c00100 	.word	0xa1c00100
 8003b64:	e0002000 	.word	0xe0002000
 8003b68:	e0042000 	.word	0xe0042000
 8003b6c:	58024c08 	.word	0x58024c08
 8003b70:	58024c00 	.word	0x58024c00
 8003b74:	f407a5c2 	.word	0xf407a5c2
 8003b78:	b5e8b5cd 	.word	0xb5e8b5cd
 8003b7c:	40023008 	.word	0x40023008
 8003b80:	40023000 	.word	0x40023000

08003b84 <ai_platform_outputs_get>:
 8003b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b88:	b085      	sub	sp, #20
 8003b8a:	2800      	cmp	r0, #0
 8003b8c:	f000 80a9 	beq.w	8003ce2 <ai_platform_outputs_get+0x15e>
 8003b90:	4b70      	ldr	r3, [pc, #448]	; (8003d54 <ai_platform_outputs_get+0x1d0>)
 8003b92:	6802      	ldr	r2, [r0, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	4607      	mov	r7, r0
 8003b98:	f040 80a3 	bne.w	8003ce2 <ai_platform_outputs_get+0x15e>
 8003b9c:	4a6e      	ldr	r2, [pc, #440]	; (8003d58 <ai_platform_outputs_get+0x1d4>)
 8003b9e:	6813      	ldr	r3, [r2, #0]
 8003ba0:	f023 0301 	bic.w	r3, r3, #1
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	468b      	mov	fp, r1
 8003ba8:	f7ff fdb6 	bl	8003718 <_ai_platform_acquire_crc>
 8003bac:	4b6b      	ldr	r3, [pc, #428]	; (8003d5c <ai_platform_outputs_get+0x1d8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb8:	d00d      	beq.n	8003bd6 <ai_platform_outputs_get+0x52>
 8003bba:	4b69      	ldr	r3, [pc, #420]	; (8003d60 <ai_platform_outputs_get+0x1dc>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	2a00      	cmp	r2, #0
 8003bc4:	d1fc      	bne.n	8003bc0 <ai_platform_outputs_get+0x3c>
 8003bc6:	4b67      	ldr	r3, [pc, #412]	; (8003d64 <ai_platform_outputs_get+0x1e0>)
 8003bc8:	4a67      	ldr	r2, [pc, #412]	; (8003d68 <ai_platform_outputs_get+0x1e4>)
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	4b67      	ldr	r3, [pc, #412]	; (8003d6c <ai_platform_outputs_get+0x1e8>)
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d00d      	beq.n	8003bf0 <ai_platform_outputs_get+0x6c>
 8003bd4:	e7fe      	b.n	8003bd4 <ai_platform_outputs_get+0x50>
 8003bd6:	4b66      	ldr	r3, [pc, #408]	; (8003d70 <ai_platform_outputs_get+0x1ec>)
 8003bd8:	2201      	movs	r2, #1
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	2a00      	cmp	r2, #0
 8003be0:	d1fc      	bne.n	8003bdc <ai_platform_outputs_get+0x58>
 8003be2:	4b64      	ldr	r3, [pc, #400]	; (8003d74 <ai_platform_outputs_get+0x1f0>)
 8003be4:	4a60      	ldr	r2, [pc, #384]	; (8003d68 <ai_platform_outputs_get+0x1e4>)
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	4b60      	ldr	r3, [pc, #384]	; (8003d6c <ai_platform_outputs_get+0x1e8>)
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d177      	bne.n	8003ce0 <ai_platform_outputs_get+0x15c>
 8003bf0:	f7ff fd94 	bl	800371c <_ai_platform_release_crc>
 8003bf4:	f1bb 0f00 	cmp.w	fp, #0
 8003bf8:	d002      	beq.n	8003c00 <ai_platform_outputs_get+0x7c>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	f8ab 3000 	strh.w	r3, [fp]
 8003c00:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	f240 809a 	bls.w	8003d3c <ai_platform_outputs_get+0x1b8>
 8003c08:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8003c0a:	f116 0f0c 	cmn.w	r6, #12
 8003c0e:	f000 8095 	beq.w	8003d3c <ai_platform_outputs_get+0x1b8>
 8003c12:	89b3      	ldrh	r3, [r6, #12]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8091 	beq.w	8003d3c <ai_platform_outputs_get+0x1b8>
 8003c1a:	6933      	ldr	r3, [r6, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 808d 	beq.w	8003d3c <ai_platform_outputs_get+0x1b8>
 8003c22:	681d      	ldr	r5, [r3, #0]
 8003c24:	2d00      	cmp	r5, #0
 8003c26:	f000 8089 	beq.w	8003d3c <ai_platform_outputs_get+0x1b8>
 8003c2a:	f04f 0800 	mov.w	r8, #0
 8003c2e:	f8cd b008 	str.w	fp, [sp, #8]
 8003c32:	46c1      	mov	r9, r8
 8003c34:	46bb      	mov	fp, r7
 8003c36:	6970      	ldr	r0, [r6, #20]
 8003c38:	69aa      	ldr	r2, [r5, #24]
 8003c3a:	68ab      	ldr	r3, [r5, #8]
 8003c3c:	6844      	ldr	r4, [r0, #4]
 8003c3e:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8003c42:	6810      	ldr	r0, [r2, #0]
 8003c44:	68ef      	ldr	r7, [r5, #12]
 8003c46:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8003c4a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c4e:	9301      	str	r3, [sp, #4]
 8003c50:	9203      	str	r2, [sp, #12]
 8003c52:	f002 fefb 	bl	8006a4c <ai_array_to_buffer_fmt>
 8003c56:	9a03      	ldr	r2, [sp, #12]
 8003c58:	4601      	mov	r1, r0
 8003c5a:	69a8      	ldr	r0, [r5, #24]
 8003c5c:	eb0a 0302 	add.w	r3, sl, r2
 8003c60:	4444      	add	r4, r8
 8003c62:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8003c66:	b16b      	cbz	r3, 8003c84 <ai_platform_outputs_get+0x100>
 8003c68:	2000      	movs	r0, #0
 8003c6a:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8003c6e:	6828      	ldr	r0, [r5, #0]
 8003c70:	6058      	str	r0, [r3, #4]
 8003c72:	2800      	cmp	r0, #0
 8003c74:	d051      	beq.n	8003d1a <ai_platform_outputs_get+0x196>
 8003c76:	8840      	ldrh	r0, [r0, #2]
 8003c78:	2800      	cmp	r0, #0
 8003c7a:	d04e      	beq.n	8003d1a <ai_platform_outputs_get+0x196>
 8003c7c:	2001      	movs	r0, #1
 8003c7e:	f84a 0002 	str.w	r0, [sl, r2]
 8003c82:	69a8      	ldr	r0, [r5, #24]
 8003c84:	6842      	ldr	r2, [r0, #4]
 8003c86:	6122      	str	r2, [r4, #16]
 8003c88:	f04f 0001 	mov.w	r0, #1
 8003c8c:	7520      	strb	r0, [r4, #20]
 8003c8e:	9a01      	ldr	r2, [sp, #4]
 8003c90:	6960      	ldr	r0, [r4, #20]
 8003c92:	60a3      	str	r3, [r4, #8]
 8003c94:	f362 201f 	bfi	r0, r2, #8, #24
 8003c98:	e9c4 1e00 	strd	r1, lr, [r4]
 8003c9c:	e9c4 0705 	strd	r0, r7, [r4, #20]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60e3      	str	r3, [r4, #12]
 8003ca4:	89b0      	ldrh	r0, [r6, #12]
 8003ca6:	f109 0301 	add.w	r3, r9, #1
 8003caa:	4283      	cmp	r3, r0
 8003cac:	4699      	mov	r9, r3
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	d207      	bcs.n	8003cc2 <ai_platform_outputs_get+0x13e>
 8003cb2:	6930      	ldr	r0, [r6, #16]
 8003cb4:	b128      	cbz	r0, 8003cc2 <ai_platform_outputs_get+0x13e>
 8003cb6:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8003cba:	f108 081c 	add.w	r8, r8, #28
 8003cbe:	2d00      	cmp	r5, #0
 8003cc0:	d1b9      	bne.n	8003c36 <ai_platform_outputs_get+0xb2>
 8003cc2:	465f      	mov	r7, fp
 8003cc4:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003cc8:	2a00      	cmp	r2, #0
 8003cca:	d037      	beq.n	8003d3c <ai_platform_outputs_get+0x1b8>
 8003ccc:	6973      	ldr	r3, [r6, #20]
 8003cce:	6858      	ldr	r0, [r3, #4]
 8003cd0:	f1bb 0f00 	cmp.w	fp, #0
 8003cd4:	d001      	beq.n	8003cda <ai_platform_outputs_get+0x156>
 8003cd6:	f8ab 2000 	strh.w	r2, [fp]
 8003cda:	b005      	add	sp, #20
 8003cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ce0:	e7fe      	b.n	8003ce0 <ai_platform_outputs_get+0x15c>
 8003ce2:	4a1d      	ldr	r2, [pc, #116]	; (8003d58 <ai_platform_outputs_get+0x1d4>)
 8003ce4:	6813      	ldr	r3, [r2, #0]
 8003ce6:	f023 0301 	bic.w	r3, r3, #1
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	f7ff fd14 	bl	8003718 <_ai_platform_acquire_crc>
 8003cf0:	4b1a      	ldr	r3, [pc, #104]	; (8003d5c <ai_platform_outputs_get+0x1d8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfc:	d010      	beq.n	8003d20 <ai_platform_outputs_get+0x19c>
 8003cfe:	4b18      	ldr	r3, [pc, #96]	; (8003d60 <ai_platform_outputs_get+0x1dc>)
 8003d00:	2201      	movs	r2, #1
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	2a00      	cmp	r2, #0
 8003d08:	d1fc      	bne.n	8003d04 <ai_platform_outputs_get+0x180>
 8003d0a:	4b16      	ldr	r3, [pc, #88]	; (8003d64 <ai_platform_outputs_get+0x1e0>)
 8003d0c:	4a16      	ldr	r2, [pc, #88]	; (8003d68 <ai_platform_outputs_get+0x1e4>)
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	4b16      	ldr	r3, [pc, #88]	; (8003d6c <ai_platform_outputs_get+0x1e8>)
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d019      	beq.n	8003d4c <ai_platform_outputs_get+0x1c8>
 8003d18:	e7fe      	b.n	8003d18 <ai_platform_outputs_get+0x194>
 8003d1a:	69a8      	ldr	r0, [r5, #24]
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	e7b1      	b.n	8003c84 <ai_platform_outputs_get+0x100>
 8003d20:	4b13      	ldr	r3, [pc, #76]	; (8003d70 <ai_platform_outputs_get+0x1ec>)
 8003d22:	2201      	movs	r2, #1
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	2a00      	cmp	r2, #0
 8003d2a:	d1fc      	bne.n	8003d26 <ai_platform_outputs_get+0x1a2>
 8003d2c:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <ai_platform_outputs_get+0x1f0>)
 8003d2e:	4a0e      	ldr	r2, [pc, #56]	; (8003d68 <ai_platform_outputs_get+0x1e4>)
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <ai_platform_outputs_get+0x1e8>)
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d008      	beq.n	8003d4c <ai_platform_outputs_get+0x1c8>
 8003d3a:	e7fe      	b.n	8003d3a <ai_platform_outputs_get+0x1b6>
 8003d3c:	f107 0010 	add.w	r0, r7, #16
 8003d40:	2218      	movs	r2, #24
 8003d42:	2111      	movs	r1, #17
 8003d44:	f000 fd0c 	bl	8004760 <core_set_error>
 8003d48:	2000      	movs	r0, #0
 8003d4a:	e7c6      	b.n	8003cda <ai_platform_outputs_get+0x156>
 8003d4c:	f7ff fce6 	bl	800371c <_ai_platform_release_crc>
 8003d50:	2000      	movs	r0, #0
 8003d52:	e7c2      	b.n	8003cda <ai_platform_outputs_get+0x156>
 8003d54:	a1c00100 	.word	0xa1c00100
 8003d58:	e0002000 	.word	0xe0002000
 8003d5c:	e0042000 	.word	0xe0042000
 8003d60:	58024c08 	.word	0x58024c08
 8003d64:	58024c00 	.word	0x58024c00
 8003d68:	f407a5c2 	.word	0xf407a5c2
 8003d6c:	b5e8b5cd 	.word	0xb5e8b5cd
 8003d70:	40023008 	.word	0x40023008
 8003d74:	40023000 	.word	0x40023000

08003d78 <ai_platform_network_create>:
 8003d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	4606      	mov	r6, r0
 8003d80:	4615      	mov	r5, r2
 8003d82:	461f      	mov	r7, r3
 8003d84:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8003d88:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8003d8c:	f7ff fcc4 	bl	8003718 <_ai_platform_acquire_crc>
 8003d90:	b178      	cbz	r0, 8003db2 <ai_platform_network_create+0x3a>
 8003d92:	4b5f      	ldr	r3, [pc, #380]	; (8003f10 <ai_platform_network_create+0x198>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9e:	4602      	mov	r2, r0
 8003da0:	d00d      	beq.n	8003dbe <ai_platform_network_create+0x46>
 8003da2:	4b5c      	ldr	r3, [pc, #368]	; (8003f14 <ai_platform_network_create+0x19c>)
 8003da4:	2118      	movs	r1, #24
 8003da6:	6019      	str	r1, [r3, #0]
 8003da8:	6819      	ldr	r1, [r3, #0]
 8003daa:	2918      	cmp	r1, #24
 8003dac:	d01a      	beq.n	8003de4 <ai_platform_network_create+0x6c>
 8003dae:	f7ff fcb5 	bl	800371c <_ai_platform_release_crc>
 8003db2:	f244 1333 	movw	r3, #16691	; 0x4133
 8003db6:	4618      	mov	r0, r3
 8003db8:	b003      	add	sp, #12
 8003dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003dbe:	4b56      	ldr	r3, [pc, #344]	; (8003f18 <ai_platform_network_create+0x1a0>)
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	6019      	str	r1, [r3, #0]
 8003dc4:	2114      	movs	r1, #20
 8003dc6:	e001      	b.n	8003dcc <ai_platform_network_create+0x54>
 8003dc8:	3901      	subs	r1, #1
 8003dca:	d002      	beq.n	8003dd2 <ai_platform_network_create+0x5a>
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	2800      	cmp	r0, #0
 8003dd0:	d1fa      	bne.n	8003dc8 <ai_platform_network_create+0x50>
 8003dd2:	4b51      	ldr	r3, [pc, #324]	; (8003f18 <ai_platform_network_create+0x1a0>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	b91b      	cbnz	r3, 8003de0 <ai_platform_network_create+0x68>
 8003dd8:	4b50      	ldr	r3, [pc, #320]	; (8003f1c <ai_platform_network_create+0x1a4>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	d006      	beq.n	8003dee <ai_platform_network_create+0x76>
 8003de0:	4610      	mov	r0, r2
 8003de2:	e7e4      	b.n	8003dae <ai_platform_network_create+0x36>
 8003de4:	2101      	movs	r1, #1
 8003de6:	6019      	str	r1, [r3, #0]
 8003de8:	6819      	ldr	r1, [r3, #0]
 8003dea:	2900      	cmp	r1, #0
 8003dec:	d1fc      	bne.n	8003de8 <ai_platform_network_create+0x70>
 8003dee:	4610      	mov	r0, r2
 8003df0:	f7ff fc94 	bl	800371c <_ai_platform_release_crc>
 8003df4:	4a4a      	ldr	r2, [pc, #296]	; (8003f20 <ai_platform_network_create+0x1a8>)
 8003df6:	6813      	ldr	r3, [r2, #0]
 8003df8:	f023 0301 	bic.w	r3, r3, #1
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	f7ff fc8b 	bl	8003718 <_ai_platform_acquire_crc>
 8003e02:	4b43      	ldr	r3, [pc, #268]	; (8003f10 <ai_platform_network_create+0x198>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e0e:	d00d      	beq.n	8003e2c <ai_platform_network_create+0xb4>
 8003e10:	4b40      	ldr	r3, [pc, #256]	; (8003f14 <ai_platform_network_create+0x19c>)
 8003e12:	2201      	movs	r2, #1
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	2a00      	cmp	r2, #0
 8003e1a:	d1fc      	bne.n	8003e16 <ai_platform_network_create+0x9e>
 8003e1c:	4b41      	ldr	r3, [pc, #260]	; (8003f24 <ai_platform_network_create+0x1ac>)
 8003e1e:	4a42      	ldr	r2, [pc, #264]	; (8003f28 <ai_platform_network_create+0x1b0>)
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b41      	ldr	r3, [pc, #260]	; (8003f2c <ai_platform_network_create+0x1b4>)
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d00e      	beq.n	8003e48 <ai_platform_network_create+0xd0>
 8003e2a:	e7fe      	b.n	8003e2a <ai_platform_network_create+0xb2>
 8003e2c:	4b3a      	ldr	r3, [pc, #232]	; (8003f18 <ai_platform_network_create+0x1a0>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	2a00      	cmp	r2, #0
 8003e36:	d1fc      	bne.n	8003e32 <ai_platform_network_create+0xba>
 8003e38:	4b38      	ldr	r3, [pc, #224]	; (8003f1c <ai_platform_network_create+0x1a4>)
 8003e3a:	4a3b      	ldr	r2, [pc, #236]	; (8003f28 <ai_platform_network_create+0x1b0>)
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4b3a      	ldr	r3, [pc, #232]	; (8003f2c <ai_platform_network_create+0x1b4>)
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d000      	beq.n	8003e48 <ai_platform_network_create+0xd0>
 8003e46:	e7fe      	b.n	8003e46 <ai_platform_network_create+0xce>
 8003e48:	f7ff fc68 	bl	800371c <_ai_platform_release_crc>
 8003e4c:	b1ae      	cbz	r6, 8003e7a <ai_platform_network_create+0x102>
 8003e4e:	4b38      	ldr	r3, [pc, #224]	; (8003f30 <ai_platform_network_create+0x1b8>)
 8003e50:	602b      	str	r3, [r5, #0]
 8003e52:	6035      	str	r5, [r6, #0]
 8003e54:	f000 fc7c 	bl	8004750 <core_init>
 8003e58:	b990      	cbnz	r0, 8003e80 <ai_platform_network_create+0x108>
 8003e5a:	2430      	movs	r4, #48	; 0x30
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	6033      	str	r3, [r6, #0]
 8003e60:	2610      	movs	r6, #16
 8003e62:	464a      	mov	r2, r9
 8003e64:	4641      	mov	r1, r8
 8003e66:	4638      	mov	r0, r7
 8003e68:	f002 fdd6 	bl	8006a18 <ai_version_get>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f364 0307 	bfi	r3, r4, #0, #8
 8003e72:	6468      	str	r0, [r5, #68]	; 0x44
 8003e74:	f366 231f 	bfi	r3, r6, #8, #24
 8003e78:	e79d      	b.n	8003db6 <ai_platform_network_create+0x3e>
 8003e7a:	f241 0310 	movw	r3, #4112	; 0x1010
 8003e7e:	e79a      	b.n	8003db6 <ai_platform_network_create+0x3e>
 8003e80:	4a27      	ldr	r2, [pc, #156]	; (8003f20 <ai_platform_network_create+0x1a8>)
 8003e82:	6813      	ldr	r3, [r2, #0]
 8003e84:	f023 0301 	bic.w	r3, r3, #1
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	f7ff fc45 	bl	8003718 <_ai_platform_acquire_crc>
 8003e8e:	4b20      	ldr	r3, [pc, #128]	; (8003f10 <ai_platform_network_create+0x198>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e9a:	d00d      	beq.n	8003eb8 <ai_platform_network_create+0x140>
 8003e9c:	4b1d      	ldr	r3, [pc, #116]	; (8003f14 <ai_platform_network_create+0x19c>)
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	2a00      	cmp	r2, #0
 8003ea6:	d1fc      	bne.n	8003ea2 <ai_platform_network_create+0x12a>
 8003ea8:	4b1e      	ldr	r3, [pc, #120]	; (8003f24 <ai_platform_network_create+0x1ac>)
 8003eaa:	4a1f      	ldr	r2, [pc, #124]	; (8003f28 <ai_platform_network_create+0x1b0>)
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	4b1e      	ldr	r3, [pc, #120]	; (8003f2c <ai_platform_network_create+0x1b4>)
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d00e      	beq.n	8003ed4 <ai_platform_network_create+0x15c>
 8003eb6:	e7fe      	b.n	8003eb6 <ai_platform_network_create+0x13e>
 8003eb8:	4b17      	ldr	r3, [pc, #92]	; (8003f18 <ai_platform_network_create+0x1a0>)
 8003eba:	2201      	movs	r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	2a00      	cmp	r2, #0
 8003ec2:	d1fc      	bne.n	8003ebe <ai_platform_network_create+0x146>
 8003ec4:	4b15      	ldr	r3, [pc, #84]	; (8003f1c <ai_platform_network_create+0x1a4>)
 8003ec6:	4a18      	ldr	r2, [pc, #96]	; (8003f28 <ai_platform_network_create+0x1b0>)
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	4b17      	ldr	r3, [pc, #92]	; (8003f2c <ai_platform_network_create+0x1b4>)
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d000      	beq.n	8003ed4 <ai_platform_network_create+0x15c>
 8003ed2:	e7fe      	b.n	8003ed2 <ai_platform_network_create+0x15a>
 8003ed4:	f7ff fc22 	bl	800371c <_ai_platform_release_crc>
 8003ed8:	2200      	movs	r2, #0
 8003eda:	4641      	mov	r1, r8
 8003edc:	4638      	mov	r0, r7
 8003ede:	f002 fd9b 	bl	8006a18 <ai_version_get>
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	4604      	mov	r4, r0
 8003ee6:	2105      	movs	r1, #5
 8003ee8:	2001      	movs	r0, #1
 8003eea:	f002 fd95 	bl	8006a18 <ai_version_get>
 8003eee:	4284      	cmp	r4, r0
 8003ef0:	d001      	beq.n	8003ef6 <ai_platform_network_create+0x17e>
 8003ef2:	2401      	movs	r4, #1
 8003ef4:	e7b2      	b.n	8003e5c <ai_platform_network_create+0xe4>
 8003ef6:	a802      	add	r0, sp, #8
 8003ef8:	4b0e      	ldr	r3, [pc, #56]	; (8003f34 <ai_platform_network_create+0x1bc>)
 8003efa:	f840 3d04 	str.w	r3, [r0, #-4]!
 8003efe:	f002 fce7 	bl	80068d0 <ai_check_custom_types>
 8003f02:	b110      	cbz	r0, 8003f0a <ai_platform_network_create+0x192>
 8003f04:	2600      	movs	r6, #0
 8003f06:	4634      	mov	r4, r6
 8003f08:	e7ab      	b.n	8003e62 <ai_platform_network_create+0xea>
 8003f0a:	2402      	movs	r4, #2
 8003f0c:	e7a6      	b.n	8003e5c <ai_platform_network_create+0xe4>
 8003f0e:	bf00      	nop
 8003f10:	e0042000 	.word	0xe0042000
 8003f14:	58024c08 	.word	0x58024c08
 8003f18:	40023008 	.word	0x40023008
 8003f1c:	40023000 	.word	0x40023000
 8003f20:	e0002000 	.word	0xe0002000
 8003f24:	58024c00 	.word	0x58024c00
 8003f28:	f407a5c2 	.word	0xf407a5c2
 8003f2c:	b5e8b5cd 	.word	0xb5e8b5cd
 8003f30:	a1c00100 	.word	0xa1c00100
 8003f34:	84048403 	.word	0x84048403

08003f38 <ai_platform_network_init>:
 8003f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	d04b      	beq.n	8003fd8 <ai_platform_network_init+0xa0>
 8003f40:	4b79      	ldr	r3, [pc, #484]	; (8004128 <ai_platform_network_init+0x1f0>)
 8003f42:	6802      	ldr	r2, [r0, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	4604      	mov	r4, r0
 8003f48:	d146      	bne.n	8003fd8 <ai_platform_network_init+0xa0>
 8003f4a:	4a78      	ldr	r2, [pc, #480]	; (800412c <ai_platform_network_init+0x1f4>)
 8003f4c:	6813      	ldr	r3, [r2, #0]
 8003f4e:	f023 0301 	bic.w	r3, r3, #1
 8003f52:	6013      	str	r3, [r2, #0]
 8003f54:	460e      	mov	r6, r1
 8003f56:	f7ff fbdf 	bl	8003718 <_ai_platform_acquire_crc>
 8003f5a:	4b75      	ldr	r3, [pc, #468]	; (8004130 <ai_platform_network_init+0x1f8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f66:	d00d      	beq.n	8003f84 <ai_platform_network_init+0x4c>
 8003f68:	4b72      	ldr	r3, [pc, #456]	; (8004134 <ai_platform_network_init+0x1fc>)
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	2a00      	cmp	r2, #0
 8003f72:	d1fc      	bne.n	8003f6e <ai_platform_network_init+0x36>
 8003f74:	4b70      	ldr	r3, [pc, #448]	; (8004138 <ai_platform_network_init+0x200>)
 8003f76:	4a71      	ldr	r2, [pc, #452]	; (800413c <ai_platform_network_init+0x204>)
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	4b70      	ldr	r3, [pc, #448]	; (8004140 <ai_platform_network_init+0x208>)
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d00d      	beq.n	8003f9e <ai_platform_network_init+0x66>
 8003f82:	e7fe      	b.n	8003f82 <ai_platform_network_init+0x4a>
 8003f84:	4b6f      	ldr	r3, [pc, #444]	; (8004144 <ai_platform_network_init+0x20c>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	2a00      	cmp	r2, #0
 8003f8e:	d1fc      	bne.n	8003f8a <ai_platform_network_init+0x52>
 8003f90:	4b6d      	ldr	r3, [pc, #436]	; (8004148 <ai_platform_network_init+0x210>)
 8003f92:	4a6a      	ldr	r2, [pc, #424]	; (800413c <ai_platform_network_init+0x204>)
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	4b69      	ldr	r3, [pc, #420]	; (8004140 <ai_platform_network_init+0x208>)
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d11b      	bne.n	8003fd6 <ai_platform_network_init+0x9e>
 8003f9e:	f7ff fbbd 	bl	800371c <_ai_platform_release_crc>
 8003fa2:	2e00      	cmp	r6, #0
 8003fa4:	d034      	beq.n	8004010 <ai_platform_network_init+0xd8>
 8003fa6:	4b69      	ldr	r3, [pc, #420]	; (800414c <ai_platform_network_init+0x214>)
 8003fa8:	6832      	ldr	r2, [r6, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d149      	bne.n	8004042 <ai_platform_network_init+0x10a>
 8003fae:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8003fb2:	6930      	ldr	r0, [r6, #16]
 8003fb4:	89b3      	ldrh	r3, [r6, #12]
 8003fb6:	f8b6 c00e 	ldrh.w	ip, [r6, #14]
 8003fba:	62a0      	str	r0, [r4, #40]	; 0x28
 8003fbc:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8003fc0:	2203      	movs	r2, #3
 8003fc2:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8003fc6:	84a3      	strh	r3, [r4, #36]	; 0x24
 8003fc8:	60e2      	str	r2, [r4, #12]
 8003fca:	4620      	mov	r0, r4
 8003fcc:	f002 fcaa 	bl	8006924 <ai_layers_init_all>
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fd6:	e7fe      	b.n	8003fd6 <ai_platform_network_init+0x9e>
 8003fd8:	4a54      	ldr	r2, [pc, #336]	; (800412c <ai_platform_network_init+0x1f4>)
 8003fda:	6813      	ldr	r3, [r2, #0]
 8003fdc:	f023 0301 	bic.w	r3, r3, #1
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	f7ff fb99 	bl	8003718 <_ai_platform_acquire_crc>
 8003fe6:	4b52      	ldr	r3, [pc, #328]	; (8004130 <ai_platform_network_init+0x1f8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff2:	d015      	beq.n	8004020 <ai_platform_network_init+0xe8>
 8003ff4:	4b4f      	ldr	r3, [pc, #316]	; (8004134 <ai_platform_network_init+0x1fc>)
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	2a00      	cmp	r2, #0
 8003ffe:	d1fc      	bne.n	8003ffa <ai_platform_network_init+0xc2>
 8004000:	4b4d      	ldr	r3, [pc, #308]	; (8004138 <ai_platform_network_init+0x200>)
 8004002:	4a4e      	ldr	r2, [pc, #312]	; (800413c <ai_platform_network_init+0x204>)
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	4b4d      	ldr	r3, [pc, #308]	; (8004140 <ai_platform_network_init+0x208>)
 800400a:	429a      	cmp	r2, r3
 800400c:	d015      	beq.n	800403a <ai_platform_network_init+0x102>
 800400e:	e7fe      	b.n	800400e <ai_platform_network_init+0xd6>
 8004010:	f104 0010 	add.w	r0, r4, #16
 8004014:	2211      	movs	r2, #17
 8004016:	2110      	movs	r1, #16
 8004018:	4634      	mov	r4, r6
 800401a:	f000 fba1 	bl	8004760 <core_set_error>
 800401e:	e7d7      	b.n	8003fd0 <ai_platform_network_init+0x98>
 8004020:	4b48      	ldr	r3, [pc, #288]	; (8004144 <ai_platform_network_init+0x20c>)
 8004022:	2201      	movs	r2, #1
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	2a00      	cmp	r2, #0
 800402a:	d1fc      	bne.n	8004026 <ai_platform_network_init+0xee>
 800402c:	4b46      	ldr	r3, [pc, #280]	; (8004148 <ai_platform_network_init+0x210>)
 800402e:	4a43      	ldr	r2, [pc, #268]	; (800413c <ai_platform_network_init+0x204>)
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	4b42      	ldr	r3, [pc, #264]	; (8004140 <ai_platform_network_init+0x208>)
 8004036:	429a      	cmp	r2, r3
 8004038:	d16d      	bne.n	8004116 <ai_platform_network_init+0x1de>
 800403a:	f7ff fb6f 	bl	800371c <_ai_platform_release_crc>
 800403e:	2400      	movs	r4, #0
 8004040:	e7c6      	b.n	8003fd0 <ai_platform_network_init+0x98>
 8004042:	4630      	mov	r0, r6
 8004044:	2101      	movs	r1, #1
 8004046:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800404a:	f7ff fb19 	bl	8003680 <ai_buffer_get_size>
 800404e:	4635      	mov	r5, r6
 8004050:	f106 071c 	add.w	r7, r6, #28
 8004054:	2101      	movs	r1, #1
 8004056:	4606      	mov	r6, r0
 8004058:	4638      	mov	r0, r7
 800405a:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800405e:	f7ff fb0f 	bl	8003680 <ai_buffer_get_size>
 8004062:	2e00      	cmp	r6, #0
 8004064:	bf0a      	itet	eq
 8004066:	46b6      	moveq	lr, r6
 8004068:	f04f 0e01 	movne.w	lr, #1
 800406c:	4635      	moveq	r5, r6
 800406e:	2800      	cmp	r0, #0
 8004070:	d14b      	bne.n	800410a <ai_platform_network_init+0x1d2>
 8004072:	4607      	mov	r7, r0
 8004074:	4684      	mov	ip, r0
 8004076:	f1b8 0f00 	cmp.w	r8, #0
 800407a:	d023      	beq.n	80040c4 <ai_platform_network_init+0x18c>
 800407c:	8be3      	ldrh	r3, [r4, #30]
 800407e:	4573      	cmp	r3, lr
 8004080:	d207      	bcs.n	8004092 <ai_platform_network_init+0x15a>
 8004082:	f104 0010 	add.w	r0, r4, #16
 8004086:	2212      	movs	r2, #18
 8004088:	2116      	movs	r1, #22
 800408a:	f000 fb69 	bl	8004760 <core_set_error>
 800408e:	2400      	movs	r4, #0
 8004090:	e79e      	b.n	8003fd0 <ai_platform_network_init+0x98>
 8004092:	f1be 0f00 	cmp.w	lr, #0
 8004096:	d006      	beq.n	80040a6 <ai_platform_network_init+0x16e>
 8004098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800409a:	6a26      	ldr	r6, [r4, #32]
 800409c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800409e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80040a2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80040a6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80040a8:	f8a4 e01e 	strh.w	lr, [r4, #30]
 80040ac:	2600      	movs	r6, #0
 80040ae:	4563      	cmp	r3, ip
 80040b0:	83a6      	strh	r6, [r4, #28]
 80040b2:	d211      	bcs.n	80040d8 <ai_platform_network_init+0x1a0>
 80040b4:	f104 0010 	add.w	r0, r4, #16
 80040b8:	2213      	movs	r2, #19
 80040ba:	2116      	movs	r1, #22
 80040bc:	f000 fb50 	bl	8004760 <core_set_error>
 80040c0:	4634      	mov	r4, r6
 80040c2:	e785      	b.n	8003fd0 <ai_platform_network_init+0x98>
 80040c4:	2e00      	cmp	r6, #0
 80040c6:	d0d9      	beq.n	800407c <ai_platform_network_init+0x144>
 80040c8:	f104 0010 	add.w	r0, r4, #16
 80040cc:	2212      	movs	r2, #18
 80040ce:	2110      	movs	r1, #16
 80040d0:	4644      	mov	r4, r8
 80040d2:	f000 fb45 	bl	8004760 <core_set_error>
 80040d6:	e77b      	b.n	8003fd0 <ai_platform_network_init+0x98>
 80040d8:	f1bc 0f00 	cmp.w	ip, #0
 80040dc:	d013      	beq.n	8004106 <ai_platform_network_init+0x1ce>
 80040de:	f04f 081c 	mov.w	r8, #28
 80040e2:	fb08 f80c 	mul.w	r8, r8, ip
 80040e6:	eb07 0e06 	add.w	lr, r7, r6
 80040ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80040ee:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80040f0:	4435      	add	r5, r6
 80040f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040f4:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80040f8:	361c      	adds	r6, #28
 80040fa:	4546      	cmp	r6, r8
 80040fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004100:	d1f1      	bne.n	80040e6 <ai_platform_network_init+0x1ae>
 8004102:	2300      	movs	r3, #0
 8004104:	e75c      	b.n	8003fc0 <ai_platform_network_init+0x88>
 8004106:	4663      	mov	r3, ip
 8004108:	e75a      	b.n	8003fc0 <ai_platform_network_init+0x88>
 800410a:	f1b9 0f00 	cmp.w	r9, #0
 800410e:	d003      	beq.n	8004118 <ai_platform_network_init+0x1e0>
 8004110:	f04f 0c01 	mov.w	ip, #1
 8004114:	e7af      	b.n	8004076 <ai_platform_network_init+0x13e>
 8004116:	e7fe      	b.n	8004116 <ai_platform_network_init+0x1de>
 8004118:	f104 0010 	add.w	r0, r4, #16
 800411c:	2213      	movs	r2, #19
 800411e:	2110      	movs	r1, #16
 8004120:	464c      	mov	r4, r9
 8004122:	f000 fb1d 	bl	8004760 <core_set_error>
 8004126:	e753      	b.n	8003fd0 <ai_platform_network_init+0x98>
 8004128:	a1c00100 	.word	0xa1c00100
 800412c:	e0002000 	.word	0xe0002000
 8004130:	e0042000 	.word	0xe0042000
 8004134:	58024c08 	.word	0x58024c08
 8004138:	58024c00 	.word	0x58024c00
 800413c:	f407a5c2 	.word	0xf407a5c2
 8004140:	b5e8b5cd 	.word	0xb5e8b5cd
 8004144:	40023008 	.word	0x40023008
 8004148:	40023000 	.word	0x40023000
 800414c:	a1facade 	.word	0xa1facade

08004150 <ai_platform_network_post_init>:
 8004150:	b538      	push	{r3, r4, r5, lr}
 8004152:	b120      	cbz	r0, 800415e <ai_platform_network_post_init+0xe>
 8004154:	4b3f      	ldr	r3, [pc, #252]	; (8004254 <ai_platform_network_post_init+0x104>)
 8004156:	6802      	ldr	r2, [r0, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	4604      	mov	r4, r0
 800415c:	d02d      	beq.n	80041ba <ai_platform_network_post_init+0x6a>
 800415e:	4a3e      	ldr	r2, [pc, #248]	; (8004258 <ai_platform_network_post_init+0x108>)
 8004160:	6813      	ldr	r3, [r2, #0]
 8004162:	f023 0301 	bic.w	r3, r3, #1
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	f7ff fad6 	bl	8003718 <_ai_platform_acquire_crc>
 800416c:	4b3b      	ldr	r3, [pc, #236]	; (800425c <ai_platform_network_post_init+0x10c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004178:	d00d      	beq.n	8004196 <ai_platform_network_post_init+0x46>
 800417a:	4b39      	ldr	r3, [pc, #228]	; (8004260 <ai_platform_network_post_init+0x110>)
 800417c:	2201      	movs	r2, #1
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	2a00      	cmp	r2, #0
 8004184:	d1fc      	bne.n	8004180 <ai_platform_network_post_init+0x30>
 8004186:	4b37      	ldr	r3, [pc, #220]	; (8004264 <ai_platform_network_post_init+0x114>)
 8004188:	4a37      	ldr	r2, [pc, #220]	; (8004268 <ai_platform_network_post_init+0x118>)
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	4b37      	ldr	r3, [pc, #220]	; (800426c <ai_platform_network_post_init+0x11c>)
 8004190:	429a      	cmp	r2, r3
 8004192:	d00d      	beq.n	80041b0 <ai_platform_network_post_init+0x60>
 8004194:	e7fe      	b.n	8004194 <ai_platform_network_post_init+0x44>
 8004196:	4b36      	ldr	r3, [pc, #216]	; (8004270 <ai_platform_network_post_init+0x120>)
 8004198:	2201      	movs	r2, #1
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	2a00      	cmp	r2, #0
 80041a0:	d1fc      	bne.n	800419c <ai_platform_network_post_init+0x4c>
 80041a2:	4b34      	ldr	r3, [pc, #208]	; (8004274 <ai_platform_network_post_init+0x124>)
 80041a4:	4a30      	ldr	r2, [pc, #192]	; (8004268 <ai_platform_network_post_init+0x118>)
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	4b30      	ldr	r3, [pc, #192]	; (800426c <ai_platform_network_post_init+0x11c>)
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d103      	bne.n	80041b8 <ai_platform_network_post_init+0x68>
 80041b0:	f7ff fab4 	bl	800371c <_ai_platform_release_crc>
 80041b4:	2000      	movs	r0, #0
 80041b6:	bd38      	pop	{r3, r4, r5, pc}
 80041b8:	e7fe      	b.n	80041b8 <ai_platform_network_post_init+0x68>
 80041ba:	4a27      	ldr	r2, [pc, #156]	; (8004258 <ai_platform_network_post_init+0x108>)
 80041bc:	6813      	ldr	r3, [r2, #0]
 80041be:	f023 0301 	bic.w	r3, r3, #1
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	f7ff faa8 	bl	8003718 <_ai_platform_acquire_crc>
 80041c8:	4b24      	ldr	r3, [pc, #144]	; (800425c <ai_platform_network_post_init+0x10c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d4:	d00d      	beq.n	80041f2 <ai_platform_network_post_init+0xa2>
 80041d6:	4b22      	ldr	r3, [pc, #136]	; (8004260 <ai_platform_network_post_init+0x110>)
 80041d8:	2201      	movs	r2, #1
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	2a00      	cmp	r2, #0
 80041e0:	d1fc      	bne.n	80041dc <ai_platform_network_post_init+0x8c>
 80041e2:	4b20      	ldr	r3, [pc, #128]	; (8004264 <ai_platform_network_post_init+0x114>)
 80041e4:	4a20      	ldr	r2, [pc, #128]	; (8004268 <ai_platform_network_post_init+0x118>)
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	4b20      	ldr	r3, [pc, #128]	; (800426c <ai_platform_network_post_init+0x11c>)
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d00e      	beq.n	800420e <ai_platform_network_post_init+0xbe>
 80041f0:	e7fe      	b.n	80041f0 <ai_platform_network_post_init+0xa0>
 80041f2:	4b1f      	ldr	r3, [pc, #124]	; (8004270 <ai_platform_network_post_init+0x120>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	2a00      	cmp	r2, #0
 80041fc:	d1fc      	bne.n	80041f8 <ai_platform_network_post_init+0xa8>
 80041fe:	4b1d      	ldr	r3, [pc, #116]	; (8004274 <ai_platform_network_post_init+0x124>)
 8004200:	4a19      	ldr	r2, [pc, #100]	; (8004268 <ai_platform_network_post_init+0x118>)
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	4b19      	ldr	r3, [pc, #100]	; (800426c <ai_platform_network_post_init+0x11c>)
 8004208:	429a      	cmp	r2, r3
 800420a:	d000      	beq.n	800420e <ai_platform_network_post_init+0xbe>
 800420c:	e7fe      	b.n	800420c <ai_platform_network_post_init+0xbc>
 800420e:	f7ff fa85 	bl	800371c <_ai_platform_release_crc>
 8004212:	68e3      	ldr	r3, [r4, #12]
 8004214:	f013 0502 	ands.w	r5, r3, #2
 8004218:	d011      	beq.n	800423e <ai_platform_network_post_init+0xee>
 800421a:	4620      	mov	r0, r4
 800421c:	f002 fb96 	bl	800694c <ai_layers_post_init_all>
 8004220:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004222:	b1a3      	cbz	r3, 800424e <ai_platform_network_post_init+0xfe>
 8004224:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004226:	b195      	cbz	r5, 800424e <ai_platform_network_post_init+0xfe>
 8004228:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800422a:	4629      	mov	r1, r5
 800422c:	2000      	movs	r0, #0
 800422e:	4798      	blx	r3
 8004230:	692b      	ldr	r3, [r5, #16]
 8004232:	42ab      	cmp	r3, r5
 8004234:	d00b      	beq.n	800424e <ai_platform_network_post_init+0xfe>
 8004236:	461d      	mov	r5, r3
 8004238:	b14b      	cbz	r3, 800424e <ai_platform_network_post_init+0xfe>
 800423a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800423c:	e7f4      	b.n	8004228 <ai_platform_network_post_init+0xd8>
 800423e:	f104 0010 	add.w	r0, r4, #16
 8004242:	2210      	movs	r2, #16
 8004244:	2111      	movs	r1, #17
 8004246:	f000 fa8b 	bl	8004760 <core_set_error>
 800424a:	4628      	mov	r0, r5
 800424c:	bd38      	pop	{r3, r4, r5, pc}
 800424e:	2001      	movs	r0, #1
 8004250:	bd38      	pop	{r3, r4, r5, pc}
 8004252:	bf00      	nop
 8004254:	a1c00100 	.word	0xa1c00100
 8004258:	e0002000 	.word	0xe0002000
 800425c:	e0042000 	.word	0xe0042000
 8004260:	58024c08 	.word	0x58024c08
 8004264:	58024c00 	.word	0x58024c00
 8004268:	f407a5c2 	.word	0xf407a5c2
 800426c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004270:	40023008 	.word	0x40023008
 8004274:	40023000 	.word	0x40023000

08004278 <ai_platform_network_process>:
 8004278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800427c:	b085      	sub	sp, #20
 800427e:	460d      	mov	r5, r1
 8004280:	9202      	str	r2, [sp, #8]
 8004282:	4604      	mov	r4, r0
 8004284:	b120      	cbz	r0, 8004290 <ai_platform_network_process+0x18>
 8004286:	4b73      	ldr	r3, [pc, #460]	; (8004454 <ai_platform_network_process+0x1dc>)
 8004288:	6802      	ldr	r2, [r0, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	bf18      	it	ne
 800428e:	2400      	movne	r4, #0
 8004290:	4a71      	ldr	r2, [pc, #452]	; (8004458 <ai_platform_network_process+0x1e0>)
 8004292:	6813      	ldr	r3, [r2, #0]
 8004294:	f023 0301 	bic.w	r3, r3, #1
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	f7ff fa3d 	bl	8003718 <_ai_platform_acquire_crc>
 800429e:	4b6f      	ldr	r3, [pc, #444]	; (800445c <ai_platform_network_process+0x1e4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042aa:	d00d      	beq.n	80042c8 <ai_platform_network_process+0x50>
 80042ac:	4b6c      	ldr	r3, [pc, #432]	; (8004460 <ai_platform_network_process+0x1e8>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	2a00      	cmp	r2, #0
 80042b6:	d1fc      	bne.n	80042b2 <ai_platform_network_process+0x3a>
 80042b8:	4b6a      	ldr	r3, [pc, #424]	; (8004464 <ai_platform_network_process+0x1ec>)
 80042ba:	4a6b      	ldr	r2, [pc, #428]	; (8004468 <ai_platform_network_process+0x1f0>)
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	4b6a      	ldr	r3, [pc, #424]	; (800446c <ai_platform_network_process+0x1f4>)
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d00e      	beq.n	80042e4 <ai_platform_network_process+0x6c>
 80042c6:	e7fe      	b.n	80042c6 <ai_platform_network_process+0x4e>
 80042c8:	4b69      	ldr	r3, [pc, #420]	; (8004470 <ai_platform_network_process+0x1f8>)
 80042ca:	2201      	movs	r2, #1
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	2a00      	cmp	r2, #0
 80042d2:	d1fc      	bne.n	80042ce <ai_platform_network_process+0x56>
 80042d4:	4b67      	ldr	r3, [pc, #412]	; (8004474 <ai_platform_network_process+0x1fc>)
 80042d6:	4a64      	ldr	r2, [pc, #400]	; (8004468 <ai_platform_network_process+0x1f0>)
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	4b63      	ldr	r3, [pc, #396]	; (800446c <ai_platform_network_process+0x1f4>)
 80042de:	429a      	cmp	r2, r3
 80042e0:	d000      	beq.n	80042e4 <ai_platform_network_process+0x6c>
 80042e2:	e7fe      	b.n	80042e2 <ai_platform_network_process+0x6a>
 80042e4:	f7ff fa1a 	bl	800371c <_ai_platform_release_crc>
 80042e8:	2c00      	cmp	r4, #0
 80042ea:	f000 8089 	beq.w	8004400 <ai_platform_network_process+0x188>
 80042ee:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 80042f0:	2f00      	cmp	r7, #0
 80042f2:	f040 822b 	bne.w	800474c <ai_platform_network_process+0x4d4>
 80042f6:	68e3      	ldr	r3, [r4, #12]
 80042f8:	f003 0303 	and.w	r3, r3, #3
 80042fc:	2600      	movs	r6, #0
 80042fe:	2b03      	cmp	r3, #3
 8004300:	6166      	str	r6, [r4, #20]
 8004302:	f040 821b 	bne.w	800473c <ai_platform_network_process+0x4c4>
 8004306:	2d00      	cmp	r5, #0
 8004308:	f000 809c 	beq.w	8004444 <ai_platform_network_process+0x1cc>
 800430c:	2f00      	cmp	r7, #0
 800430e:	f000 8099 	beq.w	8004444 <ai_platform_network_process+0x1cc>
 8004312:	883b      	ldrh	r3, [r7, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 8095 	beq.w	8004444 <ai_platform_network_process+0x1cc>
 800431a:	69aa      	ldr	r2, [r5, #24]
 800431c:	9401      	str	r4, [sp, #4]
 800431e:	f8d2 8000 	ldr.w	r8, [r2]
 8004322:	429e      	cmp	r6, r3
 8004324:	f080 80a8 	bcs.w	8004478 <ai_platform_network_process+0x200>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 80a4 	beq.w	8004478 <ai_platform_network_process+0x200>
 8004330:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8004334:	2c00      	cmp	r4, #0
 8004336:	f000 809f 	beq.w	8004478 <ai_platform_network_process+0x200>
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f8d3 b000 	ldr.w	fp, [r3]
 8004340:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8004344:	eb1b 0a09 	adds.w	sl, fp, r9
 8004348:	d07b      	beq.n	8004442 <ai_platform_network_process+0x1ca>
 800434a:	69a3      	ldr	r3, [r4, #24]
 800434c:	2101      	movs	r1, #1
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	9303      	str	r3, [sp, #12]
 8004352:	4628      	mov	r0, r5
 8004354:	f7ff f994 	bl	8003680 <ai_buffer_get_size>
 8004358:	9b03      	ldr	r3, [sp, #12]
 800435a:	4283      	cmp	r3, r0
 800435c:	d368      	bcc.n	8004430 <ai_platform_network_process+0x1b8>
 800435e:	68e0      	ldr	r0, [r4, #12]
 8004360:	69a9      	ldr	r1, [r5, #24]
 8004362:	68c2      	ldr	r2, [r0, #12]
 8004364:	68cb      	ldr	r3, [r1, #12]
 8004366:	429a      	cmp	r2, r3
 8004368:	d162      	bne.n	8004430 <ai_platform_network_process+0x1b8>
 800436a:	6882      	ldr	r2, [r0, #8]
 800436c:	688b      	ldr	r3, [r1, #8]
 800436e:	429a      	cmp	r2, r3
 8004370:	d15e      	bne.n	8004430 <ai_platform_network_process+0x1b8>
 8004372:	6842      	ldr	r2, [r0, #4]
 8004374:	684b      	ldr	r3, [r1, #4]
 8004376:	429a      	cmp	r2, r3
 8004378:	d15a      	bne.n	8004430 <ai_platform_network_process+0x1b8>
 800437a:	69a3      	ldr	r3, [r4, #24]
 800437c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004380:	f002 fbde 	bl	8006b40 <ai_array_get_data_byte_size>
 8004384:	9003      	str	r0, [sp, #12]
 8004386:	4620      	mov	r0, r4
 8004388:	f002 fb4c 	bl	8006a24 <get_tensor_byte_size>
 800438c:	9b03      	ldr	r3, [sp, #12]
 800438e:	4283      	cmp	r3, r0
 8004390:	d34e      	bcc.n	8004430 <ai_platform_network_process+0x1b8>
 8004392:	69a3      	ldr	r3, [r4, #24]
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	f002 fb59 	bl	8006a4c <ai_array_to_buffer_fmt>
 800439a:	682b      	ldr	r3, [r5, #0]
 800439c:	4043      	eors	r3, r0
 800439e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80043a2:	d13c      	bne.n	800441e <ai_platform_network_process+0x1a6>
 80043a4:	686b      	ldr	r3, [r5, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d04b      	beq.n	8004442 <ai_platform_network_process+0x1ca>
 80043aa:	69ab      	ldr	r3, [r5, #24]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	b362      	cbz	r2, 800440a <ai_platform_network_process+0x192>
 80043b0:	4620      	mov	r0, r4
 80043b2:	9203      	str	r2, [sp, #12]
 80043b4:	f002 fb36 	bl	8006a24 <get_tensor_byte_size>
 80043b8:	f8ca 0008 	str.w	r0, [sl, #8]
 80043bc:	69ab      	ldr	r3, [r5, #24]
 80043be:	9a03      	ldr	r2, [sp, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	fb03 f000 	mul.w	r0, r3, r0
 80043c6:	f8ca 000c 	str.w	r0, [sl, #12]
 80043ca:	6869      	ldr	r1, [r5, #4]
 80043cc:	f8ca 1004 	str.w	r1, [sl, #4]
 80043d0:	686b      	ldr	r3, [r5, #4]
 80043d2:	4403      	add	r3, r0
 80043d4:	f84b 3009 	str.w	r3, [fp, r9]
 80043d8:	69a0      	ldr	r0, [r4, #24]
 80043da:	6803      	ldr	r3, [r0, #0]
 80043dc:	4590      	cmp	r8, r2
 80043de:	bf38      	it	cc
 80043e0:	4690      	movcc	r8, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	d408      	bmi.n	80043f8 <ai_platform_network_process+0x180>
 80043e6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80043ea:	1a9b      	subs	r3, r3, r2
 80043ec:	4419      	add	r1, r3
 80043ee:	6081      	str	r1, [r0, #8]
 80043f0:	69a3      	ldr	r3, [r4, #24]
 80043f2:	f8da 2004 	ldr.w	r2, [sl, #4]
 80043f6:	60da      	str	r2, [r3, #12]
 80043f8:	883b      	ldrh	r3, [r7, #0]
 80043fa:	3601      	adds	r6, #1
 80043fc:	351c      	adds	r5, #28
 80043fe:	e790      	b.n	8004322 <ai_platform_network_process+0xaa>
 8004400:	4623      	mov	r3, r4
 8004402:	4618      	mov	r0, r3
 8004404:	b005      	add	sp, #20
 8004406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800440a:	9c01      	ldr	r4, [sp, #4]
 800440c:	4692      	mov	sl, r2
 800440e:	f104 0010 	add.w	r0, r4, #16
 8004412:	2221      	movs	r2, #33	; 0x21
 8004414:	2112      	movs	r1, #18
 8004416:	f000 f9a3 	bl	8004760 <core_set_error>
 800441a:	4653      	mov	r3, sl
 800441c:	e7f1      	b.n	8004402 <ai_platform_network_process+0x18a>
 800441e:	9c01      	ldr	r4, [sp, #4]
 8004420:	2219      	movs	r2, #25
 8004422:	f104 0010 	add.w	r0, r4, #16
 8004426:	2112      	movs	r1, #18
 8004428:	f000 f99a 	bl	8004760 <core_set_error>
 800442c:	2300      	movs	r3, #0
 800442e:	e7e8      	b.n	8004402 <ai_platform_network_process+0x18a>
 8004430:	9c01      	ldr	r4, [sp, #4]
 8004432:	2218      	movs	r2, #24
 8004434:	f104 0010 	add.w	r0, r4, #16
 8004438:	2112      	movs	r1, #18
 800443a:	f000 f991 	bl	8004760 <core_set_error>
 800443e:	2300      	movs	r3, #0
 8004440:	e7df      	b.n	8004402 <ai_platform_network_process+0x18a>
 8004442:	9c01      	ldr	r4, [sp, #4]
 8004444:	f104 0010 	add.w	r0, r4, #16
 8004448:	2217      	movs	r2, #23
 800444a:	2112      	movs	r1, #18
 800444c:	f000 f988 	bl	8004760 <core_set_error>
 8004450:	2300      	movs	r3, #0
 8004452:	e7d6      	b.n	8004402 <ai_platform_network_process+0x18a>
 8004454:	a1c00100 	.word	0xa1c00100
 8004458:	e0002000 	.word	0xe0002000
 800445c:	e0042000 	.word	0xe0042000
 8004460:	58024c08 	.word	0x58024c08
 8004464:	58024c00 	.word	0x58024c00
 8004468:	f407a5c2 	.word	0xf407a5c2
 800446c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004470:	40023008 	.word	0x40023008
 8004474:	40023000 	.word	0x40023000
 8004478:	9c01      	ldr	r4, [sp, #4]
 800447a:	9a02      	ldr	r2, [sp, #8]
 800447c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800447e:	2a00      	cmp	r2, #0
 8004480:	f000 80ab 	beq.w	80045da <ai_platform_network_process+0x362>
 8004484:	2b01      	cmp	r3, #1
 8004486:	f240 809e 	bls.w	80045c6 <ai_platform_network_process+0x34e>
 800448a:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 800448e:	f119 0f0c 	cmn.w	r9, #12
 8004492:	f000 8098 	beq.w	80045c6 <ai_platform_network_process+0x34e>
 8004496:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 8093 	beq.w	80045c6 <ai_platform_network_process+0x34e>
 80044a0:	9d02      	ldr	r5, [sp, #8]
 80044a2:	9401      	str	r4, [sp, #4]
 80044a4:	2700      	movs	r7, #0
 80044a6:	429f      	cmp	r7, r3
 80044a8:	f080 8095 	bcs.w	80045d6 <ai_platform_network_process+0x35e>
 80044ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 8090 	beq.w	80045d6 <ai_platform_network_process+0x35e>
 80044b6:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80044ba:	2c00      	cmp	r4, #0
 80044bc:	f000 808b 	beq.w	80045d6 <ai_platform_network_process+0x35e>
 80044c0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80044c4:	f8d3 b000 	ldr.w	fp, [r3]
 80044c8:	013e      	lsls	r6, r7, #4
 80044ca:	eb1b 0a06 	adds.w	sl, fp, r6
 80044ce:	f000 812c 	beq.w	800472a <ai_platform_network_process+0x4b2>
 80044d2:	69a3      	ldr	r3, [r4, #24]
 80044d4:	2101      	movs	r1, #1
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	9302      	str	r3, [sp, #8]
 80044da:	4628      	mov	r0, r5
 80044dc:	f7ff f8d0 	bl	8003680 <ai_buffer_get_size>
 80044e0:	9b02      	ldr	r3, [sp, #8]
 80044e2:	4283      	cmp	r3, r0
 80044e4:	d36e      	bcc.n	80045c4 <ai_platform_network_process+0x34c>
 80044e6:	68e0      	ldr	r0, [r4, #12]
 80044e8:	69a9      	ldr	r1, [r5, #24]
 80044ea:	68c2      	ldr	r2, [r0, #12]
 80044ec:	68cb      	ldr	r3, [r1, #12]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d168      	bne.n	80045c4 <ai_platform_network_process+0x34c>
 80044f2:	6882      	ldr	r2, [r0, #8]
 80044f4:	688b      	ldr	r3, [r1, #8]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d164      	bne.n	80045c4 <ai_platform_network_process+0x34c>
 80044fa:	6842      	ldr	r2, [r0, #4]
 80044fc:	684b      	ldr	r3, [r1, #4]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d160      	bne.n	80045c4 <ai_platform_network_process+0x34c>
 8004502:	69a3      	ldr	r3, [r4, #24]
 8004504:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004508:	f002 fb1a 	bl	8006b40 <ai_array_get_data_byte_size>
 800450c:	9002      	str	r0, [sp, #8]
 800450e:	4620      	mov	r0, r4
 8004510:	f002 fa88 	bl	8006a24 <get_tensor_byte_size>
 8004514:	9b02      	ldr	r3, [sp, #8]
 8004516:	4283      	cmp	r3, r0
 8004518:	d354      	bcc.n	80045c4 <ai_platform_network_process+0x34c>
 800451a:	69a3      	ldr	r3, [r4, #24]
 800451c:	6818      	ldr	r0, [r3, #0]
 800451e:	f002 fa95 	bl	8006a4c <ai_array_to_buffer_fmt>
 8004522:	682b      	ldr	r3, [r5, #0]
 8004524:	4043      	eors	r3, r0
 8004526:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800452a:	d142      	bne.n	80045b2 <ai_platform_network_process+0x33a>
 800452c:	686b      	ldr	r3, [r5, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d035      	beq.n	800459e <ai_platform_network_process+0x326>
 8004532:	69ab      	ldr	r3, [r5, #24]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	b342      	cbz	r2, 800458a <ai_platform_network_process+0x312>
 8004538:	4620      	mov	r0, r4
 800453a:	9202      	str	r2, [sp, #8]
 800453c:	f002 fa72 	bl	8006a24 <get_tensor_byte_size>
 8004540:	f8ca 0008 	str.w	r0, [sl, #8]
 8004544:	69ab      	ldr	r3, [r5, #24]
 8004546:	9a02      	ldr	r2, [sp, #8]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	fb03 f000 	mul.w	r0, r3, r0
 800454e:	f8ca 000c 	str.w	r0, [sl, #12]
 8004552:	6869      	ldr	r1, [r5, #4]
 8004554:	f8ca 1004 	str.w	r1, [sl, #4]
 8004558:	686b      	ldr	r3, [r5, #4]
 800455a:	4403      	add	r3, r0
 800455c:	f84b 3006 	str.w	r3, [fp, r6]
 8004560:	69a0      	ldr	r0, [r4, #24]
 8004562:	6803      	ldr	r3, [r0, #0]
 8004564:	4590      	cmp	r8, r2
 8004566:	bf38      	it	cc
 8004568:	4690      	movcc	r8, r2
 800456a:	009e      	lsls	r6, r3, #2
 800456c:	d408      	bmi.n	8004580 <ai_platform_network_process+0x308>
 800456e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8004572:	1a9b      	subs	r3, r3, r2
 8004574:	4419      	add	r1, r3
 8004576:	6081      	str	r1, [r0, #8]
 8004578:	69a3      	ldr	r3, [r4, #24]
 800457a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800457e:	60da      	str	r2, [r3, #12]
 8004580:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004584:	3701      	adds	r7, #1
 8004586:	351c      	adds	r5, #28
 8004588:	e78d      	b.n	80044a6 <ai_platform_network_process+0x22e>
 800458a:	9c01      	ldr	r4, [sp, #4]
 800458c:	4692      	mov	sl, r2
 800458e:	f104 0010 	add.w	r0, r4, #16
 8004592:	2221      	movs	r2, #33	; 0x21
 8004594:	2113      	movs	r1, #19
 8004596:	f000 f8e3 	bl	8004760 <core_set_error>
 800459a:	4653      	mov	r3, sl
 800459c:	e731      	b.n	8004402 <ai_platform_network_process+0x18a>
 800459e:	9c01      	ldr	r4, [sp, #4]
 80045a0:	469a      	mov	sl, r3
 80045a2:	f104 0010 	add.w	r0, r4, #16
 80045a6:	2217      	movs	r2, #23
 80045a8:	2113      	movs	r1, #19
 80045aa:	f000 f8d9 	bl	8004760 <core_set_error>
 80045ae:	4653      	mov	r3, sl
 80045b0:	e727      	b.n	8004402 <ai_platform_network_process+0x18a>
 80045b2:	9c01      	ldr	r4, [sp, #4]
 80045b4:	2219      	movs	r2, #25
 80045b6:	f104 0010 	add.w	r0, r4, #16
 80045ba:	2113      	movs	r1, #19
 80045bc:	f000 f8d0 	bl	8004760 <core_set_error>
 80045c0:	2300      	movs	r3, #0
 80045c2:	e71e      	b.n	8004402 <ai_platform_network_process+0x18a>
 80045c4:	9c01      	ldr	r4, [sp, #4]
 80045c6:	f104 0010 	add.w	r0, r4, #16
 80045ca:	2218      	movs	r2, #24
 80045cc:	2113      	movs	r1, #19
 80045ce:	f000 f8c7 	bl	8004760 <core_set_error>
 80045d2:	2300      	movs	r3, #0
 80045d4:	e715      	b.n	8004402 <ai_platform_network_process+0x18a>
 80045d6:	9c01      	ldr	r4, [sp, #4]
 80045d8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80045da:	f8a4 8014 	strh.w	r8, [r4, #20]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 80a0 	beq.w	8004724 <ai_platform_network_process+0x4ac>
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80045e8:	f240 809a 	bls.w	8004720 <ai_platform_network_process+0x4a8>
 80045ec:	f105 070c 	add.w	r7, r5, #12
 80045f0:	8ae3      	ldrh	r3, [r4, #22]
 80045f2:	8aa2      	ldrh	r2, [r4, #20]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	f67f af04 	bls.w	8004402 <ai_platform_network_process+0x18a>
 80045fa:	46a3      	mov	fp, r4
 80045fc:	2d00      	cmp	r5, #0
 80045fe:	d036      	beq.n	800466e <ai_platform_network_process+0x3f6>
 8004600:	882b      	ldrh	r3, [r5, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d033      	beq.n	800466e <ai_platform_network_process+0x3f6>
 8004606:	686b      	ldr	r3, [r5, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d030      	beq.n	800466e <ai_platform_network_process+0x3f6>
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f04f 0800 	mov.w	r8, #0
 8004612:	b9db      	cbnz	r3, 800464c <ai_platform_network_process+0x3d4>
 8004614:	e02b      	b.n	800466e <ai_platform_network_process+0x3f6>
 8004616:	68d4      	ldr	r4, [r2, #12]
 8004618:	1b00      	subs	r0, r0, r4
 800461a:	4401      	add	r1, r0
 800461c:	6091      	str	r1, [r2, #8]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	6872      	ldr	r2, [r6, #4]
 8004622:	60da      	str	r2, [r3, #12]
 8004624:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8004628:	f85a 2009 	ldr.w	r2, [sl, r9]
 800462c:	440b      	add	r3, r1
 800462e:	4293      	cmp	r3, r2
 8004630:	bf24      	itt	cs
 8004632:	68f3      	ldrcs	r3, [r6, #12]
 8004634:	1ad3      	subcs	r3, r2, r3
 8004636:	6073      	str	r3, [r6, #4]
 8004638:	882b      	ldrh	r3, [r5, #0]
 800463a:	f108 0801 	add.w	r8, r8, #1
 800463e:	4598      	cmp	r8, r3
 8004640:	d215      	bcs.n	800466e <ai_platform_network_process+0x3f6>
 8004642:	686b      	ldr	r3, [r5, #4]
 8004644:	b19b      	cbz	r3, 800466e <ai_platform_network_process+0x3f6>
 8004646:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800464a:	b183      	cbz	r3, 800466e <ai_platform_network_process+0x3f6>
 800464c:	68a9      	ldr	r1, [r5, #8]
 800464e:	699a      	ldr	r2, [r3, #24]
 8004650:	f8d1 a000 	ldr.w	sl, [r1]
 8004654:	6814      	ldr	r4, [r2, #0]
 8004656:	6890      	ldr	r0, [r2, #8]
 8004658:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800465c:	eb0a 0609 	add.w	r6, sl, r9
 8004660:	00a4      	lsls	r4, r4, #2
 8004662:	6871      	ldr	r1, [r6, #4]
 8004664:	d5d7      	bpl.n	8004616 <ai_platform_network_process+0x39e>
 8004666:	68b2      	ldr	r2, [r6, #8]
 8004668:	f002 fc68 	bl	8006f3c <memcpy>
 800466c:	e7da      	b.n	8004624 <ai_platform_network_process+0x3ac>
 800466e:	4658      	mov	r0, fp
 8004670:	f002 f984 	bl	800697c <ai_layers_forward_all>
 8004674:	2f00      	cmp	r7, #0
 8004676:	d047      	beq.n	8004708 <ai_platform_network_process+0x490>
 8004678:	883b      	ldrh	r3, [r7, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d044      	beq.n	8004708 <ai_platform_network_process+0x490>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d041      	beq.n	8004708 <ai_platform_network_process+0x490>
 8004684:	6818      	ldr	r0, [r3, #0]
 8004686:	2800      	cmp	r0, #0
 8004688:	d03e      	beq.n	8004708 <ai_platform_network_process+0x490>
 800468a:	f04f 0800 	mov.w	r8, #0
 800468e:	e019      	b.n	80046c4 <ai_platform_network_process+0x44c>
 8004690:	f85a 2009 	ldr.w	r2, [sl, r9]
 8004694:	4293      	cmp	r3, r2
 8004696:	bf24      	itt	cs
 8004698:	68f3      	ldrcs	r3, [r6, #12]
 800469a:	1ad3      	subcs	r3, r2, r3
 800469c:	6073      	str	r3, [r6, #4]
 800469e:	6981      	ldr	r1, [r0, #24]
 80046a0:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 80046a4:	1b12      	subs	r2, r2, r4
 80046a6:	4413      	add	r3, r2
 80046a8:	608b      	str	r3, [r1, #8]
 80046aa:	6983      	ldr	r3, [r0, #24]
 80046ac:	6872      	ldr	r2, [r6, #4]
 80046ae:	60da      	str	r2, [r3, #12]
 80046b0:	883b      	ldrh	r3, [r7, #0]
 80046b2:	f108 0801 	add.w	r8, r8, #1
 80046b6:	4598      	cmp	r8, r3
 80046b8:	d226      	bcs.n	8004708 <ai_platform_network_process+0x490>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	b323      	cbz	r3, 8004708 <ai_platform_network_process+0x490>
 80046be:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80046c2:	b308      	cbz	r0, 8004708 <ai_platform_network_process+0x490>
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	6981      	ldr	r1, [r0, #24]
 80046c8:	f8d3 a000 	ldr.w	sl, [r3]
 80046cc:	680c      	ldr	r4, [r1, #0]
 80046ce:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80046d2:	eb0a 0609 	add.w	r6, sl, r9
 80046d6:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 80046da:	00a4      	lsls	r4, r4, #2
 80046dc:	eb0c 0302 	add.w	r3, ip, r2
 80046e0:	d5d6      	bpl.n	8004690 <ai_platform_network_process+0x418>
 80046e2:	6889      	ldr	r1, [r1, #8]
 80046e4:	4660      	mov	r0, ip
 80046e6:	f002 fc29 	bl	8006f3c <memcpy>
 80046ea:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80046ee:	f85a 2009 	ldr.w	r2, [sl, r9]
 80046f2:	440b      	add	r3, r1
 80046f4:	4293      	cmp	r3, r2
 80046f6:	bf24      	itt	cs
 80046f8:	68f3      	ldrcs	r3, [r6, #12]
 80046fa:	1ad3      	subcs	r3, r2, r3
 80046fc:	6073      	str	r3, [r6, #4]
 80046fe:	883b      	ldrh	r3, [r7, #0]
 8004700:	f108 0801 	add.w	r8, r8, #1
 8004704:	4598      	cmp	r8, r3
 8004706:	d3d8      	bcc.n	80046ba <ai_platform_network_process+0x442>
 8004708:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 800470c:	f8bb 2014 	ldrh.w	r2, [fp, #20]
 8004710:	3301      	adds	r3, #1
 8004712:	b29b      	uxth	r3, r3
 8004714:	429a      	cmp	r2, r3
 8004716:	f8ab 3016 	strh.w	r3, [fp, #22]
 800471a:	f63f af6f 	bhi.w	80045fc <ai_platform_network_process+0x384>
 800471e:	e670      	b.n	8004402 <ai_platform_network_process+0x18a>
 8004720:	2700      	movs	r7, #0
 8004722:	e765      	b.n	80045f0 <ai_platform_network_process+0x378>
 8004724:	461d      	mov	r5, r3
 8004726:	461f      	mov	r7, r3
 8004728:	e762      	b.n	80045f0 <ai_platform_network_process+0x378>
 800472a:	9c01      	ldr	r4, [sp, #4]
 800472c:	2217      	movs	r2, #23
 800472e:	f104 0010 	add.w	r0, r4, #16
 8004732:	2113      	movs	r1, #19
 8004734:	f000 f814 	bl	8004760 <core_set_error>
 8004738:	4653      	mov	r3, sl
 800473a:	e662      	b.n	8004402 <ai_platform_network_process+0x18a>
 800473c:	f104 0010 	add.w	r0, r4, #16
 8004740:	2230      	movs	r2, #48	; 0x30
 8004742:	2111      	movs	r1, #17
 8004744:	f000 f80c 	bl	8004760 <core_set_error>
 8004748:	4633      	mov	r3, r6
 800474a:	e65a      	b.n	8004402 <ai_platform_network_process+0x18a>
 800474c:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800474e:	e5d2      	b.n	80042f6 <ai_platform_network_process+0x7e>

08004750 <core_init>:
 8004750:	2001      	movs	r0, #1
 8004752:	4770      	bx	lr

08004754 <core_get_error>:
 8004754:	4603      	mov	r3, r0
 8004756:	2200      	movs	r2, #0
 8004758:	6800      	ldr	r0, [r0, #0]
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop

08004760 <core_set_error>:
 8004760:	7803      	ldrb	r3, [r0, #0]
 8004762:	b933      	cbnz	r3, 8004772 <core_set_error+0x12>
 8004764:	7001      	strb	r1, [r0, #0]
 8004766:	6803      	ldr	r3, [r0, #0]
 8004768:	f362 231f 	bfi	r3, r2, #8, #24
 800476c:	6003      	str	r3, [r0, #0]
 800476e:	2001      	movs	r0, #1
 8004770:	4770      	bx	lr
 8004772:	2000      	movs	r0, #0
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop

08004778 <func_dummy>:
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop

0800477c <ai_dict_decompress_f32>:
 800477c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004780:	9f08      	ldr	r7, [sp, #32]
 8004782:	2b04      	cmp	r3, #4
 8004784:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8004788:	d00e      	beq.n	80047a8 <ai_dict_decompress_f32+0x2c>
 800478a:	2b08      	cmp	r3, #8
 800478c:	d10a      	bne.n	80047a4 <ai_dict_decompress_f32+0x28>
 800478e:	42b8      	cmp	r0, r7
 8004790:	d208      	bcs.n	80047a4 <ai_dict_decompress_f32+0x28>
 8004792:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004796:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f840 3b04 	str.w	r3, [r0], #4
 80047a0:	4287      	cmp	r7, r0
 80047a2:	d8f6      	bhi.n	8004792 <ai_dict_decompress_f32+0x16>
 80047a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80047a8:	9b07      	ldr	r3, [sp, #28]
 80047aa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80047ae:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 80047b2:	f10c 38ff 	add.w	r8, ip, #4294967295
 80047b6:	f003 0e01 	and.w	lr, r3, #1
 80047ba:	42b8      	cmp	r0, r7
 80047bc:	d2f2      	bcs.n	80047a4 <ai_dict_decompress_f32+0x28>
 80047be:	f1bc 0f00 	cmp.w	ip, #0
 80047c2:	d01a      	beq.n	80047fa <ai_dict_decompress_f32+0x7e>
 80047c4:	f100 0508 	add.w	r5, r0, #8
 80047c8:	1e4c      	subs	r4, r1, #1
 80047ca:	eb01 0608 	add.w	r6, r1, r8
 80047ce:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80047d2:	091b      	lsrs	r3, r3, #4
 80047d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80047d8:	42a6      	cmp	r6, r4
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f845 3c08 	str.w	r3, [r5, #-8]
 80047e0:	7823      	ldrb	r3, [r4, #0]
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80047ea:	f105 0508 	add.w	r5, r5, #8
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f845 3c0c 	str.w	r3, [r5, #-12]
 80047f4:	d1eb      	bne.n	80047ce <ai_dict_decompress_f32+0x52>
 80047f6:	4461      	add	r1, ip
 80047f8:	4448      	add	r0, r9
 80047fa:	f1be 0f00 	cmp.w	lr, #0
 80047fe:	d103      	bne.n	8004808 <ai_dict_decompress_f32+0x8c>
 8004800:	4287      	cmp	r7, r0
 8004802:	d8dc      	bhi.n	80047be <ai_dict_decompress_f32+0x42>
 8004804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004808:	780b      	ldrb	r3, [r1, #0]
 800480a:	091b      	lsrs	r3, r3, #4
 800480c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004810:	3101      	adds	r1, #1
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6003      	str	r3, [r0, #0]
 8004816:	3004      	adds	r0, #4
 8004818:	e7cf      	b.n	80047ba <ai_dict_decompress_f32+0x3e>
 800481a:	bf00      	nop

0800481c <forward_conv2d_nl_pool>:
 800481c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004820:	ed2d 8b10 	vpush	{d8-d15}
 8004824:	b0e1      	sub	sp, #388	; 0x184
 8004826:	6983      	ldr	r3, [r0, #24]
 8004828:	881e      	ldrh	r6, [r3, #0]
 800482a:	af0a      	add	r7, sp, #40	; 0x28
 800482c:	2e00      	cmp	r6, #0
 800482e:	f000 859b 	beq.w	8005368 <forward_conv2d_nl_pool+0xb4c>
 8004832:	6859      	ldr	r1, [r3, #4]
 8004834:	684a      	ldr	r2, [r1, #4]
 8004836:	2a00      	cmp	r2, #0
 8004838:	f000 8593 	beq.w	8005362 <forward_conv2d_nl_pool+0xb46>
 800483c:	f8d2 c000 	ldr.w	ip, [r2]
 8004840:	2e01      	cmp	r6, #1
 8004842:	f240 858b 	bls.w	800535c <forward_conv2d_nl_pool+0xb40>
 8004846:	690a      	ldr	r2, [r1, #16]
 8004848:	2a00      	cmp	r2, #0
 800484a:	f000 8582 	beq.w	8005352 <forward_conv2d_nl_pool+0xb36>
 800484e:	f8d2 9000 	ldr.w	r9, [r2]
 8004852:	2e02      	cmp	r6, #2
 8004854:	f000 8582 	beq.w	800535c <forward_conv2d_nl_pool+0xb40>
 8004858:	69cd      	ldr	r5, [r1, #28]
 800485a:	2d00      	cmp	r5, #0
 800485c:	f000 8571 	beq.w	8005342 <forward_conv2d_nl_pool+0xb26>
 8004860:	682a      	ldr	r2, [r5, #0]
 8004862:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8004866:	f111 0218 	adds.w	r2, r1, #24
 800486a:	d004      	beq.n	8004876 <forward_conv2d_nl_pool+0x5a>
 800486c:	8b0a      	ldrh	r2, [r1, #24]
 800486e:	2a01      	cmp	r2, #1
 8004870:	f240 857c 	bls.w	800536c <forward_conv2d_nl_pool+0xb50>
 8004874:	686a      	ldr	r2, [r5, #4]
 8004876:	68a9      	ldr	r1, [r5, #8]
 8004878:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800487a:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 800487e:	f8dc b018 	ldr.w	fp, [ip, #24]
 8004882:	f8d7 4150 	ldr.w	r4, [r7, #336]	; 0x150
 8004886:	f8dc 800c 	ldr.w	r8, [ip, #12]
 800488a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800488e:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8004892:	f8db 4008 	ldr.w	r4, [fp, #8]
 8004896:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800489a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800489e:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 80048a2:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
 80048a6:	f8d8 400c 	ldr.w	r4, [r8, #12]
 80048aa:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80048ae:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80048b2:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 80048b6:	f8de 4004 	ldr.w	r4, [lr, #4]
 80048ba:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 80048be:	f8de 400c 	ldr.w	r4, [lr, #12]
 80048c2:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 80048c6:	f8de 4008 	ldr.w	r4, [lr, #8]
 80048ca:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 80048ce:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80048d2:	6824      	ldr	r4, [r4, #0]
 80048d4:	f8c7 4144 	str.w	r4, [r7, #324]	; 0x144
 80048d8:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80048dc:	6864      	ldr	r4, [r4, #4]
 80048de:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80048e2:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80048e6:	68a5      	ldr	r5, [r4, #8]
 80048e8:	f8da 4004 	ldr.w	r4, [sl, #4]
 80048ec:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 80048f0:	f8da 4008 	ldr.w	r4, [sl, #8]
 80048f4:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80048f8:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80048fa:	6824      	ldr	r4, [r4, #0]
 80048fc:	f8c7 4134 	str.w	r4, [r7, #308]	; 0x134
 8004900:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8004902:	6864      	ldr	r4, [r4, #4]
 8004904:	643c      	str	r4, [r7, #64]	; 0x40
 8004906:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800490a:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 800490e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004910:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8004914:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004916:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 800491a:	69c4      	ldr	r4, [r0, #28]
 800491c:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
 8004920:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004922:	64bc      	str	r4, [r7, #72]	; 0x48
 8004924:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8004926:	647c      	str	r4, [r7, #68]	; 0x44
 8004928:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 800492a:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 800492e:	e9d0 ba0c 	ldrd	fp, sl, [r0, #48]	; 0x30
 8004932:	2a00      	cmp	r2, #0
 8004934:	f000 84f8 	beq.w	8005328 <forward_conv2d_nl_pool+0xb0c>
 8004938:	6992      	ldr	r2, [r2, #24]
 800493a:	6892      	ldr	r2, [r2, #8]
 800493c:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8004940:	4680      	mov	r8, r0
 8004942:	6a00      	ldr	r0, [r0, #32]
 8004944:	2900      	cmp	r1, #0
 8004946:	f000 84e4 	beq.w	8005312 <forward_conv2d_nl_pool+0xaf6>
 800494a:	698a      	ldr	r2, [r1, #24]
 800494c:	2a00      	cmp	r2, #0
 800494e:	f000 8533 	beq.w	80053b8 <forward_conv2d_nl_pool+0xb9c>
 8004952:	694b      	ldr	r3, [r1, #20]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800495a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800495e:	6893      	ldr	r3, [r2, #8]
 8004960:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004964:	f002 f8c8 	bl	8006af8 <ai_array_get_byte_size>
 8004968:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800496c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8004970:	881e      	ldrh	r6, [r3, #0]
 8004972:	f8d2 c018 	ldr.w	ip, [r2, #24]
 8004976:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 800497a:	f8d8 1058 	ldr.w	r1, [r8, #88]	; 0x58
 800497e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004980:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8004984:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8004988:	fa11 f585 	uxtah	r5, r1, r5
 800498c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8004990:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8004994:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8004998:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800499c:	3901      	subs	r1, #1
 800499e:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 80049a2:	eb05 0e00 	add.w	lr, r5, r0
 80049a6:	fa1f f28a 	uxth.w	r2, sl
 80049aa:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 80049ae:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80049b2:	f8dc 4000 	ldr.w	r4, [ip]
 80049b6:	f8dc 1000 	ldr.w	r1, [ip]
 80049ba:	3a01      	subs	r2, #1
 80049bc:	fb00 5002 	mla	r0, r0, r2, r5
 80049c0:	fa1f f28b 	uxth.w	r2, fp
 80049c4:	f3c4 14c6 	ubfx	r4, r4, #7, #7
 80049c8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 80049cc:	f3c1 5141 	ubfx	r1, r1, #21, #2
 80049d0:	1e50      	subs	r0, r2, #1
 80049d2:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 80049d6:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80049da:	fa44 f101 	asr.w	r1, r4, r1
 80049de:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 80049e2:	f8dc 4000 	ldr.w	r4, [ip]
 80049e6:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80049ea:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80049ee:	f3c4 4543 	ubfx	r5, r4, #17, #4
 80049f2:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80049f6:	ebae 0202 	sub.w	r2, lr, r2
 80049fa:	fa1f fe81 	uxth.w	lr, r1
 80049fe:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8004a02:	fbb2 f2f1 	udiv	r2, r2, r1
 8004a06:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 8004a0a:	3c01      	subs	r4, #1
 8004a0c:	fb04 1100 	mla	r1, r4, r0, r1
 8004a10:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004a14:	1c51      	adds	r1, r2, #1
 8004a16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004a1a:	487c      	ldr	r0, [pc, #496]	; (8004c0c <forward_conv2d_nl_pool+0x3f0>)
 8004a1c:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8004a20:	4611      	mov	r1, r2
 8004a22:	2a00      	cmp	r2, #0
 8004a24:	bf08      	it	eq
 8004a26:	4601      	moveq	r1, r0
 8004a28:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 8004a2c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8004a30:	2d04      	cmp	r5, #4
 8004a32:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004a36:	f000 849e 	beq.w	8005376 <forward_conv2d_nl_pool+0xb5a>
 8004a3a:	2d08      	cmp	r5, #8
 8004a3c:	f000 849b 	beq.w	8005376 <forward_conv2d_nl_pool+0xb5a>
 8004a40:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8004a44:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8004a48:	2e03      	cmp	r6, #3
 8004a4a:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 8004a4e:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8004a52:	f240 8483 	bls.w	800535c <forward_conv2d_nl_pool+0xb40>
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 8489 	beq.w	8005372 <forward_conv2d_nl_pool+0xb56>
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8004a6e:	6899      	ldr	r1, [r3, #8]
 8004a70:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8004a74:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8004a78:	6896      	ldr	r6, [r2, #8]
 8004a7a:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 8004a7e:	4249      	negs	r1, r1
 8004a80:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8004a84:	2800      	cmp	r0, #0
 8004a86:	f000 82dd 	beq.w	8005044 <forward_conv2d_nl_pool+0x828>
 8004a8a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a8e:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004a92:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004a96:	f8d7 50bc 	ldr.w	r5, [r7, #188]	; 0xbc
 8004a9a:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 8004c10 <forward_conv2d_nl_pool+0x3f4>
 8004a9e:	fb03 f200 	mul.w	r2, r3, r0
 8004aa2:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004aa6:	008c      	lsls	r4, r1, #2
 8004aa8:	fb04 f000 	mul.w	r0, r4, r0
 8004aac:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 8004ab0:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8004ab4:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8004ab8:	fb01 fc02 	mul.w	ip, r1, r2
 8004abc:	00a2      	lsls	r2, r4, #2
 8004abe:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8004ac2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ac6:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 8004aca:	00ab      	lsls	r3, r5, #2
 8004acc:	4694      	mov	ip, r2
 8004ace:	fb0c f204 	mul.w	r2, ip, r4
 8004ad2:	fb04 f303 	mul.w	r3, r4, r3
 8004ad6:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8004ada:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8004ade:	00a4      	lsls	r4, r4, #2
 8004ae0:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8004ae4:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 8004ae8:	f04f 0c00 	mov.w	ip, #0
 8004aec:	fa0f f58b 	sxth.w	r5, fp
 8004af0:	f8c7 c0e0 	str.w	ip, [r7, #224]	; 0xe0
 8004af4:	46a4      	mov	ip, r4
 8004af6:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 8004afa:	f8c7 50e8 	str.w	r5, [r7, #232]	; 0xe8
 8004afe:	fa0f f58a 	sxth.w	r5, sl
 8004b02:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
 8004b06:	fb0c fc04 	mul.w	ip, ip, r4
 8004b0a:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
 8004b0e:	fb06 fc03 	mul.w	ip, r6, r3
 8004b12:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b16:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 8004b1a:	4240      	negs	r0, r0
 8004b1c:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 8004b20:	469c      	mov	ip, r3
 8004b22:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8004b26:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b2a:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 8004b2e:	f8b7 5130 	ldrh.w	r5, [r7, #304]	; 0x130
 8004b32:	f8c7 50ec 	str.w	r5, [r7, #236]	; 0xec
 8004b36:	fb00 f303 	mul.w	r3, r0, r3
 8004b3a:	460d      	mov	r5, r1
 8004b3c:	fb0c fc04 	mul.w	ip, ip, r4
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
 8004b42:	fb04 f305 	mul.w	r3, r4, r5
 8004b46:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 8004b4a:	f8d7 50ec 	ldr.w	r5, [r7, #236]	; 0xec
 8004b4e:	623b      	str	r3, [r7, #32]
 8004b50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b54:	46a6      	mov	lr, r4
 8004b56:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 8004b5a:	fb05 f503 	mul.w	r5, r5, r3
 8004b5e:	667d      	str	r5, [r7, #100]	; 0x64
 8004b60:	4625      	mov	r5, r4
 8004b62:	fb05 f503 	mul.w	r5, r5, r3
 8004b66:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004b6a:	66bd      	str	r5, [r7, #104]	; 0x68
 8004b6c:	fb00 f101 	mul.w	r1, r0, r1
 8004b70:	fb03 f306 	mul.w	r3, r3, r6
 8004b74:	657b      	str	r3, [r7, #84]	; 0x54
 8004b76:	008b      	lsls	r3, r1, #2
 8004b78:	633b      	str	r3, [r7, #48]	; 0x30
 8004b7a:	0093      	lsls	r3, r2, #2
 8004b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b7e:	0083      	lsls	r3, r0, #2
 8004b80:	61bb      	str	r3, [r7, #24]
 8004b82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b86:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8004b8a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004b8e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8004b92:	2400      	movs	r4, #0
 8004b94:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b96:	4603      	mov	r3, r0
 8004b98:	fb03 f301 	mul.w	r3, r3, r1
 8004b9c:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
 8004ba0:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8004ba4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004ba8:	00d1      	lsls	r1, r2, #3
 8004baa:	0113      	lsls	r3, r2, #4
 8004bac:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8004bb0:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8004bb4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004bb8:	fb00 f004 	mul.w	r0, r0, r4
 8004bbc:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8004bc0:	66f8      	str	r0, [r7, #108]	; 0x6c
 8004bc2:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004bc6:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8004bca:	469a      	mov	sl, r3
 8004bcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f340 81d0 	ble.w	8004f76 <forward_conv2d_nl_pool+0x75a>
 8004bd6:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8004bda:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004bde:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004be2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004be6:	2900      	cmp	r1, #0
 8004be8:	441a      	add	r2, r3
 8004bea:	bfb4      	ite	lt
 8004bec:	2100      	movlt	r1, #0
 8004bee:	2300      	movge	r3, #0
 8004bf0:	4282      	cmp	r2, r0
 8004bf2:	bf28      	it	cs
 8004bf4:	4602      	movcs	r2, r0
 8004bf6:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8004bfa:	2801      	cmp	r0, #1
 8004bfc:	f000 83f6 	beq.w	80053ec <forward_conv2d_nl_pool+0xbd0>
 8004c00:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004c04:	4281      	cmp	r1, r0
 8004c06:	f000 822a 	beq.w	800505e <forward_conv2d_nl_pool+0x842>
 8004c0a:	e003      	b.n	8004c14 <forward_conv2d_nl_pool+0x3f8>
 8004c0c:	08004779 	.word	0x08004779
 8004c10:	00000000 	.word	0x00000000
 8004c14:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004c18:	2900      	cmp	r1, #0
 8004c1a:	f000 819f 	beq.w	8004f5c <forward_conv2d_nl_pool+0x740>
 8004c1e:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8004c22:	fb93 f1f0 	sdiv	r1, r3, r0
 8004c26:	fb00 3111 	mls	r1, r0, r1, r3
 8004c2a:	1a41      	subs	r1, r0, r1
 8004c2c:	1ad2      	subs	r2, r2, r3
 8004c2e:	fb91 f5f0 	sdiv	r5, r1, r0
 8004c32:	fb00 1515 	mls	r5, r0, r5, r1
 8004c36:	1b52      	subs	r2, r2, r5
 8004c38:	4601      	mov	r1, r0
 8004c3a:	4402      	add	r2, r0
 8004c3c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8004c40:	f8d7 6120 	ldr.w	r6, [r7, #288]	; 0x120
 8004c44:	4604      	mov	r4, r0
 8004c46:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8004c4a:	fbb4 f4f0 	udiv	r4, r4, r0
 8004c4e:	6a38      	ldr	r0, [r7, #32]
 8004c50:	3a01      	subs	r2, #1
 8004c52:	fb92 f8f1 	sdiv	r8, r2, r1
 8004c56:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8004c5a:	eba0 0c04 	sub.w	ip, r0, r4
 8004c5e:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004c62:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004c66:	4614      	mov	r4, r2
 8004c68:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004c6c:	fbb4 f2f2 	udiv	r2, r4, r2
 8004c70:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8004c74:	663a      	str	r2, [r7, #96]	; 0x60
 8004c76:	441d      	add	r5, r3
 8004c78:	fb0e f000 	mul.w	r0, lr, r0
 8004c7c:	440b      	add	r3, r1
 8004c7e:	eba6 0608 	sub.w	r6, r6, r8
 8004c82:	fb04 f505 	mul.w	r5, r4, r5
 8004c86:	3b01      	subs	r3, #1
 8004c88:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 8004c8c:	fb93 f3f4 	sdiv	r3, r3, r4
 8004c90:	fb00 f406 	mul.w	r4, r0, r6
 8004c94:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004c98:	677d      	str	r5, [r7, #116]	; 0x74
 8004c9a:	0091      	lsls	r1, r2, #2
 8004c9c:	fb00 f003 	mul.w	r0, r0, r3
 8004ca0:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8004ca4:	65f8      	str	r0, [r7, #92]	; 0x5c
 8004ca6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004caa:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8004cae:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 8004cb2:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8004cb6:	1ac3      	subs	r3, r0, r3
 8004cb8:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 8004cbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004cc0:	008b      	lsls	r3, r1, #2
 8004cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cc4:	00d3      	lsls	r3, r2, #3
 8004cc6:	61fb      	str	r3, [r7, #28]
 8004cc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cd0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004cd4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004cd8:	2300      	movs	r3, #0
 8004cda:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 8004cde:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8004ce2:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ce4:	46c2      	mov	sl, r8
 8004ce6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cea:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8004cee:	eb03 0c02 	add.w	ip, r3, r2
 8004cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f2c0 811c 	blt.w	8004f34 <forward_conv2d_nl_pool+0x718>
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8004d00:	f8d7 80e8 	ldr.w	r8, [r7, #232]	; 0xe8
 8004d04:	4605      	mov	r5, r0
 8004d06:	4606      	mov	r6, r0
 8004d08:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d0c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004d10:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8004d14:	4413      	add	r3, r2
 8004d16:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004d1a:	440a      	add	r2, r1
 8004d1c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8004d20:	428b      	cmp	r3, r1
 8004d22:	bf94      	ite	ls
 8004d24:	ebc6 0303 	rsbls	r3, r6, r3
 8004d28:	ebc6 0301 	rsbhi	r3, r6, r1
 8004d2c:	4415      	add	r5, r2
 8004d2e:	1a1b      	subs	r3, r3, r0
 8004d30:	00a4      	lsls	r4, r4, #2
 8004d32:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8004d36:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 8004d3a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8004d3e:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 8004d40:	4602      	mov	r2, r0
 8004d42:	2800      	cmp	r0, #0
 8004d44:	bf08      	it	eq
 8004d46:	4662      	moveq	r2, ip
 8004d48:	f108 31ff 	add.w	r1, r8, #4294967295
 8004d4c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8004d50:	fb91 f1f0 	sdiv	r1, r1, r0
 8004d54:	4429      	add	r1, r5
 8004d56:	f8d7 5128 	ldr.w	r5, [r7, #296]	; 0x128
 8004d5a:	fb0e 5501 	mla	r5, lr, r1, r5
 8004d5e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004d62:	4403      	add	r3, r0
 8004d64:	fb01 6104 	mla	r1, r1, r4, r6
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	fb93 f6f0 	sdiv	r6, r3, r0
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8004d74:	fb06 3110 	mls	r1, r6, r0, r3
 8004d78:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004d7c:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8004d80:	4562      	cmp	r2, ip
 8004d82:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004d86:	bf08      	it	eq
 8004d88:	eeb0 6a48 	vmoveq.f32	s12, s16
 8004d8c:	1b9b      	subs	r3, r3, r6
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	d070      	beq.n	8004e74 <forward_conv2d_nl_pool+0x658>
 8004d92:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8004d96:	fb0e f803 	mul.w	r8, lr, r3
 8004d9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d9c:	fb00 fb01 	mul.w	fp, r0, r1
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d067      	beq.n	8004e74 <forward_conv2d_nl_pool+0x658>
 8004da4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004da8:	18d3      	adds	r3, r2, r3
 8004daa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004dae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004db2:	1a9b      	subs	r3, r3, r2
 8004db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004db6:	2300      	movs	r3, #0
 8004db8:	673b      	str	r3, [r7, #112]	; 0x70
 8004dba:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8004dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc0:	4413      	add	r3, r2
 8004dc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dc4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dca:	4413      	add	r3, r2
 8004dcc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004dd0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004dd4:	ecf3 7a01 	vldmia	r3!, {s15}
 8004dd8:	f1ba 0f00 	cmp.w	sl, #0
 8004ddc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004de0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004de4:	f340 80a4 	ble.w	8004f30 <forward_conv2d_nl_pool+0x714>
 8004de8:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8004dec:	f04f 0c00 	mov.w	ip, #0
 8004df0:	2e00      	cmp	r6, #0
 8004df2:	dd19      	ble.n	8004e28 <forward_conv2d_nl_pool+0x60c>
 8004df4:	2100      	movs	r1, #0
 8004df6:	eb00 040e 	add.w	r4, r0, lr
 8004dfa:	4284      	cmp	r4, r0
 8004dfc:	d910      	bls.n	8004e20 <forward_conv2d_nl_pool+0x604>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	462a      	mov	r2, r5
 8004e02:	ecb3 7a01 	vldmia	r3!, {s14}
 8004e06:	ecf2 6a01 	vldmia	r2!, {s13}
 8004e0a:	429c      	cmp	r4, r3
 8004e0c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004e10:	d8f7      	bhi.n	8004e02 <forward_conv2d_nl_pool+0x5e6>
 8004e12:	43c3      	mvns	r3, r0
 8004e14:	441c      	add	r4, r3
 8004e16:	f024 0403 	bic.w	r4, r4, #3
 8004e1a:	3404      	adds	r4, #4
 8004e1c:	4425      	add	r5, r4
 8004e1e:	4420      	add	r0, r4
 8004e20:	3101      	adds	r1, #1
 8004e22:	428e      	cmp	r6, r1
 8004e24:	4448      	add	r0, r9
 8004e26:	d1e6      	bne.n	8004df6 <forward_conv2d_nl_pool+0x5da>
 8004e28:	f10c 0c01 	add.w	ip, ip, #1
 8004e2c:	45e2      	cmp	sl, ip
 8004e2e:	4458      	add	r0, fp
 8004e30:	4445      	add	r5, r8
 8004e32:	d1dd      	bne.n	8004df0 <forward_conv2d_nl_pool+0x5d4>
 8004e34:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8004e38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e3c:	441d      	add	r5, r3
 8004e3e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004e42:	ece3 7a01 	vstmia	r3!, {s15}
 8004e46:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d1be      	bne.n	8004dd0 <forward_conv2d_nl_pool+0x5b4>
 8004e52:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004e56:	69f9      	ldr	r1, [r7, #28]
 8004e58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e5a:	4472      	add	r2, lr
 8004e5c:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8004e60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e62:	1a52      	subs	r2, r2, r1
 8004e64:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004e68:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	673b      	str	r3, [r7, #112]	; 0x70
 8004e72:	d1a2      	bne.n	8004dba <forward_conv2d_nl_pool+0x59e>
 8004e74:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8004e78:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004e7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e7e:	4608      	mov	r0, r1
 8004e80:	4410      	add	r0, r2
 8004e82:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8004e86:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8004e8a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8004e8e:	4401      	add	r1, r0
 8004e90:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8004e94:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004e98:	1a8a      	subs	r2, r1, r2
 8004e9a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8004e9e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ea8:	f47f af1d 	bne.w	8004ce6 <forward_conv2d_nl_pool+0x4ca>
 8004eac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004eb0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004eb4:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	2a00      	cmp	r2, #0
 8004ebc:	f000 8210 	beq.w	80052e0 <forward_conv2d_nl_pool+0xac4>
 8004ec0:	2400      	movs	r4, #0
 8004ec2:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 8004ec6:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 8004eca:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 8004ece:	f8d7 9108 	ldr.w	r9, [r7, #264]	; 0x108
 8004ed2:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 8004ed6:	609e      	str	r6, [r3, #8]
 8004ed8:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8004edc:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 8004ee0:	462b      	mov	r3, r5
 8004ee2:	4641      	mov	r1, r8
 8004ee4:	4640      	mov	r0, r8
 8004ee6:	47a0      	blx	r4
 8004ee8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8004eec:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8004ef0:	6859      	ldr	r1, [r3, #4]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8004ef8:	4405      	add	r5, r0
 8004efa:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8004efe:	0089      	lsls	r1, r1, #2
 8004f00:	4406      	add	r6, r0
 8004f02:	eba5 0c09 	sub.w	ip, r5, r9
 8004f06:	1850      	adds	r0, r2, r1
 8004f08:	45a4      	cmp	ip, r4
 8004f0a:	bfa8      	it	ge
 8004f0c:	464d      	movge	r5, r9
 8004f0e:	4286      	cmp	r6, r0
 8004f10:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8004f14:	bf28      	it	cs
 8004f16:	1a76      	subcs	r6, r6, r1
 8004f18:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	4281      	cmp	r1, r0
 8004f20:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 8004f24:	d1d7      	bne.n	8004ed6 <forward_conv2d_nl_pool+0x6ba>
 8004f26:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 8004f2a:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 8004f2e:	e019      	b.n	8004f64 <forward_conv2d_nl_pool+0x748>
 8004f30:	461a      	mov	r2, r3
 8004f32:	e781      	b.n	8004e38 <forward_conv2d_nl_pool+0x61c>
 8004f34:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8004f38:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8004f3c:	fb90 f3f2 	sdiv	r3, r0, r2
 8004f40:	fb02 0313 	mls	r3, r2, r3, r0
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	4605      	mov	r5, r0
 8004f48:	fb93 f0f2 	sdiv	r0, r3, r2
 8004f4c:	fb02 3010 	mls	r0, r2, r0, r3
 8004f50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f52:	462e      	mov	r6, r5
 8004f54:	18c4      	adds	r4, r0, r3
 8004f56:	eb02 0805 	add.w	r8, r2, r5
 8004f5a:	e6d5      	b.n	8004d08 <forward_conv2d_nl_pool+0x4ec>
 8004f5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	68da      	ldr	r2, [r3, #12]
 8004f64:	609a      	str	r2, [r3, #8]
 8004f66:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	b21b      	sxth	r3, r3
 8004f6e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8004f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f76:	3b01      	subs	r3, #1
 8004f78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f7c:	f100 83bf 	bmi.w	80056fe <forward_conv2d_nl_pool+0xee2>
 8004f80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004f84:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8004f88:	42a3      	cmp	r3, r4
 8004f8a:	f200 839d 	bhi.w	80056c8 <forward_conv2d_nl_pool+0xeac>
 8004f8e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	6990      	ldr	r0, [r2, #24]
 8004f96:	9301      	str	r3, [sp, #4]
 8004f98:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f9c:	f8d7 80bc 	ldr.w	r8, [r7, #188]	; 0xbc
 8004fa0:	f8b7 5094 	ldrh.w	r5, [r7, #148]	; 0x94
 8004fa4:	1a9b      	subs	r3, r3, r2
 8004fa6:	fa1f f188 	uxth.w	r1, r8
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004fb0:	9308      	str	r3, [sp, #32]
 8004fb2:	9105      	str	r1, [sp, #20]
 8004fb4:	2601      	movs	r6, #1
 8004fb6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004fba:	9607      	str	r6, [sp, #28]
 8004fbc:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 8004fc0:	9506      	str	r5, [sp, #24]
 8004fc2:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
 8004fc6:	9304      	str	r3, [sp, #16]
 8004fc8:	1a64      	subs	r4, r4, r1
 8004fca:	b2b1      	uxth	r1, r6
 8004fcc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8004fd6:	b224      	sxth	r4, r4
 8004fd8:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8004fdc:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8004fe0:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8004fe4:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8004fe6:	47a0      	blx	r4
 8004fe8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8004fec:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 8004ff0:	688a      	ldr	r2, [r1, #8]
 8004ff2:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8004ff4:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8004ff8:	fa0f f388 	sxth.w	r3, r8
 8004ffc:	1af3      	subs	r3, r6, r3
 8004ffe:	4422      	add	r2, r4
 8005000:	462e      	mov	r6, r5
 8005002:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8005006:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 800500a:	608a      	str	r2, [r1, #8]
 800500c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005010:	4426      	add	r6, r4
 8005012:	b21b      	sxth	r3, r3
 8005014:	1b2c      	subs	r4, r5, r4
 8005016:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 800501a:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 800501c:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8005020:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005024:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005028:	f8c7 611c 	str.w	r6, [r7, #284]	; 0x11c
 800502c:	3001      	adds	r0, #1
 800502e:	442c      	add	r4, r5
 8005030:	4283      	cmp	r3, r0
 8005032:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 8005036:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 800503a:	f63f adc7 	bhi.w	8004bcc <forward_conv2d_nl_pool+0x3b0>
 800503e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	609a      	str	r2, [r3, #8]
 8005048:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800504c:	68d3      	ldr	r3, [r2, #12]
 800504e:	6093      	str	r3, [r2, #8]
 8005050:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8005054:	46bd      	mov	sp, r7
 8005056:	ecbd 8b10 	vpop	{d8-d15}
 800505a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800505e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005060:	2901      	cmp	r1, #1
 8005062:	f47f add7 	bne.w	8004c14 <forward_conv2d_nl_pool+0x3f8>
 8005066:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800506a:	2900      	cmp	r1, #0
 800506c:	f43f af76 	beq.w	8004f5c <forward_conv2d_nl_pool+0x740>
 8005070:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8005074:	f8d7 6154 	ldr.w	r6, [r7, #340]	; 0x154
 8005078:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800507c:	1ad2      	subs	r2, r2, r3
 800507e:	1a8c      	subs	r4, r1, r2
 8005080:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8005084:	00b2      	lsls	r2, r6, #2
 8005086:	fb02 f204 	mul.w	r2, r2, r4
 800508a:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800508e:	fbb1 f1f0 	udiv	r1, r1, r0
 8005092:	ebc1 7081 	rsb	r0, r1, r1, lsl #30
 8005096:	460d      	mov	r5, r1
 8005098:	62f9      	str	r1, [r7, #44]	; 0x2c
 800509a:	62ba      	str	r2, [r7, #40]	; 0x28
 800509c:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 80050a0:	0082      	lsls	r2, r0, #2
 80050a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80050a4:	00ca      	lsls	r2, r1, #3
 80050a6:	607a      	str	r2, [r7, #4]
 80050a8:	00aa      	lsls	r2, r5, #2
 80050aa:	60ba      	str	r2, [r7, #8]
 80050ac:	fb03 f206 	mul.w	r2, r3, r6
 80050b0:	67ba      	str	r2, [r7, #120]	; 0x78
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	fb02 f303 	mul.w	r3, r2, r3
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80050c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050c6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80050ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80050d2:	2300      	movs	r3, #0
 80050d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f2c0 8112 	blt.w	8005306 <forward_conv2d_nl_pool+0xaea>
 80050e2:	2100      	movs	r1, #0
 80050e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050e6:	460a      	mov	r2, r1
 80050e8:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 80050ec:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 80050f0:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 80050f4:	4420      	add	r0, r4
 80050f6:	4408      	add	r0, r1
 80050f8:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 80050fc:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8005100:	190c      	adds	r4, r1, r4
 8005102:	42ac      	cmp	r4, r5
 8005104:	bf28      	it	cs
 8005106:	462c      	movcs	r4, r5
 8005108:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 800510c:	0080      	lsls	r0, r0, #2
 800510e:	1aa4      	subs	r4, r4, r2
 8005110:	2d00      	cmp	r5, #0
 8005112:	f000 80e9 	beq.w	80052e8 <forward_conv2d_nl_pool+0xacc>
 8005116:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800511a:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 800511e:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8005122:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005126:	42b5      	cmp	r5, r6
 8005128:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800512c:	eba3 0204 	sub.w	r2, r3, r4
 8005130:	eba1 0104 	sub.w	r1, r1, r4
 8005134:	bf08      	it	eq
 8005136:	eef0 3a48 	vmoveq.f32	s7, s16
 800513a:	462b      	mov	r3, r5
 800513c:	697d      	ldr	r5, [r7, #20]
 800513e:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 8005142:	4428      	add	r0, r5
 8005144:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 8005148:	fb05 6e00 	mla	lr, r5, r0, r6
 800514c:	eb0e 000b 	add.w	r0, lr, fp
 8005150:	4586      	cmp	lr, r0
 8005152:	61f8      	str	r0, [r7, #28]
 8005154:	f080 80a5 	bcs.w	80052a2 <forward_conv2d_nl_pool+0xa86>
 8005158:	0092      	lsls	r2, r2, #2
 800515a:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800515e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005160:	fb01 f10b 	mul.w	r1, r1, fp
 8005164:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8005168:	f024 0803 	bic.w	r8, r4, #3
 800516c:	2a00      	cmp	r2, #0
 800516e:	f000 8098 	beq.w	80052a2 <forward_conv2d_nl_pool+0xa86>
 8005172:	f108 32ff 	add.w	r2, r8, #4294967295
 8005176:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005178:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800517c:	0892      	lsrs	r2, r2, #2
 800517e:	3201      	adds	r2, #1
 8005180:	4401      	add	r1, r0
 8005182:	fb02 f00a 	mul.w	r0, r2, sl
 8005186:	6638      	str	r0, [r7, #96]	; 0x60
 8005188:	0110      	lsls	r0, r2, #4
 800518a:	0092      	lsls	r2, r2, #2
 800518c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800518e:	1aca      	subs	r2, r1, r3
 8005190:	613a      	str	r2, [r7, #16]
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	6738      	str	r0, [r7, #112]	; 0x70
 8005196:	4413      	add	r3, r2
 8005198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800519c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80051a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051a2:	4413      	add	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	4413      	add	r3, r2
 80051ae:	677b      	str	r3, [r7, #116]	; 0x74
 80051b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051b4:	ecf3 6a01 	vldmia	r3!, {s13}
 80051b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80051c6:	dd57      	ble.n	8005278 <forward_conv2d_nl_pool+0xa5c>
 80051c8:	4676      	mov	r6, lr
 80051ca:	f04f 0c00 	mov.w	ip, #0
 80051ce:	f1b8 0f00 	cmp.w	r8, #0
 80051d2:	f340 8087 	ble.w	80052e4 <forward_conv2d_nl_pool+0xac8>
 80051d6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80051da:	f109 0310 	add.w	r3, r9, #16
 80051de:	18b1      	adds	r1, r6, r2
 80051e0:	2000      	movs	r0, #0
 80051e2:	4632      	mov	r2, r6
 80051e4:	eb02 050b 	add.w	r5, r2, fp
 80051e8:	ed95 7a00 	vldr	s14, [r5]
 80051ec:	ed53 7a03 	vldr	s15, [r3, #-12]
 80051f0:	ed92 4a00 	vldr	s8, [r2]
 80051f4:	ed53 4a04 	vldr	s9, [r3, #-16]
 80051f8:	ed91 5a00 	vldr	s10, [r1]
 80051fc:	ed53 5a02 	vldr	s11, [r3, #-8]
 8005200:	ed13 6a01 	vldr	s12, [r3, #-4]
 8005204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005208:	eb01 050b 	add.w	r5, r1, fp
 800520c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005210:	3004      	adds	r0, #4
 8005212:	4540      	cmp	r0, r8
 8005214:	ed95 7a00 	vldr	s14, [r5]
 8005218:	eee5 7a25 	vfma.f32	s15, s10, s11
 800521c:	4452      	add	r2, sl
 800521e:	4451      	add	r1, sl
 8005220:	f103 0310 	add.w	r3, r3, #16
 8005224:	eee7 7a06 	vfma.f32	s15, s14, s12
 8005228:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800522c:	dbda      	blt.n	80051e4 <forward_conv2d_nl_pool+0x9c8>
 800522e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005230:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8005232:	441e      	add	r6, r3
 8005234:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005236:	4499      	add	r9, r3
 8005238:	42a0      	cmp	r0, r4
 800523a:	da11      	bge.n	8005260 <forward_conv2d_nl_pool+0xa44>
 800523c:	4602      	mov	r2, r0
 800523e:	4633      	mov	r3, r6
 8005240:	4649      	mov	r1, r9
 8005242:	edd3 7a00 	vldr	s15, [r3]
 8005246:	ecb1 7a01 	vldmia	r1!, {s14}
 800524a:	3201      	adds	r2, #1
 800524c:	42a2      	cmp	r2, r4
 800524e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005252:	445b      	add	r3, fp
 8005254:	d1f5      	bne.n	8005242 <forward_conv2d_nl_pool+0xa26>
 8005256:	1a20      	subs	r0, r4, r0
 8005258:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 800525c:	fb00 660b 	mla	r6, r0, fp, r6
 8005260:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005264:	441e      	add	r6, r3
 8005266:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800526a:	4499      	add	r9, r3
 800526c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005270:	f10c 0c01 	add.w	ip, ip, #1
 8005274:	4563      	cmp	r3, ip
 8005276:	d1aa      	bne.n	80051ce <forward_conv2d_nl_pool+0x9b2>
 8005278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527a:	4499      	add	r9, r3
 800527c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800527e:	ece3 6a01 	vstmia	r3!, {s13}
 8005282:	677b      	str	r3, [r7, #116]	; 0x74
 8005284:	e9d7 2333 	ldrd	r2, r3, [r7, #204]	; 0xcc
 8005288:	4293      	cmp	r3, r2
 800528a:	d191      	bne.n	80051b0 <forward_conv2d_nl_pool+0x994>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	1a9b      	subs	r3, r3, r2
 8005292:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	f10e 0e04 	add.w	lr, lr, #4
 800529c:	459e      	cmp	lr, r3
 800529e:	f4ff af7d 	bcc.w	800519c <forward_conv2d_nl_pool+0x980>
 80052a2:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80052a6:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80052aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052ae:	440a      	add	r2, r1
 80052b0:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80052b4:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 80052b8:	4608      	mov	r0, r1
 80052ba:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80052be:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 80052c2:	4410      	add	r0, r2
 80052c4:	1a8a      	subs	r2, r1, r2
 80052c6:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80052ca:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80052ce:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80052d2:	3301      	adds	r3, #1
 80052d4:	429a      	cmp	r2, r3
 80052d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80052da:	f47f aefd 	bne.w	80050d8 <forward_conv2d_nl_pool+0x8bc>
 80052de:	e5e7      	b.n	8004eb0 <forward_conv2d_nl_pool+0x694>
 80052e0:	68da      	ldr	r2, [r3, #12]
 80052e2:	e63f      	b.n	8004f64 <forward_conv2d_nl_pool+0x748>
 80052e4:	2000      	movs	r0, #0
 80052e6:	e7a7      	b.n	8005238 <forward_conv2d_nl_pool+0xa1c>
 80052e8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80052ec:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 80052f0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80052f4:	1b19      	subs	r1, r3, r4
 80052f6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80052fa:	eef0 3a48 	vmov.f32	s7, s16
 80052fe:	1b1a      	subs	r2, r3, r4
 8005300:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005304:	e71a      	b.n	800513c <forward_conv2d_nl_pool+0x920>
 8005306:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800530a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800530c:	460a      	mov	r2, r1
 800530e:	440b      	add	r3, r1
 8005310:	e6ea      	b.n	80050e8 <forward_conv2d_nl_pool+0x8cc>
 8005312:	b168      	cbz	r0, 8005330 <forward_conv2d_nl_pool+0xb14>
 8005314:	6882      	ldr	r2, [r0, #8]
 8005316:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800531a:	2201      	movs	r2, #1
 800531c:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8005320:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8005324:	f7ff bb29 	b.w	800497a <forward_conv2d_nl_pool+0x15e>
 8005328:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800532c:	f7ff bb08 	b.w	8004940 <forward_conv2d_nl_pool+0x124>
 8005330:	2201      	movs	r2, #1
 8005332:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8005336:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800533a:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800533e:	f7ff bb1c 	b.w	800497a <forward_conv2d_nl_pool+0x15e>
 8005342:	3118      	adds	r1, #24
 8005344:	d008      	beq.n	8005358 <forward_conv2d_nl_pool+0xb3c>
 8005346:	462a      	mov	r2, r5
 8005348:	f8c7 5150 	str.w	r5, [r7, #336]	; 0x150
 800534c:	4629      	mov	r1, r5
 800534e:	f7ff ba93 	b.w	8004878 <forward_conv2d_nl_pool+0x5c>
 8005352:	4691      	mov	r9, r2
 8005354:	f7ff ba7d 	b.w	8004852 <forward_conv2d_nl_pool+0x36>
 8005358:	68cb      	ldr	r3, [r1, #12]
 800535a:	deff      	udf	#255	; 0xff
 800535c:	2300      	movs	r3, #0
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	deff      	udf	#255	; 0xff
 8005362:	4694      	mov	ip, r2
 8005364:	f7ff ba6c 	b.w	8004840 <forward_conv2d_nl_pool+0x24>
 8005368:	6873      	ldr	r3, [r6, #4]
 800536a:	deff      	udf	#255	; 0xff
 800536c:	2200      	movs	r2, #0
 800536e:	f7ff ba82 	b.w	8004876 <forward_conv2d_nl_pool+0x5a>
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	deff      	udf	#255	; 0xff
 8005376:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800537a:	2a00      	cmp	r2, #0
 800537c:	f43f ab60 	beq.w	8004a40 <forward_conv2d_nl_pool+0x224>
 8005380:	2e03      	cmp	r6, #3
 8005382:	d9eb      	bls.n	800535c <forward_conv2d_nl_pool+0xb40>
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005388:	b323      	cbz	r3, 80053d4 <forward_conv2d_nl_pool+0xbb8>
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	b313      	cbz	r3, 80053d4 <forward_conv2d_nl_pool+0xbb8>
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8005394:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 8005398:	9301      	str	r3, [sp, #4]
 800539a:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800539e:	9000      	str	r0, [sp, #0]
 80053a0:	4673      	mov	r3, lr
 80053a2:	4620      	mov	r0, r4
 80053a4:	f7ff f9ea 	bl	800477c <ai_dict_decompress_f32>
 80053a8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80053ac:	b17c      	cbz	r4, 80053ce <forward_conv2d_nl_pool+0xbb2>
 80053ae:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 80053b2:	881e      	ldrh	r6, [r3, #0]
 80053b4:	f7ff bb44 	b.w	8004a40 <forward_conv2d_nl_pool+0x224>
 80053b8:	b178      	cbz	r0, 80053da <forward_conv2d_nl_pool+0xbbe>
 80053ba:	6881      	ldr	r1, [r0, #8]
 80053bc:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80053c0:	2201      	movs	r2, #1
 80053c2:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 80053c6:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80053ca:	f7ff bad6 	b.w	800497a <forward_conv2d_nl_pool+0x15e>
 80053ce:	881e      	ldrh	r6, [r3, #0]
 80053d0:	f7ff bb36 	b.w	8004a40 <forward_conv2d_nl_pool+0x224>
 80053d4:	2300      	movs	r3, #0
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	deff      	udf	#255	; 0xff
 80053da:	2201      	movs	r2, #1
 80053dc:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 80053e0:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 80053e4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80053e8:	f7ff bac7 	b.w	800497a <forward_conv2d_nl_pool+0x15e>
 80053ec:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80053ee:	2801      	cmp	r0, #1
 80053f0:	f47f ac10 	bne.w	8004c14 <forward_conv2d_nl_pool+0x3f8>
 80053f4:	1ad2      	subs	r2, r2, r3
 80053f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053f8:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 80053fc:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8005400:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005402:	fb00 4101 	mla	r1, r0, r1, r4
 8005406:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800540a:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800540e:	f080 81c4 	bcs.w	800579a <forward_conv2d_nl_pool+0xf7e>
 8005412:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8005416:	2a00      	cmp	r2, #0
 8005418:	f43f ad4a 	beq.w	8004eb0 <forward_conv2d_nl_pool+0x694>
 800541c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005420:	fb02 f303 	mul.w	r3, r2, r3
 8005424:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005426:	677b      	str	r3, [r7, #116]	; 0x74
 8005428:	1a9b      	subs	r3, r3, r2
 800542a:	663b      	str	r3, [r7, #96]	; 0x60
 800542c:	188b      	adds	r3, r1, r2
 800542e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005430:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005434:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005438:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800543c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005440:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
 8005444:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005448:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800544c:	2300      	movs	r3, #0
 800544e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005452:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 8133 	beq.w	80056c2 <forward_conv2d_nl_pool+0xea6>
 800545c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005460:	ed93 6a00 	vldr	s12, [r3]
 8005464:	3304      	adds	r3, #4
 8005466:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800546a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 8101 	beq.w	8005676 <forward_conv2d_nl_pool+0xe5a>
 8005474:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005478:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800547c:	eb03 0802 	add.w	r8, r3, r2
 8005480:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005482:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005488:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800548c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005490:	67bb      	str	r3, [r7, #120]	; 0x78
 8005492:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005496:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800549a:	f04f 0b00 	mov.w	fp, #0
 800549e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f2c0 8104 	blt.w	80056b0 <forward_conv2d_nl_pool+0xe94>
 80054a8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80054ac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80054ae:	2300      	movs	r3, #0
 80054b0:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 80054b4:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80054b8:	eb02 0c04 	add.w	ip, r2, r4
 80054bc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80054c0:	4540      	cmp	r0, r8
 80054c2:	bf94      	ite	ls
 80054c4:	ebc3 0300 	rsbls	r3, r3, r0
 80054c8:	ebc3 0308 	rsbhi	r3, r3, r8
 80054cc:	eba2 0903 	sub.w	r9, r2, r3
 80054d0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80054d4:	1ac4      	subs	r4, r0, r3
 80054d6:	fb03 f302 	mul.w	r3, r3, r2
 80054da:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80054de:	2a00      	cmp	r2, #0
 80054e0:	f340 80e3 	ble.w	80056aa <forward_conv2d_nl_pool+0xe8e>
 80054e4:	f023 050f 	bic.w	r5, r3, #15
 80054e8:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 80054ec:	1e68      	subs	r0, r5, #1
 80054ee:	0900      	lsrs	r0, r0, #4
 80054f0:	3001      	adds	r0, #1
 80054f2:	fb06 f204 	mul.w	r2, r6, r4
 80054f6:	673a      	str	r2, [r7, #112]	; 0x70
 80054f8:	0102      	lsls	r2, r0, #4
 80054fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80054fc:	fb06 f909 	mul.w	r9, r6, r9
 8005500:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8005504:	eef0 6a46 	vmov.f32	s13, s12
 8005508:	f04f 0e00 	mov.w	lr, #0
 800550c:	4662      	mov	r2, ip
 800550e:	2d00      	cmp	r5, #0
 8005510:	f340 80c9 	ble.w	80056a6 <forward_conv2d_nl_pool+0xe8a>
 8005514:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8005518:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800551c:	2600      	movs	r6, #0
 800551e:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 8005522:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8005526:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 800552a:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 800552e:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 8005532:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 8005536:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800553a:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800553e:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 8005542:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 8005546:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800554a:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 800554e:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 8005552:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 8005556:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 800555a:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 800555e:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 8005562:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 8005566:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 800556a:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800556e:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8005572:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8005576:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 800557a:	ed50 3a04 	vldr	s7, [r0, #-16]
 800557e:	ed14 4a04 	vldr	s8, [r4, #-16]
 8005582:	ed50 4a03 	vldr	s9, [r0, #-12]
 8005586:	ed14 5a03 	vldr	s10, [r4, #-12]
 800558a:	ed50 5a02 	vldr	s11, [r0, #-8]
 800558e:	ed14 7a02 	vldr	s14, [r4, #-8]
 8005592:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8005596:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800559a:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800559e:	3610      	adds	r6, #16
 80055a0:	42ae      	cmp	r6, r5
 80055a2:	ed14 fa01 	vldr	s30, [r4, #-4]
 80055a6:	ed50 ea01 	vldr	s29, [r0, #-4]
 80055aa:	eeee 7a2f 	vfma.f32	s15, s28, s31
 80055ae:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80055b2:	f100 0040 	add.w	r0, r0, #64	; 0x40
 80055b6:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80055ba:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80055be:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80055c2:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80055c6:	eee9 7a89 	vfma.f32	s15, s19, s18
 80055ca:	eee8 7a80 	vfma.f32	s15, s17, s0
 80055ce:	eee0 7a81 	vfma.f32	s15, s1, s2
 80055d2:	eee1 7a82 	vfma.f32	s15, s3, s4
 80055d6:	eee2 7a83 	vfma.f32	s15, s5, s6
 80055da:	eee3 7a84 	vfma.f32	s15, s7, s8
 80055de:	eee4 7a85 	vfma.f32	s15, s9, s10
 80055e2:	eee5 7a87 	vfma.f32	s15, s11, s14
 80055e6:	eeef 7a2e 	vfma.f32	s15, s30, s29
 80055ea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80055ee:	db96      	blt.n	800551e <forward_conv2d_nl_pool+0xd02>
 80055f0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80055f2:	4451      	add	r1, sl
 80055f4:	4452      	add	r2, sl
 80055f6:	4283      	cmp	r3, r0
 80055f8:	dd0f      	ble.n	800561a <forward_conv2d_nl_pool+0xdfe>
 80055fa:	4604      	mov	r4, r0
 80055fc:	468c      	mov	ip, r1
 80055fe:	4616      	mov	r6, r2
 8005600:	ecb6 7a01 	vldmia	r6!, {s14}
 8005604:	ecfc 7a01 	vldmia	ip!, {s15}
 8005608:	3401      	adds	r4, #1
 800560a:	42a3      	cmp	r3, r4
 800560c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005610:	d1f6      	bne.n	8005600 <forward_conv2d_nl_pool+0xde4>
 8005612:	1a18      	subs	r0, r3, r0
 8005614:	0080      	lsls	r0, r0, #2
 8005616:	4402      	add	r2, r0
 8005618:	4401      	add	r1, r0
 800561a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800561c:	4402      	add	r2, r0
 800561e:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8005622:	f10e 0e01 	add.w	lr, lr, #1
 8005626:	4570      	cmp	r0, lr
 8005628:	4449      	add	r1, r9
 800562a:	f47f af70 	bne.w	800550e <forward_conv2d_nl_pool+0xcf2>
 800562e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8005632:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005634:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005638:	edc3 6a00 	vstr	s13, [r3]
 800563c:	4608      	mov	r0, r1
 800563e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8005642:	440b      	add	r3, r1
 8005644:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8005648:	67bb      	str	r3, [r7, #120]	; 0x78
 800564a:	4410      	add	r0, r2
 800564c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800564e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8005652:	4608      	mov	r0, r1
 8005654:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8005658:	4418      	add	r0, r3
 800565a:	1acb      	subs	r3, r1, r3
 800565c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005660:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8005664:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8005668:	f10b 0b01 	add.w	fp, fp, #1
 800566c:	455b      	cmp	r3, fp
 800566e:	eba8 0802 	sub.w	r8, r8, r2
 8005672:	f47f af14 	bne.w	800549e <forward_conv2d_nl_pool+0xc82>
 8005676:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800567a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800567c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005680:	440a      	add	r2, r1
 8005682:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8005686:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800568a:	3204      	adds	r2, #4
 800568c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8005690:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8005694:	3301      	adds	r3, #1
 8005696:	429a      	cmp	r2, r3
 8005698:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800569c:	f47f aed9 	bne.w	8005452 <forward_conv2d_nl_pool+0xc36>
 80056a0:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 80056a4:	e404      	b.n	8004eb0 <forward_conv2d_nl_pool+0x694>
 80056a6:	2000      	movs	r0, #0
 80056a8:	e7a5      	b.n	80055f6 <forward_conv2d_nl_pool+0xdda>
 80056aa:	eef0 6a46 	vmov.f32	s13, s12
 80056ae:	e7be      	b.n	800562e <forward_conv2d_nl_pool+0xe12>
 80056b0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80056b4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80056b8:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80056bc:	eba8 0303 	sub.w	r3, r8, r3
 80056c0:	e6f6      	b.n	80054b0 <forward_conv2d_nl_pool+0xc94>
 80056c2:	eeb0 6a48 	vmov.f32	s12, s16
 80056c6:	e6d0      	b.n	800546a <forward_conv2d_nl_pool+0xc4e>
 80056c8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80056cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056d0:	4611      	mov	r1, r2
 80056d2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80056d6:	4419      	add	r1, r3
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80056de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056e4:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 80056e8:	4413      	add	r3, r2
 80056ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80056ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80056f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80056f6:	4293      	cmp	r3, r2
 80056f8:	f63f aa68 	bhi.w	8004bcc <forward_conv2d_nl_pool+0x3b0>
 80056fc:	e49f      	b.n	800503e <forward_conv2d_nl_pool+0x822>
 80056fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005702:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8005706:	699a      	ldr	r2, [r3, #24]
 8005708:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 800570c:	68d1      	ldr	r1, [r2, #12]
 800570e:	6853      	ldr	r3, [r2, #4]
 8005710:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005712:	fb00 4012 	mls	r0, r0, r2, r4
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4281      	cmp	r1, r0
 800571a:	bf88      	it	hi
 800571c:	18c0      	addhi	r0, r0, r3
 800571e:	4281      	cmp	r1, r0
 8005720:	eb01 0203 	add.w	r2, r1, r3
 8005724:	d216      	bcs.n	8005754 <forward_conv2d_nl_pool+0xf38>
 8005726:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	; 0xb4
 800572a:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 800572e:	42a1      	cmp	r1, r4
 8005730:	d010      	beq.n	8005754 <forward_conv2d_nl_pool+0xf38>
 8005732:	4290      	cmp	r0, r2
 8005734:	d20e      	bcs.n	8005754 <forward_conv2d_nl_pool+0xf38>
 8005736:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800573a:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 800573e:	f850 3b04 	ldr.w	r3, [r0], #4
 8005742:	f841 3b04 	str.w	r3, [r1], #4
 8005746:	69a2      	ldr	r2, [r4, #24]
 8005748:	6853      	ldr	r3, [r2, #4]
 800574a:	68d2      	ldr	r2, [r2, #12]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	441a      	add	r2, r3
 8005750:	4282      	cmp	r2, r0
 8005752:	d8f4      	bhi.n	800573e <forward_conv2d_nl_pool+0xf22>
 8005754:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8005758:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 800575c:	f8b7 1140 	ldrh.w	r1, [r7, #320]	; 0x140
 8005760:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8005762:	4420      	add	r0, r4
 8005764:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8005768:	1a40      	subs	r0, r0, r1
 800576a:	4421      	add	r1, r4
 800576c:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8005770:	442c      	add	r4, r5
 8005772:	b209      	sxth	r1, r1
 8005774:	b200      	sxth	r0, r0
 8005776:	4294      	cmp	r4, r2
 8005778:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 800577c:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 8005780:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8005784:	4621      	mov	r1, r4
 8005786:	f4ff abfb 	bcc.w	8004f80 <forward_conv2d_nl_pool+0x764>
 800578a:	425b      	negs	r3, r3
 800578c:	4419      	add	r1, r3
 800578e:	4291      	cmp	r1, r2
 8005790:	d2fc      	bcs.n	800578c <forward_conv2d_nl_pool+0xf70>
 8005792:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8005796:	f7ff bbf3 	b.w	8004f80 <forward_conv2d_nl_pool+0x764>
 800579a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800579e:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 80057a2:	320a      	adds	r2, #10
 80057a4:	f022 0207 	bic.w	r2, r2, #7
 80057a8:	ebad 0d02 	sub.w	sp, sp, r2
 80057ac:	aa0a      	add	r2, sp, #40	; 0x28
 80057ae:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80057b2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80057b6:	2a00      	cmp	r2, #0
 80057b8:	f000 8153 	beq.w	8005a62 <forward_conv2d_nl_pool+0x1246>
 80057bc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80057c0:	f8c7 b01c 	str.w	fp, [r7, #28]
 80057c4:	fb02 f303 	mul.w	r3, r2, r3
 80057c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80057ca:	663b      	str	r3, [r7, #96]	; 0x60
 80057cc:	1a9b      	subs	r3, r3, r2
 80057ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80057d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80057d4:	f8c7 a014 	str.w	sl, [r7, #20]
 80057d8:	4413      	add	r3, r2
 80057da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80057e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80057ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80057f2:	2300      	movs	r3, #0
 80057f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80057f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80057fc:	b13b      	cbz	r3, 800580e <forward_conv2d_nl_pool+0xff2>
 80057fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005802:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8005806:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800580a:	f001 fb97 	bl	8006f3c <memcpy>
 800580e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005812:	2b00      	cmp	r3, #0
 8005814:	f000 8137 	beq.w	8005a86 <forward_conv2d_nl_pool+0x126a>
 8005818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800581a:	ed93 6a00 	vldr	s12, [r3]
 800581e:	3304      	adds	r3, #4
 8005820:	67bb      	str	r3, [r7, #120]	; 0x78
 8005822:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 8101 	beq.w	8005a2e <forward_conv2d_nl_pool+0x1212>
 800582c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005830:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005834:	eb03 0802 	add.w	r8, r3, r2
 8005838:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800583a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800583e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005840:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005848:	677b      	str	r3, [r7, #116]	; 0x74
 800584a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800584e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005852:	f04f 0b00 	mov.w	fp, #0
 8005856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800585a:	2b00      	cmp	r3, #0
 800585c:	f2c0 810a 	blt.w	8005a74 <forward_conv2d_nl_pool+0x1258>
 8005860:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8005864:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005866:	2300      	movs	r3, #0
 8005868:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 800586c:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8005870:	eb02 0c04 	add.w	ip, r2, r4
 8005874:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005878:	4540      	cmp	r0, r8
 800587a:	bf94      	ite	ls
 800587c:	ebc3 0300 	rsbls	r3, r3, r0
 8005880:	ebc3 0308 	rsbhi	r3, r3, r8
 8005884:	eba2 0903 	sub.w	r9, r2, r3
 8005888:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800588c:	1ac4      	subs	r4, r0, r3
 800588e:	fb03 f302 	mul.w	r3, r3, r2
 8005892:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8005896:	2a00      	cmp	r2, #0
 8005898:	f340 80e9 	ble.w	8005a6e <forward_conv2d_nl_pool+0x1252>
 800589c:	f023 050f 	bic.w	r5, r3, #15
 80058a0:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 80058a4:	1e68      	subs	r0, r5, #1
 80058a6:	0900      	lsrs	r0, r0, #4
 80058a8:	3001      	adds	r0, #1
 80058aa:	fb06 f204 	mul.w	r2, r6, r4
 80058ae:	65fa      	str	r2, [r7, #92]	; 0x5c
 80058b0:	0102      	lsls	r2, r0, #4
 80058b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80058b4:	fb06 f909 	mul.w	r9, r6, r9
 80058b8:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 80058bc:	eef0 6a46 	vmov.f32	s13, s12
 80058c0:	f04f 0e00 	mov.w	lr, #0
 80058c4:	4662      	mov	r2, ip
 80058c6:	2d00      	cmp	r5, #0
 80058c8:	f340 80cf 	ble.w	8005a6a <forward_conv2d_nl_pool+0x124e>
 80058cc:	f101 0440 	add.w	r4, r1, #64	; 0x40
 80058d0:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80058d4:	2600      	movs	r6, #0
 80058d6:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 80058da:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 80058de:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 80058e2:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 80058e6:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 80058ea:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 80058ee:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 80058f2:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 80058f6:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 80058fa:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 80058fe:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8005902:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 8005906:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800590a:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 800590e:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 8005912:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 8005916:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800591a:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800591e:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8005922:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 8005926:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800592a:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 800592e:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 8005932:	ed50 3a04 	vldr	s7, [r0, #-16]
 8005936:	ed14 4a04 	vldr	s8, [r4, #-16]
 800593a:	ed54 4a03 	vldr	s9, [r4, #-12]
 800593e:	ed10 5a03 	vldr	s10, [r0, #-12]
 8005942:	ed50 5a02 	vldr	s11, [r0, #-8]
 8005946:	ed14 7a02 	vldr	s14, [r4, #-8]
 800594a:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800594e:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 8005952:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8005956:	3610      	adds	r6, #16
 8005958:	42ae      	cmp	r6, r5
 800595a:	ed14 fa01 	vldr	s30, [r4, #-4]
 800595e:	ed50 ea01 	vldr	s29, [r0, #-4]
 8005962:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8005966:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800596a:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800596e:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8005972:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8005976:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800597a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800597e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8005982:	eee8 7a80 	vfma.f32	s15, s17, s0
 8005986:	eee0 7a81 	vfma.f32	s15, s1, s2
 800598a:	eee1 7a82 	vfma.f32	s15, s3, s4
 800598e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8005992:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005996:	eee4 7a85 	vfma.f32	s15, s9, s10
 800599a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800599e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 80059a2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80059a6:	db96      	blt.n	80058d6 <forward_conv2d_nl_pool+0x10ba>
 80059a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059aa:	4451      	add	r1, sl
 80059ac:	4452      	add	r2, sl
 80059ae:	4283      	cmp	r3, r0
 80059b0:	dd0f      	ble.n	80059d2 <forward_conv2d_nl_pool+0x11b6>
 80059b2:	4604      	mov	r4, r0
 80059b4:	468c      	mov	ip, r1
 80059b6:	4616      	mov	r6, r2
 80059b8:	ecb6 7a01 	vldmia	r6!, {s14}
 80059bc:	ecfc 7a01 	vldmia	ip!, {s15}
 80059c0:	3401      	adds	r4, #1
 80059c2:	42a3      	cmp	r3, r4
 80059c4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80059c8:	d1f6      	bne.n	80059b8 <forward_conv2d_nl_pool+0x119c>
 80059ca:	1a18      	subs	r0, r3, r0
 80059cc:	0080      	lsls	r0, r0, #2
 80059ce:	4402      	add	r2, r0
 80059d0:	4401      	add	r1, r0
 80059d2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80059d4:	4402      	add	r2, r0
 80059d6:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80059da:	f10e 0e01 	add.w	lr, lr, #1
 80059de:	4570      	cmp	r0, lr
 80059e0:	4449      	add	r1, r9
 80059e2:	f47f af70 	bne.w	80058c6 <forward_conv2d_nl_pool+0x10aa>
 80059e6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80059ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059ec:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80059f0:	edc3 6a00 	vstr	s13, [r3]
 80059f4:	4608      	mov	r0, r1
 80059f6:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80059fa:	440b      	add	r3, r1
 80059fc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8005a00:	677b      	str	r3, [r7, #116]	; 0x74
 8005a02:	4410      	add	r0, r2
 8005a04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a06:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8005a0a:	4608      	mov	r0, r1
 8005a0c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8005a10:	4418      	add	r0, r3
 8005a12:	1acb      	subs	r3, r1, r3
 8005a14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a18:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8005a1c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8005a20:	f10b 0b01 	add.w	fp, fp, #1
 8005a24:	455b      	cmp	r3, fp
 8005a26:	eba8 0802 	sub.w	r8, r8, r2
 8005a2a:	f47f af14 	bne.w	8005856 <forward_conv2d_nl_pool+0x103a>
 8005a2e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005a32:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8005a36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a3a:	440a      	add	r2, r1
 8005a3c:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8005a40:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8005a44:	3204      	adds	r2, #4
 8005a46:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8005a4a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8005a4e:	3301      	adds	r3, #1
 8005a50:	429a      	cmp	r2, r3
 8005a52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a56:	f47f aecf 	bne.w	80057f8 <forward_conv2d_nl_pool+0xfdc>
 8005a5a:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 8005a5e:	f8d7 a014 	ldr.w	sl, [r7, #20]
 8005a62:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 8005a66:	f7ff ba23 	b.w	8004eb0 <forward_conv2d_nl_pool+0x694>
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	e79f      	b.n	80059ae <forward_conv2d_nl_pool+0x1192>
 8005a6e:	eef0 6a46 	vmov.f32	s13, s12
 8005a72:	e7b8      	b.n	80059e6 <forward_conv2d_nl_pool+0x11ca>
 8005a74:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005a78:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8005a7c:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8005a80:	eba8 0303 	sub.w	r3, r8, r3
 8005a84:	e6f0      	b.n	8005868 <forward_conv2d_nl_pool+0x104c>
 8005a86:	eeb0 6a48 	vmov.f32	s12, s16
 8005a8a:	e6ca      	b.n	8005822 <forward_conv2d_nl_pool+0x1006>

08005a8c <forward_dense>:
 8005a8c:	6983      	ldr	r3, [r0, #24]
 8005a8e:	881a      	ldrh	r2, [r3, #0]
 8005a90:	2a00      	cmp	r2, #0
 8005a92:	f000 8193 	beq.w	8005dbc <forward_dense+0x330>
 8005a96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9a:	ed2d 8b10 	vpush	{d8-d15}
 8005a9e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8005aa2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8005aa6:	b099      	sub	sp, #100	; 0x64
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 8194 	beq.w	8005dd6 <forward_dense+0x34a>
 8005aae:	f8d3 8000 	ldr.w	r8, [r3]
 8005ab2:	2a01      	cmp	r2, #1
 8005ab4:	f240 817f 	bls.w	8005db6 <forward_dense+0x32a>
 8005ab8:	f8dc 4010 	ldr.w	r4, [ip, #16]
 8005abc:	b104      	cbz	r4, 8005ac0 <forward_dense+0x34>
 8005abe:	6824      	ldr	r4, [r4, #0]
 8005ac0:	2a02      	cmp	r2, #2
 8005ac2:	f000 817d 	beq.w	8005dc0 <forward_dense+0x334>
 8005ac6:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f040 817b 	bne.w	8005dc6 <forward_dense+0x33a>
 8005ad0:	f11c 0118 	adds.w	r1, ip, #24
 8005ad4:	930e      	str	r3, [sp, #56]	; 0x38
 8005ad6:	f000 817c 	beq.w	8005dd2 <forward_dense+0x346>
 8005ada:	f8bc 1018 	ldrh.w	r1, [ip, #24]
 8005ade:	2901      	cmp	r1, #1
 8005ae0:	f240 83ab 	bls.w	800623a <forward_dense+0x7ae>
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 8178 	beq.w	8005dda <forward_dense+0x34e>
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	930f      	str	r3, [sp, #60]	; 0x3c
 8005aee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005af0:	68e7      	ldr	r7, [r4, #12]
 8005af2:	6998      	ldr	r0, [r3, #24]
 8005af4:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8005af8:	6803      	ldr	r3, [r0, #0]
 8005afa:	6849      	ldr	r1, [r1, #4]
 8005afc:	9115      	str	r1, [sp, #84]	; 0x54
 8005afe:	e9d7 6501 	ldrd	r6, r5, [r7, #4]
 8005b02:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8005b06:	f3c3 5141 	ubfx	r1, r3, #21, #2
 8005b0a:	fa4e f101 	asr.w	r1, lr, r1
 8005b0e:	2a03      	cmp	r2, #3
 8005b10:	68ff      	ldr	r7, [r7, #12]
 8005b12:	9113      	str	r1, [sp, #76]	; 0x4c
 8005b14:	fb05 f506 	mul.w	r5, r5, r6
 8005b18:	f000 8373 	beq.w	8006202 <forward_dense+0x776>
 8005b1c:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8005b20:	2a00      	cmp	r2, #0
 8005b22:	f000 8371 	beq.w	8006208 <forward_dense+0x77c>
 8005b26:	6812      	ldr	r2, [r2, #0]
 8005b28:	2a00      	cmp	r2, #0
 8005b2a:	f000 836d 	beq.w	8006208 <forward_dense+0x77c>
 8005b2e:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8005b38:	f000 836c 	beq.w	8006214 <forward_dense+0x788>
 8005b3c:	2b08      	cmp	r3, #8
 8005b3e:	f000 8369 	beq.w	8006214 <forward_dense+0x788>
 8005b42:	f04f 0a00 	mov.w	sl, #0
 8005b46:	69a3      	ldr	r3, [r4, #24]
 8005b48:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8005b4c:	6899      	ldr	r1, [r3, #8]
 8005b4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b50:	9102      	str	r1, [sp, #8]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	6892      	ldr	r2, [r2, #8]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	9305      	str	r3, [sp, #20]
 8005b5a:	00ad      	lsls	r5, r5, #2
 8005b5c:	fb07 1005 	mla	r0, r7, r5, r1
 8005b60:	00b4      	lsls	r4, r6, #2
 8005b62:	4281      	cmp	r1, r0
 8005b64:	9011      	str	r0, [sp, #68]	; 0x44
 8005b66:	9410      	str	r4, [sp, #64]	; 0x40
 8005b68:	eb01 0804 	add.w	r8, r1, r4
 8005b6c:	f080 811e 	bcs.w	8005dac <forward_dense+0x320>
 8005b70:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8005b72:	eddf faa0 	vldr	s31, [pc, #640]	; 8005df4 <forward_dense+0x368>
 8005b76:	08e8      	lsrs	r0, r5, #3
 8005b78:	0141      	lsls	r1, r0, #5
 8005b7a:	f025 0301 	bic.w	r3, r5, #1
 8005b7e:	4606      	mov	r6, r0
 8005b80:	ebc1 0383 	rsb	r3, r1, r3, lsl #2
 8005b84:	9001      	str	r0, [sp, #4]
 8005b86:	ebc0 60c0 	rsb	r0, r0, r0, lsl #27
 8005b8a:	00f7      	lsls	r7, r6, #3
 8005b8c:	9316      	str	r3, [sp, #88]	; 0x58
 8005b8e:	0143      	lsls	r3, r0, #5
 8005b90:	00b6      	lsls	r6, r6, #2
 8005b92:	f1a5 0410 	sub.w	r4, r5, #16
 8005b96:	9307      	str	r3, [sp, #28]
 8005b98:	f107 0308 	add.w	r3, r7, #8
 8005b9c:	0924      	lsrs	r4, r4, #4
 8005b9e:	9304      	str	r3, [sp, #16]
 8005ba0:	1d33      	adds	r3, r6, #4
 8005ba2:	3401      	adds	r4, #1
 8005ba4:	930d      	str	r3, [sp, #52]	; 0x34
 8005ba6:	f005 0301 	and.w	r3, r5, #1
 8005baa:	01a4      	lsls	r4, r4, #6
 8005bac:	f005 0907 	and.w	r9, r5, #7
 8005bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8005bb2:	00ab      	lsls	r3, r5, #2
 8005bb4:	9312      	str	r3, [sp, #72]	; 0x48
 8005bb6:	9703      	str	r7, [sp, #12]
 8005bb8:	960c      	str	r6, [sp, #48]	; 0x30
 8005bba:	9417      	str	r4, [sp, #92]	; 0x5c
 8005bbc:	eb02 0b01 	add.w	fp, r2, r1
 8005bc0:	4653      	mov	r3, sl
 8005bc2:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8005bc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bc8:	9907      	ldr	r1, [sp, #28]
 8005bca:	6992      	ldr	r2, [r2, #24]
 8005bcc:	6894      	ldr	r4, [r2, #8]
 8005bce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005bd0:	4459      	add	r1, fp
 8005bd2:	9106      	str	r1, [sp, #24]
 8005bd4:	2a00      	cmp	r2, #0
 8005bd6:	f000 810f 	beq.w	8005df8 <forward_dense+0x36c>
 8005bda:	6992      	ldr	r2, [r2, #24]
 8005bdc:	6896      	ldr	r6, [r2, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f000 810e 	beq.w	8005e00 <forward_dense+0x374>
 8005be4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005be6:	2a04      	cmp	r2, #4
 8005be8:	f000 821e 	beq.w	8006028 <forward_dense+0x59c>
 8005bec:	9a02      	ldr	r2, [sp, #8]
 8005bee:	4590      	cmp	r8, r2
 8005bf0:	f240 80d3 	bls.w	8005d9a <forward_dense+0x30e>
 8005bf4:	4694      	mov	ip, r2
 8005bf6:	9a07      	ldr	r2, [sp, #28]
 8005bf8:	f8dd a014 	ldr.w	sl, [sp, #20]
 8005bfc:	f102 0e20 	add.w	lr, r2, #32
 8005c00:	46b1      	mov	r9, r6
 8005c02:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8005c04:	44de      	add	lr, fp
 8005c06:	f1b9 0f00 	cmp.w	r9, #0
 8005c0a:	f000 80e8 	beq.w	8005dde <forward_dense+0x352>
 8005c0e:	9a01      	ldr	r2, [sp, #4]
 8005c10:	edd9 2a00 	vldr	s5, [r9]
 8005c14:	eddf 6a77 	vldr	s13, [pc, #476]	; 8005df4 <forward_dense+0x368>
 8005c18:	f109 0904 	add.w	r9, r9, #4
 8005c1c:	2a00      	cmp	r2, #0
 8005c1e:	f000 80e6 	beq.w	8005dee <forward_dense+0x362>
 8005c22:	9904      	ldr	r1, [sp, #16]
 8005c24:	f104 0208 	add.w	r2, r4, #8
 8005c28:	190f      	adds	r7, r1, r4
 8005c2a:	4671      	mov	r1, lr
 8005c2c:	f812 5c07 	ldrb.w	r5, [r2, #-7]
 8005c30:	f812 0c08 	ldrb.w	r0, [r2, #-8]
 8005c34:	ed51 7a07 	vldr	s15, [r1, #-28]	; 0xffffffe4
 8005c38:	ed11 3a08 	vldr	s6, [r1, #-32]	; 0xffffffe0
 8005c3c:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8005c40:	ed11 5a05 	vldr	s10, [r1, #-20]	; 0xffffffec
 8005c44:	ed51 3a04 	vldr	s7, [r1, #-16]
 8005c48:	ed51 4a03 	vldr	s9, [r1, #-12]
 8005c4c:	ed51 5a02 	vldr	s11, [r1, #-8]
 8005c50:	ed11 6a01 	vldr	s12, [r1, #-4]
 8005c54:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005c58:	ed95 7a00 	vldr	s14, [r5]
 8005c5c:	f812 5c06 	ldrb.w	r5, [r2, #-6]
 8005c60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c68:	ed90 7a00 	vldr	s14, [r0]
 8005c6c:	f812 0c05 	ldrb.w	r0, [r2, #-5]
 8005c70:	eee7 7a03 	vfma.f32	s15, s14, s6
 8005c74:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005c78:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005c7c:	ed95 3a00 	vldr	s6, [r5]
 8005c80:	ed90 7a00 	vldr	s14, [r0]
 8005c84:	f812 5c04 	ldrb.w	r5, [r2, #-4]
 8005c88:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 8005c8c:	eee3 7a04 	vfma.f32	s15, s6, s8
 8005c90:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005c94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005c98:	ed95 3a00 	vldr	s6, [r5]
 8005c9c:	ed90 4a00 	vldr	s8, [r0]
 8005ca0:	f812 5c02 	ldrb.w	r5, [r2, #-2]
 8005ca4:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 8005ca8:	eee7 7a05 	vfma.f32	s15, s14, s10
 8005cac:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005cb0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005cb4:	ed95 5a00 	vldr	s10, [r5]
 8005cb8:	ed90 7a00 	vldr	s14, [r0]
 8005cbc:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005cc0:	3208      	adds	r2, #8
 8005cc2:	4297      	cmp	r7, r2
 8005cc4:	f101 0120 	add.w	r1, r1, #32
 8005cc8:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005ccc:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005cd0:	eee7 7a06 	vfma.f32	s15, s14, s12
 8005cd4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005cd8:	d1a8      	bne.n	8005c2c <forward_dense+0x1a0>
 8005cda:	9a03      	ldr	r2, [sp, #12]
 8005cdc:	18a1      	adds	r1, r4, r2
 8005cde:	465a      	mov	r2, fp
 8005ce0:	2e00      	cmp	r6, #0
 8005ce2:	d04a      	beq.n	8005d7a <forward_dense+0x2ee>
 8005ce4:	7808      	ldrb	r0, [r1, #0]
 8005ce6:	ed92 7a00 	vldr	s14, [r2]
 8005cea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005cee:	edd0 7a00 	vldr	s15, [r0]
 8005cf2:	2e01      	cmp	r6, #1
 8005cf4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005cf8:	d03f      	beq.n	8005d7a <forward_dense+0x2ee>
 8005cfa:	7848      	ldrb	r0, [r1, #1]
 8005cfc:	edd2 7a01 	vldr	s15, [r2, #4]
 8005d00:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005d04:	ed90 7a00 	vldr	s14, [r0]
 8005d08:	2e02      	cmp	r6, #2
 8005d0a:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005d0e:	d034      	beq.n	8005d7a <forward_dense+0x2ee>
 8005d10:	7888      	ldrb	r0, [r1, #2]
 8005d12:	edd2 7a02 	vldr	s15, [r2, #8]
 8005d16:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005d1a:	ed90 7a00 	vldr	s14, [r0]
 8005d1e:	2e03      	cmp	r6, #3
 8005d20:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005d24:	d029      	beq.n	8005d7a <forward_dense+0x2ee>
 8005d26:	78c8      	ldrb	r0, [r1, #3]
 8005d28:	edd2 7a03 	vldr	s15, [r2, #12]
 8005d2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005d30:	ed90 7a00 	vldr	s14, [r0]
 8005d34:	2e04      	cmp	r6, #4
 8005d36:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005d3a:	d01e      	beq.n	8005d7a <forward_dense+0x2ee>
 8005d3c:	7908      	ldrb	r0, [r1, #4]
 8005d3e:	edd2 7a04 	vldr	s15, [r2, #16]
 8005d42:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005d46:	ed90 7a00 	vldr	s14, [r0]
 8005d4a:	2e05      	cmp	r6, #5
 8005d4c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005d50:	d013      	beq.n	8005d7a <forward_dense+0x2ee>
 8005d52:	7948      	ldrb	r0, [r1, #5]
 8005d54:	edd2 7a05 	vldr	s15, [r2, #20]
 8005d58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005d5c:	ed90 7a00 	vldr	s14, [r0]
 8005d60:	2e06      	cmp	r6, #6
 8005d62:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005d66:	d008      	beq.n	8005d7a <forward_dense+0x2ee>
 8005d68:	7989      	ldrb	r1, [r1, #6]
 8005d6a:	edd2 7a06 	vldr	s15, [r2, #24]
 8005d6e:	eb03 0281 	add.w	r2, r3, r1, lsl #2
 8005d72:	ed92 7a00 	vldr	s14, [r2]
 8005d76:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005d7a:	4454      	add	r4, sl
 8005d7c:	ee72 6aa6 	vadd.f32	s13, s5, s13
 8005d80:	ecec 6a01 	vstmia	ip!, {s13}
 8005d84:	45c4      	cmp	ip, r8
 8005d86:	f4ff af3e 	bcc.w	8005c06 <forward_dense+0x17a>
 8005d8a:	9902      	ldr	r1, [sp, #8]
 8005d8c:	43ca      	mvns	r2, r1
 8005d8e:	4442      	add	r2, r8
 8005d90:	f022 0203 	bic.w	r2, r2, #3
 8005d94:	3204      	adds	r2, #4
 8005d96:	188a      	adds	r2, r1, r2
 8005d98:	9202      	str	r2, [sp, #8]
 8005d9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d9c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005d9e:	4490      	add	r8, r2
 8005da0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005da2:	4493      	add	fp, r2
 8005da4:	9a02      	ldr	r2, [sp, #8]
 8005da6:	428a      	cmp	r2, r1
 8005da8:	f4ff af0d 	bcc.w	8005bc6 <forward_dense+0x13a>
 8005dac:	b019      	add	sp, #100	; 0x64
 8005dae:	ecbd 8b10 	vpop	{d8-d15}
 8005db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db6:	2300      	movs	r3, #0
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	deff      	udf	#255	; 0xff
 8005dbc:	6853      	ldr	r3, [r2, #4]
 8005dbe:	deff      	udf	#255	; 0xff
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	deff      	udf	#255	; 0xff
 8005dc6:	6819      	ldr	r1, [r3, #0]
 8005dc8:	910e      	str	r1, [sp, #56]	; 0x38
 8005dca:	f11c 0118 	adds.w	r1, ip, #24
 8005dce:	f47f ae84 	bne.w	8005ada <forward_dense+0x4e>
 8005dd2:	910f      	str	r1, [sp, #60]	; 0x3c
 8005dd4:	e68b      	b.n	8005aee <forward_dense+0x62>
 8005dd6:	4698      	mov	r8, r3
 8005dd8:	e66b      	b.n	8005ab2 <forward_dense+0x26>
 8005dda:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ddc:	e687      	b.n	8005aee <forward_dense+0x62>
 8005dde:	9a01      	ldr	r2, [sp, #4]
 8005de0:	eddf 6a04 	vldr	s13, [pc, #16]	; 8005df4 <forward_dense+0x368>
 8005de4:	eef0 2a6f 	vmov.f32	s5, s31
 8005de8:	2a00      	cmp	r2, #0
 8005dea:	f47f af1a 	bne.w	8005c22 <forward_dense+0x196>
 8005dee:	9a06      	ldr	r2, [sp, #24]
 8005df0:	4621      	mov	r1, r4
 8005df2:	e775      	b.n	8005ce0 <forward_dense+0x254>
 8005df4:	00000000 	.word	0x00000000
 8005df8:	4616      	mov	r6, r2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f47f aef2 	bne.w	8005be4 <forward_dense+0x158>
 8005e00:	9a02      	ldr	r2, [sp, #8]
 8005e02:	4590      	cmp	r8, r2
 8005e04:	d9c9      	bls.n	8005d9a <forward_dense+0x30e>
 8005e06:	4615      	mov	r5, r2
 8005e08:	9a07      	ldr	r2, [sp, #28]
 8005e0a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8005e0c:	9308      	str	r3, [sp, #32]
 8005e0e:	f102 0740 	add.w	r7, r2, #64	; 0x40
 8005e12:	9a06      	ldr	r2, [sp, #24]
 8005e14:	9b05      	ldr	r3, [sp, #20]
 8005e16:	4610      	mov	r0, r2
 8005e18:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005e1a:	445f      	add	r7, fp
 8005e1c:	eb00 0c02 	add.w	ip, r0, r2
 8005e20:	f001 0e0f 	and.w	lr, r1, #15
 8005e24:	468a      	mov	sl, r1
 8005e26:	4691      	mov	r9, r2
 8005e28:	2e00      	cmp	r6, #0
 8005e2a:	f000 81de 	beq.w	80061ea <forward_dense+0x75e>
 8005e2e:	f1ba 0f0f 	cmp.w	sl, #15
 8005e32:	ed96 fa00 	vldr	s30, [r6]
 8005e36:	ed5f 6a11 	vldr	s13, [pc, #-68]	; 8005df4 <forward_dense+0x368>
 8005e3a:	f106 0604 	add.w	r6, r6, #4
 8005e3e:	f240 81dc 	bls.w	80061fa <forward_dense+0x76e>
 8005e42:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8005e46:	463a      	mov	r2, r7
 8005e48:	4650      	mov	r0, sl
 8005e4a:	ed52 ea0f 	vldr	s29, [r2, #-60]	; 0xffffffc4
 8005e4e:	ed51 7a0f 	vldr	s15, [r1, #-60]	; 0xffffffc4
 8005e52:	ed11 ea10 	vldr	s28, [r1, #-64]	; 0xffffffc0
 8005e56:	ed52 da10 	vldr	s27, [r2, #-64]	; 0xffffffc0
 8005e5a:	ed11 da0e 	vldr	s26, [r1, #-56]	; 0xffffffc8
 8005e5e:	ed51 ca0d 	vldr	s25, [r1, #-52]	; 0xffffffcc
 8005e62:	ed12 ca0d 	vldr	s24, [r2, #-52]	; 0xffffffcc
 8005e66:	ed52 ba0c 	vldr	s23, [r2, #-48]	; 0xffffffd0
 8005e6a:	ed11 ba0c 	vldr	s22, [r1, #-48]	; 0xffffffd0
 8005e6e:	ed52 aa0b 	vldr	s21, [r2, #-44]	; 0xffffffd4
 8005e72:	ed11 aa0b 	vldr	s20, [r1, #-44]	; 0xffffffd4
 8005e76:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8005e7a:	ed11 9a0a 	vldr	s18, [r1, #-40]	; 0xffffffd8
 8005e7e:	ed51 8a09 	vldr	s17, [r1, #-36]	; 0xffffffdc
 8005e82:	ed12 8a09 	vldr	s16, [r2, #-36]	; 0xffffffdc
 8005e86:	ed11 0a08 	vldr	s0, [r1, #-32]	; 0xffffffe0
 8005e8a:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8005e8e:	ed11 1a07 	vldr	s2, [r1, #-28]	; 0xffffffe4
 8005e92:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8005e96:	ed11 2a06 	vldr	s4, [r1, #-24]	; 0xffffffe8
 8005e9a:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8005e9e:	ed11 3a05 	vldr	s6, [r1, #-20]	; 0xffffffec
 8005ea2:	ed52 3a05 	vldr	s7, [r2, #-20]	; 0xffffffec
 8005ea6:	ed12 4a04 	vldr	s8, [r2, #-16]
 8005eaa:	ed51 4a04 	vldr	s9, [r1, #-16]
 8005eae:	ed12 5a03 	vldr	s10, [r2, #-12]
 8005eb2:	ed51 5a03 	vldr	s11, [r1, #-12]
 8005eb6:	ed12 6a02 	vldr	s12, [r2, #-8]
 8005eba:	ed11 7a02 	vldr	s14, [r1, #-8]
 8005ebe:	ee67 7aae 	vmul.f32	s15, s15, s29
 8005ec2:	ed52 ea0e 	vldr	s29, [r2, #-56]	; 0xffffffc8
 8005ec6:	eeee 7a2d 	vfma.f32	s15, s28, s27
 8005eca:	3810      	subs	r0, #16
 8005ecc:	280f      	cmp	r0, #15
 8005ece:	ed11 ea01 	vldr	s28, [r1, #-4]
 8005ed2:	ed52 da01 	vldr	s27, [r2, #-4]
 8005ed6:	eeed 7a2e 	vfma.f32	s15, s26, s29
 8005eda:	f101 0140 	add.w	r1, r1, #64	; 0x40
 8005ede:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8005ee2:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8005ee6:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8005eea:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8005eee:	eee9 7a89 	vfma.f32	s15, s19, s18
 8005ef2:	eee8 7a88 	vfma.f32	s15, s17, s16
 8005ef6:	eee0 7a20 	vfma.f32	s15, s0, s1
 8005efa:	eee1 7a21 	vfma.f32	s15, s2, s3
 8005efe:	eee2 7a22 	vfma.f32	s15, s4, s5
 8005f02:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005f06:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005f0a:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005f0e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005f12:	eeee 7a2d 	vfma.f32	s15, s28, s27
 8005f16:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005f1a:	d896      	bhi.n	8005e4a <forward_dense+0x3be>
 8005f1c:	eb04 0009 	add.w	r0, r4, r9
 8005f20:	4672      	mov	r2, lr
 8005f22:	4661      	mov	r1, ip
 8005f24:	2a00      	cmp	r2, #0
 8005f26:	d075      	beq.n	8006014 <forward_dense+0x588>
 8005f28:	ed90 7a00 	vldr	s14, [r0]
 8005f2c:	edd1 7a00 	vldr	s15, [r1]
 8005f30:	2a01      	cmp	r2, #1
 8005f32:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005f36:	d06d      	beq.n	8006014 <forward_dense+0x588>
 8005f38:	ed90 7a01 	vldr	s14, [r0, #4]
 8005f3c:	edd1 7a01 	vldr	s15, [r1, #4]
 8005f40:	2a02      	cmp	r2, #2
 8005f42:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005f46:	d065      	beq.n	8006014 <forward_dense+0x588>
 8005f48:	ed90 7a02 	vldr	s14, [r0, #8]
 8005f4c:	edd1 7a02 	vldr	s15, [r1, #8]
 8005f50:	2a03      	cmp	r2, #3
 8005f52:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005f56:	d05d      	beq.n	8006014 <forward_dense+0x588>
 8005f58:	ed90 7a03 	vldr	s14, [r0, #12]
 8005f5c:	edd1 7a03 	vldr	s15, [r1, #12]
 8005f60:	2a04      	cmp	r2, #4
 8005f62:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005f66:	d055      	beq.n	8006014 <forward_dense+0x588>
 8005f68:	ed90 7a04 	vldr	s14, [r0, #16]
 8005f6c:	edd1 7a04 	vldr	s15, [r1, #16]
 8005f70:	2a05      	cmp	r2, #5
 8005f72:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005f76:	d04d      	beq.n	8006014 <forward_dense+0x588>
 8005f78:	ed90 7a05 	vldr	s14, [r0, #20]
 8005f7c:	edd1 7a05 	vldr	s15, [r1, #20]
 8005f80:	2a06      	cmp	r2, #6
 8005f82:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005f86:	d045      	beq.n	8006014 <forward_dense+0x588>
 8005f88:	ed90 7a06 	vldr	s14, [r0, #24]
 8005f8c:	edd1 7a06 	vldr	s15, [r1, #24]
 8005f90:	2a07      	cmp	r2, #7
 8005f92:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005f96:	d03d      	beq.n	8006014 <forward_dense+0x588>
 8005f98:	ed90 7a07 	vldr	s14, [r0, #28]
 8005f9c:	edd1 7a07 	vldr	s15, [r1, #28]
 8005fa0:	2a08      	cmp	r2, #8
 8005fa2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005fa6:	d035      	beq.n	8006014 <forward_dense+0x588>
 8005fa8:	ed90 7a08 	vldr	s14, [r0, #32]
 8005fac:	edd1 7a08 	vldr	s15, [r1, #32]
 8005fb0:	2a09      	cmp	r2, #9
 8005fb2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005fb6:	d02d      	beq.n	8006014 <forward_dense+0x588>
 8005fb8:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 8005fbc:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 8005fc0:	2a0a      	cmp	r2, #10
 8005fc2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005fc6:	d025      	beq.n	8006014 <forward_dense+0x588>
 8005fc8:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 8005fcc:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 8005fd0:	2a0b      	cmp	r2, #11
 8005fd2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005fd6:	d01d      	beq.n	8006014 <forward_dense+0x588>
 8005fd8:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 8005fdc:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 8005fe0:	2a0c      	cmp	r2, #12
 8005fe2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005fe6:	d015      	beq.n	8006014 <forward_dense+0x588>
 8005fe8:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 8005fec:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 8005ff0:	2a0d      	cmp	r2, #13
 8005ff2:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005ff6:	d00d      	beq.n	8006014 <forward_dense+0x588>
 8005ff8:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 8005ffc:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 8006000:	2a0e      	cmp	r2, #14
 8006002:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006006:	d005      	beq.n	8006014 <forward_dense+0x588>
 8006008:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 800600c:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8006010:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006014:	441c      	add	r4, r3
 8006016:	ee7f 6a26 	vadd.f32	s13, s30, s13
 800601a:	ece5 6a01 	vstmia	r5!, {s13}
 800601e:	4545      	cmp	r5, r8
 8006020:	f4ff af02 	bcc.w	8005e28 <forward_dense+0x39c>
 8006024:	9b08      	ldr	r3, [sp, #32]
 8006026:	e6b0      	b.n	8005d8a <forward_dense+0x2fe>
 8006028:	9902      	ldr	r1, [sp, #8]
 800602a:	4588      	cmp	r8, r1
 800602c:	f67f aeb5 	bls.w	8005d9a <forward_dense+0x30e>
 8006030:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006032:	eb02 000b 	add.w	r0, r2, fp
 8006036:	9a07      	ldr	r2, [sp, #28]
 8006038:	9008      	str	r0, [sp, #32]
 800603a:	3220      	adds	r2, #32
 800603c:	3007      	adds	r0, #7
 800603e:	445a      	add	r2, fp
 8006040:	900b      	str	r0, [sp, #44]	; 0x2c
 8006042:	920a      	str	r2, [sp, #40]	; 0x28
 8006044:	4689      	mov	r9, r1
 8006046:	2e00      	cmp	r6, #0
 8006048:	f000 80b9 	beq.w	80061be <forward_dense+0x732>
 800604c:	9a01      	ldr	r2, [sp, #4]
 800604e:	edd6 2a00 	vldr	s5, [r6]
 8006052:	ed5f 6a98 	vldr	s13, [pc, #-608]	; 8005df4 <forward_dense+0x368>
 8006056:	3604      	adds	r6, #4
 8006058:	2a00      	cmp	r2, #0
 800605a:	f000 80b8 	beq.w	80061ce <forward_dense+0x742>
 800605e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006060:	1917      	adds	r7, r2, r4
 8006062:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006064:	1d21      	adds	r1, r4, #4
 8006066:	f811 5c04 	ldrb.w	r5, [r1, #-4]
 800606a:	ed52 7a07 	vldr	s15, [r2, #-28]	; 0xffffffe4
 800606e:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 8006072:	ed12 3a08 	vldr	s6, [r2, #-32]	; 0xffffffe0
 8006076:	ed52 3a06 	vldr	s7, [r2, #-24]	; 0xffffffe8
 800607a:	ed12 4a05 	vldr	s8, [r2, #-20]	; 0xffffffec
 800607e:	ed52 4a04 	vldr	s9, [r2, #-16]
 8006082:	ed12 5a03 	vldr	s10, [r2, #-12]
 8006086:	ed52 5a02 	vldr	s11, [r2, #-8]
 800608a:	ed12 6a01 	vldr	s12, [r2, #-4]
 800608e:	f005 0e0f 	and.w	lr, r5, #15
 8006092:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 8006096:	ed9e 7a00 	vldr	s14, [lr]
 800609a:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 800609e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80060a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060a6:	ed9c 7a00 	vldr	s14, [ip]
 80060aa:	f811 5c02 	ldrb.w	r5, [r1, #-2]
 80060ae:	ea4f 1e10 	mov.w	lr, r0, lsr #4
 80060b2:	eee7 7a03 	vfma.f32	s15, s14, s6
 80060b6:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 80060ba:	f000 0c0f 	and.w	ip, r0, #15
 80060be:	ed9e 7a00 	vldr	s14, [lr]
 80060c2:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 80060c6:	eee7 7a23 	vfma.f32	s15, s14, s7
 80060ca:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80060ce:	3104      	adds	r1, #4
 80060d0:	ed9c 7a00 	vldr	s14, [ip]
 80060d4:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 80060d8:	eee7 7a04 	vfma.f32	s15, s14, s8
 80060dc:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80060e0:	f005 050f 	and.w	r5, r5, #15
 80060e4:	ed9c 7a00 	vldr	s14, [ip]
 80060e8:	eee7 7a24 	vfma.f32	s15, s14, s9
 80060ec:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80060f0:	428f      	cmp	r7, r1
 80060f2:	ed95 7a00 	vldr	s14, [r5]
 80060f6:	ea4f 1510 	mov.w	r5, r0, lsr #4
 80060fa:	eee7 7a05 	vfma.f32	s15, s14, s10
 80060fe:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8006102:	f000 000f 	and.w	r0, r0, #15
 8006106:	ed95 7a00 	vldr	s14, [r5]
 800610a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800610e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006112:	f102 0220 	add.w	r2, r2, #32
 8006116:	ed90 7a00 	vldr	s14, [r0]
 800611a:	eee7 7a06 	vfma.f32	s15, s14, s12
 800611e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006122:	d1a0      	bne.n	8006066 <forward_dense+0x5da>
 8006124:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006126:	46de      	mov	lr, fp
 8006128:	eb04 0a02 	add.w	sl, r4, r2
 800612c:	9a08      	ldr	r2, [sp, #32]
 800612e:	4596      	cmp	lr, r2
 8006130:	d22c      	bcs.n	800618c <forward_dense+0x700>
 8006132:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006134:	f10e 0108 	add.w	r1, lr, #8
 8006138:	eba2 0c01 	sub.w	ip, r2, r1
 800613c:	f02c 0207 	bic.w	r2, ip, #7
 8006140:	f10e 0710 	add.w	r7, lr, #16
 8006144:	4417      	add	r7, r2
 8006146:	f10a 35ff 	add.w	r5, sl, #4294967295
 800614a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800614e:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006152:	ed11 6a02 	vldr	s12, [r1, #-8]
 8006156:	f002 000f 	and.w	r0, r2, #15
 800615a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800615e:	ed90 7a00 	vldr	s14, [r0]
 8006162:	0912      	lsrs	r2, r2, #4
 8006164:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800616c:	ed92 7a00 	vldr	s14, [r2]
 8006170:	eee7 7a06 	vfma.f32	s15, s14, s12
 8006174:	3108      	adds	r1, #8
 8006176:	428f      	cmp	r7, r1
 8006178:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800617c:	d1e5      	bne.n	800614a <forward_dense+0x6be>
 800617e:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8006182:	f10c 0c01 	add.w	ip, ip, #1
 8006186:	44e2      	add	sl, ip
 8006188:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
 800618c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800618e:	b312      	cbz	r2, 80061d6 <forward_dense+0x74a>
 8006190:	f89a 2000 	ldrb.w	r2, [sl]
 8006194:	edde 7a00 	vldr	s15, [lr]
 8006198:	0912      	lsrs	r2, r2, #4
 800619a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800619e:	ed92 7a00 	vldr	s14, [r2]
 80061a2:	9a05      	ldr	r2, [sp, #20]
 80061a4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80061a8:	4414      	add	r4, r2
 80061aa:	ee76 2aa2 	vadd.f32	s5, s13, s5
 80061ae:	ece9 2a01 	vstmia	r9!, {s5}
 80061b2:	45c8      	cmp	r8, r9
 80061b4:	f67f ade9 	bls.w	8005d8a <forward_dense+0x2fe>
 80061b8:	2e00      	cmp	r6, #0
 80061ba:	f47f af47 	bne.w	800604c <forward_dense+0x5c0>
 80061be:	9a01      	ldr	r2, [sp, #4]
 80061c0:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8006240 <forward_dense+0x7b4>
 80061c4:	eef0 2a6f 	vmov.f32	s5, s31
 80061c8:	2a00      	cmp	r2, #0
 80061ca:	f47f af48 	bne.w	800605e <forward_dense+0x5d2>
 80061ce:	f8dd e018 	ldr.w	lr, [sp, #24]
 80061d2:	46a2      	mov	sl, r4
 80061d4:	e7aa      	b.n	800612c <forward_dense+0x6a0>
 80061d6:	ee72 6aa6 	vadd.f32	s13, s5, s13
 80061da:	9a05      	ldr	r2, [sp, #20]
 80061dc:	ece9 6a01 	vstmia	r9!, {s13}
 80061e0:	45c1      	cmp	r9, r8
 80061e2:	4414      	add	r4, r2
 80061e4:	f4ff af2f 	bcc.w	8006046 <forward_dense+0x5ba>
 80061e8:	e5cf      	b.n	8005d8a <forward_dense+0x2fe>
 80061ea:	f1ba 0f0f 	cmp.w	sl, #15
 80061ee:	eeb0 fa6f 	vmov.f32	s30, s31
 80061f2:	eddf 6a13 	vldr	s13, [pc, #76]	; 8006240 <forward_dense+0x7b4>
 80061f6:	f63f ae24 	bhi.w	8005e42 <forward_dense+0x3b6>
 80061fa:	4652      	mov	r2, sl
 80061fc:	4620      	mov	r0, r4
 80061fe:	9906      	ldr	r1, [sp, #24]
 8006200:	e690      	b.n	8005f24 <forward_dense+0x498>
 8006202:	2300      	movs	r3, #0
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	deff      	udf	#255	; 0xff
 8006208:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800620c:	2b04      	cmp	r3, #4
 800620e:	4691      	mov	r9, r2
 8006210:	f47f ac94 	bne.w	8005b3c <forward_dense+0xb0>
 8006214:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8006218:	f1b9 0f00 	cmp.w	r9, #0
 800621c:	f43f ac93 	beq.w	8005b46 <forward_dense+0xba>
 8006220:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006224:	f000 fc68 	bl	8006af8 <ai_array_get_byte_size>
 8006228:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800622c:	4602      	mov	r2, r0
 800622e:	4651      	mov	r1, sl
 8006230:	4618      	mov	r0, r3
 8006232:	f000 fe83 	bl	8006f3c <memcpy>
 8006236:	4682      	mov	sl, r0
 8006238:	e485      	b.n	8005b46 <forward_dense+0xba>
 800623a:	2300      	movs	r3, #0
 800623c:	930f      	str	r3, [sp, #60]	; 0x3c
 800623e:	e456      	b.n	8005aee <forward_dense+0x62>
 8006240:	00000000 	.word	0x00000000

08006244 <pool_func_mp_array_f32>:
 8006244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006248:	b093      	sub	sp, #76	; 0x4c
 800624a:	f8d0 b008 	ldr.w	fp, [r0, #8]
 800624e:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8006250:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 8006254:	68a8      	ldr	r0, [r5, #8]
 8006256:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 800625a:	9508      	str	r5, [sp, #32]
 800625c:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 8006260:	9002      	str	r0, [sp, #8]
 8006262:	950d      	str	r5, [sp, #52]	; 0x34
 8006264:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 8006268:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 800626c:	9004      	str	r0, [sp, #16]
 800626e:	9506      	str	r5, [sp, #24]
 8006270:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 8006274:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 8006278:	9009      	str	r0, [sp, #36]	; 0x24
 800627a:	950b      	str	r5, [sp, #44]	; 0x2c
 800627c:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 8006280:	9200      	str	r2, [sp, #0]
 8006282:	468a      	mov	sl, r1
 8006284:	4699      	mov	r9, r3
 8006286:	b95c      	cbnz	r4, 80062a0 <pool_func_mp_array_f32+0x5c>
 8006288:	b950      	cbnz	r0, 80062a0 <pool_func_mp_array_f32+0x5c>
 800628a:	9b04      	ldr	r3, [sp, #16]
 800628c:	1a5a      	subs	r2, r3, r1
 800628e:	9b06      	ldr	r3, [sp, #24]
 8006290:	9908      	ldr	r1, [sp, #32]
 8006292:	3a01      	subs	r2, #1
 8006294:	3b01      	subs	r3, #1
 8006296:	fb13 2301 	smlabb	r3, r3, r1, r2
 800629a:	041a      	lsls	r2, r3, #16
 800629c:	f100 809b 	bmi.w	80063d6 <pool_func_mp_array_f32+0x192>
 80062a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 808b 	beq.w	80063be <pool_func_mp_array_f32+0x17a>
 80062a8:	9b06      	ldr	r3, [sp, #24]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f000 8087 	beq.w	80063be <pool_func_mp_array_f32+0x17a>
 80062b0:	f1b9 0f00 	cmp.w	r9, #0
 80062b4:	f000 8083 	beq.w	80063be <pool_func_mp_array_f32+0x17a>
 80062b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ba:	1b1c      	subs	r4, r3, r4
 80062bc:	9b04      	ldr	r3, [sp, #16]
 80062be:	1a1b      	subs	r3, r3, r0
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	4240      	negs	r0, r0
 80062c4:	2200      	movs	r2, #0
 80062c6:	b2a1      	uxth	r1, r4
 80062c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80062ca:	b283      	uxth	r3, r0
 80062cc:	920e      	str	r2, [sp, #56]	; 0x38
 80062ce:	910c      	str	r1, [sp, #48]	; 0x30
 80062d0:	9310      	str	r3, [sp, #64]	; 0x40
 80062d2:	9c06      	ldr	r4, [sp, #24]
 80062d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80062d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d8:	fb02 f204 	mul.w	r2, r2, r4
 80062dc:	1acb      	subs	r3, r1, r3
 80062de:	920a      	str	r2, [sp, #40]	; 0x28
 80062e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062e2:	9205      	str	r2, [sp, #20]
 80062e4:	2000      	movs	r0, #0
 80062e6:	b21b      	sxth	r3, r3
 80062e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80062ea:	9303      	str	r3, [sp, #12]
 80062ec:	9007      	str	r0, [sp, #28]
 80062ee:	4603      	mov	r3, r0
 80062f0:	fa0f f881 	sxth.w	r8, r1
 80062f4:	9204      	str	r2, [sp, #16]
 80062f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062f8:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 80062fc:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8006300:	4413      	add	r3, r2
 8006302:	f04f 0e00 	mov.w	lr, #0
 8006306:	fb09 f303 	mul.w	r3, r9, r3
 800630a:	9301      	str	r3, [sp, #4]
 800630c:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 8006310:	4675      	mov	r5, lr
 8006312:	9903      	ldr	r1, [sp, #12]
 8006314:	eddf 7a78 	vldr	s15, [pc, #480]	; 80064f8 <pool_func_mp_array_f32+0x2b4>
 8006318:	4588      	cmp	r8, r1
 800631a:	dd24      	ble.n	8006366 <pool_func_mp_array_f32+0x122>
 800631c:	4564      	cmp	r4, ip
 800631e:	dd1e      	ble.n	800635e <pool_func_mp_array_f32+0x11a>
 8006320:	2900      	cmp	r1, #0
 8006322:	fb0a f601 	mul.w	r6, sl, r1
 8006326:	db1a      	blt.n	800635e <pool_func_mp_array_f32+0x11a>
 8006328:	9b00      	ldr	r3, [sp, #0]
 800632a:	4299      	cmp	r1, r3
 800632c:	da17      	bge.n	800635e <pool_func_mp_array_f32+0x11a>
 800632e:	f1bc 0f00 	cmp.w	ip, #0
 8006332:	4663      	mov	r3, ip
 8006334:	db46      	blt.n	80063c4 <pool_func_mp_array_f32+0x180>
 8006336:	18f2      	adds	r2, r6, r3
 8006338:	fb09 5202 	mla	r2, r9, r2, r5
 800633c:	1c58      	adds	r0, r3, #1
 800633e:	459a      	cmp	sl, r3
 8006340:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8006344:	b203      	sxth	r3, r0
 8006346:	dd08      	ble.n	800635a <pool_func_mp_array_f32+0x116>
 8006348:	ed92 7a00 	vldr	s14, [r2]
 800634c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006354:	bfb8      	it	lt
 8006356:	eef0 7a47 	vmovlt.f32	s15, s14
 800635a:	429c      	cmp	r4, r3
 800635c:	dceb      	bgt.n	8006336 <pool_func_mp_array_f32+0xf2>
 800635e:	3101      	adds	r1, #1
 8006360:	b209      	sxth	r1, r1
 8006362:	4588      	cmp	r8, r1
 8006364:	dcda      	bgt.n	800631c <pool_func_mp_array_f32+0xd8>
 8006366:	9b01      	ldr	r3, [sp, #4]
 8006368:	f10e 0e01 	add.w	lr, lr, #1
 800636c:	441d      	add	r5, r3
 800636e:	9b02      	ldr	r3, [sp, #8]
 8006370:	fa0f fe8e 	sxth.w	lr, lr
 8006374:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8006378:	45ce      	cmp	lr, r9
 800637a:	edc5 7a00 	vstr	s15, [r5]
 800637e:	4675      	mov	r5, lr
 8006380:	dbc7      	blt.n	8006312 <pool_func_mp_array_f32+0xce>
 8006382:	9b07      	ldr	r3, [sp, #28]
 8006384:	9808      	ldr	r0, [sp, #32]
 8006386:	3301      	adds	r3, #1
 8006388:	b219      	sxth	r1, r3
 800638a:	9b05      	ldr	r3, [sp, #20]
 800638c:	9107      	str	r1, [sp, #28]
 800638e:	461a      	mov	r2, r3
 8006390:	4402      	add	r2, r0
 8006392:	9b04      	ldr	r3, [sp, #16]
 8006394:	b292      	uxth	r2, r2
 8006396:	9205      	str	r2, [sp, #20]
 8006398:	9a06      	ldr	r2, [sp, #24]
 800639a:	4403      	add	r3, r0
 800639c:	b29b      	uxth	r3, r3
 800639e:	428a      	cmp	r2, r1
 80063a0:	9304      	str	r3, [sp, #16]
 80063a2:	460b      	mov	r3, r1
 80063a4:	dca7      	bgt.n	80062f6 <pool_func_mp_array_f32+0xb2>
 80063a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063a8:	3301      	adds	r3, #1
 80063aa:	b21a      	sxth	r2, r3
 80063ac:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 80063b0:	440b      	add	r3, r1
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	930c      	str	r3, [sp, #48]	; 0x30
 80063b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063b8:	920e      	str	r2, [sp, #56]	; 0x38
 80063ba:	4293      	cmp	r3, r2
 80063bc:	dc89      	bgt.n	80062d2 <pool_func_mp_array_f32+0x8e>
 80063be:	b013      	add	sp, #76	; 0x4c
 80063c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c4:	3301      	adds	r3, #1
 80063c6:	b21b      	sxth	r3, r3
 80063c8:	42bb      	cmp	r3, r7
 80063ca:	dac6      	bge.n	800635a <pool_func_mp_array_f32+0x116>
 80063cc:	3301      	adds	r3, #1
 80063ce:	b21b      	sxth	r3, r3
 80063d0:	42bb      	cmp	r3, r7
 80063d2:	dbf7      	blt.n	80063c4 <pool_func_mp_array_f32+0x180>
 80063d4:	e7c1      	b.n	800635a <pool_func_mp_array_f32+0x116>
 80063d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063d8:	9a00      	ldr	r2, [sp, #0]
 80063da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80063dc:	1a9a      	subs	r2, r3, r2
 80063de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063e0:	3a01      	subs	r2, #1
 80063e2:	3b01      	subs	r3, #1
 80063e4:	fb13 2301 	smlabb	r3, r3, r1, r2
 80063e8:	041b      	lsls	r3, r3, #16
 80063ea:	f57f af59 	bpl.w	80062a0 <pool_func_mp_array_f32+0x5c>
 80063ee:	fb0a f309 	mul.w	r3, sl, r9
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
 80063f8:	930e      	str	r3, [sp, #56]	; 0x38
 80063fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063fc:	9001      	str	r0, [sp, #4]
 80063fe:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8006408:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800640a:	429a      	cmp	r2, r3
 800640c:	ddd7      	ble.n	80063be <pool_func_mp_array_f32+0x17a>
 800640e:	9a00      	ldr	r2, [sp, #0]
 8006410:	9906      	ldr	r1, [sp, #24]
 8006412:	fa0f f882 	sxth.w	r8, r2
 8006416:	2900      	cmp	r1, #0
 8006418:	d062      	beq.n	80064e0 <pool_func_mp_array_f32+0x29c>
 800641a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800641c:	fb01 f303 	mul.w	r3, r1, r3
 8006420:	1a12      	subs	r2, r2, r0
 8006422:	9305      	str	r3, [sp, #20]
 8006424:	b213      	sxth	r3, r2
 8006426:	9307      	str	r3, [sp, #28]
 8006428:	f1b9 0f00 	cmp.w	r9, #0
 800642c:	d058      	beq.n	80064e0 <pool_func_mp_array_f32+0x29c>
 800642e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006430:	fb02 f303 	mul.w	r3, r2, r3
 8006434:	2600      	movs	r6, #0
 8006436:	930c      	str	r3, [sp, #48]	; 0x30
 8006438:	9b04      	ldr	r3, [sp, #16]
 800643a:	9303      	str	r3, [sp, #12]
 800643c:	4637      	mov	r7, r6
 800643e:	46b2      	mov	sl, r6
 8006440:	9b05      	ldr	r3, [sp, #20]
 8006442:	9611      	str	r6, [sp, #68]	; 0x44
 8006444:	eb0a 0b03 	add.w	fp, sl, r3
 8006448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800644a:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 800644e:	b235      	sxth	r5, r6
 8006450:	18eb      	adds	r3, r5, r3
 8006452:	f04f 0a00 	mov.w	sl, #0
 8006456:	fb09 f303 	mul.w	r3, r9, r3
 800645a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800645c:	930a      	str	r3, [sp, #40]	; 0x28
 800645e:	fb09 fb0b 	mul.w	fp, r9, fp
 8006462:	46d6      	mov	lr, sl
 8006464:	9807      	ldr	r0, [sp, #28]
 8006466:	4580      	cmp	r8, r0
 8006468:	dd43      	ble.n	80064f2 <pool_func_mp_array_f32+0x2ae>
 800646a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800646c:	eddf 7a22 	vldr	s15, [pc, #136]	; 80064f8 <pool_func_mp_array_f32+0x2b4>
 8006470:	eb0e 0403 	add.w	r4, lr, r3
 8006474:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006476:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800647a:	42a9      	cmp	r1, r5
 800647c:	dd0f      	ble.n	800649e <pool_func_mp_array_f32+0x25a>
 800647e:	4622      	mov	r2, r4
 8006480:	462b      	mov	r3, r5
 8006482:	ed92 7a00 	vldr	s14, [r2]
 8006486:	3301      	adds	r3, #1
 8006488:	eef4 7ac7 	vcmpe.f32	s15, s14
 800648c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006490:	b21b      	sxth	r3, r3
 8006492:	bfb8      	it	lt
 8006494:	eef0 7a47 	vmovlt.f32	s15, s14
 8006498:	4299      	cmp	r1, r3
 800649a:	4462      	add	r2, ip
 800649c:	d1f1      	bne.n	8006482 <pool_func_mp_array_f32+0x23e>
 800649e:	3001      	adds	r0, #1
 80064a0:	b200      	sxth	r0, r0
 80064a2:	4580      	cmp	r8, r0
 80064a4:	4434      	add	r4, r6
 80064a6:	d1e8      	bne.n	800647a <pool_func_mp_array_f32+0x236>
 80064a8:	f10a 0a01 	add.w	sl, sl, #1
 80064ac:	9a02      	ldr	r2, [sp, #8]
 80064ae:	eb0b 030e 	add.w	r3, fp, lr
 80064b2:	fa0f fa8a 	sxth.w	sl, sl
 80064b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80064ba:	45ca      	cmp	sl, r9
 80064bc:	edc3 7a00 	vstr	s15, [r3]
 80064c0:	46d6      	mov	lr, sl
 80064c2:	dbcf      	blt.n	8006464 <pool_func_mp_array_f32+0x220>
 80064c4:	9b03      	ldr	r3, [sp, #12]
 80064c6:	9a08      	ldr	r2, [sp, #32]
 80064c8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80064ca:	4413      	add	r3, r2
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	3701      	adds	r7, #1
 80064d0:	9303      	str	r3, [sp, #12]
 80064d2:	9b06      	ldr	r3, [sp, #24]
 80064d4:	b23f      	sxth	r7, r7
 80064d6:	4416      	add	r6, r2
 80064d8:	42bb      	cmp	r3, r7
 80064da:	b2b6      	uxth	r6, r6
 80064dc:	46ba      	mov	sl, r7
 80064de:	dcaf      	bgt.n	8006440 <pool_func_mp_array_f32+0x1fc>
 80064e0:	9b00      	ldr	r3, [sp, #0]
 80064e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80064e4:	4413      	add	r3, r2
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	9b01      	ldr	r3, [sp, #4]
 80064ec:	3301      	adds	r3, #1
 80064ee:	9301      	str	r3, [sp, #4]
 80064f0:	e788      	b.n	8006404 <pool_func_mp_array_f32+0x1c0>
 80064f2:	eddf 7a01 	vldr	s15, [pc, #4]	; 80064f8 <pool_func_mp_array_f32+0x2b4>
 80064f6:	e7d7      	b.n	80064a8 <pool_func_mp_array_f32+0x264>
 80064f8:	cf000000 	.word	0xcf000000

080064fc <nl_func_relu_array_f32>:
 80064fc:	b410      	push	{r4}
 80064fe:	698c      	ldr	r4, [r1, #24]
 8006500:	6981      	ldr	r1, [r0, #24]
 8006502:	68a3      	ldr	r3, [r4, #8]
 8006504:	6889      	ldr	r1, [r1, #8]
 8006506:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800650a:	3a01      	subs	r2, #1
 800650c:	0092      	lsls	r2, r2, #2
 800650e:	189b      	adds	r3, r3, r2
 8006510:	d216      	bcs.n	8006540 <nl_func_relu_array_f32+0x44>
 8006512:	3204      	adds	r2, #4
 8006514:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006548 <nl_func_relu_array_f32+0x4c>
 8006518:	4411      	add	r1, r2
 800651a:	3304      	adds	r3, #4
 800651c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006520:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006528:	bfb8      	it	lt
 800652a:	eef0 7a47 	vmovlt.f32	s15, s14
 800652e:	ed61 7a01 	vstmdb	r1!, {s15}
 8006532:	68a0      	ldr	r0, [r4, #8]
 8006534:	f1a3 0208 	sub.w	r2, r3, #8
 8006538:	4290      	cmp	r0, r2
 800653a:	f1a3 0304 	sub.w	r3, r3, #4
 800653e:	d9ed      	bls.n	800651c <nl_func_relu_array_f32+0x20>
 8006540:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	00000000 	.word	0x00000000

0800654c <nl_func_sm_array_f32>:
 800654c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006550:	ed2d 8b04 	vpush	{d8-d9}
 8006554:	b089      	sub	sp, #36	; 0x24
 8006556:	698f      	ldr	r7, [r1, #24]
 8006558:	6984      	ldr	r4, [r0, #24]
 800655a:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800655e:	68bd      	ldr	r5, [r7, #8]
 8006560:	9402      	str	r4, [sp, #8]
 8006562:	4626      	mov	r6, r4
 8006564:	4696      	mov	lr, r2
 8006566:	eba2 020c 	sub.w	r2, r2, ip
 800656a:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800656e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	68b6      	ldr	r6, [r6, #8]
 8006574:	ebae 0e04 	sub.w	lr, lr, r4
 8006578:	4295      	cmp	r5, r2
 800657a:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 800657e:	d354      	bcc.n	800662a <nl_func_sm_array_f32+0xde>
 8006580:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006584:	f1cc 0200 	rsb	r2, ip, #0
 8006588:	00a4      	lsls	r4, r4, #2
 800658a:	e9cd 1006 	strd	r1, r0, [sp, #24]
 800658e:	9303      	str	r3, [sp, #12]
 8006590:	9204      	str	r2, [sp, #16]
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4262      	negs	r2, r4
 8006596:	9205      	str	r2, [sp, #20]
 8006598:	9301      	str	r3, [sp, #4]
 800659a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800659e:	9b02      	ldr	r3, [sp, #8]
 80065a0:	9a07      	ldr	r2, [sp, #28]
 80065a2:	60bd      	str	r5, [r7, #8]
 80065a4:	609e      	str	r6, [r3, #8]
 80065a6:	9b06      	ldr	r3, [sp, #24]
 80065a8:	6992      	ldr	r2, [r2, #24]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	6894      	ldr	r4, [r2, #8]
 80065ae:	9a03      	ldr	r2, [sp, #12]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	2a01      	cmp	r2, #1
 80065b4:	ed93 8a00 	vldr	s16, [r3]
 80065b8:	d940      	bls.n	800663c <nl_func_sm_array_f32+0xf0>
 80065ba:	9901      	ldr	r1, [sp, #4]
 80065bc:	1d1a      	adds	r2, r3, #4
 80065be:	eb03 0b01 	add.w	fp, r3, r1
 80065c2:	ecf2 7a01 	vldmia	r2!, {s15}
 80065c6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80065ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ce:	bfb8      	it	lt
 80065d0:	eeb0 8a67 	vmovlt.f32	s16, s15
 80065d4:	4593      	cmp	fp, r2
 80065d6:	d1f4      	bne.n	80065c2 <nl_func_sm_array_f32+0x76>
 80065d8:	eddf 8a1b 	vldr	s17, [pc, #108]	; 8006648 <nl_func_sm_array_f32+0xfc>
 80065dc:	469a      	mov	sl, r3
 80065de:	46a1      	mov	r9, r4
 80065e0:	46a0      	mov	r8, r4
 80065e2:	ecba 0a01 	vldmia	sl!, {s0}
 80065e6:	ee30 0a48 	vsub.f32	s0, s0, s16
 80065ea:	f003 f891 	bl	8009710 <expf>
 80065ee:	45d3      	cmp	fp, sl
 80065f0:	eca8 0a01 	vstmia	r8!, {s0}
 80065f4:	ee78 8a80 	vadd.f32	s17, s17, s0
 80065f8:	d1f3      	bne.n	80065e2 <nl_func_sm_array_f32+0x96>
 80065fa:	eef5 8a40 	vcmp.f32	s17, #0.0
 80065fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006602:	d00b      	beq.n	800661c <nl_func_sm_array_f32+0xd0>
 8006604:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8006608:	9b01      	ldr	r3, [sp, #4]
 800660a:	441c      	add	r4, r3
 800660c:	edd9 7a00 	vldr	s15, [r9]
 8006610:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006614:	ece9 7a01 	vstmia	r9!, {s15}
 8006618:	454c      	cmp	r4, r9
 800661a:	d1f7      	bne.n	800660c <nl_func_sm_array_f32+0xc0>
 800661c:	9b04      	ldr	r3, [sp, #16]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	441d      	add	r5, r3
 8006622:	9b05      	ldr	r3, [sp, #20]
 8006624:	42aa      	cmp	r2, r5
 8006626:	441e      	add	r6, r3
 8006628:	d9b9      	bls.n	800659e <nl_func_sm_array_f32+0x52>
 800662a:	60ba      	str	r2, [r7, #8]
 800662c:	9a02      	ldr	r2, [sp, #8]
 800662e:	68d3      	ldr	r3, [r2, #12]
 8006630:	6093      	str	r3, [r2, #8]
 8006632:	b009      	add	sp, #36	; 0x24
 8006634:	ecbd 8b04 	vpop	{d8-d9}
 8006638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800663c:	2a00      	cmp	r2, #0
 800663e:	d0ed      	beq.n	800661c <nl_func_sm_array_f32+0xd0>
 8006640:	9a01      	ldr	r2, [sp, #4]
 8006642:	eb03 0b02 	add.w	fp, r3, r2
 8006646:	e7c7      	b.n	80065d8 <nl_func_sm_array_f32+0x8c>
 8006648:	00000000 	.word	0x00000000

0800664c <nl_func_relu_generic_array_f32>:
 800664c:	b430      	push	{r4, r5}
 800664e:	6989      	ldr	r1, [r1, #24]
 8006650:	6980      	ldr	r0, [r0, #24]
 8006652:	edd3 6a02 	vldr	s13, [r3, #8]
 8006656:	688c      	ldr	r4, [r1, #8]
 8006658:	6880      	ldr	r0, [r0, #8]
 800665a:	ed93 7a00 	vldr	s14, [r3]
 800665e:	ed93 6a01 	vldr	s12, [r3, #4]
 8006662:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006666:	3a01      	subs	r2, #1
 8006668:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800666c:	0092      	lsls	r2, r2, #2
 800666e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006672:	4410      	add	r0, r2
 8006674:	4422      	add	r2, r4
 8006676:	d421      	bmi.n	80066bc <nl_func_relu_generic_array_f32+0x70>
 8006678:	4294      	cmp	r4, r2
 800667a:	d83d      	bhi.n	80066f8 <nl_func_relu_generic_array_f32+0xac>
 800667c:	1d13      	adds	r3, r2, #4
 800667e:	1d02      	adds	r2, r0, #4
 8006680:	e010      	b.n	80066a4 <nl_func_relu_generic_array_f32+0x58>
 8006682:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800668a:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800668e:	d501      	bpl.n	8006694 <nl_func_relu_generic_array_f32+0x48>
 8006690:	ee65 7a86 	vmul.f32	s15, s11, s12
 8006694:	ed62 7a01 	vstmdb	r2!, {s15}
 8006698:	6888      	ldr	r0, [r1, #8]
 800669a:	f1a3 0408 	sub.w	r4, r3, #8
 800669e:	4284      	cmp	r4, r0
 80066a0:	462b      	mov	r3, r5
 80066a2:	d329      	bcc.n	80066f8 <nl_func_relu_generic_array_f32+0xac>
 80066a4:	ed53 7a01 	vldr	s15, [r3, #-4]
 80066a8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80066ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066b0:	f1a3 0504 	sub.w	r5, r3, #4
 80066b4:	d4e5      	bmi.n	8006682 <nl_func_relu_generic_array_f32+0x36>
 80066b6:	eef0 7a66 	vmov.f32	s15, s13
 80066ba:	e7eb      	b.n	8006694 <nl_func_relu_generic_array_f32+0x48>
 80066bc:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80066c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066c4:	d01a      	beq.n	80066fc <nl_func_relu_generic_array_f32+0xb0>
 80066c6:	4294      	cmp	r4, r2
 80066c8:	d816      	bhi.n	80066f8 <nl_func_relu_generic_array_f32+0xac>
 80066ca:	1d13      	adds	r3, r2, #4
 80066cc:	1d02      	adds	r2, r0, #4
 80066ce:	ed53 7a01 	vldr	s15, [r3, #-4]
 80066d2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80066d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066da:	f1a3 0408 	sub.w	r4, r3, #8
 80066de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066e2:	f1a3 0004 	sub.w	r0, r3, #4
 80066e6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80066ea:	4623      	mov	r3, r4
 80066ec:	d51e      	bpl.n	800672c <nl_func_relu_generic_array_f32+0xe0>
 80066ee:	ed62 6a01 	vstmdb	r2!, {s13}
 80066f2:	688b      	ldr	r3, [r1, #8]
 80066f4:	42a3      	cmp	r3, r4
 80066f6:	d91e      	bls.n	8006736 <nl_func_relu_generic_array_f32+0xea>
 80066f8:	bc30      	pop	{r4, r5}
 80066fa:	4770      	bx	lr
 80066fc:	4294      	cmp	r4, r2
 80066fe:	d8fb      	bhi.n	80066f8 <nl_func_relu_generic_array_f32+0xac>
 8006700:	1d13      	adds	r3, r2, #4
 8006702:	2500      	movs	r5, #0
 8006704:	1d02      	adds	r2, r0, #4
 8006706:	ed53 7a01 	vldr	s15, [r3, #-4]
 800670a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800670e:	f1a3 0408 	sub.w	r4, r3, #8
 8006712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006716:	f1a3 0004 	sub.w	r0, r3, #4
 800671a:	4623      	mov	r3, r4
 800671c:	db0d      	blt.n	800673a <nl_func_relu_generic_array_f32+0xee>
 800671e:	ed62 7a01 	vstmdb	r2!, {s15}
 8006722:	688b      	ldr	r3, [r1, #8]
 8006724:	42a3      	cmp	r3, r4
 8006726:	d8e7      	bhi.n	80066f8 <nl_func_relu_generic_array_f32+0xac>
 8006728:	4603      	mov	r3, r0
 800672a:	e7ec      	b.n	8006706 <nl_func_relu_generic_array_f32+0xba>
 800672c:	ed62 7a01 	vstmdb	r2!, {s15}
 8006730:	688c      	ldr	r4, [r1, #8]
 8006732:	429c      	cmp	r4, r3
 8006734:	d8e0      	bhi.n	80066f8 <nl_func_relu_generic_array_f32+0xac>
 8006736:	4603      	mov	r3, r0
 8006738:	e7c9      	b.n	80066ce <nl_func_relu_generic_array_f32+0x82>
 800673a:	f842 5d04 	str.w	r5, [r2, #-4]!
 800673e:	688c      	ldr	r4, [r1, #8]
 8006740:	429c      	cmp	r4, r3
 8006742:	d8d9      	bhi.n	80066f8 <nl_func_relu_generic_array_f32+0xac>
 8006744:	4603      	mov	r3, r0
 8006746:	e7de      	b.n	8006706 <nl_func_relu_generic_array_f32+0xba>

08006748 <forward_relu>:
 8006748:	6982      	ldr	r2, [r0, #24]
 800674a:	8813      	ldrh	r3, [r2, #0]
 800674c:	b333      	cbz	r3, 800679c <forward_relu+0x54>
 800674e:	6852      	ldr	r2, [r2, #4]
 8006750:	6851      	ldr	r1, [r2, #4]
 8006752:	b101      	cbz	r1, 8006756 <forward_relu+0xe>
 8006754:	6809      	ldr	r1, [r1, #0]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d91d      	bls.n	8006796 <forward_relu+0x4e>
 800675a:	b4f0      	push	{r4, r5, r6, r7}
 800675c:	6917      	ldr	r7, [r2, #16]
 800675e:	b107      	cbz	r7, 8006762 <forward_relu+0x1a>
 8006760:	683f      	ldr	r7, [r7, #0]
 8006762:	688c      	ldr	r4, [r1, #8]
 8006764:	69c3      	ldr	r3, [r0, #28]
 8006766:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800676a:	2b00      	cmp	r3, #0
 800676c:	d044      	beq.n	80067f8 <forward_relu+0xb0>
 800676e:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 8006772:	2d01      	cmp	r5, #1
 8006774:	d014      	beq.n	80067a0 <forward_relu+0x58>
 8006776:	2c00      	cmp	r4, #0
 8006778:	d074      	beq.n	8006864 <forward_relu+0x11c>
 800677a:	68ce      	ldr	r6, [r1, #12]
 800677c:	2201      	movs	r2, #1
 800677e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8006782:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006786:	42a6      	cmp	r6, r4
 8006788:	fb05 f202 	mul.w	r2, r5, r2
 800678c:	d1f9      	bne.n	8006782 <forward_relu+0x3a>
 800678e:	4638      	mov	r0, r7
 8006790:	bcf0      	pop	{r4, r5, r6, r7}
 8006792:	f7ff bf5b 	b.w	800664c <nl_func_relu_generic_array_f32>
 8006796:	2300      	movs	r3, #0
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	deff      	udf	#255	; 0xff
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	deff      	udf	#255	; 0xff
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	6988      	ldr	r0, [r1, #24]
 80067a4:	6896      	ldr	r6, [r2, #8]
 80067a6:	ed93 7a00 	vldr	s14, [r3]
 80067aa:	6882      	ldr	r2, [r0, #8]
 80067ac:	b184      	cbz	r4, 80067d0 <forward_relu+0x88>
 80067ae:	68cf      	ldr	r7, [r1, #12]
 80067b0:	462b      	mov	r3, r5
 80067b2:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80067b6:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 80067ba:	42a7      	cmp	r7, r4
 80067bc:	fb01 f303 	mul.w	r3, r1, r3
 80067c0:	d1f9      	bne.n	80067b6 <forward_relu+0x6e>
 80067c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80067c6:	3b01      	subs	r3, #1
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	18d2      	adds	r2, r2, r3
 80067cc:	441e      	add	r6, r3
 80067ce:	d23f      	bcs.n	8006850 <forward_relu+0x108>
 80067d0:	1d13      	adds	r3, r2, #4
 80067d2:	2500      	movs	r5, #0
 80067d4:	1d32      	adds	r2, r6, #4
 80067d6:	ed53 7a01 	vldr	s15, [r3, #-4]
 80067da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067e2:	f1a3 0104 	sub.w	r1, r3, #4
 80067e6:	d835      	bhi.n	8006854 <forward_relu+0x10c>
 80067e8:	ed62 7a01 	vstmdb	r2!, {s15}
 80067ec:	6884      	ldr	r4, [r0, #8]
 80067ee:	3b08      	subs	r3, #8
 80067f0:	429c      	cmp	r4, r3
 80067f2:	d82d      	bhi.n	8006850 <forward_relu+0x108>
 80067f4:	460b      	mov	r3, r1
 80067f6:	e7ee      	b.n	80067d6 <forward_relu+0x8e>
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	698d      	ldr	r5, [r1, #24]
 80067fc:	6898      	ldr	r0, [r3, #8]
 80067fe:	68ab      	ldr	r3, [r5, #8]
 8006800:	b184      	cbz	r4, 8006824 <forward_relu+0xdc>
 8006802:	68ce      	ldr	r6, [r1, #12]
 8006804:	2201      	movs	r2, #1
 8006806:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800680a:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800680e:	42a6      	cmp	r6, r4
 8006810:	fb01 f202 	mul.w	r2, r1, r2
 8006814:	d1f9      	bne.n	800680a <forward_relu+0xc2>
 8006816:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800681a:	3a01      	subs	r2, #1
 800681c:	0092      	lsls	r2, r2, #2
 800681e:	189b      	adds	r3, r3, r2
 8006820:	4410      	add	r0, r2
 8006822:	d215      	bcs.n	8006850 <forward_relu+0x108>
 8006824:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006868 <forward_relu+0x120>
 8006828:	3304      	adds	r3, #4
 800682a:	1d01      	adds	r1, r0, #4
 800682c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006830:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006838:	bfb8      	it	lt
 800683a:	eef0 7a47 	vmovlt.f32	s15, s14
 800683e:	ed61 7a01 	vstmdb	r1!, {s15}
 8006842:	68a8      	ldr	r0, [r5, #8]
 8006844:	f1a3 0208 	sub.w	r2, r3, #8
 8006848:	4290      	cmp	r0, r2
 800684a:	f1a3 0304 	sub.w	r3, r3, #4
 800684e:	d9ed      	bls.n	800682c <forward_relu+0xe4>
 8006850:	bcf0      	pop	{r4, r5, r6, r7}
 8006852:	4770      	bx	lr
 8006854:	f842 5d04 	str.w	r5, [r2, #-4]!
 8006858:	6884      	ldr	r4, [r0, #8]
 800685a:	3b08      	subs	r3, #8
 800685c:	429c      	cmp	r4, r3
 800685e:	d8f7      	bhi.n	8006850 <forward_relu+0x108>
 8006860:	460b      	mov	r3, r1
 8006862:	e7b8      	b.n	80067d6 <forward_relu+0x8e>
 8006864:	2201      	movs	r2, #1
 8006866:	e792      	b.n	800678e <forward_relu+0x46>
 8006868:	00000000 	.word	0x00000000

0800686c <forward_sm>:
 800686c:	6982      	ldr	r2, [r0, #24]
 800686e:	8813      	ldrh	r3, [r2, #0]
 8006870:	b32b      	cbz	r3, 80068be <forward_sm+0x52>
 8006872:	6852      	ldr	r2, [r2, #4]
 8006874:	6851      	ldr	r1, [r2, #4]
 8006876:	b101      	cbz	r1, 800687a <forward_sm+0xe>
 8006878:	6809      	ldr	r1, [r1, #0]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d91c      	bls.n	80068b8 <forward_sm+0x4c>
 800687e:	6913      	ldr	r3, [r2, #16]
 8006880:	b1c3      	cbz	r3, 80068b4 <forward_sm+0x48>
 8006882:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006884:	6818      	ldr	r0, [r3, #0]
 8006886:	688c      	ldr	r4, [r1, #8]
 8006888:	68c3      	ldr	r3, [r0, #12]
 800688a:	68ce      	ldr	r6, [r1, #12]
 800688c:	685f      	ldr	r7, [r3, #4]
 800688e:	6873      	ldr	r3, [r6, #4]
 8006890:	0a24      	lsrs	r4, r4, #8
 8006892:	b083      	sub	sp, #12
 8006894:	d015      	beq.n	80068c2 <forward_sm+0x56>
 8006896:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800689a:	2201      	movs	r2, #1
 800689c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80068a0:	42a6      	cmp	r6, r4
 80068a2:	fb05 f202 	mul.w	r2, r5, r2
 80068a6:	d1f9      	bne.n	800689c <forward_sm+0x30>
 80068a8:	e9cd 3700 	strd	r3, r7, [sp]
 80068ac:	f7ff fe4e 	bl	800654c <nl_func_sm_array_f32>
 80068b0:	b003      	add	sp, #12
 80068b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	deff      	udf	#255	; 0xff
 80068b8:	2300      	movs	r3, #0
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	deff      	udf	#255	; 0xff
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	deff      	udf	#255	; 0xff
 80068c2:	2201      	movs	r2, #1
 80068c4:	e9cd 3700 	strd	r3, r7, [sp]
 80068c8:	f7ff fe40 	bl	800654c <nl_func_sm_array_f32>
 80068cc:	b003      	add	sp, #12
 80068ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080068d0 <ai_check_custom_types>:
 80068d0:	4b13      	ldr	r3, [pc, #76]	; (8006920 <ai_check_custom_types+0x50>)
 80068d2:	b082      	sub	sp, #8
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	9301      	str	r3, [sp, #4]
 80068d8:	b118      	cbz	r0, 80068e2 <ai_check_custom_types+0x12>
 80068da:	7803      	ldrb	r3, [r0, #0]
 80068dc:	2b03      	cmp	r3, #3
 80068de:	d002      	beq.n	80068e6 <ai_check_custom_types+0x16>
 80068e0:	2000      	movs	r0, #0
 80068e2:	b002      	add	sp, #8
 80068e4:	4770      	bx	lr
 80068e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d004      	beq.n	80068f8 <ai_check_custom_types+0x28>
 80068ee:	2001      	movs	r0, #1
 80068f0:	f080 0001 	eor.w	r0, r0, #1
 80068f4:	b002      	add	sp, #8
 80068f6:	4770      	bx	lr
 80068f8:	7842      	ldrb	r2, [r0, #1]
 80068fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80068fe:	429a      	cmp	r2, r3
 8006900:	f100 0001 	add.w	r0, r0, #1
 8006904:	d1f3      	bne.n	80068ee <ai_check_custom_types+0x1e>
 8006906:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800690a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800690e:	429a      	cmp	r2, r3
 8006910:	d1ed      	bne.n	80068ee <ai_check_custom_types+0x1e>
 8006912:	7842      	ldrb	r2, [r0, #1]
 8006914:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006918:	429a      	cmp	r2, r3
 800691a:	d1e8      	bne.n	80068ee <ai_check_custom_types+0x1e>
 800691c:	2000      	movs	r0, #0
 800691e:	e7e7      	b.n	80068f0 <ai_check_custom_types+0x20>
 8006920:	08009a30 	.word	0x08009a30

08006924 <ai_layers_init_all>:
 8006924:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006926:	b17a      	cbz	r2, 8006948 <ai_layers_init_all+0x24>
 8006928:	6913      	ldr	r3, [r2, #16]
 800692a:	60d0      	str	r0, [r2, #12]
 800692c:	429a      	cmp	r2, r3
 800692e:	f04f 0201 	mov.w	r2, #1
 8006932:	d009      	beq.n	8006948 <ai_layers_init_all+0x24>
 8006934:	b143      	cbz	r3, 8006948 <ai_layers_init_all+0x24>
 8006936:	6919      	ldr	r1, [r3, #16]
 8006938:	60d8      	str	r0, [r3, #12]
 800693a:	4299      	cmp	r1, r3
 800693c:	f102 0201 	add.w	r2, r2, #1
 8006940:	d002      	beq.n	8006948 <ai_layers_init_all+0x24>
 8006942:	460b      	mov	r3, r1
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1f6      	bne.n	8006936 <ai_layers_init_all+0x12>
 8006948:	4610      	mov	r0, r2
 800694a:	4770      	bx	lr

0800694c <ai_layers_post_init_all>:
 800694c:	b538      	push	{r3, r4, r5, lr}
 800694e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006950:	b18c      	cbz	r4, 8006976 <ai_layers_post_init_all+0x2a>
 8006952:	2500      	movs	r5, #0
 8006954:	6863      	ldr	r3, [r4, #4]
 8006956:	f013 0f01 	tst.w	r3, #1
 800695a:	4620      	mov	r0, r4
 800695c:	d003      	beq.n	8006966 <ai_layers_post_init_all+0x1a>
 800695e:	6a23      	ldr	r3, [r4, #32]
 8006960:	b10b      	cbz	r3, 8006966 <ai_layers_post_init_all+0x1a>
 8006962:	4798      	blx	r3
 8006964:	3501      	adds	r5, #1
 8006966:	6923      	ldr	r3, [r4, #16]
 8006968:	42a3      	cmp	r3, r4
 800696a:	d002      	beq.n	8006972 <ai_layers_post_init_all+0x26>
 800696c:	461c      	mov	r4, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1f0      	bne.n	8006954 <ai_layers_post_init_all+0x8>
 8006972:	4628      	mov	r0, r5
 8006974:	bd38      	pop	{r3, r4, r5, pc}
 8006976:	4625      	mov	r5, r4
 8006978:	e7fb      	b.n	8006972 <ai_layers_post_init_all+0x26>
 800697a:	bf00      	nop

0800697c <ai_layers_forward_all>:
 800697c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006980:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8006982:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8006984:	4604      	mov	r4, r0
 8006986:	2f00      	cmp	r7, #0
 8006988:	d02c      	beq.n	80069e4 <ai_layers_forward_all+0x68>
 800698a:	2d00      	cmp	r5, #0
 800698c:	d03f      	beq.n	8006a0e <ai_layers_forward_all+0x92>
 800698e:	6385      	str	r5, [r0, #56]	; 0x38
 8006990:	4629      	mov	r1, r5
 8006992:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006994:	2001      	movs	r0, #1
 8006996:	47b8      	blx	r7
 8006998:	2600      	movs	r6, #0
 800699a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800699c:	46b0      	mov	r8, r6
 800699e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80069a0:	2002      	movs	r0, #2
 80069a2:	47b8      	blx	r7
 80069a4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80069a6:	696b      	ldr	r3, [r5, #20]
 80069a8:	4628      	mov	r0, r5
 80069aa:	4798      	blx	r3
 80069ac:	692b      	ldr	r3, [r5, #16]
 80069ae:	429d      	cmp	r5, r3
 80069b0:	f04f 0003 	mov.w	r0, #3
 80069b4:	4619      	mov	r1, r3
 80069b6:	d009      	beq.n	80069cc <ai_layers_forward_all+0x50>
 80069b8:	63a3      	str	r3, [r4, #56]	; 0x38
 80069ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80069bc:	47b8      	blx	r7
 80069be:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80069c0:	3601      	adds	r6, #1
 80069c2:	2900      	cmp	r1, #0
 80069c4:	d1eb      	bne.n	800699e <ai_layers_forward_all+0x22>
 80069c6:	4630      	mov	r0, r6
 80069c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069cc:	2100      	movs	r1, #0
 80069ce:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 80069d2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80069d4:	47b8      	blx	r7
 80069d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80069d8:	3601      	adds	r6, #1
 80069da:	2900      	cmp	r1, #0
 80069dc:	d1df      	bne.n	800699e <ai_layers_forward_all+0x22>
 80069de:	4630      	mov	r0, r6
 80069e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069e4:	b19d      	cbz	r5, 8006a0e <ai_layers_forward_all+0x92>
 80069e6:	6385      	str	r5, [r0, #56]	; 0x38
 80069e8:	463e      	mov	r6, r7
 80069ea:	696b      	ldr	r3, [r5, #20]
 80069ec:	4628      	mov	r0, r5
 80069ee:	4798      	blx	r3
 80069f0:	692b      	ldr	r3, [r5, #16]
 80069f2:	42ab      	cmp	r3, r5
 80069f4:	f106 0601 	add.w	r6, r6, #1
 80069f8:	d004      	beq.n	8006a04 <ai_layers_forward_all+0x88>
 80069fa:	63a3      	str	r3, [r4, #56]	; 0x38
 80069fc:	461d      	mov	r5, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1f3      	bne.n	80069ea <ai_layers_forward_all+0x6e>
 8006a02:	e7e0      	b.n	80069c6 <ai_layers_forward_all+0x4a>
 8006a04:	2300      	movs	r3, #0
 8006a06:	63a3      	str	r3, [r4, #56]	; 0x38
 8006a08:	4630      	mov	r0, r6
 8006a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a0e:	462e      	mov	r6, r5
 8006a10:	4630      	mov	r0, r6
 8006a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a16:	bf00      	nop

08006a18 <ai_version_get>:
 8006a18:	0212      	lsls	r2, r2, #8
 8006a1a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006a1e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8006a22:	4770      	bx	lr

08006a24 <get_tensor_byte_size>:
 8006a24:	6983      	ldr	r3, [r0, #24]
 8006a26:	68c1      	ldr	r1, [r0, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6940      	ldr	r0, [r0, #20]
 8006a2c:	4a06      	ldr	r2, [pc, #24]	; (8006a48 <get_tensor_byte_size+0x24>)
 8006a2e:	68c9      	ldr	r1, [r1, #12]
 8006a30:	68c0      	ldr	r0, [r0, #12]
 8006a32:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006a36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006a3a:	fb00 f001 	mul.w	r0, r0, r1
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	bf04      	itt	eq
 8006a42:	3007      	addeq	r0, #7
 8006a44:	08c0      	lsreq	r0, r0, #3
 8006a46:	4770      	bx	lr
 8006a48:	000400c0 	.word	0x000400c0

08006a4c <ai_array_to_buffer_fmt>:
 8006a4c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d036      	beq.n	8006ac2 <ai_array_to_buffer_fmt+0x76>
 8006a54:	4a21      	ldr	r2, [pc, #132]	; (8006adc <ai_array_to_buffer_fmt+0x90>)
 8006a56:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d00f      	beq.n	8006a7e <ai_array_to_buffer_fmt+0x32>
 8006a5e:	dd12      	ble.n	8006a86 <ai_array_to_buffer_fmt+0x3a>
 8006a60:	4a1f      	ldr	r2, [pc, #124]	; (8006ae0 <ai_array_to_buffer_fmt+0x94>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d00b      	beq.n	8006a7e <ai_array_to_buffer_fmt+0x32>
 8006a66:	dd1e      	ble.n	8006aa6 <ai_array_to_buffer_fmt+0x5a>
 8006a68:	4a1e      	ldr	r2, [pc, #120]	; (8006ae4 <ai_array_to_buffer_fmt+0x98>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d007      	beq.n	8006a7e <ai_array_to_buffer_fmt+0x32>
 8006a6e:	dd30      	ble.n	8006ad2 <ai_array_to_buffer_fmt+0x86>
 8006a70:	4a1d      	ldr	r2, [pc, #116]	; (8006ae8 <ai_array_to_buffer_fmt+0x9c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d003      	beq.n	8006a7e <ai_array_to_buffer_fmt+0x32>
 8006a76:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d11f      	bne.n	8006abe <ai_array_to_buffer_fmt+0x72>
 8006a7e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006a82:	4318      	orrs	r0, r3
 8006a84:	4770      	bx	lr
 8006a86:	4a19      	ldr	r2, [pc, #100]	; (8006aec <ai_array_to_buffer_fmt+0xa0>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d0f8      	beq.n	8006a7e <ai_array_to_buffer_fmt+0x32>
 8006a8c:	dd0b      	ble.n	8006aa6 <ai_array_to_buffer_fmt+0x5a>
 8006a8e:	4a18      	ldr	r2, [pc, #96]	; (8006af0 <ai_array_to_buffer_fmt+0xa4>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d0f4      	beq.n	8006a7e <ai_array_to_buffer_fmt+0x32>
 8006a94:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d0f0      	beq.n	8006a7e <ai_array_to_buffer_fmt+0x32>
 8006a9c:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d10c      	bne.n	8006abe <ai_array_to_buffer_fmt+0x72>
 8006aa4:	e7eb      	b.n	8006a7e <ai_array_to_buffer_fmt+0x32>
 8006aa6:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d0e7      	beq.n	8006a7e <ai_array_to_buffer_fmt+0x32>
 8006aae:	f502 7260 	add.w	r2, r2, #896	; 0x380
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d0e3      	beq.n	8006a7e <ai_array_to_buffer_fmt+0x32>
 8006ab6:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d0df      	beq.n	8006a7e <ai_array_to_buffer_fmt+0x32>
 8006abe:	2340      	movs	r3, #64	; 0x40
 8006ac0:	e7dd      	b.n	8006a7e <ai_array_to_buffer_fmt+0x32>
 8006ac2:	4b0c      	ldr	r3, [pc, #48]	; (8006af4 <ai_array_to_buffer_fmt+0xa8>)
 8006ac4:	4003      	ands	r3, r0
 8006ac6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006aca:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006ace:	4318      	orrs	r0, r3
 8006ad0:	4770      	bx	lr
 8006ad2:	3a0f      	subs	r2, #15
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d0d2      	beq.n	8006a7e <ai_array_to_buffer_fmt+0x32>
 8006ad8:	e7f1      	b.n	8006abe <ai_array_to_buffer_fmt+0x72>
 8006ada:	bf00      	nop
 8006adc:	00060440 	.word	0x00060440
 8006ae0:	00840447 	.word	0x00840447
 8006ae4:	0084084f 	.word	0x0084084f
 8006ae8:	00841040 	.word	0x00841040
 8006aec:	00040447 	.word	0x00040447
 8006af0:	0004084f 	.word	0x0004084f
 8006af4:	00803fff 	.word	0x00803fff

08006af8 <ai_array_get_byte_size>:
 8006af8:	b1c1      	cbz	r1, 8006b2c <ai_array_get_byte_size+0x34>
 8006afa:	11c3      	asrs	r3, r0, #7
 8006afc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b00:	fb01 f102 	mul.w	r1, r1, r2
 8006b04:	3107      	adds	r1, #7
 8006b06:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8006b0a:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8006b0e:	f021 0107 	bic.w	r1, r1, #7
 8006b12:	2804      	cmp	r0, #4
 8006b14:	fa21 f102 	lsr.w	r1, r1, r2
 8006b18:	d00a      	beq.n	8006b30 <ai_array_get_byte_size+0x38>
 8006b1a:	2808      	cmp	r0, #8
 8006b1c:	d103      	bne.n	8006b26 <ai_array_get_byte_size+0x2e>
 8006b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b22:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8006b26:	3107      	adds	r1, #7
 8006b28:	08c8      	lsrs	r0, r1, #3
 8006b2a:	4770      	bx	lr
 8006b2c:	4608      	mov	r0, r1
 8006b2e:	4770      	bx	lr
 8006b30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b34:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8006b38:	3107      	adds	r1, #7
 8006b3a:	08c8      	lsrs	r0, r1, #3
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop

08006b40 <ai_array_get_data_byte_size>:
 8006b40:	b161      	cbz	r1, 8006b5c <ai_array_get_data_byte_size+0x1c>
 8006b42:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8006b46:	fb01 f103 	mul.w	r1, r1, r3
 8006b4a:	3107      	adds	r1, #7
 8006b4c:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8006b50:	f021 0107 	bic.w	r1, r1, #7
 8006b54:	40c1      	lsrs	r1, r0
 8006b56:	3107      	adds	r1, #7
 8006b58:	08c8      	lsrs	r0, r1, #3
 8006b5a:	4770      	bx	lr
 8006b5c:	4608      	mov	r0, r1
 8006b5e:	4770      	bx	lr

08006b60 <__errno>:
 8006b60:	4b01      	ldr	r3, [pc, #4]	; (8006b68 <__errno+0x8>)
 8006b62:	6818      	ldr	r0, [r3, #0]
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	20000774 	.word	0x20000774

08006b6c <__sflush_r>:
 8006b6c:	898a      	ldrh	r2, [r1, #12]
 8006b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b72:	4605      	mov	r5, r0
 8006b74:	0710      	lsls	r0, r2, #28
 8006b76:	460c      	mov	r4, r1
 8006b78:	d458      	bmi.n	8006c2c <__sflush_r+0xc0>
 8006b7a:	684b      	ldr	r3, [r1, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	dc05      	bgt.n	8006b8c <__sflush_r+0x20>
 8006b80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	dc02      	bgt.n	8006b8c <__sflush_r+0x20>
 8006b86:	2000      	movs	r0, #0
 8006b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b8e:	2e00      	cmp	r6, #0
 8006b90:	d0f9      	beq.n	8006b86 <__sflush_r+0x1a>
 8006b92:	2300      	movs	r3, #0
 8006b94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b98:	682f      	ldr	r7, [r5, #0]
 8006b9a:	602b      	str	r3, [r5, #0]
 8006b9c:	d032      	beq.n	8006c04 <__sflush_r+0x98>
 8006b9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ba0:	89a3      	ldrh	r3, [r4, #12]
 8006ba2:	075a      	lsls	r2, r3, #29
 8006ba4:	d505      	bpl.n	8006bb2 <__sflush_r+0x46>
 8006ba6:	6863      	ldr	r3, [r4, #4]
 8006ba8:	1ac0      	subs	r0, r0, r3
 8006baa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bac:	b10b      	cbz	r3, 8006bb2 <__sflush_r+0x46>
 8006bae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bb0:	1ac0      	subs	r0, r0, r3
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bb8:	6a21      	ldr	r1, [r4, #32]
 8006bba:	4628      	mov	r0, r5
 8006bbc:	47b0      	blx	r6
 8006bbe:	1c43      	adds	r3, r0, #1
 8006bc0:	89a3      	ldrh	r3, [r4, #12]
 8006bc2:	d106      	bne.n	8006bd2 <__sflush_r+0x66>
 8006bc4:	6829      	ldr	r1, [r5, #0]
 8006bc6:	291d      	cmp	r1, #29
 8006bc8:	d82c      	bhi.n	8006c24 <__sflush_r+0xb8>
 8006bca:	4a2a      	ldr	r2, [pc, #168]	; (8006c74 <__sflush_r+0x108>)
 8006bcc:	40ca      	lsrs	r2, r1
 8006bce:	07d6      	lsls	r6, r2, #31
 8006bd0:	d528      	bpl.n	8006c24 <__sflush_r+0xb8>
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	6062      	str	r2, [r4, #4]
 8006bd6:	04d9      	lsls	r1, r3, #19
 8006bd8:	6922      	ldr	r2, [r4, #16]
 8006bda:	6022      	str	r2, [r4, #0]
 8006bdc:	d504      	bpl.n	8006be8 <__sflush_r+0x7c>
 8006bde:	1c42      	adds	r2, r0, #1
 8006be0:	d101      	bne.n	8006be6 <__sflush_r+0x7a>
 8006be2:	682b      	ldr	r3, [r5, #0]
 8006be4:	b903      	cbnz	r3, 8006be8 <__sflush_r+0x7c>
 8006be6:	6560      	str	r0, [r4, #84]	; 0x54
 8006be8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bea:	602f      	str	r7, [r5, #0]
 8006bec:	2900      	cmp	r1, #0
 8006bee:	d0ca      	beq.n	8006b86 <__sflush_r+0x1a>
 8006bf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bf4:	4299      	cmp	r1, r3
 8006bf6:	d002      	beq.n	8006bfe <__sflush_r+0x92>
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	f000 f9b5 	bl	8006f68 <_free_r>
 8006bfe:	2000      	movs	r0, #0
 8006c00:	6360      	str	r0, [r4, #52]	; 0x34
 8006c02:	e7c1      	b.n	8006b88 <__sflush_r+0x1c>
 8006c04:	6a21      	ldr	r1, [r4, #32]
 8006c06:	2301      	movs	r3, #1
 8006c08:	4628      	mov	r0, r5
 8006c0a:	47b0      	blx	r6
 8006c0c:	1c41      	adds	r1, r0, #1
 8006c0e:	d1c7      	bne.n	8006ba0 <__sflush_r+0x34>
 8006c10:	682b      	ldr	r3, [r5, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0c4      	beq.n	8006ba0 <__sflush_r+0x34>
 8006c16:	2b1d      	cmp	r3, #29
 8006c18:	d001      	beq.n	8006c1e <__sflush_r+0xb2>
 8006c1a:	2b16      	cmp	r3, #22
 8006c1c:	d101      	bne.n	8006c22 <__sflush_r+0xb6>
 8006c1e:	602f      	str	r7, [r5, #0]
 8006c20:	e7b1      	b.n	8006b86 <__sflush_r+0x1a>
 8006c22:	89a3      	ldrh	r3, [r4, #12]
 8006c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c28:	81a3      	strh	r3, [r4, #12]
 8006c2a:	e7ad      	b.n	8006b88 <__sflush_r+0x1c>
 8006c2c:	690f      	ldr	r7, [r1, #16]
 8006c2e:	2f00      	cmp	r7, #0
 8006c30:	d0a9      	beq.n	8006b86 <__sflush_r+0x1a>
 8006c32:	0793      	lsls	r3, r2, #30
 8006c34:	680e      	ldr	r6, [r1, #0]
 8006c36:	bf08      	it	eq
 8006c38:	694b      	ldreq	r3, [r1, #20]
 8006c3a:	600f      	str	r7, [r1, #0]
 8006c3c:	bf18      	it	ne
 8006c3e:	2300      	movne	r3, #0
 8006c40:	eba6 0807 	sub.w	r8, r6, r7
 8006c44:	608b      	str	r3, [r1, #8]
 8006c46:	f1b8 0f00 	cmp.w	r8, #0
 8006c4a:	dd9c      	ble.n	8006b86 <__sflush_r+0x1a>
 8006c4c:	6a21      	ldr	r1, [r4, #32]
 8006c4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c50:	4643      	mov	r3, r8
 8006c52:	463a      	mov	r2, r7
 8006c54:	4628      	mov	r0, r5
 8006c56:	47b0      	blx	r6
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	dc06      	bgt.n	8006c6a <__sflush_r+0xfe>
 8006c5c:	89a3      	ldrh	r3, [r4, #12]
 8006c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c62:	81a3      	strh	r3, [r4, #12]
 8006c64:	f04f 30ff 	mov.w	r0, #4294967295
 8006c68:	e78e      	b.n	8006b88 <__sflush_r+0x1c>
 8006c6a:	4407      	add	r7, r0
 8006c6c:	eba8 0800 	sub.w	r8, r8, r0
 8006c70:	e7e9      	b.n	8006c46 <__sflush_r+0xda>
 8006c72:	bf00      	nop
 8006c74:	20400001 	.word	0x20400001

08006c78 <_fflush_r>:
 8006c78:	b538      	push	{r3, r4, r5, lr}
 8006c7a:	690b      	ldr	r3, [r1, #16]
 8006c7c:	4605      	mov	r5, r0
 8006c7e:	460c      	mov	r4, r1
 8006c80:	b913      	cbnz	r3, 8006c88 <_fflush_r+0x10>
 8006c82:	2500      	movs	r5, #0
 8006c84:	4628      	mov	r0, r5
 8006c86:	bd38      	pop	{r3, r4, r5, pc}
 8006c88:	b118      	cbz	r0, 8006c92 <_fflush_r+0x1a>
 8006c8a:	6983      	ldr	r3, [r0, #24]
 8006c8c:	b90b      	cbnz	r3, 8006c92 <_fflush_r+0x1a>
 8006c8e:	f000 f887 	bl	8006da0 <__sinit>
 8006c92:	4b14      	ldr	r3, [pc, #80]	; (8006ce4 <_fflush_r+0x6c>)
 8006c94:	429c      	cmp	r4, r3
 8006c96:	d11b      	bne.n	8006cd0 <_fflush_r+0x58>
 8006c98:	686c      	ldr	r4, [r5, #4]
 8006c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d0ef      	beq.n	8006c82 <_fflush_r+0xa>
 8006ca2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ca4:	07d0      	lsls	r0, r2, #31
 8006ca6:	d404      	bmi.n	8006cb2 <_fflush_r+0x3a>
 8006ca8:	0599      	lsls	r1, r3, #22
 8006caa:	d402      	bmi.n	8006cb2 <_fflush_r+0x3a>
 8006cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cae:	f000 f93a 	bl	8006f26 <__retarget_lock_acquire_recursive>
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	f7ff ff59 	bl	8006b6c <__sflush_r>
 8006cba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cbc:	07da      	lsls	r2, r3, #31
 8006cbe:	4605      	mov	r5, r0
 8006cc0:	d4e0      	bmi.n	8006c84 <_fflush_r+0xc>
 8006cc2:	89a3      	ldrh	r3, [r4, #12]
 8006cc4:	059b      	lsls	r3, r3, #22
 8006cc6:	d4dd      	bmi.n	8006c84 <_fflush_r+0xc>
 8006cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cca:	f000 f92d 	bl	8006f28 <__retarget_lock_release_recursive>
 8006cce:	e7d9      	b.n	8006c84 <_fflush_r+0xc>
 8006cd0:	4b05      	ldr	r3, [pc, #20]	; (8006ce8 <_fflush_r+0x70>)
 8006cd2:	429c      	cmp	r4, r3
 8006cd4:	d101      	bne.n	8006cda <_fflush_r+0x62>
 8006cd6:	68ac      	ldr	r4, [r5, #8]
 8006cd8:	e7df      	b.n	8006c9a <_fflush_r+0x22>
 8006cda:	4b04      	ldr	r3, [pc, #16]	; (8006cec <_fflush_r+0x74>)
 8006cdc:	429c      	cmp	r4, r3
 8006cde:	bf08      	it	eq
 8006ce0:	68ec      	ldreq	r4, [r5, #12]
 8006ce2:	e7da      	b.n	8006c9a <_fflush_r+0x22>
 8006ce4:	0800cba0 	.word	0x0800cba0
 8006ce8:	0800cbc0 	.word	0x0800cbc0
 8006cec:	0800cb80 	.word	0x0800cb80

08006cf0 <std>:
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	b510      	push	{r4, lr}
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	e9c0 3300 	strd	r3, r3, [r0]
 8006cfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cfe:	6083      	str	r3, [r0, #8]
 8006d00:	8181      	strh	r1, [r0, #12]
 8006d02:	6643      	str	r3, [r0, #100]	; 0x64
 8006d04:	81c2      	strh	r2, [r0, #14]
 8006d06:	6183      	str	r3, [r0, #24]
 8006d08:	4619      	mov	r1, r3
 8006d0a:	2208      	movs	r2, #8
 8006d0c:	305c      	adds	r0, #92	; 0x5c
 8006d0e:	f000 f923 	bl	8006f58 <memset>
 8006d12:	4b05      	ldr	r3, [pc, #20]	; (8006d28 <std+0x38>)
 8006d14:	6263      	str	r3, [r4, #36]	; 0x24
 8006d16:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <std+0x3c>)
 8006d18:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d1a:	4b05      	ldr	r3, [pc, #20]	; (8006d30 <std+0x40>)
 8006d1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d1e:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <std+0x44>)
 8006d20:	6224      	str	r4, [r4, #32]
 8006d22:	6323      	str	r3, [r4, #48]	; 0x30
 8006d24:	bd10      	pop	{r4, pc}
 8006d26:	bf00      	nop
 8006d28:	08007b39 	.word	0x08007b39
 8006d2c:	08007b5b 	.word	0x08007b5b
 8006d30:	08007b93 	.word	0x08007b93
 8006d34:	08007bb7 	.word	0x08007bb7

08006d38 <_cleanup_r>:
 8006d38:	4901      	ldr	r1, [pc, #4]	; (8006d40 <_cleanup_r+0x8>)
 8006d3a:	f000 b8af 	b.w	8006e9c <_fwalk_reent>
 8006d3e:	bf00      	nop
 8006d40:	08006c79 	.word	0x08006c79

08006d44 <__sfmoreglue>:
 8006d44:	b570      	push	{r4, r5, r6, lr}
 8006d46:	2268      	movs	r2, #104	; 0x68
 8006d48:	1e4d      	subs	r5, r1, #1
 8006d4a:	4355      	muls	r5, r2
 8006d4c:	460e      	mov	r6, r1
 8006d4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d52:	f000 f975 	bl	8007040 <_malloc_r>
 8006d56:	4604      	mov	r4, r0
 8006d58:	b140      	cbz	r0, 8006d6c <__sfmoreglue+0x28>
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	e9c0 1600 	strd	r1, r6, [r0]
 8006d60:	300c      	adds	r0, #12
 8006d62:	60a0      	str	r0, [r4, #8]
 8006d64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d68:	f000 f8f6 	bl	8006f58 <memset>
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	bd70      	pop	{r4, r5, r6, pc}

08006d70 <__sfp_lock_acquire>:
 8006d70:	4801      	ldr	r0, [pc, #4]	; (8006d78 <__sfp_lock_acquire+0x8>)
 8006d72:	f000 b8d8 	b.w	8006f26 <__retarget_lock_acquire_recursive>
 8006d76:	bf00      	nop
 8006d78:	20001339 	.word	0x20001339

08006d7c <__sfp_lock_release>:
 8006d7c:	4801      	ldr	r0, [pc, #4]	; (8006d84 <__sfp_lock_release+0x8>)
 8006d7e:	f000 b8d3 	b.w	8006f28 <__retarget_lock_release_recursive>
 8006d82:	bf00      	nop
 8006d84:	20001339 	.word	0x20001339

08006d88 <__sinit_lock_acquire>:
 8006d88:	4801      	ldr	r0, [pc, #4]	; (8006d90 <__sinit_lock_acquire+0x8>)
 8006d8a:	f000 b8cc 	b.w	8006f26 <__retarget_lock_acquire_recursive>
 8006d8e:	bf00      	nop
 8006d90:	2000133a 	.word	0x2000133a

08006d94 <__sinit_lock_release>:
 8006d94:	4801      	ldr	r0, [pc, #4]	; (8006d9c <__sinit_lock_release+0x8>)
 8006d96:	f000 b8c7 	b.w	8006f28 <__retarget_lock_release_recursive>
 8006d9a:	bf00      	nop
 8006d9c:	2000133a 	.word	0x2000133a

08006da0 <__sinit>:
 8006da0:	b510      	push	{r4, lr}
 8006da2:	4604      	mov	r4, r0
 8006da4:	f7ff fff0 	bl	8006d88 <__sinit_lock_acquire>
 8006da8:	69a3      	ldr	r3, [r4, #24]
 8006daa:	b11b      	cbz	r3, 8006db4 <__sinit+0x14>
 8006dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006db0:	f7ff bff0 	b.w	8006d94 <__sinit_lock_release>
 8006db4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006db8:	6523      	str	r3, [r4, #80]	; 0x50
 8006dba:	4b13      	ldr	r3, [pc, #76]	; (8006e08 <__sinit+0x68>)
 8006dbc:	4a13      	ldr	r2, [pc, #76]	; (8006e0c <__sinit+0x6c>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006dc2:	42a3      	cmp	r3, r4
 8006dc4:	bf04      	itt	eq
 8006dc6:	2301      	moveq	r3, #1
 8006dc8:	61a3      	streq	r3, [r4, #24]
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f000 f820 	bl	8006e10 <__sfp>
 8006dd0:	6060      	str	r0, [r4, #4]
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f000 f81c 	bl	8006e10 <__sfp>
 8006dd8:	60a0      	str	r0, [r4, #8]
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f000 f818 	bl	8006e10 <__sfp>
 8006de0:	2200      	movs	r2, #0
 8006de2:	60e0      	str	r0, [r4, #12]
 8006de4:	2104      	movs	r1, #4
 8006de6:	6860      	ldr	r0, [r4, #4]
 8006de8:	f7ff ff82 	bl	8006cf0 <std>
 8006dec:	68a0      	ldr	r0, [r4, #8]
 8006dee:	2201      	movs	r2, #1
 8006df0:	2109      	movs	r1, #9
 8006df2:	f7ff ff7d 	bl	8006cf0 <std>
 8006df6:	68e0      	ldr	r0, [r4, #12]
 8006df8:	2202      	movs	r2, #2
 8006dfa:	2112      	movs	r1, #18
 8006dfc:	f7ff ff78 	bl	8006cf0 <std>
 8006e00:	2301      	movs	r3, #1
 8006e02:	61a3      	str	r3, [r4, #24]
 8006e04:	e7d2      	b.n	8006dac <__sinit+0xc>
 8006e06:	bf00      	nop
 8006e08:	0800cbe0 	.word	0x0800cbe0
 8006e0c:	08006d39 	.word	0x08006d39

08006e10 <__sfp>:
 8006e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e12:	4607      	mov	r7, r0
 8006e14:	f7ff ffac 	bl	8006d70 <__sfp_lock_acquire>
 8006e18:	4b1e      	ldr	r3, [pc, #120]	; (8006e94 <__sfp+0x84>)
 8006e1a:	681e      	ldr	r6, [r3, #0]
 8006e1c:	69b3      	ldr	r3, [r6, #24]
 8006e1e:	b913      	cbnz	r3, 8006e26 <__sfp+0x16>
 8006e20:	4630      	mov	r0, r6
 8006e22:	f7ff ffbd 	bl	8006da0 <__sinit>
 8006e26:	3648      	adds	r6, #72	; 0x48
 8006e28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	d503      	bpl.n	8006e38 <__sfp+0x28>
 8006e30:	6833      	ldr	r3, [r6, #0]
 8006e32:	b30b      	cbz	r3, 8006e78 <__sfp+0x68>
 8006e34:	6836      	ldr	r6, [r6, #0]
 8006e36:	e7f7      	b.n	8006e28 <__sfp+0x18>
 8006e38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e3c:	b9d5      	cbnz	r5, 8006e74 <__sfp+0x64>
 8006e3e:	4b16      	ldr	r3, [pc, #88]	; (8006e98 <__sfp+0x88>)
 8006e40:	60e3      	str	r3, [r4, #12]
 8006e42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e46:	6665      	str	r5, [r4, #100]	; 0x64
 8006e48:	f000 f86c 	bl	8006f24 <__retarget_lock_init_recursive>
 8006e4c:	f7ff ff96 	bl	8006d7c <__sfp_lock_release>
 8006e50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e58:	6025      	str	r5, [r4, #0]
 8006e5a:	61a5      	str	r5, [r4, #24]
 8006e5c:	2208      	movs	r2, #8
 8006e5e:	4629      	mov	r1, r5
 8006e60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e64:	f000 f878 	bl	8006f58 <memset>
 8006e68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e70:	4620      	mov	r0, r4
 8006e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e74:	3468      	adds	r4, #104	; 0x68
 8006e76:	e7d9      	b.n	8006e2c <__sfp+0x1c>
 8006e78:	2104      	movs	r1, #4
 8006e7a:	4638      	mov	r0, r7
 8006e7c:	f7ff ff62 	bl	8006d44 <__sfmoreglue>
 8006e80:	4604      	mov	r4, r0
 8006e82:	6030      	str	r0, [r6, #0]
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d1d5      	bne.n	8006e34 <__sfp+0x24>
 8006e88:	f7ff ff78 	bl	8006d7c <__sfp_lock_release>
 8006e8c:	230c      	movs	r3, #12
 8006e8e:	603b      	str	r3, [r7, #0]
 8006e90:	e7ee      	b.n	8006e70 <__sfp+0x60>
 8006e92:	bf00      	nop
 8006e94:	0800cbe0 	.word	0x0800cbe0
 8006e98:	ffff0001 	.word	0xffff0001

08006e9c <_fwalk_reent>:
 8006e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ea0:	4606      	mov	r6, r0
 8006ea2:	4688      	mov	r8, r1
 8006ea4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ea8:	2700      	movs	r7, #0
 8006eaa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006eae:	f1b9 0901 	subs.w	r9, r9, #1
 8006eb2:	d505      	bpl.n	8006ec0 <_fwalk_reent+0x24>
 8006eb4:	6824      	ldr	r4, [r4, #0]
 8006eb6:	2c00      	cmp	r4, #0
 8006eb8:	d1f7      	bne.n	8006eaa <_fwalk_reent+0xe>
 8006eba:	4638      	mov	r0, r7
 8006ebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ec0:	89ab      	ldrh	r3, [r5, #12]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d907      	bls.n	8006ed6 <_fwalk_reent+0x3a>
 8006ec6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	d003      	beq.n	8006ed6 <_fwalk_reent+0x3a>
 8006ece:	4629      	mov	r1, r5
 8006ed0:	4630      	mov	r0, r6
 8006ed2:	47c0      	blx	r8
 8006ed4:	4307      	orrs	r7, r0
 8006ed6:	3568      	adds	r5, #104	; 0x68
 8006ed8:	e7e9      	b.n	8006eae <_fwalk_reent+0x12>
	...

08006edc <__libc_init_array>:
 8006edc:	b570      	push	{r4, r5, r6, lr}
 8006ede:	4d0d      	ldr	r5, [pc, #52]	; (8006f14 <__libc_init_array+0x38>)
 8006ee0:	4c0d      	ldr	r4, [pc, #52]	; (8006f18 <__libc_init_array+0x3c>)
 8006ee2:	1b64      	subs	r4, r4, r5
 8006ee4:	10a4      	asrs	r4, r4, #2
 8006ee6:	2600      	movs	r6, #0
 8006ee8:	42a6      	cmp	r6, r4
 8006eea:	d109      	bne.n	8006f00 <__libc_init_array+0x24>
 8006eec:	4d0b      	ldr	r5, [pc, #44]	; (8006f1c <__libc_init_array+0x40>)
 8006eee:	4c0c      	ldr	r4, [pc, #48]	; (8006f20 <__libc_init_array+0x44>)
 8006ef0:	f002 fd7c 	bl	80099ec <_init>
 8006ef4:	1b64      	subs	r4, r4, r5
 8006ef6:	10a4      	asrs	r4, r4, #2
 8006ef8:	2600      	movs	r6, #0
 8006efa:	42a6      	cmp	r6, r4
 8006efc:	d105      	bne.n	8006f0a <__libc_init_array+0x2e>
 8006efe:	bd70      	pop	{r4, r5, r6, pc}
 8006f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f04:	4798      	blx	r3
 8006f06:	3601      	adds	r6, #1
 8006f08:	e7ee      	b.n	8006ee8 <__libc_init_array+0xc>
 8006f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f0e:	4798      	blx	r3
 8006f10:	3601      	adds	r6, #1
 8006f12:	e7f2      	b.n	8006efa <__libc_init_array+0x1e>
 8006f14:	0800cf78 	.word	0x0800cf78
 8006f18:	0800cf78 	.word	0x0800cf78
 8006f1c:	0800cf78 	.word	0x0800cf78
 8006f20:	0800cf7c 	.word	0x0800cf7c

08006f24 <__retarget_lock_init_recursive>:
 8006f24:	4770      	bx	lr

08006f26 <__retarget_lock_acquire_recursive>:
 8006f26:	4770      	bx	lr

08006f28 <__retarget_lock_release_recursive>:
 8006f28:	4770      	bx	lr
	...

08006f2c <malloc>:
 8006f2c:	4b02      	ldr	r3, [pc, #8]	; (8006f38 <malloc+0xc>)
 8006f2e:	4601      	mov	r1, r0
 8006f30:	6818      	ldr	r0, [r3, #0]
 8006f32:	f000 b885 	b.w	8007040 <_malloc_r>
 8006f36:	bf00      	nop
 8006f38:	20000774 	.word	0x20000774

08006f3c <memcpy>:
 8006f3c:	440a      	add	r2, r1
 8006f3e:	4291      	cmp	r1, r2
 8006f40:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f44:	d100      	bne.n	8006f48 <memcpy+0xc>
 8006f46:	4770      	bx	lr
 8006f48:	b510      	push	{r4, lr}
 8006f4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f52:	4291      	cmp	r1, r2
 8006f54:	d1f9      	bne.n	8006f4a <memcpy+0xe>
 8006f56:	bd10      	pop	{r4, pc}

08006f58 <memset>:
 8006f58:	4402      	add	r2, r0
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d100      	bne.n	8006f62 <memset+0xa>
 8006f60:	4770      	bx	lr
 8006f62:	f803 1b01 	strb.w	r1, [r3], #1
 8006f66:	e7f9      	b.n	8006f5c <memset+0x4>

08006f68 <_free_r>:
 8006f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f6a:	2900      	cmp	r1, #0
 8006f6c:	d044      	beq.n	8006ff8 <_free_r+0x90>
 8006f6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f72:	9001      	str	r0, [sp, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f1a1 0404 	sub.w	r4, r1, #4
 8006f7a:	bfb8      	it	lt
 8006f7c:	18e4      	addlt	r4, r4, r3
 8006f7e:	f001 fe27 	bl	8008bd0 <__malloc_lock>
 8006f82:	4a1e      	ldr	r2, [pc, #120]	; (8006ffc <_free_r+0x94>)
 8006f84:	9801      	ldr	r0, [sp, #4]
 8006f86:	6813      	ldr	r3, [r2, #0]
 8006f88:	b933      	cbnz	r3, 8006f98 <_free_r+0x30>
 8006f8a:	6063      	str	r3, [r4, #4]
 8006f8c:	6014      	str	r4, [r2, #0]
 8006f8e:	b003      	add	sp, #12
 8006f90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f94:	f001 be22 	b.w	8008bdc <__malloc_unlock>
 8006f98:	42a3      	cmp	r3, r4
 8006f9a:	d908      	bls.n	8006fae <_free_r+0x46>
 8006f9c:	6825      	ldr	r5, [r4, #0]
 8006f9e:	1961      	adds	r1, r4, r5
 8006fa0:	428b      	cmp	r3, r1
 8006fa2:	bf01      	itttt	eq
 8006fa4:	6819      	ldreq	r1, [r3, #0]
 8006fa6:	685b      	ldreq	r3, [r3, #4]
 8006fa8:	1949      	addeq	r1, r1, r5
 8006faa:	6021      	streq	r1, [r4, #0]
 8006fac:	e7ed      	b.n	8006f8a <_free_r+0x22>
 8006fae:	461a      	mov	r2, r3
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	b10b      	cbz	r3, 8006fb8 <_free_r+0x50>
 8006fb4:	42a3      	cmp	r3, r4
 8006fb6:	d9fa      	bls.n	8006fae <_free_r+0x46>
 8006fb8:	6811      	ldr	r1, [r2, #0]
 8006fba:	1855      	adds	r5, r2, r1
 8006fbc:	42a5      	cmp	r5, r4
 8006fbe:	d10b      	bne.n	8006fd8 <_free_r+0x70>
 8006fc0:	6824      	ldr	r4, [r4, #0]
 8006fc2:	4421      	add	r1, r4
 8006fc4:	1854      	adds	r4, r2, r1
 8006fc6:	42a3      	cmp	r3, r4
 8006fc8:	6011      	str	r1, [r2, #0]
 8006fca:	d1e0      	bne.n	8006f8e <_free_r+0x26>
 8006fcc:	681c      	ldr	r4, [r3, #0]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	6053      	str	r3, [r2, #4]
 8006fd2:	4421      	add	r1, r4
 8006fd4:	6011      	str	r1, [r2, #0]
 8006fd6:	e7da      	b.n	8006f8e <_free_r+0x26>
 8006fd8:	d902      	bls.n	8006fe0 <_free_r+0x78>
 8006fda:	230c      	movs	r3, #12
 8006fdc:	6003      	str	r3, [r0, #0]
 8006fde:	e7d6      	b.n	8006f8e <_free_r+0x26>
 8006fe0:	6825      	ldr	r5, [r4, #0]
 8006fe2:	1961      	adds	r1, r4, r5
 8006fe4:	428b      	cmp	r3, r1
 8006fe6:	bf04      	itt	eq
 8006fe8:	6819      	ldreq	r1, [r3, #0]
 8006fea:	685b      	ldreq	r3, [r3, #4]
 8006fec:	6063      	str	r3, [r4, #4]
 8006fee:	bf04      	itt	eq
 8006ff0:	1949      	addeq	r1, r1, r5
 8006ff2:	6021      	streq	r1, [r4, #0]
 8006ff4:	6054      	str	r4, [r2, #4]
 8006ff6:	e7ca      	b.n	8006f8e <_free_r+0x26>
 8006ff8:	b003      	add	sp, #12
 8006ffa:	bd30      	pop	{r4, r5, pc}
 8006ffc:	2000133c 	.word	0x2000133c

08007000 <sbrk_aligned>:
 8007000:	b570      	push	{r4, r5, r6, lr}
 8007002:	4e0e      	ldr	r6, [pc, #56]	; (800703c <sbrk_aligned+0x3c>)
 8007004:	460c      	mov	r4, r1
 8007006:	6831      	ldr	r1, [r6, #0]
 8007008:	4605      	mov	r5, r0
 800700a:	b911      	cbnz	r1, 8007012 <sbrk_aligned+0x12>
 800700c:	f000 fd84 	bl	8007b18 <_sbrk_r>
 8007010:	6030      	str	r0, [r6, #0]
 8007012:	4621      	mov	r1, r4
 8007014:	4628      	mov	r0, r5
 8007016:	f000 fd7f 	bl	8007b18 <_sbrk_r>
 800701a:	1c43      	adds	r3, r0, #1
 800701c:	d00a      	beq.n	8007034 <sbrk_aligned+0x34>
 800701e:	1cc4      	adds	r4, r0, #3
 8007020:	f024 0403 	bic.w	r4, r4, #3
 8007024:	42a0      	cmp	r0, r4
 8007026:	d007      	beq.n	8007038 <sbrk_aligned+0x38>
 8007028:	1a21      	subs	r1, r4, r0
 800702a:	4628      	mov	r0, r5
 800702c:	f000 fd74 	bl	8007b18 <_sbrk_r>
 8007030:	3001      	adds	r0, #1
 8007032:	d101      	bne.n	8007038 <sbrk_aligned+0x38>
 8007034:	f04f 34ff 	mov.w	r4, #4294967295
 8007038:	4620      	mov	r0, r4
 800703a:	bd70      	pop	{r4, r5, r6, pc}
 800703c:	20001340 	.word	0x20001340

08007040 <_malloc_r>:
 8007040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007044:	1ccd      	adds	r5, r1, #3
 8007046:	f025 0503 	bic.w	r5, r5, #3
 800704a:	3508      	adds	r5, #8
 800704c:	2d0c      	cmp	r5, #12
 800704e:	bf38      	it	cc
 8007050:	250c      	movcc	r5, #12
 8007052:	2d00      	cmp	r5, #0
 8007054:	4607      	mov	r7, r0
 8007056:	db01      	blt.n	800705c <_malloc_r+0x1c>
 8007058:	42a9      	cmp	r1, r5
 800705a:	d905      	bls.n	8007068 <_malloc_r+0x28>
 800705c:	230c      	movs	r3, #12
 800705e:	603b      	str	r3, [r7, #0]
 8007060:	2600      	movs	r6, #0
 8007062:	4630      	mov	r0, r6
 8007064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007068:	4e2e      	ldr	r6, [pc, #184]	; (8007124 <_malloc_r+0xe4>)
 800706a:	f001 fdb1 	bl	8008bd0 <__malloc_lock>
 800706e:	6833      	ldr	r3, [r6, #0]
 8007070:	461c      	mov	r4, r3
 8007072:	bb34      	cbnz	r4, 80070c2 <_malloc_r+0x82>
 8007074:	4629      	mov	r1, r5
 8007076:	4638      	mov	r0, r7
 8007078:	f7ff ffc2 	bl	8007000 <sbrk_aligned>
 800707c:	1c43      	adds	r3, r0, #1
 800707e:	4604      	mov	r4, r0
 8007080:	d14d      	bne.n	800711e <_malloc_r+0xde>
 8007082:	6834      	ldr	r4, [r6, #0]
 8007084:	4626      	mov	r6, r4
 8007086:	2e00      	cmp	r6, #0
 8007088:	d140      	bne.n	800710c <_malloc_r+0xcc>
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	4631      	mov	r1, r6
 800708e:	4638      	mov	r0, r7
 8007090:	eb04 0803 	add.w	r8, r4, r3
 8007094:	f000 fd40 	bl	8007b18 <_sbrk_r>
 8007098:	4580      	cmp	r8, r0
 800709a:	d13a      	bne.n	8007112 <_malloc_r+0xd2>
 800709c:	6821      	ldr	r1, [r4, #0]
 800709e:	3503      	adds	r5, #3
 80070a0:	1a6d      	subs	r5, r5, r1
 80070a2:	f025 0503 	bic.w	r5, r5, #3
 80070a6:	3508      	adds	r5, #8
 80070a8:	2d0c      	cmp	r5, #12
 80070aa:	bf38      	it	cc
 80070ac:	250c      	movcc	r5, #12
 80070ae:	4629      	mov	r1, r5
 80070b0:	4638      	mov	r0, r7
 80070b2:	f7ff ffa5 	bl	8007000 <sbrk_aligned>
 80070b6:	3001      	adds	r0, #1
 80070b8:	d02b      	beq.n	8007112 <_malloc_r+0xd2>
 80070ba:	6823      	ldr	r3, [r4, #0]
 80070bc:	442b      	add	r3, r5
 80070be:	6023      	str	r3, [r4, #0]
 80070c0:	e00e      	b.n	80070e0 <_malloc_r+0xa0>
 80070c2:	6822      	ldr	r2, [r4, #0]
 80070c4:	1b52      	subs	r2, r2, r5
 80070c6:	d41e      	bmi.n	8007106 <_malloc_r+0xc6>
 80070c8:	2a0b      	cmp	r2, #11
 80070ca:	d916      	bls.n	80070fa <_malloc_r+0xba>
 80070cc:	1961      	adds	r1, r4, r5
 80070ce:	42a3      	cmp	r3, r4
 80070d0:	6025      	str	r5, [r4, #0]
 80070d2:	bf18      	it	ne
 80070d4:	6059      	strne	r1, [r3, #4]
 80070d6:	6863      	ldr	r3, [r4, #4]
 80070d8:	bf08      	it	eq
 80070da:	6031      	streq	r1, [r6, #0]
 80070dc:	5162      	str	r2, [r4, r5]
 80070de:	604b      	str	r3, [r1, #4]
 80070e0:	4638      	mov	r0, r7
 80070e2:	f104 060b 	add.w	r6, r4, #11
 80070e6:	f001 fd79 	bl	8008bdc <__malloc_unlock>
 80070ea:	f026 0607 	bic.w	r6, r6, #7
 80070ee:	1d23      	adds	r3, r4, #4
 80070f0:	1af2      	subs	r2, r6, r3
 80070f2:	d0b6      	beq.n	8007062 <_malloc_r+0x22>
 80070f4:	1b9b      	subs	r3, r3, r6
 80070f6:	50a3      	str	r3, [r4, r2]
 80070f8:	e7b3      	b.n	8007062 <_malloc_r+0x22>
 80070fa:	6862      	ldr	r2, [r4, #4]
 80070fc:	42a3      	cmp	r3, r4
 80070fe:	bf0c      	ite	eq
 8007100:	6032      	streq	r2, [r6, #0]
 8007102:	605a      	strne	r2, [r3, #4]
 8007104:	e7ec      	b.n	80070e0 <_malloc_r+0xa0>
 8007106:	4623      	mov	r3, r4
 8007108:	6864      	ldr	r4, [r4, #4]
 800710a:	e7b2      	b.n	8007072 <_malloc_r+0x32>
 800710c:	4634      	mov	r4, r6
 800710e:	6876      	ldr	r6, [r6, #4]
 8007110:	e7b9      	b.n	8007086 <_malloc_r+0x46>
 8007112:	230c      	movs	r3, #12
 8007114:	603b      	str	r3, [r7, #0]
 8007116:	4638      	mov	r0, r7
 8007118:	f001 fd60 	bl	8008bdc <__malloc_unlock>
 800711c:	e7a1      	b.n	8007062 <_malloc_r+0x22>
 800711e:	6025      	str	r5, [r4, #0]
 8007120:	e7de      	b.n	80070e0 <_malloc_r+0xa0>
 8007122:	bf00      	nop
 8007124:	2000133c 	.word	0x2000133c

08007128 <__cvt>:
 8007128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800712c:	ec55 4b10 	vmov	r4, r5, d0
 8007130:	2d00      	cmp	r5, #0
 8007132:	460e      	mov	r6, r1
 8007134:	4619      	mov	r1, r3
 8007136:	462b      	mov	r3, r5
 8007138:	bfbb      	ittet	lt
 800713a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800713e:	461d      	movlt	r5, r3
 8007140:	2300      	movge	r3, #0
 8007142:	232d      	movlt	r3, #45	; 0x2d
 8007144:	700b      	strb	r3, [r1, #0]
 8007146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007148:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800714c:	4691      	mov	r9, r2
 800714e:	f023 0820 	bic.w	r8, r3, #32
 8007152:	bfbc      	itt	lt
 8007154:	4622      	movlt	r2, r4
 8007156:	4614      	movlt	r4, r2
 8007158:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800715c:	d005      	beq.n	800716a <__cvt+0x42>
 800715e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007162:	d100      	bne.n	8007166 <__cvt+0x3e>
 8007164:	3601      	adds	r6, #1
 8007166:	2102      	movs	r1, #2
 8007168:	e000      	b.n	800716c <__cvt+0x44>
 800716a:	2103      	movs	r1, #3
 800716c:	ab03      	add	r3, sp, #12
 800716e:	9301      	str	r3, [sp, #4]
 8007170:	ab02      	add	r3, sp, #8
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	ec45 4b10 	vmov	d0, r4, r5
 8007178:	4653      	mov	r3, sl
 800717a:	4632      	mov	r2, r6
 800717c:	f000 feac 	bl	8007ed8 <_dtoa_r>
 8007180:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007184:	4607      	mov	r7, r0
 8007186:	d102      	bne.n	800718e <__cvt+0x66>
 8007188:	f019 0f01 	tst.w	r9, #1
 800718c:	d022      	beq.n	80071d4 <__cvt+0xac>
 800718e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007192:	eb07 0906 	add.w	r9, r7, r6
 8007196:	d110      	bne.n	80071ba <__cvt+0x92>
 8007198:	783b      	ldrb	r3, [r7, #0]
 800719a:	2b30      	cmp	r3, #48	; 0x30
 800719c:	d10a      	bne.n	80071b4 <__cvt+0x8c>
 800719e:	2200      	movs	r2, #0
 80071a0:	2300      	movs	r3, #0
 80071a2:	4620      	mov	r0, r4
 80071a4:	4629      	mov	r1, r5
 80071a6:	f7f9 fc8f 	bl	8000ac8 <__aeabi_dcmpeq>
 80071aa:	b918      	cbnz	r0, 80071b4 <__cvt+0x8c>
 80071ac:	f1c6 0601 	rsb	r6, r6, #1
 80071b0:	f8ca 6000 	str.w	r6, [sl]
 80071b4:	f8da 3000 	ldr.w	r3, [sl]
 80071b8:	4499      	add	r9, r3
 80071ba:	2200      	movs	r2, #0
 80071bc:	2300      	movs	r3, #0
 80071be:	4620      	mov	r0, r4
 80071c0:	4629      	mov	r1, r5
 80071c2:	f7f9 fc81 	bl	8000ac8 <__aeabi_dcmpeq>
 80071c6:	b108      	cbz	r0, 80071cc <__cvt+0xa4>
 80071c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80071cc:	2230      	movs	r2, #48	; 0x30
 80071ce:	9b03      	ldr	r3, [sp, #12]
 80071d0:	454b      	cmp	r3, r9
 80071d2:	d307      	bcc.n	80071e4 <__cvt+0xbc>
 80071d4:	9b03      	ldr	r3, [sp, #12]
 80071d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071d8:	1bdb      	subs	r3, r3, r7
 80071da:	4638      	mov	r0, r7
 80071dc:	6013      	str	r3, [r2, #0]
 80071de:	b004      	add	sp, #16
 80071e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071e4:	1c59      	adds	r1, r3, #1
 80071e6:	9103      	str	r1, [sp, #12]
 80071e8:	701a      	strb	r2, [r3, #0]
 80071ea:	e7f0      	b.n	80071ce <__cvt+0xa6>

080071ec <__exponent>:
 80071ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071ee:	4603      	mov	r3, r0
 80071f0:	2900      	cmp	r1, #0
 80071f2:	bfb8      	it	lt
 80071f4:	4249      	neglt	r1, r1
 80071f6:	f803 2b02 	strb.w	r2, [r3], #2
 80071fa:	bfb4      	ite	lt
 80071fc:	222d      	movlt	r2, #45	; 0x2d
 80071fe:	222b      	movge	r2, #43	; 0x2b
 8007200:	2909      	cmp	r1, #9
 8007202:	7042      	strb	r2, [r0, #1]
 8007204:	dd2a      	ble.n	800725c <__exponent+0x70>
 8007206:	f10d 0407 	add.w	r4, sp, #7
 800720a:	46a4      	mov	ip, r4
 800720c:	270a      	movs	r7, #10
 800720e:	46a6      	mov	lr, r4
 8007210:	460a      	mov	r2, r1
 8007212:	fb91 f6f7 	sdiv	r6, r1, r7
 8007216:	fb07 1516 	mls	r5, r7, r6, r1
 800721a:	3530      	adds	r5, #48	; 0x30
 800721c:	2a63      	cmp	r2, #99	; 0x63
 800721e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007222:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007226:	4631      	mov	r1, r6
 8007228:	dcf1      	bgt.n	800720e <__exponent+0x22>
 800722a:	3130      	adds	r1, #48	; 0x30
 800722c:	f1ae 0502 	sub.w	r5, lr, #2
 8007230:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007234:	1c44      	adds	r4, r0, #1
 8007236:	4629      	mov	r1, r5
 8007238:	4561      	cmp	r1, ip
 800723a:	d30a      	bcc.n	8007252 <__exponent+0x66>
 800723c:	f10d 0209 	add.w	r2, sp, #9
 8007240:	eba2 020e 	sub.w	r2, r2, lr
 8007244:	4565      	cmp	r5, ip
 8007246:	bf88      	it	hi
 8007248:	2200      	movhi	r2, #0
 800724a:	4413      	add	r3, r2
 800724c:	1a18      	subs	r0, r3, r0
 800724e:	b003      	add	sp, #12
 8007250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007252:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007256:	f804 2f01 	strb.w	r2, [r4, #1]!
 800725a:	e7ed      	b.n	8007238 <__exponent+0x4c>
 800725c:	2330      	movs	r3, #48	; 0x30
 800725e:	3130      	adds	r1, #48	; 0x30
 8007260:	7083      	strb	r3, [r0, #2]
 8007262:	70c1      	strb	r1, [r0, #3]
 8007264:	1d03      	adds	r3, r0, #4
 8007266:	e7f1      	b.n	800724c <__exponent+0x60>

08007268 <_printf_float>:
 8007268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726c:	ed2d 8b02 	vpush	{d8}
 8007270:	b08d      	sub	sp, #52	; 0x34
 8007272:	460c      	mov	r4, r1
 8007274:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007278:	4616      	mov	r6, r2
 800727a:	461f      	mov	r7, r3
 800727c:	4605      	mov	r5, r0
 800727e:	f001 fc2b 	bl	8008ad8 <_localeconv_r>
 8007282:	f8d0 a000 	ldr.w	sl, [r0]
 8007286:	4650      	mov	r0, sl
 8007288:	f7f8 ffa2 	bl	80001d0 <strlen>
 800728c:	2300      	movs	r3, #0
 800728e:	930a      	str	r3, [sp, #40]	; 0x28
 8007290:	6823      	ldr	r3, [r4, #0]
 8007292:	9305      	str	r3, [sp, #20]
 8007294:	f8d8 3000 	ldr.w	r3, [r8]
 8007298:	f894 b018 	ldrb.w	fp, [r4, #24]
 800729c:	3307      	adds	r3, #7
 800729e:	f023 0307 	bic.w	r3, r3, #7
 80072a2:	f103 0208 	add.w	r2, r3, #8
 80072a6:	f8c8 2000 	str.w	r2, [r8]
 80072aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80072b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80072b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80072ba:	9307      	str	r3, [sp, #28]
 80072bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80072c0:	ee08 0a10 	vmov	s16, r0
 80072c4:	4b9f      	ldr	r3, [pc, #636]	; (8007544 <_printf_float+0x2dc>)
 80072c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072ca:	f04f 32ff 	mov.w	r2, #4294967295
 80072ce:	f7f9 fc2d 	bl	8000b2c <__aeabi_dcmpun>
 80072d2:	bb88      	cbnz	r0, 8007338 <_printf_float+0xd0>
 80072d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072d8:	4b9a      	ldr	r3, [pc, #616]	; (8007544 <_printf_float+0x2dc>)
 80072da:	f04f 32ff 	mov.w	r2, #4294967295
 80072de:	f7f9 fc07 	bl	8000af0 <__aeabi_dcmple>
 80072e2:	bb48      	cbnz	r0, 8007338 <_printf_float+0xd0>
 80072e4:	2200      	movs	r2, #0
 80072e6:	2300      	movs	r3, #0
 80072e8:	4640      	mov	r0, r8
 80072ea:	4649      	mov	r1, r9
 80072ec:	f7f9 fbf6 	bl	8000adc <__aeabi_dcmplt>
 80072f0:	b110      	cbz	r0, 80072f8 <_printf_float+0x90>
 80072f2:	232d      	movs	r3, #45	; 0x2d
 80072f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072f8:	4b93      	ldr	r3, [pc, #588]	; (8007548 <_printf_float+0x2e0>)
 80072fa:	4894      	ldr	r0, [pc, #592]	; (800754c <_printf_float+0x2e4>)
 80072fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007300:	bf94      	ite	ls
 8007302:	4698      	movls	r8, r3
 8007304:	4680      	movhi	r8, r0
 8007306:	2303      	movs	r3, #3
 8007308:	6123      	str	r3, [r4, #16]
 800730a:	9b05      	ldr	r3, [sp, #20]
 800730c:	f023 0204 	bic.w	r2, r3, #4
 8007310:	6022      	str	r2, [r4, #0]
 8007312:	f04f 0900 	mov.w	r9, #0
 8007316:	9700      	str	r7, [sp, #0]
 8007318:	4633      	mov	r3, r6
 800731a:	aa0b      	add	r2, sp, #44	; 0x2c
 800731c:	4621      	mov	r1, r4
 800731e:	4628      	mov	r0, r5
 8007320:	f000 f9d8 	bl	80076d4 <_printf_common>
 8007324:	3001      	adds	r0, #1
 8007326:	f040 8090 	bne.w	800744a <_printf_float+0x1e2>
 800732a:	f04f 30ff 	mov.w	r0, #4294967295
 800732e:	b00d      	add	sp, #52	; 0x34
 8007330:	ecbd 8b02 	vpop	{d8}
 8007334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007338:	4642      	mov	r2, r8
 800733a:	464b      	mov	r3, r9
 800733c:	4640      	mov	r0, r8
 800733e:	4649      	mov	r1, r9
 8007340:	f7f9 fbf4 	bl	8000b2c <__aeabi_dcmpun>
 8007344:	b140      	cbz	r0, 8007358 <_printf_float+0xf0>
 8007346:	464b      	mov	r3, r9
 8007348:	2b00      	cmp	r3, #0
 800734a:	bfbc      	itt	lt
 800734c:	232d      	movlt	r3, #45	; 0x2d
 800734e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007352:	487f      	ldr	r0, [pc, #508]	; (8007550 <_printf_float+0x2e8>)
 8007354:	4b7f      	ldr	r3, [pc, #508]	; (8007554 <_printf_float+0x2ec>)
 8007356:	e7d1      	b.n	80072fc <_printf_float+0x94>
 8007358:	6863      	ldr	r3, [r4, #4]
 800735a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800735e:	9206      	str	r2, [sp, #24]
 8007360:	1c5a      	adds	r2, r3, #1
 8007362:	d13f      	bne.n	80073e4 <_printf_float+0x17c>
 8007364:	2306      	movs	r3, #6
 8007366:	6063      	str	r3, [r4, #4]
 8007368:	9b05      	ldr	r3, [sp, #20]
 800736a:	6861      	ldr	r1, [r4, #4]
 800736c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007370:	2300      	movs	r3, #0
 8007372:	9303      	str	r3, [sp, #12]
 8007374:	ab0a      	add	r3, sp, #40	; 0x28
 8007376:	e9cd b301 	strd	fp, r3, [sp, #4]
 800737a:	ab09      	add	r3, sp, #36	; 0x24
 800737c:	ec49 8b10 	vmov	d0, r8, r9
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	6022      	str	r2, [r4, #0]
 8007384:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007388:	4628      	mov	r0, r5
 800738a:	f7ff fecd 	bl	8007128 <__cvt>
 800738e:	9b06      	ldr	r3, [sp, #24]
 8007390:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007392:	2b47      	cmp	r3, #71	; 0x47
 8007394:	4680      	mov	r8, r0
 8007396:	d108      	bne.n	80073aa <_printf_float+0x142>
 8007398:	1cc8      	adds	r0, r1, #3
 800739a:	db02      	blt.n	80073a2 <_printf_float+0x13a>
 800739c:	6863      	ldr	r3, [r4, #4]
 800739e:	4299      	cmp	r1, r3
 80073a0:	dd41      	ble.n	8007426 <_printf_float+0x1be>
 80073a2:	f1ab 0b02 	sub.w	fp, fp, #2
 80073a6:	fa5f fb8b 	uxtb.w	fp, fp
 80073aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80073ae:	d820      	bhi.n	80073f2 <_printf_float+0x18a>
 80073b0:	3901      	subs	r1, #1
 80073b2:	465a      	mov	r2, fp
 80073b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80073b8:	9109      	str	r1, [sp, #36]	; 0x24
 80073ba:	f7ff ff17 	bl	80071ec <__exponent>
 80073be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073c0:	1813      	adds	r3, r2, r0
 80073c2:	2a01      	cmp	r2, #1
 80073c4:	4681      	mov	r9, r0
 80073c6:	6123      	str	r3, [r4, #16]
 80073c8:	dc02      	bgt.n	80073d0 <_printf_float+0x168>
 80073ca:	6822      	ldr	r2, [r4, #0]
 80073cc:	07d2      	lsls	r2, r2, #31
 80073ce:	d501      	bpl.n	80073d4 <_printf_float+0x16c>
 80073d0:	3301      	adds	r3, #1
 80073d2:	6123      	str	r3, [r4, #16]
 80073d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d09c      	beq.n	8007316 <_printf_float+0xae>
 80073dc:	232d      	movs	r3, #45	; 0x2d
 80073de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073e2:	e798      	b.n	8007316 <_printf_float+0xae>
 80073e4:	9a06      	ldr	r2, [sp, #24]
 80073e6:	2a47      	cmp	r2, #71	; 0x47
 80073e8:	d1be      	bne.n	8007368 <_printf_float+0x100>
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1bc      	bne.n	8007368 <_printf_float+0x100>
 80073ee:	2301      	movs	r3, #1
 80073f0:	e7b9      	b.n	8007366 <_printf_float+0xfe>
 80073f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80073f6:	d118      	bne.n	800742a <_printf_float+0x1c2>
 80073f8:	2900      	cmp	r1, #0
 80073fa:	6863      	ldr	r3, [r4, #4]
 80073fc:	dd0b      	ble.n	8007416 <_printf_float+0x1ae>
 80073fe:	6121      	str	r1, [r4, #16]
 8007400:	b913      	cbnz	r3, 8007408 <_printf_float+0x1a0>
 8007402:	6822      	ldr	r2, [r4, #0]
 8007404:	07d0      	lsls	r0, r2, #31
 8007406:	d502      	bpl.n	800740e <_printf_float+0x1a6>
 8007408:	3301      	adds	r3, #1
 800740a:	440b      	add	r3, r1
 800740c:	6123      	str	r3, [r4, #16]
 800740e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007410:	f04f 0900 	mov.w	r9, #0
 8007414:	e7de      	b.n	80073d4 <_printf_float+0x16c>
 8007416:	b913      	cbnz	r3, 800741e <_printf_float+0x1b6>
 8007418:	6822      	ldr	r2, [r4, #0]
 800741a:	07d2      	lsls	r2, r2, #31
 800741c:	d501      	bpl.n	8007422 <_printf_float+0x1ba>
 800741e:	3302      	adds	r3, #2
 8007420:	e7f4      	b.n	800740c <_printf_float+0x1a4>
 8007422:	2301      	movs	r3, #1
 8007424:	e7f2      	b.n	800740c <_printf_float+0x1a4>
 8007426:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800742a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800742c:	4299      	cmp	r1, r3
 800742e:	db05      	blt.n	800743c <_printf_float+0x1d4>
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	6121      	str	r1, [r4, #16]
 8007434:	07d8      	lsls	r0, r3, #31
 8007436:	d5ea      	bpl.n	800740e <_printf_float+0x1a6>
 8007438:	1c4b      	adds	r3, r1, #1
 800743a:	e7e7      	b.n	800740c <_printf_float+0x1a4>
 800743c:	2900      	cmp	r1, #0
 800743e:	bfd4      	ite	le
 8007440:	f1c1 0202 	rsble	r2, r1, #2
 8007444:	2201      	movgt	r2, #1
 8007446:	4413      	add	r3, r2
 8007448:	e7e0      	b.n	800740c <_printf_float+0x1a4>
 800744a:	6823      	ldr	r3, [r4, #0]
 800744c:	055a      	lsls	r2, r3, #21
 800744e:	d407      	bmi.n	8007460 <_printf_float+0x1f8>
 8007450:	6923      	ldr	r3, [r4, #16]
 8007452:	4642      	mov	r2, r8
 8007454:	4631      	mov	r1, r6
 8007456:	4628      	mov	r0, r5
 8007458:	47b8      	blx	r7
 800745a:	3001      	adds	r0, #1
 800745c:	d12c      	bne.n	80074b8 <_printf_float+0x250>
 800745e:	e764      	b.n	800732a <_printf_float+0xc2>
 8007460:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007464:	f240 80e0 	bls.w	8007628 <_printf_float+0x3c0>
 8007468:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800746c:	2200      	movs	r2, #0
 800746e:	2300      	movs	r3, #0
 8007470:	f7f9 fb2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007474:	2800      	cmp	r0, #0
 8007476:	d034      	beq.n	80074e2 <_printf_float+0x27a>
 8007478:	4a37      	ldr	r2, [pc, #220]	; (8007558 <_printf_float+0x2f0>)
 800747a:	2301      	movs	r3, #1
 800747c:	4631      	mov	r1, r6
 800747e:	4628      	mov	r0, r5
 8007480:	47b8      	blx	r7
 8007482:	3001      	adds	r0, #1
 8007484:	f43f af51 	beq.w	800732a <_printf_float+0xc2>
 8007488:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800748c:	429a      	cmp	r2, r3
 800748e:	db02      	blt.n	8007496 <_printf_float+0x22e>
 8007490:	6823      	ldr	r3, [r4, #0]
 8007492:	07d8      	lsls	r0, r3, #31
 8007494:	d510      	bpl.n	80074b8 <_printf_float+0x250>
 8007496:	ee18 3a10 	vmov	r3, s16
 800749a:	4652      	mov	r2, sl
 800749c:	4631      	mov	r1, r6
 800749e:	4628      	mov	r0, r5
 80074a0:	47b8      	blx	r7
 80074a2:	3001      	adds	r0, #1
 80074a4:	f43f af41 	beq.w	800732a <_printf_float+0xc2>
 80074a8:	f04f 0800 	mov.w	r8, #0
 80074ac:	f104 091a 	add.w	r9, r4, #26
 80074b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074b2:	3b01      	subs	r3, #1
 80074b4:	4543      	cmp	r3, r8
 80074b6:	dc09      	bgt.n	80074cc <_printf_float+0x264>
 80074b8:	6823      	ldr	r3, [r4, #0]
 80074ba:	079b      	lsls	r3, r3, #30
 80074bc:	f100 8105 	bmi.w	80076ca <_printf_float+0x462>
 80074c0:	68e0      	ldr	r0, [r4, #12]
 80074c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074c4:	4298      	cmp	r0, r3
 80074c6:	bfb8      	it	lt
 80074c8:	4618      	movlt	r0, r3
 80074ca:	e730      	b.n	800732e <_printf_float+0xc6>
 80074cc:	2301      	movs	r3, #1
 80074ce:	464a      	mov	r2, r9
 80074d0:	4631      	mov	r1, r6
 80074d2:	4628      	mov	r0, r5
 80074d4:	47b8      	blx	r7
 80074d6:	3001      	adds	r0, #1
 80074d8:	f43f af27 	beq.w	800732a <_printf_float+0xc2>
 80074dc:	f108 0801 	add.w	r8, r8, #1
 80074e0:	e7e6      	b.n	80074b0 <_printf_float+0x248>
 80074e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	dc39      	bgt.n	800755c <_printf_float+0x2f4>
 80074e8:	4a1b      	ldr	r2, [pc, #108]	; (8007558 <_printf_float+0x2f0>)
 80074ea:	2301      	movs	r3, #1
 80074ec:	4631      	mov	r1, r6
 80074ee:	4628      	mov	r0, r5
 80074f0:	47b8      	blx	r7
 80074f2:	3001      	adds	r0, #1
 80074f4:	f43f af19 	beq.w	800732a <_printf_float+0xc2>
 80074f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074fc:	4313      	orrs	r3, r2
 80074fe:	d102      	bne.n	8007506 <_printf_float+0x29e>
 8007500:	6823      	ldr	r3, [r4, #0]
 8007502:	07d9      	lsls	r1, r3, #31
 8007504:	d5d8      	bpl.n	80074b8 <_printf_float+0x250>
 8007506:	ee18 3a10 	vmov	r3, s16
 800750a:	4652      	mov	r2, sl
 800750c:	4631      	mov	r1, r6
 800750e:	4628      	mov	r0, r5
 8007510:	47b8      	blx	r7
 8007512:	3001      	adds	r0, #1
 8007514:	f43f af09 	beq.w	800732a <_printf_float+0xc2>
 8007518:	f04f 0900 	mov.w	r9, #0
 800751c:	f104 0a1a 	add.w	sl, r4, #26
 8007520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007522:	425b      	negs	r3, r3
 8007524:	454b      	cmp	r3, r9
 8007526:	dc01      	bgt.n	800752c <_printf_float+0x2c4>
 8007528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800752a:	e792      	b.n	8007452 <_printf_float+0x1ea>
 800752c:	2301      	movs	r3, #1
 800752e:	4652      	mov	r2, sl
 8007530:	4631      	mov	r1, r6
 8007532:	4628      	mov	r0, r5
 8007534:	47b8      	blx	r7
 8007536:	3001      	adds	r0, #1
 8007538:	f43f aef7 	beq.w	800732a <_printf_float+0xc2>
 800753c:	f109 0901 	add.w	r9, r9, #1
 8007540:	e7ee      	b.n	8007520 <_printf_float+0x2b8>
 8007542:	bf00      	nop
 8007544:	7fefffff 	.word	0x7fefffff
 8007548:	0800cbe4 	.word	0x0800cbe4
 800754c:	0800cbe8 	.word	0x0800cbe8
 8007550:	0800cbf0 	.word	0x0800cbf0
 8007554:	0800cbec 	.word	0x0800cbec
 8007558:	0800cbf4 	.word	0x0800cbf4
 800755c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800755e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007560:	429a      	cmp	r2, r3
 8007562:	bfa8      	it	ge
 8007564:	461a      	movge	r2, r3
 8007566:	2a00      	cmp	r2, #0
 8007568:	4691      	mov	r9, r2
 800756a:	dc37      	bgt.n	80075dc <_printf_float+0x374>
 800756c:	f04f 0b00 	mov.w	fp, #0
 8007570:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007574:	f104 021a 	add.w	r2, r4, #26
 8007578:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800757a:	9305      	str	r3, [sp, #20]
 800757c:	eba3 0309 	sub.w	r3, r3, r9
 8007580:	455b      	cmp	r3, fp
 8007582:	dc33      	bgt.n	80075ec <_printf_float+0x384>
 8007584:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007588:	429a      	cmp	r2, r3
 800758a:	db3b      	blt.n	8007604 <_printf_float+0x39c>
 800758c:	6823      	ldr	r3, [r4, #0]
 800758e:	07da      	lsls	r2, r3, #31
 8007590:	d438      	bmi.n	8007604 <_printf_float+0x39c>
 8007592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007594:	9a05      	ldr	r2, [sp, #20]
 8007596:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007598:	1a9a      	subs	r2, r3, r2
 800759a:	eba3 0901 	sub.w	r9, r3, r1
 800759e:	4591      	cmp	r9, r2
 80075a0:	bfa8      	it	ge
 80075a2:	4691      	movge	r9, r2
 80075a4:	f1b9 0f00 	cmp.w	r9, #0
 80075a8:	dc35      	bgt.n	8007616 <_printf_float+0x3ae>
 80075aa:	f04f 0800 	mov.w	r8, #0
 80075ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075b2:	f104 0a1a 	add.w	sl, r4, #26
 80075b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075ba:	1a9b      	subs	r3, r3, r2
 80075bc:	eba3 0309 	sub.w	r3, r3, r9
 80075c0:	4543      	cmp	r3, r8
 80075c2:	f77f af79 	ble.w	80074b8 <_printf_float+0x250>
 80075c6:	2301      	movs	r3, #1
 80075c8:	4652      	mov	r2, sl
 80075ca:	4631      	mov	r1, r6
 80075cc:	4628      	mov	r0, r5
 80075ce:	47b8      	blx	r7
 80075d0:	3001      	adds	r0, #1
 80075d2:	f43f aeaa 	beq.w	800732a <_printf_float+0xc2>
 80075d6:	f108 0801 	add.w	r8, r8, #1
 80075da:	e7ec      	b.n	80075b6 <_printf_float+0x34e>
 80075dc:	4613      	mov	r3, r2
 80075de:	4631      	mov	r1, r6
 80075e0:	4642      	mov	r2, r8
 80075e2:	4628      	mov	r0, r5
 80075e4:	47b8      	blx	r7
 80075e6:	3001      	adds	r0, #1
 80075e8:	d1c0      	bne.n	800756c <_printf_float+0x304>
 80075ea:	e69e      	b.n	800732a <_printf_float+0xc2>
 80075ec:	2301      	movs	r3, #1
 80075ee:	4631      	mov	r1, r6
 80075f0:	4628      	mov	r0, r5
 80075f2:	9205      	str	r2, [sp, #20]
 80075f4:	47b8      	blx	r7
 80075f6:	3001      	adds	r0, #1
 80075f8:	f43f ae97 	beq.w	800732a <_printf_float+0xc2>
 80075fc:	9a05      	ldr	r2, [sp, #20]
 80075fe:	f10b 0b01 	add.w	fp, fp, #1
 8007602:	e7b9      	b.n	8007578 <_printf_float+0x310>
 8007604:	ee18 3a10 	vmov	r3, s16
 8007608:	4652      	mov	r2, sl
 800760a:	4631      	mov	r1, r6
 800760c:	4628      	mov	r0, r5
 800760e:	47b8      	blx	r7
 8007610:	3001      	adds	r0, #1
 8007612:	d1be      	bne.n	8007592 <_printf_float+0x32a>
 8007614:	e689      	b.n	800732a <_printf_float+0xc2>
 8007616:	9a05      	ldr	r2, [sp, #20]
 8007618:	464b      	mov	r3, r9
 800761a:	4442      	add	r2, r8
 800761c:	4631      	mov	r1, r6
 800761e:	4628      	mov	r0, r5
 8007620:	47b8      	blx	r7
 8007622:	3001      	adds	r0, #1
 8007624:	d1c1      	bne.n	80075aa <_printf_float+0x342>
 8007626:	e680      	b.n	800732a <_printf_float+0xc2>
 8007628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800762a:	2a01      	cmp	r2, #1
 800762c:	dc01      	bgt.n	8007632 <_printf_float+0x3ca>
 800762e:	07db      	lsls	r3, r3, #31
 8007630:	d538      	bpl.n	80076a4 <_printf_float+0x43c>
 8007632:	2301      	movs	r3, #1
 8007634:	4642      	mov	r2, r8
 8007636:	4631      	mov	r1, r6
 8007638:	4628      	mov	r0, r5
 800763a:	47b8      	blx	r7
 800763c:	3001      	adds	r0, #1
 800763e:	f43f ae74 	beq.w	800732a <_printf_float+0xc2>
 8007642:	ee18 3a10 	vmov	r3, s16
 8007646:	4652      	mov	r2, sl
 8007648:	4631      	mov	r1, r6
 800764a:	4628      	mov	r0, r5
 800764c:	47b8      	blx	r7
 800764e:	3001      	adds	r0, #1
 8007650:	f43f ae6b 	beq.w	800732a <_printf_float+0xc2>
 8007654:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007658:	2200      	movs	r2, #0
 800765a:	2300      	movs	r3, #0
 800765c:	f7f9 fa34 	bl	8000ac8 <__aeabi_dcmpeq>
 8007660:	b9d8      	cbnz	r0, 800769a <_printf_float+0x432>
 8007662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007664:	f108 0201 	add.w	r2, r8, #1
 8007668:	3b01      	subs	r3, #1
 800766a:	4631      	mov	r1, r6
 800766c:	4628      	mov	r0, r5
 800766e:	47b8      	blx	r7
 8007670:	3001      	adds	r0, #1
 8007672:	d10e      	bne.n	8007692 <_printf_float+0x42a>
 8007674:	e659      	b.n	800732a <_printf_float+0xc2>
 8007676:	2301      	movs	r3, #1
 8007678:	4652      	mov	r2, sl
 800767a:	4631      	mov	r1, r6
 800767c:	4628      	mov	r0, r5
 800767e:	47b8      	blx	r7
 8007680:	3001      	adds	r0, #1
 8007682:	f43f ae52 	beq.w	800732a <_printf_float+0xc2>
 8007686:	f108 0801 	add.w	r8, r8, #1
 800768a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800768c:	3b01      	subs	r3, #1
 800768e:	4543      	cmp	r3, r8
 8007690:	dcf1      	bgt.n	8007676 <_printf_float+0x40e>
 8007692:	464b      	mov	r3, r9
 8007694:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007698:	e6dc      	b.n	8007454 <_printf_float+0x1ec>
 800769a:	f04f 0800 	mov.w	r8, #0
 800769e:	f104 0a1a 	add.w	sl, r4, #26
 80076a2:	e7f2      	b.n	800768a <_printf_float+0x422>
 80076a4:	2301      	movs	r3, #1
 80076a6:	4642      	mov	r2, r8
 80076a8:	e7df      	b.n	800766a <_printf_float+0x402>
 80076aa:	2301      	movs	r3, #1
 80076ac:	464a      	mov	r2, r9
 80076ae:	4631      	mov	r1, r6
 80076b0:	4628      	mov	r0, r5
 80076b2:	47b8      	blx	r7
 80076b4:	3001      	adds	r0, #1
 80076b6:	f43f ae38 	beq.w	800732a <_printf_float+0xc2>
 80076ba:	f108 0801 	add.w	r8, r8, #1
 80076be:	68e3      	ldr	r3, [r4, #12]
 80076c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076c2:	1a5b      	subs	r3, r3, r1
 80076c4:	4543      	cmp	r3, r8
 80076c6:	dcf0      	bgt.n	80076aa <_printf_float+0x442>
 80076c8:	e6fa      	b.n	80074c0 <_printf_float+0x258>
 80076ca:	f04f 0800 	mov.w	r8, #0
 80076ce:	f104 0919 	add.w	r9, r4, #25
 80076d2:	e7f4      	b.n	80076be <_printf_float+0x456>

080076d4 <_printf_common>:
 80076d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076d8:	4616      	mov	r6, r2
 80076da:	4699      	mov	r9, r3
 80076dc:	688a      	ldr	r2, [r1, #8]
 80076de:	690b      	ldr	r3, [r1, #16]
 80076e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076e4:	4293      	cmp	r3, r2
 80076e6:	bfb8      	it	lt
 80076e8:	4613      	movlt	r3, r2
 80076ea:	6033      	str	r3, [r6, #0]
 80076ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076f0:	4607      	mov	r7, r0
 80076f2:	460c      	mov	r4, r1
 80076f4:	b10a      	cbz	r2, 80076fa <_printf_common+0x26>
 80076f6:	3301      	adds	r3, #1
 80076f8:	6033      	str	r3, [r6, #0]
 80076fa:	6823      	ldr	r3, [r4, #0]
 80076fc:	0699      	lsls	r1, r3, #26
 80076fe:	bf42      	ittt	mi
 8007700:	6833      	ldrmi	r3, [r6, #0]
 8007702:	3302      	addmi	r3, #2
 8007704:	6033      	strmi	r3, [r6, #0]
 8007706:	6825      	ldr	r5, [r4, #0]
 8007708:	f015 0506 	ands.w	r5, r5, #6
 800770c:	d106      	bne.n	800771c <_printf_common+0x48>
 800770e:	f104 0a19 	add.w	sl, r4, #25
 8007712:	68e3      	ldr	r3, [r4, #12]
 8007714:	6832      	ldr	r2, [r6, #0]
 8007716:	1a9b      	subs	r3, r3, r2
 8007718:	42ab      	cmp	r3, r5
 800771a:	dc26      	bgt.n	800776a <_printf_common+0x96>
 800771c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007720:	1e13      	subs	r3, r2, #0
 8007722:	6822      	ldr	r2, [r4, #0]
 8007724:	bf18      	it	ne
 8007726:	2301      	movne	r3, #1
 8007728:	0692      	lsls	r2, r2, #26
 800772a:	d42b      	bmi.n	8007784 <_printf_common+0xb0>
 800772c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007730:	4649      	mov	r1, r9
 8007732:	4638      	mov	r0, r7
 8007734:	47c0      	blx	r8
 8007736:	3001      	adds	r0, #1
 8007738:	d01e      	beq.n	8007778 <_printf_common+0xa4>
 800773a:	6823      	ldr	r3, [r4, #0]
 800773c:	68e5      	ldr	r5, [r4, #12]
 800773e:	6832      	ldr	r2, [r6, #0]
 8007740:	f003 0306 	and.w	r3, r3, #6
 8007744:	2b04      	cmp	r3, #4
 8007746:	bf08      	it	eq
 8007748:	1aad      	subeq	r5, r5, r2
 800774a:	68a3      	ldr	r3, [r4, #8]
 800774c:	6922      	ldr	r2, [r4, #16]
 800774e:	bf0c      	ite	eq
 8007750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007754:	2500      	movne	r5, #0
 8007756:	4293      	cmp	r3, r2
 8007758:	bfc4      	itt	gt
 800775a:	1a9b      	subgt	r3, r3, r2
 800775c:	18ed      	addgt	r5, r5, r3
 800775e:	2600      	movs	r6, #0
 8007760:	341a      	adds	r4, #26
 8007762:	42b5      	cmp	r5, r6
 8007764:	d11a      	bne.n	800779c <_printf_common+0xc8>
 8007766:	2000      	movs	r0, #0
 8007768:	e008      	b.n	800777c <_printf_common+0xa8>
 800776a:	2301      	movs	r3, #1
 800776c:	4652      	mov	r2, sl
 800776e:	4649      	mov	r1, r9
 8007770:	4638      	mov	r0, r7
 8007772:	47c0      	blx	r8
 8007774:	3001      	adds	r0, #1
 8007776:	d103      	bne.n	8007780 <_printf_common+0xac>
 8007778:	f04f 30ff 	mov.w	r0, #4294967295
 800777c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007780:	3501      	adds	r5, #1
 8007782:	e7c6      	b.n	8007712 <_printf_common+0x3e>
 8007784:	18e1      	adds	r1, r4, r3
 8007786:	1c5a      	adds	r2, r3, #1
 8007788:	2030      	movs	r0, #48	; 0x30
 800778a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800778e:	4422      	add	r2, r4
 8007790:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007794:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007798:	3302      	adds	r3, #2
 800779a:	e7c7      	b.n	800772c <_printf_common+0x58>
 800779c:	2301      	movs	r3, #1
 800779e:	4622      	mov	r2, r4
 80077a0:	4649      	mov	r1, r9
 80077a2:	4638      	mov	r0, r7
 80077a4:	47c0      	blx	r8
 80077a6:	3001      	adds	r0, #1
 80077a8:	d0e6      	beq.n	8007778 <_printf_common+0xa4>
 80077aa:	3601      	adds	r6, #1
 80077ac:	e7d9      	b.n	8007762 <_printf_common+0x8e>
	...

080077b0 <_printf_i>:
 80077b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077b4:	7e0f      	ldrb	r7, [r1, #24]
 80077b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077b8:	2f78      	cmp	r7, #120	; 0x78
 80077ba:	4691      	mov	r9, r2
 80077bc:	4680      	mov	r8, r0
 80077be:	460c      	mov	r4, r1
 80077c0:	469a      	mov	sl, r3
 80077c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80077c6:	d807      	bhi.n	80077d8 <_printf_i+0x28>
 80077c8:	2f62      	cmp	r7, #98	; 0x62
 80077ca:	d80a      	bhi.n	80077e2 <_printf_i+0x32>
 80077cc:	2f00      	cmp	r7, #0
 80077ce:	f000 80d8 	beq.w	8007982 <_printf_i+0x1d2>
 80077d2:	2f58      	cmp	r7, #88	; 0x58
 80077d4:	f000 80a3 	beq.w	800791e <_printf_i+0x16e>
 80077d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80077e0:	e03a      	b.n	8007858 <_printf_i+0xa8>
 80077e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80077e6:	2b15      	cmp	r3, #21
 80077e8:	d8f6      	bhi.n	80077d8 <_printf_i+0x28>
 80077ea:	a101      	add	r1, pc, #4	; (adr r1, 80077f0 <_printf_i+0x40>)
 80077ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077f0:	08007849 	.word	0x08007849
 80077f4:	0800785d 	.word	0x0800785d
 80077f8:	080077d9 	.word	0x080077d9
 80077fc:	080077d9 	.word	0x080077d9
 8007800:	080077d9 	.word	0x080077d9
 8007804:	080077d9 	.word	0x080077d9
 8007808:	0800785d 	.word	0x0800785d
 800780c:	080077d9 	.word	0x080077d9
 8007810:	080077d9 	.word	0x080077d9
 8007814:	080077d9 	.word	0x080077d9
 8007818:	080077d9 	.word	0x080077d9
 800781c:	08007969 	.word	0x08007969
 8007820:	0800788d 	.word	0x0800788d
 8007824:	0800794b 	.word	0x0800794b
 8007828:	080077d9 	.word	0x080077d9
 800782c:	080077d9 	.word	0x080077d9
 8007830:	0800798b 	.word	0x0800798b
 8007834:	080077d9 	.word	0x080077d9
 8007838:	0800788d 	.word	0x0800788d
 800783c:	080077d9 	.word	0x080077d9
 8007840:	080077d9 	.word	0x080077d9
 8007844:	08007953 	.word	0x08007953
 8007848:	682b      	ldr	r3, [r5, #0]
 800784a:	1d1a      	adds	r2, r3, #4
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	602a      	str	r2, [r5, #0]
 8007850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007858:	2301      	movs	r3, #1
 800785a:	e0a3      	b.n	80079a4 <_printf_i+0x1f4>
 800785c:	6820      	ldr	r0, [r4, #0]
 800785e:	6829      	ldr	r1, [r5, #0]
 8007860:	0606      	lsls	r6, r0, #24
 8007862:	f101 0304 	add.w	r3, r1, #4
 8007866:	d50a      	bpl.n	800787e <_printf_i+0xce>
 8007868:	680e      	ldr	r6, [r1, #0]
 800786a:	602b      	str	r3, [r5, #0]
 800786c:	2e00      	cmp	r6, #0
 800786e:	da03      	bge.n	8007878 <_printf_i+0xc8>
 8007870:	232d      	movs	r3, #45	; 0x2d
 8007872:	4276      	negs	r6, r6
 8007874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007878:	485e      	ldr	r0, [pc, #376]	; (80079f4 <_printf_i+0x244>)
 800787a:	230a      	movs	r3, #10
 800787c:	e019      	b.n	80078b2 <_printf_i+0x102>
 800787e:	680e      	ldr	r6, [r1, #0]
 8007880:	602b      	str	r3, [r5, #0]
 8007882:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007886:	bf18      	it	ne
 8007888:	b236      	sxthne	r6, r6
 800788a:	e7ef      	b.n	800786c <_printf_i+0xbc>
 800788c:	682b      	ldr	r3, [r5, #0]
 800788e:	6820      	ldr	r0, [r4, #0]
 8007890:	1d19      	adds	r1, r3, #4
 8007892:	6029      	str	r1, [r5, #0]
 8007894:	0601      	lsls	r1, r0, #24
 8007896:	d501      	bpl.n	800789c <_printf_i+0xec>
 8007898:	681e      	ldr	r6, [r3, #0]
 800789a:	e002      	b.n	80078a2 <_printf_i+0xf2>
 800789c:	0646      	lsls	r6, r0, #25
 800789e:	d5fb      	bpl.n	8007898 <_printf_i+0xe8>
 80078a0:	881e      	ldrh	r6, [r3, #0]
 80078a2:	4854      	ldr	r0, [pc, #336]	; (80079f4 <_printf_i+0x244>)
 80078a4:	2f6f      	cmp	r7, #111	; 0x6f
 80078a6:	bf0c      	ite	eq
 80078a8:	2308      	moveq	r3, #8
 80078aa:	230a      	movne	r3, #10
 80078ac:	2100      	movs	r1, #0
 80078ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078b2:	6865      	ldr	r5, [r4, #4]
 80078b4:	60a5      	str	r5, [r4, #8]
 80078b6:	2d00      	cmp	r5, #0
 80078b8:	bfa2      	ittt	ge
 80078ba:	6821      	ldrge	r1, [r4, #0]
 80078bc:	f021 0104 	bicge.w	r1, r1, #4
 80078c0:	6021      	strge	r1, [r4, #0]
 80078c2:	b90e      	cbnz	r6, 80078c8 <_printf_i+0x118>
 80078c4:	2d00      	cmp	r5, #0
 80078c6:	d04d      	beq.n	8007964 <_printf_i+0x1b4>
 80078c8:	4615      	mov	r5, r2
 80078ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80078ce:	fb03 6711 	mls	r7, r3, r1, r6
 80078d2:	5dc7      	ldrb	r7, [r0, r7]
 80078d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80078d8:	4637      	mov	r7, r6
 80078da:	42bb      	cmp	r3, r7
 80078dc:	460e      	mov	r6, r1
 80078de:	d9f4      	bls.n	80078ca <_printf_i+0x11a>
 80078e0:	2b08      	cmp	r3, #8
 80078e2:	d10b      	bne.n	80078fc <_printf_i+0x14c>
 80078e4:	6823      	ldr	r3, [r4, #0]
 80078e6:	07de      	lsls	r6, r3, #31
 80078e8:	d508      	bpl.n	80078fc <_printf_i+0x14c>
 80078ea:	6923      	ldr	r3, [r4, #16]
 80078ec:	6861      	ldr	r1, [r4, #4]
 80078ee:	4299      	cmp	r1, r3
 80078f0:	bfde      	ittt	le
 80078f2:	2330      	movle	r3, #48	; 0x30
 80078f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80078fc:	1b52      	subs	r2, r2, r5
 80078fe:	6122      	str	r2, [r4, #16]
 8007900:	f8cd a000 	str.w	sl, [sp]
 8007904:	464b      	mov	r3, r9
 8007906:	aa03      	add	r2, sp, #12
 8007908:	4621      	mov	r1, r4
 800790a:	4640      	mov	r0, r8
 800790c:	f7ff fee2 	bl	80076d4 <_printf_common>
 8007910:	3001      	adds	r0, #1
 8007912:	d14c      	bne.n	80079ae <_printf_i+0x1fe>
 8007914:	f04f 30ff 	mov.w	r0, #4294967295
 8007918:	b004      	add	sp, #16
 800791a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800791e:	4835      	ldr	r0, [pc, #212]	; (80079f4 <_printf_i+0x244>)
 8007920:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007924:	6829      	ldr	r1, [r5, #0]
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	f851 6b04 	ldr.w	r6, [r1], #4
 800792c:	6029      	str	r1, [r5, #0]
 800792e:	061d      	lsls	r5, r3, #24
 8007930:	d514      	bpl.n	800795c <_printf_i+0x1ac>
 8007932:	07df      	lsls	r7, r3, #31
 8007934:	bf44      	itt	mi
 8007936:	f043 0320 	orrmi.w	r3, r3, #32
 800793a:	6023      	strmi	r3, [r4, #0]
 800793c:	b91e      	cbnz	r6, 8007946 <_printf_i+0x196>
 800793e:	6823      	ldr	r3, [r4, #0]
 8007940:	f023 0320 	bic.w	r3, r3, #32
 8007944:	6023      	str	r3, [r4, #0]
 8007946:	2310      	movs	r3, #16
 8007948:	e7b0      	b.n	80078ac <_printf_i+0xfc>
 800794a:	6823      	ldr	r3, [r4, #0]
 800794c:	f043 0320 	orr.w	r3, r3, #32
 8007950:	6023      	str	r3, [r4, #0]
 8007952:	2378      	movs	r3, #120	; 0x78
 8007954:	4828      	ldr	r0, [pc, #160]	; (80079f8 <_printf_i+0x248>)
 8007956:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800795a:	e7e3      	b.n	8007924 <_printf_i+0x174>
 800795c:	0659      	lsls	r1, r3, #25
 800795e:	bf48      	it	mi
 8007960:	b2b6      	uxthmi	r6, r6
 8007962:	e7e6      	b.n	8007932 <_printf_i+0x182>
 8007964:	4615      	mov	r5, r2
 8007966:	e7bb      	b.n	80078e0 <_printf_i+0x130>
 8007968:	682b      	ldr	r3, [r5, #0]
 800796a:	6826      	ldr	r6, [r4, #0]
 800796c:	6961      	ldr	r1, [r4, #20]
 800796e:	1d18      	adds	r0, r3, #4
 8007970:	6028      	str	r0, [r5, #0]
 8007972:	0635      	lsls	r5, r6, #24
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	d501      	bpl.n	800797c <_printf_i+0x1cc>
 8007978:	6019      	str	r1, [r3, #0]
 800797a:	e002      	b.n	8007982 <_printf_i+0x1d2>
 800797c:	0670      	lsls	r0, r6, #25
 800797e:	d5fb      	bpl.n	8007978 <_printf_i+0x1c8>
 8007980:	8019      	strh	r1, [r3, #0]
 8007982:	2300      	movs	r3, #0
 8007984:	6123      	str	r3, [r4, #16]
 8007986:	4615      	mov	r5, r2
 8007988:	e7ba      	b.n	8007900 <_printf_i+0x150>
 800798a:	682b      	ldr	r3, [r5, #0]
 800798c:	1d1a      	adds	r2, r3, #4
 800798e:	602a      	str	r2, [r5, #0]
 8007990:	681d      	ldr	r5, [r3, #0]
 8007992:	6862      	ldr	r2, [r4, #4]
 8007994:	2100      	movs	r1, #0
 8007996:	4628      	mov	r0, r5
 8007998:	f7f8 fc22 	bl	80001e0 <memchr>
 800799c:	b108      	cbz	r0, 80079a2 <_printf_i+0x1f2>
 800799e:	1b40      	subs	r0, r0, r5
 80079a0:	6060      	str	r0, [r4, #4]
 80079a2:	6863      	ldr	r3, [r4, #4]
 80079a4:	6123      	str	r3, [r4, #16]
 80079a6:	2300      	movs	r3, #0
 80079a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079ac:	e7a8      	b.n	8007900 <_printf_i+0x150>
 80079ae:	6923      	ldr	r3, [r4, #16]
 80079b0:	462a      	mov	r2, r5
 80079b2:	4649      	mov	r1, r9
 80079b4:	4640      	mov	r0, r8
 80079b6:	47d0      	blx	sl
 80079b8:	3001      	adds	r0, #1
 80079ba:	d0ab      	beq.n	8007914 <_printf_i+0x164>
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	079b      	lsls	r3, r3, #30
 80079c0:	d413      	bmi.n	80079ea <_printf_i+0x23a>
 80079c2:	68e0      	ldr	r0, [r4, #12]
 80079c4:	9b03      	ldr	r3, [sp, #12]
 80079c6:	4298      	cmp	r0, r3
 80079c8:	bfb8      	it	lt
 80079ca:	4618      	movlt	r0, r3
 80079cc:	e7a4      	b.n	8007918 <_printf_i+0x168>
 80079ce:	2301      	movs	r3, #1
 80079d0:	4632      	mov	r2, r6
 80079d2:	4649      	mov	r1, r9
 80079d4:	4640      	mov	r0, r8
 80079d6:	47d0      	blx	sl
 80079d8:	3001      	adds	r0, #1
 80079da:	d09b      	beq.n	8007914 <_printf_i+0x164>
 80079dc:	3501      	adds	r5, #1
 80079de:	68e3      	ldr	r3, [r4, #12]
 80079e0:	9903      	ldr	r1, [sp, #12]
 80079e2:	1a5b      	subs	r3, r3, r1
 80079e4:	42ab      	cmp	r3, r5
 80079e6:	dcf2      	bgt.n	80079ce <_printf_i+0x21e>
 80079e8:	e7eb      	b.n	80079c2 <_printf_i+0x212>
 80079ea:	2500      	movs	r5, #0
 80079ec:	f104 0619 	add.w	r6, r4, #25
 80079f0:	e7f5      	b.n	80079de <_printf_i+0x22e>
 80079f2:	bf00      	nop
 80079f4:	0800cbf6 	.word	0x0800cbf6
 80079f8:	0800cc07 	.word	0x0800cc07

080079fc <iprintf>:
 80079fc:	b40f      	push	{r0, r1, r2, r3}
 80079fe:	4b0a      	ldr	r3, [pc, #40]	; (8007a28 <iprintf+0x2c>)
 8007a00:	b513      	push	{r0, r1, r4, lr}
 8007a02:	681c      	ldr	r4, [r3, #0]
 8007a04:	b124      	cbz	r4, 8007a10 <iprintf+0x14>
 8007a06:	69a3      	ldr	r3, [r4, #24]
 8007a08:	b913      	cbnz	r3, 8007a10 <iprintf+0x14>
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	f7ff f9c8 	bl	8006da0 <__sinit>
 8007a10:	ab05      	add	r3, sp, #20
 8007a12:	9a04      	ldr	r2, [sp, #16]
 8007a14:	68a1      	ldr	r1, [r4, #8]
 8007a16:	9301      	str	r3, [sp, #4]
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f001 fca9 	bl	8009370 <_vfiprintf_r>
 8007a1e:	b002      	add	sp, #8
 8007a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a24:	b004      	add	sp, #16
 8007a26:	4770      	bx	lr
 8007a28:	20000774 	.word	0x20000774

08007a2c <_puts_r>:
 8007a2c:	b570      	push	{r4, r5, r6, lr}
 8007a2e:	460e      	mov	r6, r1
 8007a30:	4605      	mov	r5, r0
 8007a32:	b118      	cbz	r0, 8007a3c <_puts_r+0x10>
 8007a34:	6983      	ldr	r3, [r0, #24]
 8007a36:	b90b      	cbnz	r3, 8007a3c <_puts_r+0x10>
 8007a38:	f7ff f9b2 	bl	8006da0 <__sinit>
 8007a3c:	69ab      	ldr	r3, [r5, #24]
 8007a3e:	68ac      	ldr	r4, [r5, #8]
 8007a40:	b913      	cbnz	r3, 8007a48 <_puts_r+0x1c>
 8007a42:	4628      	mov	r0, r5
 8007a44:	f7ff f9ac 	bl	8006da0 <__sinit>
 8007a48:	4b2c      	ldr	r3, [pc, #176]	; (8007afc <_puts_r+0xd0>)
 8007a4a:	429c      	cmp	r4, r3
 8007a4c:	d120      	bne.n	8007a90 <_puts_r+0x64>
 8007a4e:	686c      	ldr	r4, [r5, #4]
 8007a50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a52:	07db      	lsls	r3, r3, #31
 8007a54:	d405      	bmi.n	8007a62 <_puts_r+0x36>
 8007a56:	89a3      	ldrh	r3, [r4, #12]
 8007a58:	0598      	lsls	r0, r3, #22
 8007a5a:	d402      	bmi.n	8007a62 <_puts_r+0x36>
 8007a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a5e:	f7ff fa62 	bl	8006f26 <__retarget_lock_acquire_recursive>
 8007a62:	89a3      	ldrh	r3, [r4, #12]
 8007a64:	0719      	lsls	r1, r3, #28
 8007a66:	d51d      	bpl.n	8007aa4 <_puts_r+0x78>
 8007a68:	6923      	ldr	r3, [r4, #16]
 8007a6a:	b1db      	cbz	r3, 8007aa4 <_puts_r+0x78>
 8007a6c:	3e01      	subs	r6, #1
 8007a6e:	68a3      	ldr	r3, [r4, #8]
 8007a70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a74:	3b01      	subs	r3, #1
 8007a76:	60a3      	str	r3, [r4, #8]
 8007a78:	bb39      	cbnz	r1, 8007aca <_puts_r+0x9e>
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	da38      	bge.n	8007af0 <_puts_r+0xc4>
 8007a7e:	4622      	mov	r2, r4
 8007a80:	210a      	movs	r1, #10
 8007a82:	4628      	mov	r0, r5
 8007a84:	f000 f89c 	bl	8007bc0 <__swbuf_r>
 8007a88:	3001      	adds	r0, #1
 8007a8a:	d011      	beq.n	8007ab0 <_puts_r+0x84>
 8007a8c:	250a      	movs	r5, #10
 8007a8e:	e011      	b.n	8007ab4 <_puts_r+0x88>
 8007a90:	4b1b      	ldr	r3, [pc, #108]	; (8007b00 <_puts_r+0xd4>)
 8007a92:	429c      	cmp	r4, r3
 8007a94:	d101      	bne.n	8007a9a <_puts_r+0x6e>
 8007a96:	68ac      	ldr	r4, [r5, #8]
 8007a98:	e7da      	b.n	8007a50 <_puts_r+0x24>
 8007a9a:	4b1a      	ldr	r3, [pc, #104]	; (8007b04 <_puts_r+0xd8>)
 8007a9c:	429c      	cmp	r4, r3
 8007a9e:	bf08      	it	eq
 8007aa0:	68ec      	ldreq	r4, [r5, #12]
 8007aa2:	e7d5      	b.n	8007a50 <_puts_r+0x24>
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	f000 f8ee 	bl	8007c88 <__swsetup_r>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	d0dd      	beq.n	8007a6c <_puts_r+0x40>
 8007ab0:	f04f 35ff 	mov.w	r5, #4294967295
 8007ab4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ab6:	07da      	lsls	r2, r3, #31
 8007ab8:	d405      	bmi.n	8007ac6 <_puts_r+0x9a>
 8007aba:	89a3      	ldrh	r3, [r4, #12]
 8007abc:	059b      	lsls	r3, r3, #22
 8007abe:	d402      	bmi.n	8007ac6 <_puts_r+0x9a>
 8007ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ac2:	f7ff fa31 	bl	8006f28 <__retarget_lock_release_recursive>
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	bd70      	pop	{r4, r5, r6, pc}
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	da04      	bge.n	8007ad8 <_puts_r+0xac>
 8007ace:	69a2      	ldr	r2, [r4, #24]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	dc06      	bgt.n	8007ae2 <_puts_r+0xb6>
 8007ad4:	290a      	cmp	r1, #10
 8007ad6:	d004      	beq.n	8007ae2 <_puts_r+0xb6>
 8007ad8:	6823      	ldr	r3, [r4, #0]
 8007ada:	1c5a      	adds	r2, r3, #1
 8007adc:	6022      	str	r2, [r4, #0]
 8007ade:	7019      	strb	r1, [r3, #0]
 8007ae0:	e7c5      	b.n	8007a6e <_puts_r+0x42>
 8007ae2:	4622      	mov	r2, r4
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	f000 f86b 	bl	8007bc0 <__swbuf_r>
 8007aea:	3001      	adds	r0, #1
 8007aec:	d1bf      	bne.n	8007a6e <_puts_r+0x42>
 8007aee:	e7df      	b.n	8007ab0 <_puts_r+0x84>
 8007af0:	6823      	ldr	r3, [r4, #0]
 8007af2:	250a      	movs	r5, #10
 8007af4:	1c5a      	adds	r2, r3, #1
 8007af6:	6022      	str	r2, [r4, #0]
 8007af8:	701d      	strb	r5, [r3, #0]
 8007afa:	e7db      	b.n	8007ab4 <_puts_r+0x88>
 8007afc:	0800cba0 	.word	0x0800cba0
 8007b00:	0800cbc0 	.word	0x0800cbc0
 8007b04:	0800cb80 	.word	0x0800cb80

08007b08 <puts>:
 8007b08:	4b02      	ldr	r3, [pc, #8]	; (8007b14 <puts+0xc>)
 8007b0a:	4601      	mov	r1, r0
 8007b0c:	6818      	ldr	r0, [r3, #0]
 8007b0e:	f7ff bf8d 	b.w	8007a2c <_puts_r>
 8007b12:	bf00      	nop
 8007b14:	20000774 	.word	0x20000774

08007b18 <_sbrk_r>:
 8007b18:	b538      	push	{r3, r4, r5, lr}
 8007b1a:	4d06      	ldr	r5, [pc, #24]	; (8007b34 <_sbrk_r+0x1c>)
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	4604      	mov	r4, r0
 8007b20:	4608      	mov	r0, r1
 8007b22:	602b      	str	r3, [r5, #0]
 8007b24:	f7f9 fd06 	bl	8001534 <_sbrk>
 8007b28:	1c43      	adds	r3, r0, #1
 8007b2a:	d102      	bne.n	8007b32 <_sbrk_r+0x1a>
 8007b2c:	682b      	ldr	r3, [r5, #0]
 8007b2e:	b103      	cbz	r3, 8007b32 <_sbrk_r+0x1a>
 8007b30:	6023      	str	r3, [r4, #0]
 8007b32:	bd38      	pop	{r3, r4, r5, pc}
 8007b34:	20001344 	.word	0x20001344

08007b38 <__sread>:
 8007b38:	b510      	push	{r4, lr}
 8007b3a:	460c      	mov	r4, r1
 8007b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b40:	f001 fd46 	bl	80095d0 <_read_r>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	bfab      	itete	ge
 8007b48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b4a:	89a3      	ldrhlt	r3, [r4, #12]
 8007b4c:	181b      	addge	r3, r3, r0
 8007b4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b52:	bfac      	ite	ge
 8007b54:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b56:	81a3      	strhlt	r3, [r4, #12]
 8007b58:	bd10      	pop	{r4, pc}

08007b5a <__swrite>:
 8007b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b5e:	461f      	mov	r7, r3
 8007b60:	898b      	ldrh	r3, [r1, #12]
 8007b62:	05db      	lsls	r3, r3, #23
 8007b64:	4605      	mov	r5, r0
 8007b66:	460c      	mov	r4, r1
 8007b68:	4616      	mov	r6, r2
 8007b6a:	d505      	bpl.n	8007b78 <__swrite+0x1e>
 8007b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b70:	2302      	movs	r3, #2
 8007b72:	2200      	movs	r2, #0
 8007b74:	f000 ffb4 	bl	8008ae0 <_lseek_r>
 8007b78:	89a3      	ldrh	r3, [r4, #12]
 8007b7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b82:	81a3      	strh	r3, [r4, #12]
 8007b84:	4632      	mov	r2, r6
 8007b86:	463b      	mov	r3, r7
 8007b88:	4628      	mov	r0, r5
 8007b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b8e:	f000 b869 	b.w	8007c64 <_write_r>

08007b92 <__sseek>:
 8007b92:	b510      	push	{r4, lr}
 8007b94:	460c      	mov	r4, r1
 8007b96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b9a:	f000 ffa1 	bl	8008ae0 <_lseek_r>
 8007b9e:	1c43      	adds	r3, r0, #1
 8007ba0:	89a3      	ldrh	r3, [r4, #12]
 8007ba2:	bf15      	itete	ne
 8007ba4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ba6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007baa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007bae:	81a3      	strheq	r3, [r4, #12]
 8007bb0:	bf18      	it	ne
 8007bb2:	81a3      	strhne	r3, [r4, #12]
 8007bb4:	bd10      	pop	{r4, pc}

08007bb6 <__sclose>:
 8007bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bba:	f000 b8f1 	b.w	8007da0 <_close_r>
	...

08007bc0 <__swbuf_r>:
 8007bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc2:	460e      	mov	r6, r1
 8007bc4:	4614      	mov	r4, r2
 8007bc6:	4605      	mov	r5, r0
 8007bc8:	b118      	cbz	r0, 8007bd2 <__swbuf_r+0x12>
 8007bca:	6983      	ldr	r3, [r0, #24]
 8007bcc:	b90b      	cbnz	r3, 8007bd2 <__swbuf_r+0x12>
 8007bce:	f7ff f8e7 	bl	8006da0 <__sinit>
 8007bd2:	4b21      	ldr	r3, [pc, #132]	; (8007c58 <__swbuf_r+0x98>)
 8007bd4:	429c      	cmp	r4, r3
 8007bd6:	d12b      	bne.n	8007c30 <__swbuf_r+0x70>
 8007bd8:	686c      	ldr	r4, [r5, #4]
 8007bda:	69a3      	ldr	r3, [r4, #24]
 8007bdc:	60a3      	str	r3, [r4, #8]
 8007bde:	89a3      	ldrh	r3, [r4, #12]
 8007be0:	071a      	lsls	r2, r3, #28
 8007be2:	d52f      	bpl.n	8007c44 <__swbuf_r+0x84>
 8007be4:	6923      	ldr	r3, [r4, #16]
 8007be6:	b36b      	cbz	r3, 8007c44 <__swbuf_r+0x84>
 8007be8:	6923      	ldr	r3, [r4, #16]
 8007bea:	6820      	ldr	r0, [r4, #0]
 8007bec:	1ac0      	subs	r0, r0, r3
 8007bee:	6963      	ldr	r3, [r4, #20]
 8007bf0:	b2f6      	uxtb	r6, r6
 8007bf2:	4283      	cmp	r3, r0
 8007bf4:	4637      	mov	r7, r6
 8007bf6:	dc04      	bgt.n	8007c02 <__swbuf_r+0x42>
 8007bf8:	4621      	mov	r1, r4
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	f7ff f83c 	bl	8006c78 <_fflush_r>
 8007c00:	bb30      	cbnz	r0, 8007c50 <__swbuf_r+0x90>
 8007c02:	68a3      	ldr	r3, [r4, #8]
 8007c04:	3b01      	subs	r3, #1
 8007c06:	60a3      	str	r3, [r4, #8]
 8007c08:	6823      	ldr	r3, [r4, #0]
 8007c0a:	1c5a      	adds	r2, r3, #1
 8007c0c:	6022      	str	r2, [r4, #0]
 8007c0e:	701e      	strb	r6, [r3, #0]
 8007c10:	6963      	ldr	r3, [r4, #20]
 8007c12:	3001      	adds	r0, #1
 8007c14:	4283      	cmp	r3, r0
 8007c16:	d004      	beq.n	8007c22 <__swbuf_r+0x62>
 8007c18:	89a3      	ldrh	r3, [r4, #12]
 8007c1a:	07db      	lsls	r3, r3, #31
 8007c1c:	d506      	bpl.n	8007c2c <__swbuf_r+0x6c>
 8007c1e:	2e0a      	cmp	r6, #10
 8007c20:	d104      	bne.n	8007c2c <__swbuf_r+0x6c>
 8007c22:	4621      	mov	r1, r4
 8007c24:	4628      	mov	r0, r5
 8007c26:	f7ff f827 	bl	8006c78 <_fflush_r>
 8007c2a:	b988      	cbnz	r0, 8007c50 <__swbuf_r+0x90>
 8007c2c:	4638      	mov	r0, r7
 8007c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c30:	4b0a      	ldr	r3, [pc, #40]	; (8007c5c <__swbuf_r+0x9c>)
 8007c32:	429c      	cmp	r4, r3
 8007c34:	d101      	bne.n	8007c3a <__swbuf_r+0x7a>
 8007c36:	68ac      	ldr	r4, [r5, #8]
 8007c38:	e7cf      	b.n	8007bda <__swbuf_r+0x1a>
 8007c3a:	4b09      	ldr	r3, [pc, #36]	; (8007c60 <__swbuf_r+0xa0>)
 8007c3c:	429c      	cmp	r4, r3
 8007c3e:	bf08      	it	eq
 8007c40:	68ec      	ldreq	r4, [r5, #12]
 8007c42:	e7ca      	b.n	8007bda <__swbuf_r+0x1a>
 8007c44:	4621      	mov	r1, r4
 8007c46:	4628      	mov	r0, r5
 8007c48:	f000 f81e 	bl	8007c88 <__swsetup_r>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	d0cb      	beq.n	8007be8 <__swbuf_r+0x28>
 8007c50:	f04f 37ff 	mov.w	r7, #4294967295
 8007c54:	e7ea      	b.n	8007c2c <__swbuf_r+0x6c>
 8007c56:	bf00      	nop
 8007c58:	0800cba0 	.word	0x0800cba0
 8007c5c:	0800cbc0 	.word	0x0800cbc0
 8007c60:	0800cb80 	.word	0x0800cb80

08007c64 <_write_r>:
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	4d07      	ldr	r5, [pc, #28]	; (8007c84 <_write_r+0x20>)
 8007c68:	4604      	mov	r4, r0
 8007c6a:	4608      	mov	r0, r1
 8007c6c:	4611      	mov	r1, r2
 8007c6e:	2200      	movs	r2, #0
 8007c70:	602a      	str	r2, [r5, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	f7fb fba2 	bl	80033bc <_write>
 8007c78:	1c43      	adds	r3, r0, #1
 8007c7a:	d102      	bne.n	8007c82 <_write_r+0x1e>
 8007c7c:	682b      	ldr	r3, [r5, #0]
 8007c7e:	b103      	cbz	r3, 8007c82 <_write_r+0x1e>
 8007c80:	6023      	str	r3, [r4, #0]
 8007c82:	bd38      	pop	{r3, r4, r5, pc}
 8007c84:	20001344 	.word	0x20001344

08007c88 <__swsetup_r>:
 8007c88:	4b32      	ldr	r3, [pc, #200]	; (8007d54 <__swsetup_r+0xcc>)
 8007c8a:	b570      	push	{r4, r5, r6, lr}
 8007c8c:	681d      	ldr	r5, [r3, #0]
 8007c8e:	4606      	mov	r6, r0
 8007c90:	460c      	mov	r4, r1
 8007c92:	b125      	cbz	r5, 8007c9e <__swsetup_r+0x16>
 8007c94:	69ab      	ldr	r3, [r5, #24]
 8007c96:	b913      	cbnz	r3, 8007c9e <__swsetup_r+0x16>
 8007c98:	4628      	mov	r0, r5
 8007c9a:	f7ff f881 	bl	8006da0 <__sinit>
 8007c9e:	4b2e      	ldr	r3, [pc, #184]	; (8007d58 <__swsetup_r+0xd0>)
 8007ca0:	429c      	cmp	r4, r3
 8007ca2:	d10f      	bne.n	8007cc4 <__swsetup_r+0x3c>
 8007ca4:	686c      	ldr	r4, [r5, #4]
 8007ca6:	89a3      	ldrh	r3, [r4, #12]
 8007ca8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007cac:	0719      	lsls	r1, r3, #28
 8007cae:	d42c      	bmi.n	8007d0a <__swsetup_r+0x82>
 8007cb0:	06dd      	lsls	r5, r3, #27
 8007cb2:	d411      	bmi.n	8007cd8 <__swsetup_r+0x50>
 8007cb4:	2309      	movs	r3, #9
 8007cb6:	6033      	str	r3, [r6, #0]
 8007cb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007cbc:	81a3      	strh	r3, [r4, #12]
 8007cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc2:	e03e      	b.n	8007d42 <__swsetup_r+0xba>
 8007cc4:	4b25      	ldr	r3, [pc, #148]	; (8007d5c <__swsetup_r+0xd4>)
 8007cc6:	429c      	cmp	r4, r3
 8007cc8:	d101      	bne.n	8007cce <__swsetup_r+0x46>
 8007cca:	68ac      	ldr	r4, [r5, #8]
 8007ccc:	e7eb      	b.n	8007ca6 <__swsetup_r+0x1e>
 8007cce:	4b24      	ldr	r3, [pc, #144]	; (8007d60 <__swsetup_r+0xd8>)
 8007cd0:	429c      	cmp	r4, r3
 8007cd2:	bf08      	it	eq
 8007cd4:	68ec      	ldreq	r4, [r5, #12]
 8007cd6:	e7e6      	b.n	8007ca6 <__swsetup_r+0x1e>
 8007cd8:	0758      	lsls	r0, r3, #29
 8007cda:	d512      	bpl.n	8007d02 <__swsetup_r+0x7a>
 8007cdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cde:	b141      	cbz	r1, 8007cf2 <__swsetup_r+0x6a>
 8007ce0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ce4:	4299      	cmp	r1, r3
 8007ce6:	d002      	beq.n	8007cee <__swsetup_r+0x66>
 8007ce8:	4630      	mov	r0, r6
 8007cea:	f7ff f93d 	bl	8006f68 <_free_r>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	6363      	str	r3, [r4, #52]	; 0x34
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007cf8:	81a3      	strh	r3, [r4, #12]
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	6063      	str	r3, [r4, #4]
 8007cfe:	6923      	ldr	r3, [r4, #16]
 8007d00:	6023      	str	r3, [r4, #0]
 8007d02:	89a3      	ldrh	r3, [r4, #12]
 8007d04:	f043 0308 	orr.w	r3, r3, #8
 8007d08:	81a3      	strh	r3, [r4, #12]
 8007d0a:	6923      	ldr	r3, [r4, #16]
 8007d0c:	b94b      	cbnz	r3, 8007d22 <__swsetup_r+0x9a>
 8007d0e:	89a3      	ldrh	r3, [r4, #12]
 8007d10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d18:	d003      	beq.n	8007d22 <__swsetup_r+0x9a>
 8007d1a:	4621      	mov	r1, r4
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	f000 ff17 	bl	8008b50 <__smakebuf_r>
 8007d22:	89a0      	ldrh	r0, [r4, #12]
 8007d24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d28:	f010 0301 	ands.w	r3, r0, #1
 8007d2c:	d00a      	beq.n	8007d44 <__swsetup_r+0xbc>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	60a3      	str	r3, [r4, #8]
 8007d32:	6963      	ldr	r3, [r4, #20]
 8007d34:	425b      	negs	r3, r3
 8007d36:	61a3      	str	r3, [r4, #24]
 8007d38:	6923      	ldr	r3, [r4, #16]
 8007d3a:	b943      	cbnz	r3, 8007d4e <__swsetup_r+0xc6>
 8007d3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d40:	d1ba      	bne.n	8007cb8 <__swsetup_r+0x30>
 8007d42:	bd70      	pop	{r4, r5, r6, pc}
 8007d44:	0781      	lsls	r1, r0, #30
 8007d46:	bf58      	it	pl
 8007d48:	6963      	ldrpl	r3, [r4, #20]
 8007d4a:	60a3      	str	r3, [r4, #8]
 8007d4c:	e7f4      	b.n	8007d38 <__swsetup_r+0xb0>
 8007d4e:	2000      	movs	r0, #0
 8007d50:	e7f7      	b.n	8007d42 <__swsetup_r+0xba>
 8007d52:	bf00      	nop
 8007d54:	20000774 	.word	0x20000774
 8007d58:	0800cba0 	.word	0x0800cba0
 8007d5c:	0800cbc0 	.word	0x0800cbc0
 8007d60:	0800cb80 	.word	0x0800cb80

08007d64 <__assert_func>:
 8007d64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d66:	4614      	mov	r4, r2
 8007d68:	461a      	mov	r2, r3
 8007d6a:	4b09      	ldr	r3, [pc, #36]	; (8007d90 <__assert_func+0x2c>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4605      	mov	r5, r0
 8007d70:	68d8      	ldr	r0, [r3, #12]
 8007d72:	b14c      	cbz	r4, 8007d88 <__assert_func+0x24>
 8007d74:	4b07      	ldr	r3, [pc, #28]	; (8007d94 <__assert_func+0x30>)
 8007d76:	9100      	str	r1, [sp, #0]
 8007d78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d7c:	4906      	ldr	r1, [pc, #24]	; (8007d98 <__assert_func+0x34>)
 8007d7e:	462b      	mov	r3, r5
 8007d80:	f000 fe98 	bl	8008ab4 <fiprintf>
 8007d84:	f001 fc36 	bl	80095f4 <abort>
 8007d88:	4b04      	ldr	r3, [pc, #16]	; (8007d9c <__assert_func+0x38>)
 8007d8a:	461c      	mov	r4, r3
 8007d8c:	e7f3      	b.n	8007d76 <__assert_func+0x12>
 8007d8e:	bf00      	nop
 8007d90:	20000774 	.word	0x20000774
 8007d94:	0800cc18 	.word	0x0800cc18
 8007d98:	0800cc25 	.word	0x0800cc25
 8007d9c:	08009a6c 	.word	0x08009a6c

08007da0 <_close_r>:
 8007da0:	b538      	push	{r3, r4, r5, lr}
 8007da2:	4d06      	ldr	r5, [pc, #24]	; (8007dbc <_close_r+0x1c>)
 8007da4:	2300      	movs	r3, #0
 8007da6:	4604      	mov	r4, r0
 8007da8:	4608      	mov	r0, r1
 8007daa:	602b      	str	r3, [r5, #0]
 8007dac:	f001 fde4 	bl	8009978 <_close>
 8007db0:	1c43      	adds	r3, r0, #1
 8007db2:	d102      	bne.n	8007dba <_close_r+0x1a>
 8007db4:	682b      	ldr	r3, [r5, #0]
 8007db6:	b103      	cbz	r3, 8007dba <_close_r+0x1a>
 8007db8:	6023      	str	r3, [r4, #0]
 8007dba:	bd38      	pop	{r3, r4, r5, pc}
 8007dbc:	20001344 	.word	0x20001344

08007dc0 <quorem>:
 8007dc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc4:	6903      	ldr	r3, [r0, #16]
 8007dc6:	690c      	ldr	r4, [r1, #16]
 8007dc8:	42a3      	cmp	r3, r4
 8007dca:	4607      	mov	r7, r0
 8007dcc:	f2c0 8081 	blt.w	8007ed2 <quorem+0x112>
 8007dd0:	3c01      	subs	r4, #1
 8007dd2:	f101 0814 	add.w	r8, r1, #20
 8007dd6:	f100 0514 	add.w	r5, r0, #20
 8007dda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dde:	9301      	str	r3, [sp, #4]
 8007de0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007de4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007de8:	3301      	adds	r3, #1
 8007dea:	429a      	cmp	r2, r3
 8007dec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007df0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007df4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007df8:	d331      	bcc.n	8007e5e <quorem+0x9e>
 8007dfa:	f04f 0e00 	mov.w	lr, #0
 8007dfe:	4640      	mov	r0, r8
 8007e00:	46ac      	mov	ip, r5
 8007e02:	46f2      	mov	sl, lr
 8007e04:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e08:	b293      	uxth	r3, r2
 8007e0a:	fb06 e303 	mla	r3, r6, r3, lr
 8007e0e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	ebaa 0303 	sub.w	r3, sl, r3
 8007e18:	f8dc a000 	ldr.w	sl, [ip]
 8007e1c:	0c12      	lsrs	r2, r2, #16
 8007e1e:	fa13 f38a 	uxtah	r3, r3, sl
 8007e22:	fb06 e202 	mla	r2, r6, r2, lr
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	9b00      	ldr	r3, [sp, #0]
 8007e2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007e2e:	b292      	uxth	r2, r2
 8007e30:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007e34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e38:	f8bd 3000 	ldrh.w	r3, [sp]
 8007e3c:	4581      	cmp	r9, r0
 8007e3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e42:	f84c 3b04 	str.w	r3, [ip], #4
 8007e46:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007e4a:	d2db      	bcs.n	8007e04 <quorem+0x44>
 8007e4c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007e50:	b92b      	cbnz	r3, 8007e5e <quorem+0x9e>
 8007e52:	9b01      	ldr	r3, [sp, #4]
 8007e54:	3b04      	subs	r3, #4
 8007e56:	429d      	cmp	r5, r3
 8007e58:	461a      	mov	r2, r3
 8007e5a:	d32e      	bcc.n	8007eba <quorem+0xfa>
 8007e5c:	613c      	str	r4, [r7, #16]
 8007e5e:	4638      	mov	r0, r7
 8007e60:	f001 f944 	bl	80090ec <__mcmp>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	db24      	blt.n	8007eb2 <quorem+0xf2>
 8007e68:	3601      	adds	r6, #1
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	f04f 0c00 	mov.w	ip, #0
 8007e70:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e74:	f8d0 e000 	ldr.w	lr, [r0]
 8007e78:	b293      	uxth	r3, r2
 8007e7a:	ebac 0303 	sub.w	r3, ip, r3
 8007e7e:	0c12      	lsrs	r2, r2, #16
 8007e80:	fa13 f38e 	uxtah	r3, r3, lr
 8007e84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007e88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e92:	45c1      	cmp	r9, r8
 8007e94:	f840 3b04 	str.w	r3, [r0], #4
 8007e98:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007e9c:	d2e8      	bcs.n	8007e70 <quorem+0xb0>
 8007e9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ea2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ea6:	b922      	cbnz	r2, 8007eb2 <quorem+0xf2>
 8007ea8:	3b04      	subs	r3, #4
 8007eaa:	429d      	cmp	r5, r3
 8007eac:	461a      	mov	r2, r3
 8007eae:	d30a      	bcc.n	8007ec6 <quorem+0x106>
 8007eb0:	613c      	str	r4, [r7, #16]
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	b003      	add	sp, #12
 8007eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eba:	6812      	ldr	r2, [r2, #0]
 8007ebc:	3b04      	subs	r3, #4
 8007ebe:	2a00      	cmp	r2, #0
 8007ec0:	d1cc      	bne.n	8007e5c <quorem+0x9c>
 8007ec2:	3c01      	subs	r4, #1
 8007ec4:	e7c7      	b.n	8007e56 <quorem+0x96>
 8007ec6:	6812      	ldr	r2, [r2, #0]
 8007ec8:	3b04      	subs	r3, #4
 8007eca:	2a00      	cmp	r2, #0
 8007ecc:	d1f0      	bne.n	8007eb0 <quorem+0xf0>
 8007ece:	3c01      	subs	r4, #1
 8007ed0:	e7eb      	b.n	8007eaa <quorem+0xea>
 8007ed2:	2000      	movs	r0, #0
 8007ed4:	e7ee      	b.n	8007eb4 <quorem+0xf4>
	...

08007ed8 <_dtoa_r>:
 8007ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007edc:	ed2d 8b04 	vpush	{d8-d9}
 8007ee0:	ec57 6b10 	vmov	r6, r7, d0
 8007ee4:	b093      	sub	sp, #76	; 0x4c
 8007ee6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007ee8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007eec:	9106      	str	r1, [sp, #24]
 8007eee:	ee10 aa10 	vmov	sl, s0
 8007ef2:	4604      	mov	r4, r0
 8007ef4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ef6:	930c      	str	r3, [sp, #48]	; 0x30
 8007ef8:	46bb      	mov	fp, r7
 8007efa:	b975      	cbnz	r5, 8007f1a <_dtoa_r+0x42>
 8007efc:	2010      	movs	r0, #16
 8007efe:	f7fb fa7d 	bl	80033fc <__wrap_malloc>
 8007f02:	4602      	mov	r2, r0
 8007f04:	6260      	str	r0, [r4, #36]	; 0x24
 8007f06:	b920      	cbnz	r0, 8007f12 <_dtoa_r+0x3a>
 8007f08:	4ba7      	ldr	r3, [pc, #668]	; (80081a8 <_dtoa_r+0x2d0>)
 8007f0a:	21ea      	movs	r1, #234	; 0xea
 8007f0c:	48a7      	ldr	r0, [pc, #668]	; (80081ac <_dtoa_r+0x2d4>)
 8007f0e:	f7ff ff29 	bl	8007d64 <__assert_func>
 8007f12:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f16:	6005      	str	r5, [r0, #0]
 8007f18:	60c5      	str	r5, [r0, #12]
 8007f1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f1c:	6819      	ldr	r1, [r3, #0]
 8007f1e:	b151      	cbz	r1, 8007f36 <_dtoa_r+0x5e>
 8007f20:	685a      	ldr	r2, [r3, #4]
 8007f22:	604a      	str	r2, [r1, #4]
 8007f24:	2301      	movs	r3, #1
 8007f26:	4093      	lsls	r3, r2
 8007f28:	608b      	str	r3, [r1, #8]
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	f000 fe9c 	bl	8008c68 <_Bfree>
 8007f30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f32:	2200      	movs	r2, #0
 8007f34:	601a      	str	r2, [r3, #0]
 8007f36:	1e3b      	subs	r3, r7, #0
 8007f38:	bfaa      	itet	ge
 8007f3a:	2300      	movge	r3, #0
 8007f3c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007f40:	f8c8 3000 	strge.w	r3, [r8]
 8007f44:	4b9a      	ldr	r3, [pc, #616]	; (80081b0 <_dtoa_r+0x2d8>)
 8007f46:	bfbc      	itt	lt
 8007f48:	2201      	movlt	r2, #1
 8007f4a:	f8c8 2000 	strlt.w	r2, [r8]
 8007f4e:	ea33 030b 	bics.w	r3, r3, fp
 8007f52:	d11b      	bne.n	8007f8c <_dtoa_r+0xb4>
 8007f54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f56:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f5a:	6013      	str	r3, [r2, #0]
 8007f5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f60:	4333      	orrs	r3, r6
 8007f62:	f000 8592 	beq.w	8008a8a <_dtoa_r+0xbb2>
 8007f66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f68:	b963      	cbnz	r3, 8007f84 <_dtoa_r+0xac>
 8007f6a:	4b92      	ldr	r3, [pc, #584]	; (80081b4 <_dtoa_r+0x2dc>)
 8007f6c:	e022      	b.n	8007fb4 <_dtoa_r+0xdc>
 8007f6e:	4b92      	ldr	r3, [pc, #584]	; (80081b8 <_dtoa_r+0x2e0>)
 8007f70:	9301      	str	r3, [sp, #4]
 8007f72:	3308      	adds	r3, #8
 8007f74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f76:	6013      	str	r3, [r2, #0]
 8007f78:	9801      	ldr	r0, [sp, #4]
 8007f7a:	b013      	add	sp, #76	; 0x4c
 8007f7c:	ecbd 8b04 	vpop	{d8-d9}
 8007f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f84:	4b8b      	ldr	r3, [pc, #556]	; (80081b4 <_dtoa_r+0x2dc>)
 8007f86:	9301      	str	r3, [sp, #4]
 8007f88:	3303      	adds	r3, #3
 8007f8a:	e7f3      	b.n	8007f74 <_dtoa_r+0x9c>
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	2300      	movs	r3, #0
 8007f90:	4650      	mov	r0, sl
 8007f92:	4659      	mov	r1, fp
 8007f94:	f7f8 fd98 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f98:	ec4b ab19 	vmov	d9, sl, fp
 8007f9c:	4680      	mov	r8, r0
 8007f9e:	b158      	cbz	r0, 8007fb8 <_dtoa_r+0xe0>
 8007fa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	6013      	str	r3, [r2, #0]
 8007fa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f000 856b 	beq.w	8008a84 <_dtoa_r+0xbac>
 8007fae:	4883      	ldr	r0, [pc, #524]	; (80081bc <_dtoa_r+0x2e4>)
 8007fb0:	6018      	str	r0, [r3, #0]
 8007fb2:	1e43      	subs	r3, r0, #1
 8007fb4:	9301      	str	r3, [sp, #4]
 8007fb6:	e7df      	b.n	8007f78 <_dtoa_r+0xa0>
 8007fb8:	ec4b ab10 	vmov	d0, sl, fp
 8007fbc:	aa10      	add	r2, sp, #64	; 0x40
 8007fbe:	a911      	add	r1, sp, #68	; 0x44
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	f001 f939 	bl	8009238 <__d2b>
 8007fc6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007fca:	ee08 0a10 	vmov	s16, r0
 8007fce:	2d00      	cmp	r5, #0
 8007fd0:	f000 8084 	beq.w	80080dc <_dtoa_r+0x204>
 8007fd4:	ee19 3a90 	vmov	r3, s19
 8007fd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fdc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007fe0:	4656      	mov	r6, sl
 8007fe2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007fe6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007fea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007fee:	4b74      	ldr	r3, [pc, #464]	; (80081c0 <_dtoa_r+0x2e8>)
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	4639      	mov	r1, r7
 8007ff6:	f7f8 f947 	bl	8000288 <__aeabi_dsub>
 8007ffa:	a365      	add	r3, pc, #404	; (adr r3, 8008190 <_dtoa_r+0x2b8>)
 8007ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008000:	f7f8 fafa 	bl	80005f8 <__aeabi_dmul>
 8008004:	a364      	add	r3, pc, #400	; (adr r3, 8008198 <_dtoa_r+0x2c0>)
 8008006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800a:	f7f8 f93f 	bl	800028c <__adddf3>
 800800e:	4606      	mov	r6, r0
 8008010:	4628      	mov	r0, r5
 8008012:	460f      	mov	r7, r1
 8008014:	f7f8 fa86 	bl	8000524 <__aeabi_i2d>
 8008018:	a361      	add	r3, pc, #388	; (adr r3, 80081a0 <_dtoa_r+0x2c8>)
 800801a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801e:	f7f8 faeb 	bl	80005f8 <__aeabi_dmul>
 8008022:	4602      	mov	r2, r0
 8008024:	460b      	mov	r3, r1
 8008026:	4630      	mov	r0, r6
 8008028:	4639      	mov	r1, r7
 800802a:	f7f8 f92f 	bl	800028c <__adddf3>
 800802e:	4606      	mov	r6, r0
 8008030:	460f      	mov	r7, r1
 8008032:	f7f8 fd91 	bl	8000b58 <__aeabi_d2iz>
 8008036:	2200      	movs	r2, #0
 8008038:	9000      	str	r0, [sp, #0]
 800803a:	2300      	movs	r3, #0
 800803c:	4630      	mov	r0, r6
 800803e:	4639      	mov	r1, r7
 8008040:	f7f8 fd4c 	bl	8000adc <__aeabi_dcmplt>
 8008044:	b150      	cbz	r0, 800805c <_dtoa_r+0x184>
 8008046:	9800      	ldr	r0, [sp, #0]
 8008048:	f7f8 fa6c 	bl	8000524 <__aeabi_i2d>
 800804c:	4632      	mov	r2, r6
 800804e:	463b      	mov	r3, r7
 8008050:	f7f8 fd3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008054:	b910      	cbnz	r0, 800805c <_dtoa_r+0x184>
 8008056:	9b00      	ldr	r3, [sp, #0]
 8008058:	3b01      	subs	r3, #1
 800805a:	9300      	str	r3, [sp, #0]
 800805c:	9b00      	ldr	r3, [sp, #0]
 800805e:	2b16      	cmp	r3, #22
 8008060:	d85a      	bhi.n	8008118 <_dtoa_r+0x240>
 8008062:	9a00      	ldr	r2, [sp, #0]
 8008064:	4b57      	ldr	r3, [pc, #348]	; (80081c4 <_dtoa_r+0x2ec>)
 8008066:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800806a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806e:	ec51 0b19 	vmov	r0, r1, d9
 8008072:	f7f8 fd33 	bl	8000adc <__aeabi_dcmplt>
 8008076:	2800      	cmp	r0, #0
 8008078:	d050      	beq.n	800811c <_dtoa_r+0x244>
 800807a:	9b00      	ldr	r3, [sp, #0]
 800807c:	3b01      	subs	r3, #1
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	2300      	movs	r3, #0
 8008082:	930b      	str	r3, [sp, #44]	; 0x2c
 8008084:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008086:	1b5d      	subs	r5, r3, r5
 8008088:	1e6b      	subs	r3, r5, #1
 800808a:	9305      	str	r3, [sp, #20]
 800808c:	bf45      	ittet	mi
 800808e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008092:	9304      	strmi	r3, [sp, #16]
 8008094:	2300      	movpl	r3, #0
 8008096:	2300      	movmi	r3, #0
 8008098:	bf4c      	ite	mi
 800809a:	9305      	strmi	r3, [sp, #20]
 800809c:	9304      	strpl	r3, [sp, #16]
 800809e:	9b00      	ldr	r3, [sp, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	db3d      	blt.n	8008120 <_dtoa_r+0x248>
 80080a4:	9b05      	ldr	r3, [sp, #20]
 80080a6:	9a00      	ldr	r2, [sp, #0]
 80080a8:	920a      	str	r2, [sp, #40]	; 0x28
 80080aa:	4413      	add	r3, r2
 80080ac:	9305      	str	r3, [sp, #20]
 80080ae:	2300      	movs	r3, #0
 80080b0:	9307      	str	r3, [sp, #28]
 80080b2:	9b06      	ldr	r3, [sp, #24]
 80080b4:	2b09      	cmp	r3, #9
 80080b6:	f200 8089 	bhi.w	80081cc <_dtoa_r+0x2f4>
 80080ba:	2b05      	cmp	r3, #5
 80080bc:	bfc4      	itt	gt
 80080be:	3b04      	subgt	r3, #4
 80080c0:	9306      	strgt	r3, [sp, #24]
 80080c2:	9b06      	ldr	r3, [sp, #24]
 80080c4:	f1a3 0302 	sub.w	r3, r3, #2
 80080c8:	bfcc      	ite	gt
 80080ca:	2500      	movgt	r5, #0
 80080cc:	2501      	movle	r5, #1
 80080ce:	2b03      	cmp	r3, #3
 80080d0:	f200 8087 	bhi.w	80081e2 <_dtoa_r+0x30a>
 80080d4:	e8df f003 	tbb	[pc, r3]
 80080d8:	59383a2d 	.word	0x59383a2d
 80080dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80080e0:	441d      	add	r5, r3
 80080e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80080e6:	2b20      	cmp	r3, #32
 80080e8:	bfc1      	itttt	gt
 80080ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80080ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80080f2:	fa0b f303 	lslgt.w	r3, fp, r3
 80080f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80080fa:	bfda      	itte	le
 80080fc:	f1c3 0320 	rsble	r3, r3, #32
 8008100:	fa06 f003 	lslle.w	r0, r6, r3
 8008104:	4318      	orrgt	r0, r3
 8008106:	f7f8 f9fd 	bl	8000504 <__aeabi_ui2d>
 800810a:	2301      	movs	r3, #1
 800810c:	4606      	mov	r6, r0
 800810e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008112:	3d01      	subs	r5, #1
 8008114:	930e      	str	r3, [sp, #56]	; 0x38
 8008116:	e76a      	b.n	8007fee <_dtoa_r+0x116>
 8008118:	2301      	movs	r3, #1
 800811a:	e7b2      	b.n	8008082 <_dtoa_r+0x1aa>
 800811c:	900b      	str	r0, [sp, #44]	; 0x2c
 800811e:	e7b1      	b.n	8008084 <_dtoa_r+0x1ac>
 8008120:	9b04      	ldr	r3, [sp, #16]
 8008122:	9a00      	ldr	r2, [sp, #0]
 8008124:	1a9b      	subs	r3, r3, r2
 8008126:	9304      	str	r3, [sp, #16]
 8008128:	4253      	negs	r3, r2
 800812a:	9307      	str	r3, [sp, #28]
 800812c:	2300      	movs	r3, #0
 800812e:	930a      	str	r3, [sp, #40]	; 0x28
 8008130:	e7bf      	b.n	80080b2 <_dtoa_r+0x1da>
 8008132:	2300      	movs	r3, #0
 8008134:	9308      	str	r3, [sp, #32]
 8008136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008138:	2b00      	cmp	r3, #0
 800813a:	dc55      	bgt.n	80081e8 <_dtoa_r+0x310>
 800813c:	2301      	movs	r3, #1
 800813e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008142:	461a      	mov	r2, r3
 8008144:	9209      	str	r2, [sp, #36]	; 0x24
 8008146:	e00c      	b.n	8008162 <_dtoa_r+0x28a>
 8008148:	2301      	movs	r3, #1
 800814a:	e7f3      	b.n	8008134 <_dtoa_r+0x25c>
 800814c:	2300      	movs	r3, #0
 800814e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008150:	9308      	str	r3, [sp, #32]
 8008152:	9b00      	ldr	r3, [sp, #0]
 8008154:	4413      	add	r3, r2
 8008156:	9302      	str	r3, [sp, #8]
 8008158:	3301      	adds	r3, #1
 800815a:	2b01      	cmp	r3, #1
 800815c:	9303      	str	r3, [sp, #12]
 800815e:	bfb8      	it	lt
 8008160:	2301      	movlt	r3, #1
 8008162:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008164:	2200      	movs	r2, #0
 8008166:	6042      	str	r2, [r0, #4]
 8008168:	2204      	movs	r2, #4
 800816a:	f102 0614 	add.w	r6, r2, #20
 800816e:	429e      	cmp	r6, r3
 8008170:	6841      	ldr	r1, [r0, #4]
 8008172:	d93d      	bls.n	80081f0 <_dtoa_r+0x318>
 8008174:	4620      	mov	r0, r4
 8008176:	f000 fd37 	bl	8008be8 <_Balloc>
 800817a:	9001      	str	r0, [sp, #4]
 800817c:	2800      	cmp	r0, #0
 800817e:	d13b      	bne.n	80081f8 <_dtoa_r+0x320>
 8008180:	4b11      	ldr	r3, [pc, #68]	; (80081c8 <_dtoa_r+0x2f0>)
 8008182:	4602      	mov	r2, r0
 8008184:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008188:	e6c0      	b.n	8007f0c <_dtoa_r+0x34>
 800818a:	2301      	movs	r3, #1
 800818c:	e7df      	b.n	800814e <_dtoa_r+0x276>
 800818e:	bf00      	nop
 8008190:	636f4361 	.word	0x636f4361
 8008194:	3fd287a7 	.word	0x3fd287a7
 8008198:	8b60c8b3 	.word	0x8b60c8b3
 800819c:	3fc68a28 	.word	0x3fc68a28
 80081a0:	509f79fb 	.word	0x509f79fb
 80081a4:	3fd34413 	.word	0x3fd34413
 80081a8:	0800cc61 	.word	0x0800cc61
 80081ac:	0800cc78 	.word	0x0800cc78
 80081b0:	7ff00000 	.word	0x7ff00000
 80081b4:	0800cc5d 	.word	0x0800cc5d
 80081b8:	0800cc54 	.word	0x0800cc54
 80081bc:	0800cbf5 	.word	0x0800cbf5
 80081c0:	3ff80000 	.word	0x3ff80000
 80081c4:	0800cd68 	.word	0x0800cd68
 80081c8:	0800ccd3 	.word	0x0800ccd3
 80081cc:	2501      	movs	r5, #1
 80081ce:	2300      	movs	r3, #0
 80081d0:	9306      	str	r3, [sp, #24]
 80081d2:	9508      	str	r5, [sp, #32]
 80081d4:	f04f 33ff 	mov.w	r3, #4294967295
 80081d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80081dc:	2200      	movs	r2, #0
 80081de:	2312      	movs	r3, #18
 80081e0:	e7b0      	b.n	8008144 <_dtoa_r+0x26c>
 80081e2:	2301      	movs	r3, #1
 80081e4:	9308      	str	r3, [sp, #32]
 80081e6:	e7f5      	b.n	80081d4 <_dtoa_r+0x2fc>
 80081e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80081ee:	e7b8      	b.n	8008162 <_dtoa_r+0x28a>
 80081f0:	3101      	adds	r1, #1
 80081f2:	6041      	str	r1, [r0, #4]
 80081f4:	0052      	lsls	r2, r2, #1
 80081f6:	e7b8      	b.n	800816a <_dtoa_r+0x292>
 80081f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081fa:	9a01      	ldr	r2, [sp, #4]
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	9b03      	ldr	r3, [sp, #12]
 8008200:	2b0e      	cmp	r3, #14
 8008202:	f200 809d 	bhi.w	8008340 <_dtoa_r+0x468>
 8008206:	2d00      	cmp	r5, #0
 8008208:	f000 809a 	beq.w	8008340 <_dtoa_r+0x468>
 800820c:	9b00      	ldr	r3, [sp, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	dd32      	ble.n	8008278 <_dtoa_r+0x3a0>
 8008212:	4ab7      	ldr	r2, [pc, #732]	; (80084f0 <_dtoa_r+0x618>)
 8008214:	f003 030f 	and.w	r3, r3, #15
 8008218:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800821c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008220:	9b00      	ldr	r3, [sp, #0]
 8008222:	05d8      	lsls	r0, r3, #23
 8008224:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008228:	d516      	bpl.n	8008258 <_dtoa_r+0x380>
 800822a:	4bb2      	ldr	r3, [pc, #712]	; (80084f4 <_dtoa_r+0x61c>)
 800822c:	ec51 0b19 	vmov	r0, r1, d9
 8008230:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008234:	f7f8 fb0a 	bl	800084c <__aeabi_ddiv>
 8008238:	f007 070f 	and.w	r7, r7, #15
 800823c:	4682      	mov	sl, r0
 800823e:	468b      	mov	fp, r1
 8008240:	2503      	movs	r5, #3
 8008242:	4eac      	ldr	r6, [pc, #688]	; (80084f4 <_dtoa_r+0x61c>)
 8008244:	b957      	cbnz	r7, 800825c <_dtoa_r+0x384>
 8008246:	4642      	mov	r2, r8
 8008248:	464b      	mov	r3, r9
 800824a:	4650      	mov	r0, sl
 800824c:	4659      	mov	r1, fp
 800824e:	f7f8 fafd 	bl	800084c <__aeabi_ddiv>
 8008252:	4682      	mov	sl, r0
 8008254:	468b      	mov	fp, r1
 8008256:	e028      	b.n	80082aa <_dtoa_r+0x3d2>
 8008258:	2502      	movs	r5, #2
 800825a:	e7f2      	b.n	8008242 <_dtoa_r+0x36a>
 800825c:	07f9      	lsls	r1, r7, #31
 800825e:	d508      	bpl.n	8008272 <_dtoa_r+0x39a>
 8008260:	4640      	mov	r0, r8
 8008262:	4649      	mov	r1, r9
 8008264:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008268:	f7f8 f9c6 	bl	80005f8 <__aeabi_dmul>
 800826c:	3501      	adds	r5, #1
 800826e:	4680      	mov	r8, r0
 8008270:	4689      	mov	r9, r1
 8008272:	107f      	asrs	r7, r7, #1
 8008274:	3608      	adds	r6, #8
 8008276:	e7e5      	b.n	8008244 <_dtoa_r+0x36c>
 8008278:	f000 809b 	beq.w	80083b2 <_dtoa_r+0x4da>
 800827c:	9b00      	ldr	r3, [sp, #0]
 800827e:	4f9d      	ldr	r7, [pc, #628]	; (80084f4 <_dtoa_r+0x61c>)
 8008280:	425e      	negs	r6, r3
 8008282:	4b9b      	ldr	r3, [pc, #620]	; (80084f0 <_dtoa_r+0x618>)
 8008284:	f006 020f 	and.w	r2, r6, #15
 8008288:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800828c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008290:	ec51 0b19 	vmov	r0, r1, d9
 8008294:	f7f8 f9b0 	bl	80005f8 <__aeabi_dmul>
 8008298:	1136      	asrs	r6, r6, #4
 800829a:	4682      	mov	sl, r0
 800829c:	468b      	mov	fp, r1
 800829e:	2300      	movs	r3, #0
 80082a0:	2502      	movs	r5, #2
 80082a2:	2e00      	cmp	r6, #0
 80082a4:	d17a      	bne.n	800839c <_dtoa_r+0x4c4>
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1d3      	bne.n	8008252 <_dtoa_r+0x37a>
 80082aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f000 8082 	beq.w	80083b6 <_dtoa_r+0x4de>
 80082b2:	4b91      	ldr	r3, [pc, #580]	; (80084f8 <_dtoa_r+0x620>)
 80082b4:	2200      	movs	r2, #0
 80082b6:	4650      	mov	r0, sl
 80082b8:	4659      	mov	r1, fp
 80082ba:	f7f8 fc0f 	bl	8000adc <__aeabi_dcmplt>
 80082be:	2800      	cmp	r0, #0
 80082c0:	d079      	beq.n	80083b6 <_dtoa_r+0x4de>
 80082c2:	9b03      	ldr	r3, [sp, #12]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d076      	beq.n	80083b6 <_dtoa_r+0x4de>
 80082c8:	9b02      	ldr	r3, [sp, #8]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	dd36      	ble.n	800833c <_dtoa_r+0x464>
 80082ce:	9b00      	ldr	r3, [sp, #0]
 80082d0:	4650      	mov	r0, sl
 80082d2:	4659      	mov	r1, fp
 80082d4:	1e5f      	subs	r7, r3, #1
 80082d6:	2200      	movs	r2, #0
 80082d8:	4b88      	ldr	r3, [pc, #544]	; (80084fc <_dtoa_r+0x624>)
 80082da:	f7f8 f98d 	bl	80005f8 <__aeabi_dmul>
 80082de:	9e02      	ldr	r6, [sp, #8]
 80082e0:	4682      	mov	sl, r0
 80082e2:	468b      	mov	fp, r1
 80082e4:	3501      	adds	r5, #1
 80082e6:	4628      	mov	r0, r5
 80082e8:	f7f8 f91c 	bl	8000524 <__aeabi_i2d>
 80082ec:	4652      	mov	r2, sl
 80082ee:	465b      	mov	r3, fp
 80082f0:	f7f8 f982 	bl	80005f8 <__aeabi_dmul>
 80082f4:	4b82      	ldr	r3, [pc, #520]	; (8008500 <_dtoa_r+0x628>)
 80082f6:	2200      	movs	r2, #0
 80082f8:	f7f7 ffc8 	bl	800028c <__adddf3>
 80082fc:	46d0      	mov	r8, sl
 80082fe:	46d9      	mov	r9, fp
 8008300:	4682      	mov	sl, r0
 8008302:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008306:	2e00      	cmp	r6, #0
 8008308:	d158      	bne.n	80083bc <_dtoa_r+0x4e4>
 800830a:	4b7e      	ldr	r3, [pc, #504]	; (8008504 <_dtoa_r+0x62c>)
 800830c:	2200      	movs	r2, #0
 800830e:	4640      	mov	r0, r8
 8008310:	4649      	mov	r1, r9
 8008312:	f7f7 ffb9 	bl	8000288 <__aeabi_dsub>
 8008316:	4652      	mov	r2, sl
 8008318:	465b      	mov	r3, fp
 800831a:	4680      	mov	r8, r0
 800831c:	4689      	mov	r9, r1
 800831e:	f7f8 fbfb 	bl	8000b18 <__aeabi_dcmpgt>
 8008322:	2800      	cmp	r0, #0
 8008324:	f040 8295 	bne.w	8008852 <_dtoa_r+0x97a>
 8008328:	4652      	mov	r2, sl
 800832a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800832e:	4640      	mov	r0, r8
 8008330:	4649      	mov	r1, r9
 8008332:	f7f8 fbd3 	bl	8000adc <__aeabi_dcmplt>
 8008336:	2800      	cmp	r0, #0
 8008338:	f040 8289 	bne.w	800884e <_dtoa_r+0x976>
 800833c:	ec5b ab19 	vmov	sl, fp, d9
 8008340:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008342:	2b00      	cmp	r3, #0
 8008344:	f2c0 8148 	blt.w	80085d8 <_dtoa_r+0x700>
 8008348:	9a00      	ldr	r2, [sp, #0]
 800834a:	2a0e      	cmp	r2, #14
 800834c:	f300 8144 	bgt.w	80085d8 <_dtoa_r+0x700>
 8008350:	4b67      	ldr	r3, [pc, #412]	; (80084f0 <_dtoa_r+0x618>)
 8008352:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008356:	e9d3 8900 	ldrd	r8, r9, [r3]
 800835a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800835c:	2b00      	cmp	r3, #0
 800835e:	f280 80d5 	bge.w	800850c <_dtoa_r+0x634>
 8008362:	9b03      	ldr	r3, [sp, #12]
 8008364:	2b00      	cmp	r3, #0
 8008366:	f300 80d1 	bgt.w	800850c <_dtoa_r+0x634>
 800836a:	f040 826f 	bne.w	800884c <_dtoa_r+0x974>
 800836e:	4b65      	ldr	r3, [pc, #404]	; (8008504 <_dtoa_r+0x62c>)
 8008370:	2200      	movs	r2, #0
 8008372:	4640      	mov	r0, r8
 8008374:	4649      	mov	r1, r9
 8008376:	f7f8 f93f 	bl	80005f8 <__aeabi_dmul>
 800837a:	4652      	mov	r2, sl
 800837c:	465b      	mov	r3, fp
 800837e:	f7f8 fbc1 	bl	8000b04 <__aeabi_dcmpge>
 8008382:	9e03      	ldr	r6, [sp, #12]
 8008384:	4637      	mov	r7, r6
 8008386:	2800      	cmp	r0, #0
 8008388:	f040 8245 	bne.w	8008816 <_dtoa_r+0x93e>
 800838c:	9d01      	ldr	r5, [sp, #4]
 800838e:	2331      	movs	r3, #49	; 0x31
 8008390:	f805 3b01 	strb.w	r3, [r5], #1
 8008394:	9b00      	ldr	r3, [sp, #0]
 8008396:	3301      	adds	r3, #1
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	e240      	b.n	800881e <_dtoa_r+0x946>
 800839c:	07f2      	lsls	r2, r6, #31
 800839e:	d505      	bpl.n	80083ac <_dtoa_r+0x4d4>
 80083a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083a4:	f7f8 f928 	bl	80005f8 <__aeabi_dmul>
 80083a8:	3501      	adds	r5, #1
 80083aa:	2301      	movs	r3, #1
 80083ac:	1076      	asrs	r6, r6, #1
 80083ae:	3708      	adds	r7, #8
 80083b0:	e777      	b.n	80082a2 <_dtoa_r+0x3ca>
 80083b2:	2502      	movs	r5, #2
 80083b4:	e779      	b.n	80082aa <_dtoa_r+0x3d2>
 80083b6:	9f00      	ldr	r7, [sp, #0]
 80083b8:	9e03      	ldr	r6, [sp, #12]
 80083ba:	e794      	b.n	80082e6 <_dtoa_r+0x40e>
 80083bc:	9901      	ldr	r1, [sp, #4]
 80083be:	4b4c      	ldr	r3, [pc, #304]	; (80084f0 <_dtoa_r+0x618>)
 80083c0:	4431      	add	r1, r6
 80083c2:	910d      	str	r1, [sp, #52]	; 0x34
 80083c4:	9908      	ldr	r1, [sp, #32]
 80083c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80083ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80083ce:	2900      	cmp	r1, #0
 80083d0:	d043      	beq.n	800845a <_dtoa_r+0x582>
 80083d2:	494d      	ldr	r1, [pc, #308]	; (8008508 <_dtoa_r+0x630>)
 80083d4:	2000      	movs	r0, #0
 80083d6:	f7f8 fa39 	bl	800084c <__aeabi_ddiv>
 80083da:	4652      	mov	r2, sl
 80083dc:	465b      	mov	r3, fp
 80083de:	f7f7 ff53 	bl	8000288 <__aeabi_dsub>
 80083e2:	9d01      	ldr	r5, [sp, #4]
 80083e4:	4682      	mov	sl, r0
 80083e6:	468b      	mov	fp, r1
 80083e8:	4649      	mov	r1, r9
 80083ea:	4640      	mov	r0, r8
 80083ec:	f7f8 fbb4 	bl	8000b58 <__aeabi_d2iz>
 80083f0:	4606      	mov	r6, r0
 80083f2:	f7f8 f897 	bl	8000524 <__aeabi_i2d>
 80083f6:	4602      	mov	r2, r0
 80083f8:	460b      	mov	r3, r1
 80083fa:	4640      	mov	r0, r8
 80083fc:	4649      	mov	r1, r9
 80083fe:	f7f7 ff43 	bl	8000288 <__aeabi_dsub>
 8008402:	3630      	adds	r6, #48	; 0x30
 8008404:	f805 6b01 	strb.w	r6, [r5], #1
 8008408:	4652      	mov	r2, sl
 800840a:	465b      	mov	r3, fp
 800840c:	4680      	mov	r8, r0
 800840e:	4689      	mov	r9, r1
 8008410:	f7f8 fb64 	bl	8000adc <__aeabi_dcmplt>
 8008414:	2800      	cmp	r0, #0
 8008416:	d163      	bne.n	80084e0 <_dtoa_r+0x608>
 8008418:	4642      	mov	r2, r8
 800841a:	464b      	mov	r3, r9
 800841c:	4936      	ldr	r1, [pc, #216]	; (80084f8 <_dtoa_r+0x620>)
 800841e:	2000      	movs	r0, #0
 8008420:	f7f7 ff32 	bl	8000288 <__aeabi_dsub>
 8008424:	4652      	mov	r2, sl
 8008426:	465b      	mov	r3, fp
 8008428:	f7f8 fb58 	bl	8000adc <__aeabi_dcmplt>
 800842c:	2800      	cmp	r0, #0
 800842e:	f040 80b5 	bne.w	800859c <_dtoa_r+0x6c4>
 8008432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008434:	429d      	cmp	r5, r3
 8008436:	d081      	beq.n	800833c <_dtoa_r+0x464>
 8008438:	4b30      	ldr	r3, [pc, #192]	; (80084fc <_dtoa_r+0x624>)
 800843a:	2200      	movs	r2, #0
 800843c:	4650      	mov	r0, sl
 800843e:	4659      	mov	r1, fp
 8008440:	f7f8 f8da 	bl	80005f8 <__aeabi_dmul>
 8008444:	4b2d      	ldr	r3, [pc, #180]	; (80084fc <_dtoa_r+0x624>)
 8008446:	4682      	mov	sl, r0
 8008448:	468b      	mov	fp, r1
 800844a:	4640      	mov	r0, r8
 800844c:	4649      	mov	r1, r9
 800844e:	2200      	movs	r2, #0
 8008450:	f7f8 f8d2 	bl	80005f8 <__aeabi_dmul>
 8008454:	4680      	mov	r8, r0
 8008456:	4689      	mov	r9, r1
 8008458:	e7c6      	b.n	80083e8 <_dtoa_r+0x510>
 800845a:	4650      	mov	r0, sl
 800845c:	4659      	mov	r1, fp
 800845e:	f7f8 f8cb 	bl	80005f8 <__aeabi_dmul>
 8008462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008464:	9d01      	ldr	r5, [sp, #4]
 8008466:	930f      	str	r3, [sp, #60]	; 0x3c
 8008468:	4682      	mov	sl, r0
 800846a:	468b      	mov	fp, r1
 800846c:	4649      	mov	r1, r9
 800846e:	4640      	mov	r0, r8
 8008470:	f7f8 fb72 	bl	8000b58 <__aeabi_d2iz>
 8008474:	4606      	mov	r6, r0
 8008476:	f7f8 f855 	bl	8000524 <__aeabi_i2d>
 800847a:	3630      	adds	r6, #48	; 0x30
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	4640      	mov	r0, r8
 8008482:	4649      	mov	r1, r9
 8008484:	f7f7 ff00 	bl	8000288 <__aeabi_dsub>
 8008488:	f805 6b01 	strb.w	r6, [r5], #1
 800848c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800848e:	429d      	cmp	r5, r3
 8008490:	4680      	mov	r8, r0
 8008492:	4689      	mov	r9, r1
 8008494:	f04f 0200 	mov.w	r2, #0
 8008498:	d124      	bne.n	80084e4 <_dtoa_r+0x60c>
 800849a:	4b1b      	ldr	r3, [pc, #108]	; (8008508 <_dtoa_r+0x630>)
 800849c:	4650      	mov	r0, sl
 800849e:	4659      	mov	r1, fp
 80084a0:	f7f7 fef4 	bl	800028c <__adddf3>
 80084a4:	4602      	mov	r2, r0
 80084a6:	460b      	mov	r3, r1
 80084a8:	4640      	mov	r0, r8
 80084aa:	4649      	mov	r1, r9
 80084ac:	f7f8 fb34 	bl	8000b18 <__aeabi_dcmpgt>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	d173      	bne.n	800859c <_dtoa_r+0x6c4>
 80084b4:	4652      	mov	r2, sl
 80084b6:	465b      	mov	r3, fp
 80084b8:	4913      	ldr	r1, [pc, #76]	; (8008508 <_dtoa_r+0x630>)
 80084ba:	2000      	movs	r0, #0
 80084bc:	f7f7 fee4 	bl	8000288 <__aeabi_dsub>
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	4640      	mov	r0, r8
 80084c6:	4649      	mov	r1, r9
 80084c8:	f7f8 fb08 	bl	8000adc <__aeabi_dcmplt>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	f43f af35 	beq.w	800833c <_dtoa_r+0x464>
 80084d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80084d4:	1e6b      	subs	r3, r5, #1
 80084d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80084d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80084dc:	2b30      	cmp	r3, #48	; 0x30
 80084de:	d0f8      	beq.n	80084d2 <_dtoa_r+0x5fa>
 80084e0:	9700      	str	r7, [sp, #0]
 80084e2:	e049      	b.n	8008578 <_dtoa_r+0x6a0>
 80084e4:	4b05      	ldr	r3, [pc, #20]	; (80084fc <_dtoa_r+0x624>)
 80084e6:	f7f8 f887 	bl	80005f8 <__aeabi_dmul>
 80084ea:	4680      	mov	r8, r0
 80084ec:	4689      	mov	r9, r1
 80084ee:	e7bd      	b.n	800846c <_dtoa_r+0x594>
 80084f0:	0800cd68 	.word	0x0800cd68
 80084f4:	0800cd40 	.word	0x0800cd40
 80084f8:	3ff00000 	.word	0x3ff00000
 80084fc:	40240000 	.word	0x40240000
 8008500:	401c0000 	.word	0x401c0000
 8008504:	40140000 	.word	0x40140000
 8008508:	3fe00000 	.word	0x3fe00000
 800850c:	9d01      	ldr	r5, [sp, #4]
 800850e:	4656      	mov	r6, sl
 8008510:	465f      	mov	r7, fp
 8008512:	4642      	mov	r2, r8
 8008514:	464b      	mov	r3, r9
 8008516:	4630      	mov	r0, r6
 8008518:	4639      	mov	r1, r7
 800851a:	f7f8 f997 	bl	800084c <__aeabi_ddiv>
 800851e:	f7f8 fb1b 	bl	8000b58 <__aeabi_d2iz>
 8008522:	4682      	mov	sl, r0
 8008524:	f7f7 fffe 	bl	8000524 <__aeabi_i2d>
 8008528:	4642      	mov	r2, r8
 800852a:	464b      	mov	r3, r9
 800852c:	f7f8 f864 	bl	80005f8 <__aeabi_dmul>
 8008530:	4602      	mov	r2, r0
 8008532:	460b      	mov	r3, r1
 8008534:	4630      	mov	r0, r6
 8008536:	4639      	mov	r1, r7
 8008538:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800853c:	f7f7 fea4 	bl	8000288 <__aeabi_dsub>
 8008540:	f805 6b01 	strb.w	r6, [r5], #1
 8008544:	9e01      	ldr	r6, [sp, #4]
 8008546:	9f03      	ldr	r7, [sp, #12]
 8008548:	1bae      	subs	r6, r5, r6
 800854a:	42b7      	cmp	r7, r6
 800854c:	4602      	mov	r2, r0
 800854e:	460b      	mov	r3, r1
 8008550:	d135      	bne.n	80085be <_dtoa_r+0x6e6>
 8008552:	f7f7 fe9b 	bl	800028c <__adddf3>
 8008556:	4642      	mov	r2, r8
 8008558:	464b      	mov	r3, r9
 800855a:	4606      	mov	r6, r0
 800855c:	460f      	mov	r7, r1
 800855e:	f7f8 fadb 	bl	8000b18 <__aeabi_dcmpgt>
 8008562:	b9d0      	cbnz	r0, 800859a <_dtoa_r+0x6c2>
 8008564:	4642      	mov	r2, r8
 8008566:	464b      	mov	r3, r9
 8008568:	4630      	mov	r0, r6
 800856a:	4639      	mov	r1, r7
 800856c:	f7f8 faac 	bl	8000ac8 <__aeabi_dcmpeq>
 8008570:	b110      	cbz	r0, 8008578 <_dtoa_r+0x6a0>
 8008572:	f01a 0f01 	tst.w	sl, #1
 8008576:	d110      	bne.n	800859a <_dtoa_r+0x6c2>
 8008578:	4620      	mov	r0, r4
 800857a:	ee18 1a10 	vmov	r1, s16
 800857e:	f000 fb73 	bl	8008c68 <_Bfree>
 8008582:	2300      	movs	r3, #0
 8008584:	9800      	ldr	r0, [sp, #0]
 8008586:	702b      	strb	r3, [r5, #0]
 8008588:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800858a:	3001      	adds	r0, #1
 800858c:	6018      	str	r0, [r3, #0]
 800858e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008590:	2b00      	cmp	r3, #0
 8008592:	f43f acf1 	beq.w	8007f78 <_dtoa_r+0xa0>
 8008596:	601d      	str	r5, [r3, #0]
 8008598:	e4ee      	b.n	8007f78 <_dtoa_r+0xa0>
 800859a:	9f00      	ldr	r7, [sp, #0]
 800859c:	462b      	mov	r3, r5
 800859e:	461d      	mov	r5, r3
 80085a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085a4:	2a39      	cmp	r2, #57	; 0x39
 80085a6:	d106      	bne.n	80085b6 <_dtoa_r+0x6de>
 80085a8:	9a01      	ldr	r2, [sp, #4]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d1f7      	bne.n	800859e <_dtoa_r+0x6c6>
 80085ae:	9901      	ldr	r1, [sp, #4]
 80085b0:	2230      	movs	r2, #48	; 0x30
 80085b2:	3701      	adds	r7, #1
 80085b4:	700a      	strb	r2, [r1, #0]
 80085b6:	781a      	ldrb	r2, [r3, #0]
 80085b8:	3201      	adds	r2, #1
 80085ba:	701a      	strb	r2, [r3, #0]
 80085bc:	e790      	b.n	80084e0 <_dtoa_r+0x608>
 80085be:	4ba6      	ldr	r3, [pc, #664]	; (8008858 <_dtoa_r+0x980>)
 80085c0:	2200      	movs	r2, #0
 80085c2:	f7f8 f819 	bl	80005f8 <__aeabi_dmul>
 80085c6:	2200      	movs	r2, #0
 80085c8:	2300      	movs	r3, #0
 80085ca:	4606      	mov	r6, r0
 80085cc:	460f      	mov	r7, r1
 80085ce:	f7f8 fa7b 	bl	8000ac8 <__aeabi_dcmpeq>
 80085d2:	2800      	cmp	r0, #0
 80085d4:	d09d      	beq.n	8008512 <_dtoa_r+0x63a>
 80085d6:	e7cf      	b.n	8008578 <_dtoa_r+0x6a0>
 80085d8:	9a08      	ldr	r2, [sp, #32]
 80085da:	2a00      	cmp	r2, #0
 80085dc:	f000 80d7 	beq.w	800878e <_dtoa_r+0x8b6>
 80085e0:	9a06      	ldr	r2, [sp, #24]
 80085e2:	2a01      	cmp	r2, #1
 80085e4:	f300 80ba 	bgt.w	800875c <_dtoa_r+0x884>
 80085e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085ea:	2a00      	cmp	r2, #0
 80085ec:	f000 80b2 	beq.w	8008754 <_dtoa_r+0x87c>
 80085f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80085f4:	9e07      	ldr	r6, [sp, #28]
 80085f6:	9d04      	ldr	r5, [sp, #16]
 80085f8:	9a04      	ldr	r2, [sp, #16]
 80085fa:	441a      	add	r2, r3
 80085fc:	9204      	str	r2, [sp, #16]
 80085fe:	9a05      	ldr	r2, [sp, #20]
 8008600:	2101      	movs	r1, #1
 8008602:	441a      	add	r2, r3
 8008604:	4620      	mov	r0, r4
 8008606:	9205      	str	r2, [sp, #20]
 8008608:	f000 fbe6 	bl	8008dd8 <__i2b>
 800860c:	4607      	mov	r7, r0
 800860e:	2d00      	cmp	r5, #0
 8008610:	dd0c      	ble.n	800862c <_dtoa_r+0x754>
 8008612:	9b05      	ldr	r3, [sp, #20]
 8008614:	2b00      	cmp	r3, #0
 8008616:	dd09      	ble.n	800862c <_dtoa_r+0x754>
 8008618:	42ab      	cmp	r3, r5
 800861a:	9a04      	ldr	r2, [sp, #16]
 800861c:	bfa8      	it	ge
 800861e:	462b      	movge	r3, r5
 8008620:	1ad2      	subs	r2, r2, r3
 8008622:	9204      	str	r2, [sp, #16]
 8008624:	9a05      	ldr	r2, [sp, #20]
 8008626:	1aed      	subs	r5, r5, r3
 8008628:	1ad3      	subs	r3, r2, r3
 800862a:	9305      	str	r3, [sp, #20]
 800862c:	9b07      	ldr	r3, [sp, #28]
 800862e:	b31b      	cbz	r3, 8008678 <_dtoa_r+0x7a0>
 8008630:	9b08      	ldr	r3, [sp, #32]
 8008632:	2b00      	cmp	r3, #0
 8008634:	f000 80af 	beq.w	8008796 <_dtoa_r+0x8be>
 8008638:	2e00      	cmp	r6, #0
 800863a:	dd13      	ble.n	8008664 <_dtoa_r+0x78c>
 800863c:	4639      	mov	r1, r7
 800863e:	4632      	mov	r2, r6
 8008640:	4620      	mov	r0, r4
 8008642:	f000 fc89 	bl	8008f58 <__pow5mult>
 8008646:	ee18 2a10 	vmov	r2, s16
 800864a:	4601      	mov	r1, r0
 800864c:	4607      	mov	r7, r0
 800864e:	4620      	mov	r0, r4
 8008650:	f000 fbd8 	bl	8008e04 <__multiply>
 8008654:	ee18 1a10 	vmov	r1, s16
 8008658:	4680      	mov	r8, r0
 800865a:	4620      	mov	r0, r4
 800865c:	f000 fb04 	bl	8008c68 <_Bfree>
 8008660:	ee08 8a10 	vmov	s16, r8
 8008664:	9b07      	ldr	r3, [sp, #28]
 8008666:	1b9a      	subs	r2, r3, r6
 8008668:	d006      	beq.n	8008678 <_dtoa_r+0x7a0>
 800866a:	ee18 1a10 	vmov	r1, s16
 800866e:	4620      	mov	r0, r4
 8008670:	f000 fc72 	bl	8008f58 <__pow5mult>
 8008674:	ee08 0a10 	vmov	s16, r0
 8008678:	2101      	movs	r1, #1
 800867a:	4620      	mov	r0, r4
 800867c:	f000 fbac 	bl	8008dd8 <__i2b>
 8008680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008682:	2b00      	cmp	r3, #0
 8008684:	4606      	mov	r6, r0
 8008686:	f340 8088 	ble.w	800879a <_dtoa_r+0x8c2>
 800868a:	461a      	mov	r2, r3
 800868c:	4601      	mov	r1, r0
 800868e:	4620      	mov	r0, r4
 8008690:	f000 fc62 	bl	8008f58 <__pow5mult>
 8008694:	9b06      	ldr	r3, [sp, #24]
 8008696:	2b01      	cmp	r3, #1
 8008698:	4606      	mov	r6, r0
 800869a:	f340 8081 	ble.w	80087a0 <_dtoa_r+0x8c8>
 800869e:	f04f 0800 	mov.w	r8, #0
 80086a2:	6933      	ldr	r3, [r6, #16]
 80086a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80086a8:	6918      	ldr	r0, [r3, #16]
 80086aa:	f000 fb45 	bl	8008d38 <__hi0bits>
 80086ae:	f1c0 0020 	rsb	r0, r0, #32
 80086b2:	9b05      	ldr	r3, [sp, #20]
 80086b4:	4418      	add	r0, r3
 80086b6:	f010 001f 	ands.w	r0, r0, #31
 80086ba:	f000 8092 	beq.w	80087e2 <_dtoa_r+0x90a>
 80086be:	f1c0 0320 	rsb	r3, r0, #32
 80086c2:	2b04      	cmp	r3, #4
 80086c4:	f340 808a 	ble.w	80087dc <_dtoa_r+0x904>
 80086c8:	f1c0 001c 	rsb	r0, r0, #28
 80086cc:	9b04      	ldr	r3, [sp, #16]
 80086ce:	4403      	add	r3, r0
 80086d0:	9304      	str	r3, [sp, #16]
 80086d2:	9b05      	ldr	r3, [sp, #20]
 80086d4:	4403      	add	r3, r0
 80086d6:	4405      	add	r5, r0
 80086d8:	9305      	str	r3, [sp, #20]
 80086da:	9b04      	ldr	r3, [sp, #16]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	dd07      	ble.n	80086f0 <_dtoa_r+0x818>
 80086e0:	ee18 1a10 	vmov	r1, s16
 80086e4:	461a      	mov	r2, r3
 80086e6:	4620      	mov	r0, r4
 80086e8:	f000 fc90 	bl	800900c <__lshift>
 80086ec:	ee08 0a10 	vmov	s16, r0
 80086f0:	9b05      	ldr	r3, [sp, #20]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	dd05      	ble.n	8008702 <_dtoa_r+0x82a>
 80086f6:	4631      	mov	r1, r6
 80086f8:	461a      	mov	r2, r3
 80086fa:	4620      	mov	r0, r4
 80086fc:	f000 fc86 	bl	800900c <__lshift>
 8008700:	4606      	mov	r6, r0
 8008702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008704:	2b00      	cmp	r3, #0
 8008706:	d06e      	beq.n	80087e6 <_dtoa_r+0x90e>
 8008708:	ee18 0a10 	vmov	r0, s16
 800870c:	4631      	mov	r1, r6
 800870e:	f000 fced 	bl	80090ec <__mcmp>
 8008712:	2800      	cmp	r0, #0
 8008714:	da67      	bge.n	80087e6 <_dtoa_r+0x90e>
 8008716:	9b00      	ldr	r3, [sp, #0]
 8008718:	3b01      	subs	r3, #1
 800871a:	ee18 1a10 	vmov	r1, s16
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	220a      	movs	r2, #10
 8008722:	2300      	movs	r3, #0
 8008724:	4620      	mov	r0, r4
 8008726:	f000 fac1 	bl	8008cac <__multadd>
 800872a:	9b08      	ldr	r3, [sp, #32]
 800872c:	ee08 0a10 	vmov	s16, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	f000 81b1 	beq.w	8008a98 <_dtoa_r+0xbc0>
 8008736:	2300      	movs	r3, #0
 8008738:	4639      	mov	r1, r7
 800873a:	220a      	movs	r2, #10
 800873c:	4620      	mov	r0, r4
 800873e:	f000 fab5 	bl	8008cac <__multadd>
 8008742:	9b02      	ldr	r3, [sp, #8]
 8008744:	2b00      	cmp	r3, #0
 8008746:	4607      	mov	r7, r0
 8008748:	f300 808e 	bgt.w	8008868 <_dtoa_r+0x990>
 800874c:	9b06      	ldr	r3, [sp, #24]
 800874e:	2b02      	cmp	r3, #2
 8008750:	dc51      	bgt.n	80087f6 <_dtoa_r+0x91e>
 8008752:	e089      	b.n	8008868 <_dtoa_r+0x990>
 8008754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008756:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800875a:	e74b      	b.n	80085f4 <_dtoa_r+0x71c>
 800875c:	9b03      	ldr	r3, [sp, #12]
 800875e:	1e5e      	subs	r6, r3, #1
 8008760:	9b07      	ldr	r3, [sp, #28]
 8008762:	42b3      	cmp	r3, r6
 8008764:	bfbf      	itttt	lt
 8008766:	9b07      	ldrlt	r3, [sp, #28]
 8008768:	9607      	strlt	r6, [sp, #28]
 800876a:	1af2      	sublt	r2, r6, r3
 800876c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800876e:	bfb6      	itet	lt
 8008770:	189b      	addlt	r3, r3, r2
 8008772:	1b9e      	subge	r6, r3, r6
 8008774:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008776:	9b03      	ldr	r3, [sp, #12]
 8008778:	bfb8      	it	lt
 800877a:	2600      	movlt	r6, #0
 800877c:	2b00      	cmp	r3, #0
 800877e:	bfb7      	itett	lt
 8008780:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008784:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008788:	1a9d      	sublt	r5, r3, r2
 800878a:	2300      	movlt	r3, #0
 800878c:	e734      	b.n	80085f8 <_dtoa_r+0x720>
 800878e:	9e07      	ldr	r6, [sp, #28]
 8008790:	9d04      	ldr	r5, [sp, #16]
 8008792:	9f08      	ldr	r7, [sp, #32]
 8008794:	e73b      	b.n	800860e <_dtoa_r+0x736>
 8008796:	9a07      	ldr	r2, [sp, #28]
 8008798:	e767      	b.n	800866a <_dtoa_r+0x792>
 800879a:	9b06      	ldr	r3, [sp, #24]
 800879c:	2b01      	cmp	r3, #1
 800879e:	dc18      	bgt.n	80087d2 <_dtoa_r+0x8fa>
 80087a0:	f1ba 0f00 	cmp.w	sl, #0
 80087a4:	d115      	bne.n	80087d2 <_dtoa_r+0x8fa>
 80087a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80087aa:	b993      	cbnz	r3, 80087d2 <_dtoa_r+0x8fa>
 80087ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80087b0:	0d1b      	lsrs	r3, r3, #20
 80087b2:	051b      	lsls	r3, r3, #20
 80087b4:	b183      	cbz	r3, 80087d8 <_dtoa_r+0x900>
 80087b6:	9b04      	ldr	r3, [sp, #16]
 80087b8:	3301      	adds	r3, #1
 80087ba:	9304      	str	r3, [sp, #16]
 80087bc:	9b05      	ldr	r3, [sp, #20]
 80087be:	3301      	adds	r3, #1
 80087c0:	9305      	str	r3, [sp, #20]
 80087c2:	f04f 0801 	mov.w	r8, #1
 80087c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f47f af6a 	bne.w	80086a2 <_dtoa_r+0x7ca>
 80087ce:	2001      	movs	r0, #1
 80087d0:	e76f      	b.n	80086b2 <_dtoa_r+0x7da>
 80087d2:	f04f 0800 	mov.w	r8, #0
 80087d6:	e7f6      	b.n	80087c6 <_dtoa_r+0x8ee>
 80087d8:	4698      	mov	r8, r3
 80087da:	e7f4      	b.n	80087c6 <_dtoa_r+0x8ee>
 80087dc:	f43f af7d 	beq.w	80086da <_dtoa_r+0x802>
 80087e0:	4618      	mov	r0, r3
 80087e2:	301c      	adds	r0, #28
 80087e4:	e772      	b.n	80086cc <_dtoa_r+0x7f4>
 80087e6:	9b03      	ldr	r3, [sp, #12]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	dc37      	bgt.n	800885c <_dtoa_r+0x984>
 80087ec:	9b06      	ldr	r3, [sp, #24]
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	dd34      	ble.n	800885c <_dtoa_r+0x984>
 80087f2:	9b03      	ldr	r3, [sp, #12]
 80087f4:	9302      	str	r3, [sp, #8]
 80087f6:	9b02      	ldr	r3, [sp, #8]
 80087f8:	b96b      	cbnz	r3, 8008816 <_dtoa_r+0x93e>
 80087fa:	4631      	mov	r1, r6
 80087fc:	2205      	movs	r2, #5
 80087fe:	4620      	mov	r0, r4
 8008800:	f000 fa54 	bl	8008cac <__multadd>
 8008804:	4601      	mov	r1, r0
 8008806:	4606      	mov	r6, r0
 8008808:	ee18 0a10 	vmov	r0, s16
 800880c:	f000 fc6e 	bl	80090ec <__mcmp>
 8008810:	2800      	cmp	r0, #0
 8008812:	f73f adbb 	bgt.w	800838c <_dtoa_r+0x4b4>
 8008816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008818:	9d01      	ldr	r5, [sp, #4]
 800881a:	43db      	mvns	r3, r3
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	f04f 0800 	mov.w	r8, #0
 8008822:	4631      	mov	r1, r6
 8008824:	4620      	mov	r0, r4
 8008826:	f000 fa1f 	bl	8008c68 <_Bfree>
 800882a:	2f00      	cmp	r7, #0
 800882c:	f43f aea4 	beq.w	8008578 <_dtoa_r+0x6a0>
 8008830:	f1b8 0f00 	cmp.w	r8, #0
 8008834:	d005      	beq.n	8008842 <_dtoa_r+0x96a>
 8008836:	45b8      	cmp	r8, r7
 8008838:	d003      	beq.n	8008842 <_dtoa_r+0x96a>
 800883a:	4641      	mov	r1, r8
 800883c:	4620      	mov	r0, r4
 800883e:	f000 fa13 	bl	8008c68 <_Bfree>
 8008842:	4639      	mov	r1, r7
 8008844:	4620      	mov	r0, r4
 8008846:	f000 fa0f 	bl	8008c68 <_Bfree>
 800884a:	e695      	b.n	8008578 <_dtoa_r+0x6a0>
 800884c:	2600      	movs	r6, #0
 800884e:	4637      	mov	r7, r6
 8008850:	e7e1      	b.n	8008816 <_dtoa_r+0x93e>
 8008852:	9700      	str	r7, [sp, #0]
 8008854:	4637      	mov	r7, r6
 8008856:	e599      	b.n	800838c <_dtoa_r+0x4b4>
 8008858:	40240000 	.word	0x40240000
 800885c:	9b08      	ldr	r3, [sp, #32]
 800885e:	2b00      	cmp	r3, #0
 8008860:	f000 80ca 	beq.w	80089f8 <_dtoa_r+0xb20>
 8008864:	9b03      	ldr	r3, [sp, #12]
 8008866:	9302      	str	r3, [sp, #8]
 8008868:	2d00      	cmp	r5, #0
 800886a:	dd05      	ble.n	8008878 <_dtoa_r+0x9a0>
 800886c:	4639      	mov	r1, r7
 800886e:	462a      	mov	r2, r5
 8008870:	4620      	mov	r0, r4
 8008872:	f000 fbcb 	bl	800900c <__lshift>
 8008876:	4607      	mov	r7, r0
 8008878:	f1b8 0f00 	cmp.w	r8, #0
 800887c:	d05b      	beq.n	8008936 <_dtoa_r+0xa5e>
 800887e:	6879      	ldr	r1, [r7, #4]
 8008880:	4620      	mov	r0, r4
 8008882:	f000 f9b1 	bl	8008be8 <_Balloc>
 8008886:	4605      	mov	r5, r0
 8008888:	b928      	cbnz	r0, 8008896 <_dtoa_r+0x9be>
 800888a:	4b87      	ldr	r3, [pc, #540]	; (8008aa8 <_dtoa_r+0xbd0>)
 800888c:	4602      	mov	r2, r0
 800888e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008892:	f7ff bb3b 	b.w	8007f0c <_dtoa_r+0x34>
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	3202      	adds	r2, #2
 800889a:	0092      	lsls	r2, r2, #2
 800889c:	f107 010c 	add.w	r1, r7, #12
 80088a0:	300c      	adds	r0, #12
 80088a2:	f7fe fb4b 	bl	8006f3c <memcpy>
 80088a6:	2201      	movs	r2, #1
 80088a8:	4629      	mov	r1, r5
 80088aa:	4620      	mov	r0, r4
 80088ac:	f000 fbae 	bl	800900c <__lshift>
 80088b0:	9b01      	ldr	r3, [sp, #4]
 80088b2:	f103 0901 	add.w	r9, r3, #1
 80088b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80088ba:	4413      	add	r3, r2
 80088bc:	9305      	str	r3, [sp, #20]
 80088be:	f00a 0301 	and.w	r3, sl, #1
 80088c2:	46b8      	mov	r8, r7
 80088c4:	9304      	str	r3, [sp, #16]
 80088c6:	4607      	mov	r7, r0
 80088c8:	4631      	mov	r1, r6
 80088ca:	ee18 0a10 	vmov	r0, s16
 80088ce:	f7ff fa77 	bl	8007dc0 <quorem>
 80088d2:	4641      	mov	r1, r8
 80088d4:	9002      	str	r0, [sp, #8]
 80088d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80088da:	ee18 0a10 	vmov	r0, s16
 80088de:	f000 fc05 	bl	80090ec <__mcmp>
 80088e2:	463a      	mov	r2, r7
 80088e4:	9003      	str	r0, [sp, #12]
 80088e6:	4631      	mov	r1, r6
 80088e8:	4620      	mov	r0, r4
 80088ea:	f000 fc1b 	bl	8009124 <__mdiff>
 80088ee:	68c2      	ldr	r2, [r0, #12]
 80088f0:	f109 3bff 	add.w	fp, r9, #4294967295
 80088f4:	4605      	mov	r5, r0
 80088f6:	bb02      	cbnz	r2, 800893a <_dtoa_r+0xa62>
 80088f8:	4601      	mov	r1, r0
 80088fa:	ee18 0a10 	vmov	r0, s16
 80088fe:	f000 fbf5 	bl	80090ec <__mcmp>
 8008902:	4602      	mov	r2, r0
 8008904:	4629      	mov	r1, r5
 8008906:	4620      	mov	r0, r4
 8008908:	9207      	str	r2, [sp, #28]
 800890a:	f000 f9ad 	bl	8008c68 <_Bfree>
 800890e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008912:	ea43 0102 	orr.w	r1, r3, r2
 8008916:	9b04      	ldr	r3, [sp, #16]
 8008918:	430b      	orrs	r3, r1
 800891a:	464d      	mov	r5, r9
 800891c:	d10f      	bne.n	800893e <_dtoa_r+0xa66>
 800891e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008922:	d02a      	beq.n	800897a <_dtoa_r+0xaa2>
 8008924:	9b03      	ldr	r3, [sp, #12]
 8008926:	2b00      	cmp	r3, #0
 8008928:	dd02      	ble.n	8008930 <_dtoa_r+0xa58>
 800892a:	9b02      	ldr	r3, [sp, #8]
 800892c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008930:	f88b a000 	strb.w	sl, [fp]
 8008934:	e775      	b.n	8008822 <_dtoa_r+0x94a>
 8008936:	4638      	mov	r0, r7
 8008938:	e7ba      	b.n	80088b0 <_dtoa_r+0x9d8>
 800893a:	2201      	movs	r2, #1
 800893c:	e7e2      	b.n	8008904 <_dtoa_r+0xa2c>
 800893e:	9b03      	ldr	r3, [sp, #12]
 8008940:	2b00      	cmp	r3, #0
 8008942:	db04      	blt.n	800894e <_dtoa_r+0xa76>
 8008944:	9906      	ldr	r1, [sp, #24]
 8008946:	430b      	orrs	r3, r1
 8008948:	9904      	ldr	r1, [sp, #16]
 800894a:	430b      	orrs	r3, r1
 800894c:	d122      	bne.n	8008994 <_dtoa_r+0xabc>
 800894e:	2a00      	cmp	r2, #0
 8008950:	ddee      	ble.n	8008930 <_dtoa_r+0xa58>
 8008952:	ee18 1a10 	vmov	r1, s16
 8008956:	2201      	movs	r2, #1
 8008958:	4620      	mov	r0, r4
 800895a:	f000 fb57 	bl	800900c <__lshift>
 800895e:	4631      	mov	r1, r6
 8008960:	ee08 0a10 	vmov	s16, r0
 8008964:	f000 fbc2 	bl	80090ec <__mcmp>
 8008968:	2800      	cmp	r0, #0
 800896a:	dc03      	bgt.n	8008974 <_dtoa_r+0xa9c>
 800896c:	d1e0      	bne.n	8008930 <_dtoa_r+0xa58>
 800896e:	f01a 0f01 	tst.w	sl, #1
 8008972:	d0dd      	beq.n	8008930 <_dtoa_r+0xa58>
 8008974:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008978:	d1d7      	bne.n	800892a <_dtoa_r+0xa52>
 800897a:	2339      	movs	r3, #57	; 0x39
 800897c:	f88b 3000 	strb.w	r3, [fp]
 8008980:	462b      	mov	r3, r5
 8008982:	461d      	mov	r5, r3
 8008984:	3b01      	subs	r3, #1
 8008986:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800898a:	2a39      	cmp	r2, #57	; 0x39
 800898c:	d071      	beq.n	8008a72 <_dtoa_r+0xb9a>
 800898e:	3201      	adds	r2, #1
 8008990:	701a      	strb	r2, [r3, #0]
 8008992:	e746      	b.n	8008822 <_dtoa_r+0x94a>
 8008994:	2a00      	cmp	r2, #0
 8008996:	dd07      	ble.n	80089a8 <_dtoa_r+0xad0>
 8008998:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800899c:	d0ed      	beq.n	800897a <_dtoa_r+0xaa2>
 800899e:	f10a 0301 	add.w	r3, sl, #1
 80089a2:	f88b 3000 	strb.w	r3, [fp]
 80089a6:	e73c      	b.n	8008822 <_dtoa_r+0x94a>
 80089a8:	9b05      	ldr	r3, [sp, #20]
 80089aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80089ae:	4599      	cmp	r9, r3
 80089b0:	d047      	beq.n	8008a42 <_dtoa_r+0xb6a>
 80089b2:	ee18 1a10 	vmov	r1, s16
 80089b6:	2300      	movs	r3, #0
 80089b8:	220a      	movs	r2, #10
 80089ba:	4620      	mov	r0, r4
 80089bc:	f000 f976 	bl	8008cac <__multadd>
 80089c0:	45b8      	cmp	r8, r7
 80089c2:	ee08 0a10 	vmov	s16, r0
 80089c6:	f04f 0300 	mov.w	r3, #0
 80089ca:	f04f 020a 	mov.w	r2, #10
 80089ce:	4641      	mov	r1, r8
 80089d0:	4620      	mov	r0, r4
 80089d2:	d106      	bne.n	80089e2 <_dtoa_r+0xb0a>
 80089d4:	f000 f96a 	bl	8008cac <__multadd>
 80089d8:	4680      	mov	r8, r0
 80089da:	4607      	mov	r7, r0
 80089dc:	f109 0901 	add.w	r9, r9, #1
 80089e0:	e772      	b.n	80088c8 <_dtoa_r+0x9f0>
 80089e2:	f000 f963 	bl	8008cac <__multadd>
 80089e6:	4639      	mov	r1, r7
 80089e8:	4680      	mov	r8, r0
 80089ea:	2300      	movs	r3, #0
 80089ec:	220a      	movs	r2, #10
 80089ee:	4620      	mov	r0, r4
 80089f0:	f000 f95c 	bl	8008cac <__multadd>
 80089f4:	4607      	mov	r7, r0
 80089f6:	e7f1      	b.n	80089dc <_dtoa_r+0xb04>
 80089f8:	9b03      	ldr	r3, [sp, #12]
 80089fa:	9302      	str	r3, [sp, #8]
 80089fc:	9d01      	ldr	r5, [sp, #4]
 80089fe:	ee18 0a10 	vmov	r0, s16
 8008a02:	4631      	mov	r1, r6
 8008a04:	f7ff f9dc 	bl	8007dc0 <quorem>
 8008a08:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008a0c:	9b01      	ldr	r3, [sp, #4]
 8008a0e:	f805 ab01 	strb.w	sl, [r5], #1
 8008a12:	1aea      	subs	r2, r5, r3
 8008a14:	9b02      	ldr	r3, [sp, #8]
 8008a16:	4293      	cmp	r3, r2
 8008a18:	dd09      	ble.n	8008a2e <_dtoa_r+0xb56>
 8008a1a:	ee18 1a10 	vmov	r1, s16
 8008a1e:	2300      	movs	r3, #0
 8008a20:	220a      	movs	r2, #10
 8008a22:	4620      	mov	r0, r4
 8008a24:	f000 f942 	bl	8008cac <__multadd>
 8008a28:	ee08 0a10 	vmov	s16, r0
 8008a2c:	e7e7      	b.n	80089fe <_dtoa_r+0xb26>
 8008a2e:	9b02      	ldr	r3, [sp, #8]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	bfc8      	it	gt
 8008a34:	461d      	movgt	r5, r3
 8008a36:	9b01      	ldr	r3, [sp, #4]
 8008a38:	bfd8      	it	le
 8008a3a:	2501      	movle	r5, #1
 8008a3c:	441d      	add	r5, r3
 8008a3e:	f04f 0800 	mov.w	r8, #0
 8008a42:	ee18 1a10 	vmov	r1, s16
 8008a46:	2201      	movs	r2, #1
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f000 fadf 	bl	800900c <__lshift>
 8008a4e:	4631      	mov	r1, r6
 8008a50:	ee08 0a10 	vmov	s16, r0
 8008a54:	f000 fb4a 	bl	80090ec <__mcmp>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	dc91      	bgt.n	8008980 <_dtoa_r+0xaa8>
 8008a5c:	d102      	bne.n	8008a64 <_dtoa_r+0xb8c>
 8008a5e:	f01a 0f01 	tst.w	sl, #1
 8008a62:	d18d      	bne.n	8008980 <_dtoa_r+0xaa8>
 8008a64:	462b      	mov	r3, r5
 8008a66:	461d      	mov	r5, r3
 8008a68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a6c:	2a30      	cmp	r2, #48	; 0x30
 8008a6e:	d0fa      	beq.n	8008a66 <_dtoa_r+0xb8e>
 8008a70:	e6d7      	b.n	8008822 <_dtoa_r+0x94a>
 8008a72:	9a01      	ldr	r2, [sp, #4]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d184      	bne.n	8008982 <_dtoa_r+0xaaa>
 8008a78:	9b00      	ldr	r3, [sp, #0]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	9300      	str	r3, [sp, #0]
 8008a7e:	2331      	movs	r3, #49	; 0x31
 8008a80:	7013      	strb	r3, [r2, #0]
 8008a82:	e6ce      	b.n	8008822 <_dtoa_r+0x94a>
 8008a84:	4b09      	ldr	r3, [pc, #36]	; (8008aac <_dtoa_r+0xbd4>)
 8008a86:	f7ff ba95 	b.w	8007fb4 <_dtoa_r+0xdc>
 8008a8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f47f aa6e 	bne.w	8007f6e <_dtoa_r+0x96>
 8008a92:	4b07      	ldr	r3, [pc, #28]	; (8008ab0 <_dtoa_r+0xbd8>)
 8008a94:	f7ff ba8e 	b.w	8007fb4 <_dtoa_r+0xdc>
 8008a98:	9b02      	ldr	r3, [sp, #8]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	dcae      	bgt.n	80089fc <_dtoa_r+0xb24>
 8008a9e:	9b06      	ldr	r3, [sp, #24]
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	f73f aea8 	bgt.w	80087f6 <_dtoa_r+0x91e>
 8008aa6:	e7a9      	b.n	80089fc <_dtoa_r+0xb24>
 8008aa8:	0800ccd3 	.word	0x0800ccd3
 8008aac:	0800cbf4 	.word	0x0800cbf4
 8008ab0:	0800cc54 	.word	0x0800cc54

08008ab4 <fiprintf>:
 8008ab4:	b40e      	push	{r1, r2, r3}
 8008ab6:	b503      	push	{r0, r1, lr}
 8008ab8:	4601      	mov	r1, r0
 8008aba:	ab03      	add	r3, sp, #12
 8008abc:	4805      	ldr	r0, [pc, #20]	; (8008ad4 <fiprintf+0x20>)
 8008abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ac2:	6800      	ldr	r0, [r0, #0]
 8008ac4:	9301      	str	r3, [sp, #4]
 8008ac6:	f000 fc53 	bl	8009370 <_vfiprintf_r>
 8008aca:	b002      	add	sp, #8
 8008acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ad0:	b003      	add	sp, #12
 8008ad2:	4770      	bx	lr
 8008ad4:	20000774 	.word	0x20000774

08008ad8 <_localeconv_r>:
 8008ad8:	4800      	ldr	r0, [pc, #0]	; (8008adc <_localeconv_r+0x4>)
 8008ada:	4770      	bx	lr
 8008adc:	200008c8 	.word	0x200008c8

08008ae0 <_lseek_r>:
 8008ae0:	b538      	push	{r3, r4, r5, lr}
 8008ae2:	4d07      	ldr	r5, [pc, #28]	; (8008b00 <_lseek_r+0x20>)
 8008ae4:	4604      	mov	r4, r0
 8008ae6:	4608      	mov	r0, r1
 8008ae8:	4611      	mov	r1, r2
 8008aea:	2200      	movs	r2, #0
 8008aec:	602a      	str	r2, [r5, #0]
 8008aee:	461a      	mov	r2, r3
 8008af0:	f000 ff6a 	bl	80099c8 <_lseek>
 8008af4:	1c43      	adds	r3, r0, #1
 8008af6:	d102      	bne.n	8008afe <_lseek_r+0x1e>
 8008af8:	682b      	ldr	r3, [r5, #0]
 8008afa:	b103      	cbz	r3, 8008afe <_lseek_r+0x1e>
 8008afc:	6023      	str	r3, [r4, #0]
 8008afe:	bd38      	pop	{r3, r4, r5, pc}
 8008b00:	20001344 	.word	0x20001344

08008b04 <__swhatbuf_r>:
 8008b04:	b570      	push	{r4, r5, r6, lr}
 8008b06:	460e      	mov	r6, r1
 8008b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b0c:	2900      	cmp	r1, #0
 8008b0e:	b096      	sub	sp, #88	; 0x58
 8008b10:	4614      	mov	r4, r2
 8008b12:	461d      	mov	r5, r3
 8008b14:	da08      	bge.n	8008b28 <__swhatbuf_r+0x24>
 8008b16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	602a      	str	r2, [r5, #0]
 8008b1e:	061a      	lsls	r2, r3, #24
 8008b20:	d410      	bmi.n	8008b44 <__swhatbuf_r+0x40>
 8008b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b26:	e00e      	b.n	8008b46 <__swhatbuf_r+0x42>
 8008b28:	466a      	mov	r2, sp
 8008b2a:	f000 fd6b 	bl	8009604 <_fstat_r>
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	dbf1      	blt.n	8008b16 <__swhatbuf_r+0x12>
 8008b32:	9a01      	ldr	r2, [sp, #4]
 8008b34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008b3c:	425a      	negs	r2, r3
 8008b3e:	415a      	adcs	r2, r3
 8008b40:	602a      	str	r2, [r5, #0]
 8008b42:	e7ee      	b.n	8008b22 <__swhatbuf_r+0x1e>
 8008b44:	2340      	movs	r3, #64	; 0x40
 8008b46:	2000      	movs	r0, #0
 8008b48:	6023      	str	r3, [r4, #0]
 8008b4a:	b016      	add	sp, #88	; 0x58
 8008b4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008b50 <__smakebuf_r>:
 8008b50:	898b      	ldrh	r3, [r1, #12]
 8008b52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b54:	079d      	lsls	r5, r3, #30
 8008b56:	4606      	mov	r6, r0
 8008b58:	460c      	mov	r4, r1
 8008b5a:	d507      	bpl.n	8008b6c <__smakebuf_r+0x1c>
 8008b5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b60:	6023      	str	r3, [r4, #0]
 8008b62:	6123      	str	r3, [r4, #16]
 8008b64:	2301      	movs	r3, #1
 8008b66:	6163      	str	r3, [r4, #20]
 8008b68:	b002      	add	sp, #8
 8008b6a:	bd70      	pop	{r4, r5, r6, pc}
 8008b6c:	ab01      	add	r3, sp, #4
 8008b6e:	466a      	mov	r2, sp
 8008b70:	f7ff ffc8 	bl	8008b04 <__swhatbuf_r>
 8008b74:	9900      	ldr	r1, [sp, #0]
 8008b76:	4605      	mov	r5, r0
 8008b78:	4630      	mov	r0, r6
 8008b7a:	f7fe fa61 	bl	8007040 <_malloc_r>
 8008b7e:	b948      	cbnz	r0, 8008b94 <__smakebuf_r+0x44>
 8008b80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b84:	059a      	lsls	r2, r3, #22
 8008b86:	d4ef      	bmi.n	8008b68 <__smakebuf_r+0x18>
 8008b88:	f023 0303 	bic.w	r3, r3, #3
 8008b8c:	f043 0302 	orr.w	r3, r3, #2
 8008b90:	81a3      	strh	r3, [r4, #12]
 8008b92:	e7e3      	b.n	8008b5c <__smakebuf_r+0xc>
 8008b94:	4b0d      	ldr	r3, [pc, #52]	; (8008bcc <__smakebuf_r+0x7c>)
 8008b96:	62b3      	str	r3, [r6, #40]	; 0x28
 8008b98:	89a3      	ldrh	r3, [r4, #12]
 8008b9a:	6020      	str	r0, [r4, #0]
 8008b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ba0:	81a3      	strh	r3, [r4, #12]
 8008ba2:	9b00      	ldr	r3, [sp, #0]
 8008ba4:	6163      	str	r3, [r4, #20]
 8008ba6:	9b01      	ldr	r3, [sp, #4]
 8008ba8:	6120      	str	r0, [r4, #16]
 8008baa:	b15b      	cbz	r3, 8008bc4 <__smakebuf_r+0x74>
 8008bac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bb0:	4630      	mov	r0, r6
 8008bb2:	f000 fd39 	bl	8009628 <_isatty_r>
 8008bb6:	b128      	cbz	r0, 8008bc4 <__smakebuf_r+0x74>
 8008bb8:	89a3      	ldrh	r3, [r4, #12]
 8008bba:	f023 0303 	bic.w	r3, r3, #3
 8008bbe:	f043 0301 	orr.w	r3, r3, #1
 8008bc2:	81a3      	strh	r3, [r4, #12]
 8008bc4:	89a0      	ldrh	r0, [r4, #12]
 8008bc6:	4305      	orrs	r5, r0
 8008bc8:	81a5      	strh	r5, [r4, #12]
 8008bca:	e7cd      	b.n	8008b68 <__smakebuf_r+0x18>
 8008bcc:	08006d39 	.word	0x08006d39

08008bd0 <__malloc_lock>:
 8008bd0:	4801      	ldr	r0, [pc, #4]	; (8008bd8 <__malloc_lock+0x8>)
 8008bd2:	f7fe b9a8 	b.w	8006f26 <__retarget_lock_acquire_recursive>
 8008bd6:	bf00      	nop
 8008bd8:	20001338 	.word	0x20001338

08008bdc <__malloc_unlock>:
 8008bdc:	4801      	ldr	r0, [pc, #4]	; (8008be4 <__malloc_unlock+0x8>)
 8008bde:	f7fe b9a3 	b.w	8006f28 <__retarget_lock_release_recursive>
 8008be2:	bf00      	nop
 8008be4:	20001338 	.word	0x20001338

08008be8 <_Balloc>:
 8008be8:	b570      	push	{r4, r5, r6, lr}
 8008bea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008bec:	4604      	mov	r4, r0
 8008bee:	460d      	mov	r5, r1
 8008bf0:	b976      	cbnz	r6, 8008c10 <_Balloc+0x28>
 8008bf2:	2010      	movs	r0, #16
 8008bf4:	f7fa fc02 	bl	80033fc <__wrap_malloc>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	6260      	str	r0, [r4, #36]	; 0x24
 8008bfc:	b920      	cbnz	r0, 8008c08 <_Balloc+0x20>
 8008bfe:	4b18      	ldr	r3, [pc, #96]	; (8008c60 <_Balloc+0x78>)
 8008c00:	4818      	ldr	r0, [pc, #96]	; (8008c64 <_Balloc+0x7c>)
 8008c02:	2166      	movs	r1, #102	; 0x66
 8008c04:	f7ff f8ae 	bl	8007d64 <__assert_func>
 8008c08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c0c:	6006      	str	r6, [r0, #0]
 8008c0e:	60c6      	str	r6, [r0, #12]
 8008c10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008c12:	68f3      	ldr	r3, [r6, #12]
 8008c14:	b183      	cbz	r3, 8008c38 <_Balloc+0x50>
 8008c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c1e:	b9b8      	cbnz	r0, 8008c50 <_Balloc+0x68>
 8008c20:	2101      	movs	r1, #1
 8008c22:	fa01 f605 	lsl.w	r6, r1, r5
 8008c26:	1d72      	adds	r2, r6, #5
 8008c28:	0092      	lsls	r2, r2, #2
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f000 fb60 	bl	80092f0 <_calloc_r>
 8008c30:	b160      	cbz	r0, 8008c4c <_Balloc+0x64>
 8008c32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c36:	e00e      	b.n	8008c56 <_Balloc+0x6e>
 8008c38:	2221      	movs	r2, #33	; 0x21
 8008c3a:	2104      	movs	r1, #4
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f000 fb57 	bl	80092f0 <_calloc_r>
 8008c42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c44:	60f0      	str	r0, [r6, #12]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d1e4      	bne.n	8008c16 <_Balloc+0x2e>
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	bd70      	pop	{r4, r5, r6, pc}
 8008c50:	6802      	ldr	r2, [r0, #0]
 8008c52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c56:	2300      	movs	r3, #0
 8008c58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c5c:	e7f7      	b.n	8008c4e <_Balloc+0x66>
 8008c5e:	bf00      	nop
 8008c60:	0800cc61 	.word	0x0800cc61
 8008c64:	0800cce4 	.word	0x0800cce4

08008c68 <_Bfree>:
 8008c68:	b570      	push	{r4, r5, r6, lr}
 8008c6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c6c:	4605      	mov	r5, r0
 8008c6e:	460c      	mov	r4, r1
 8008c70:	b976      	cbnz	r6, 8008c90 <_Bfree+0x28>
 8008c72:	2010      	movs	r0, #16
 8008c74:	f7fa fbc2 	bl	80033fc <__wrap_malloc>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	6268      	str	r0, [r5, #36]	; 0x24
 8008c7c:	b920      	cbnz	r0, 8008c88 <_Bfree+0x20>
 8008c7e:	4b09      	ldr	r3, [pc, #36]	; (8008ca4 <_Bfree+0x3c>)
 8008c80:	4809      	ldr	r0, [pc, #36]	; (8008ca8 <_Bfree+0x40>)
 8008c82:	218a      	movs	r1, #138	; 0x8a
 8008c84:	f7ff f86e 	bl	8007d64 <__assert_func>
 8008c88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c8c:	6006      	str	r6, [r0, #0]
 8008c8e:	60c6      	str	r6, [r0, #12]
 8008c90:	b13c      	cbz	r4, 8008ca2 <_Bfree+0x3a>
 8008c92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c94:	6862      	ldr	r2, [r4, #4]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c9c:	6021      	str	r1, [r4, #0]
 8008c9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ca2:	bd70      	pop	{r4, r5, r6, pc}
 8008ca4:	0800cc61 	.word	0x0800cc61
 8008ca8:	0800cce4 	.word	0x0800cce4

08008cac <__multadd>:
 8008cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb0:	690d      	ldr	r5, [r1, #16]
 8008cb2:	4607      	mov	r7, r0
 8008cb4:	460c      	mov	r4, r1
 8008cb6:	461e      	mov	r6, r3
 8008cb8:	f101 0c14 	add.w	ip, r1, #20
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	f8dc 3000 	ldr.w	r3, [ip]
 8008cc2:	b299      	uxth	r1, r3
 8008cc4:	fb02 6101 	mla	r1, r2, r1, r6
 8008cc8:	0c1e      	lsrs	r6, r3, #16
 8008cca:	0c0b      	lsrs	r3, r1, #16
 8008ccc:	fb02 3306 	mla	r3, r2, r6, r3
 8008cd0:	b289      	uxth	r1, r1
 8008cd2:	3001      	adds	r0, #1
 8008cd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008cd8:	4285      	cmp	r5, r0
 8008cda:	f84c 1b04 	str.w	r1, [ip], #4
 8008cde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ce2:	dcec      	bgt.n	8008cbe <__multadd+0x12>
 8008ce4:	b30e      	cbz	r6, 8008d2a <__multadd+0x7e>
 8008ce6:	68a3      	ldr	r3, [r4, #8]
 8008ce8:	42ab      	cmp	r3, r5
 8008cea:	dc19      	bgt.n	8008d20 <__multadd+0x74>
 8008cec:	6861      	ldr	r1, [r4, #4]
 8008cee:	4638      	mov	r0, r7
 8008cf0:	3101      	adds	r1, #1
 8008cf2:	f7ff ff79 	bl	8008be8 <_Balloc>
 8008cf6:	4680      	mov	r8, r0
 8008cf8:	b928      	cbnz	r0, 8008d06 <__multadd+0x5a>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	4b0c      	ldr	r3, [pc, #48]	; (8008d30 <__multadd+0x84>)
 8008cfe:	480d      	ldr	r0, [pc, #52]	; (8008d34 <__multadd+0x88>)
 8008d00:	21b5      	movs	r1, #181	; 0xb5
 8008d02:	f7ff f82f 	bl	8007d64 <__assert_func>
 8008d06:	6922      	ldr	r2, [r4, #16]
 8008d08:	3202      	adds	r2, #2
 8008d0a:	f104 010c 	add.w	r1, r4, #12
 8008d0e:	0092      	lsls	r2, r2, #2
 8008d10:	300c      	adds	r0, #12
 8008d12:	f7fe f913 	bl	8006f3c <memcpy>
 8008d16:	4621      	mov	r1, r4
 8008d18:	4638      	mov	r0, r7
 8008d1a:	f7ff ffa5 	bl	8008c68 <_Bfree>
 8008d1e:	4644      	mov	r4, r8
 8008d20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d24:	3501      	adds	r5, #1
 8008d26:	615e      	str	r6, [r3, #20]
 8008d28:	6125      	str	r5, [r4, #16]
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d30:	0800ccd3 	.word	0x0800ccd3
 8008d34:	0800cce4 	.word	0x0800cce4

08008d38 <__hi0bits>:
 8008d38:	0c03      	lsrs	r3, r0, #16
 8008d3a:	041b      	lsls	r3, r3, #16
 8008d3c:	b9d3      	cbnz	r3, 8008d74 <__hi0bits+0x3c>
 8008d3e:	0400      	lsls	r0, r0, #16
 8008d40:	2310      	movs	r3, #16
 8008d42:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008d46:	bf04      	itt	eq
 8008d48:	0200      	lsleq	r0, r0, #8
 8008d4a:	3308      	addeq	r3, #8
 8008d4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008d50:	bf04      	itt	eq
 8008d52:	0100      	lsleq	r0, r0, #4
 8008d54:	3304      	addeq	r3, #4
 8008d56:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008d5a:	bf04      	itt	eq
 8008d5c:	0080      	lsleq	r0, r0, #2
 8008d5e:	3302      	addeq	r3, #2
 8008d60:	2800      	cmp	r0, #0
 8008d62:	db05      	blt.n	8008d70 <__hi0bits+0x38>
 8008d64:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008d68:	f103 0301 	add.w	r3, r3, #1
 8008d6c:	bf08      	it	eq
 8008d6e:	2320      	moveq	r3, #32
 8008d70:	4618      	mov	r0, r3
 8008d72:	4770      	bx	lr
 8008d74:	2300      	movs	r3, #0
 8008d76:	e7e4      	b.n	8008d42 <__hi0bits+0xa>

08008d78 <__lo0bits>:
 8008d78:	6803      	ldr	r3, [r0, #0]
 8008d7a:	f013 0207 	ands.w	r2, r3, #7
 8008d7e:	4601      	mov	r1, r0
 8008d80:	d00b      	beq.n	8008d9a <__lo0bits+0x22>
 8008d82:	07da      	lsls	r2, r3, #31
 8008d84:	d423      	bmi.n	8008dce <__lo0bits+0x56>
 8008d86:	0798      	lsls	r0, r3, #30
 8008d88:	bf49      	itett	mi
 8008d8a:	085b      	lsrmi	r3, r3, #1
 8008d8c:	089b      	lsrpl	r3, r3, #2
 8008d8e:	2001      	movmi	r0, #1
 8008d90:	600b      	strmi	r3, [r1, #0]
 8008d92:	bf5c      	itt	pl
 8008d94:	600b      	strpl	r3, [r1, #0]
 8008d96:	2002      	movpl	r0, #2
 8008d98:	4770      	bx	lr
 8008d9a:	b298      	uxth	r0, r3
 8008d9c:	b9a8      	cbnz	r0, 8008dca <__lo0bits+0x52>
 8008d9e:	0c1b      	lsrs	r3, r3, #16
 8008da0:	2010      	movs	r0, #16
 8008da2:	b2da      	uxtb	r2, r3
 8008da4:	b90a      	cbnz	r2, 8008daa <__lo0bits+0x32>
 8008da6:	3008      	adds	r0, #8
 8008da8:	0a1b      	lsrs	r3, r3, #8
 8008daa:	071a      	lsls	r2, r3, #28
 8008dac:	bf04      	itt	eq
 8008dae:	091b      	lsreq	r3, r3, #4
 8008db0:	3004      	addeq	r0, #4
 8008db2:	079a      	lsls	r2, r3, #30
 8008db4:	bf04      	itt	eq
 8008db6:	089b      	lsreq	r3, r3, #2
 8008db8:	3002      	addeq	r0, #2
 8008dba:	07da      	lsls	r2, r3, #31
 8008dbc:	d403      	bmi.n	8008dc6 <__lo0bits+0x4e>
 8008dbe:	085b      	lsrs	r3, r3, #1
 8008dc0:	f100 0001 	add.w	r0, r0, #1
 8008dc4:	d005      	beq.n	8008dd2 <__lo0bits+0x5a>
 8008dc6:	600b      	str	r3, [r1, #0]
 8008dc8:	4770      	bx	lr
 8008dca:	4610      	mov	r0, r2
 8008dcc:	e7e9      	b.n	8008da2 <__lo0bits+0x2a>
 8008dce:	2000      	movs	r0, #0
 8008dd0:	4770      	bx	lr
 8008dd2:	2020      	movs	r0, #32
 8008dd4:	4770      	bx	lr
	...

08008dd8 <__i2b>:
 8008dd8:	b510      	push	{r4, lr}
 8008dda:	460c      	mov	r4, r1
 8008ddc:	2101      	movs	r1, #1
 8008dde:	f7ff ff03 	bl	8008be8 <_Balloc>
 8008de2:	4602      	mov	r2, r0
 8008de4:	b928      	cbnz	r0, 8008df2 <__i2b+0x1a>
 8008de6:	4b05      	ldr	r3, [pc, #20]	; (8008dfc <__i2b+0x24>)
 8008de8:	4805      	ldr	r0, [pc, #20]	; (8008e00 <__i2b+0x28>)
 8008dea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008dee:	f7fe ffb9 	bl	8007d64 <__assert_func>
 8008df2:	2301      	movs	r3, #1
 8008df4:	6144      	str	r4, [r0, #20]
 8008df6:	6103      	str	r3, [r0, #16]
 8008df8:	bd10      	pop	{r4, pc}
 8008dfa:	bf00      	nop
 8008dfc:	0800ccd3 	.word	0x0800ccd3
 8008e00:	0800cce4 	.word	0x0800cce4

08008e04 <__multiply>:
 8008e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e08:	4691      	mov	r9, r2
 8008e0a:	690a      	ldr	r2, [r1, #16]
 8008e0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	bfb8      	it	lt
 8008e14:	460b      	movlt	r3, r1
 8008e16:	460c      	mov	r4, r1
 8008e18:	bfbc      	itt	lt
 8008e1a:	464c      	movlt	r4, r9
 8008e1c:	4699      	movlt	r9, r3
 8008e1e:	6927      	ldr	r7, [r4, #16]
 8008e20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008e24:	68a3      	ldr	r3, [r4, #8]
 8008e26:	6861      	ldr	r1, [r4, #4]
 8008e28:	eb07 060a 	add.w	r6, r7, sl
 8008e2c:	42b3      	cmp	r3, r6
 8008e2e:	b085      	sub	sp, #20
 8008e30:	bfb8      	it	lt
 8008e32:	3101      	addlt	r1, #1
 8008e34:	f7ff fed8 	bl	8008be8 <_Balloc>
 8008e38:	b930      	cbnz	r0, 8008e48 <__multiply+0x44>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	4b44      	ldr	r3, [pc, #272]	; (8008f50 <__multiply+0x14c>)
 8008e3e:	4845      	ldr	r0, [pc, #276]	; (8008f54 <__multiply+0x150>)
 8008e40:	f240 115d 	movw	r1, #349	; 0x15d
 8008e44:	f7fe ff8e 	bl	8007d64 <__assert_func>
 8008e48:	f100 0514 	add.w	r5, r0, #20
 8008e4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008e50:	462b      	mov	r3, r5
 8008e52:	2200      	movs	r2, #0
 8008e54:	4543      	cmp	r3, r8
 8008e56:	d321      	bcc.n	8008e9c <__multiply+0x98>
 8008e58:	f104 0314 	add.w	r3, r4, #20
 8008e5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008e60:	f109 0314 	add.w	r3, r9, #20
 8008e64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008e68:	9202      	str	r2, [sp, #8]
 8008e6a:	1b3a      	subs	r2, r7, r4
 8008e6c:	3a15      	subs	r2, #21
 8008e6e:	f022 0203 	bic.w	r2, r2, #3
 8008e72:	3204      	adds	r2, #4
 8008e74:	f104 0115 	add.w	r1, r4, #21
 8008e78:	428f      	cmp	r7, r1
 8008e7a:	bf38      	it	cc
 8008e7c:	2204      	movcc	r2, #4
 8008e7e:	9201      	str	r2, [sp, #4]
 8008e80:	9a02      	ldr	r2, [sp, #8]
 8008e82:	9303      	str	r3, [sp, #12]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d80c      	bhi.n	8008ea2 <__multiply+0x9e>
 8008e88:	2e00      	cmp	r6, #0
 8008e8a:	dd03      	ble.n	8008e94 <__multiply+0x90>
 8008e8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d05a      	beq.n	8008f4a <__multiply+0x146>
 8008e94:	6106      	str	r6, [r0, #16]
 8008e96:	b005      	add	sp, #20
 8008e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e9c:	f843 2b04 	str.w	r2, [r3], #4
 8008ea0:	e7d8      	b.n	8008e54 <__multiply+0x50>
 8008ea2:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ea6:	f1ba 0f00 	cmp.w	sl, #0
 8008eaa:	d024      	beq.n	8008ef6 <__multiply+0xf2>
 8008eac:	f104 0e14 	add.w	lr, r4, #20
 8008eb0:	46a9      	mov	r9, r5
 8008eb2:	f04f 0c00 	mov.w	ip, #0
 8008eb6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008eba:	f8d9 1000 	ldr.w	r1, [r9]
 8008ebe:	fa1f fb82 	uxth.w	fp, r2
 8008ec2:	b289      	uxth	r1, r1
 8008ec4:	fb0a 110b 	mla	r1, sl, fp, r1
 8008ec8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008ecc:	f8d9 2000 	ldr.w	r2, [r9]
 8008ed0:	4461      	add	r1, ip
 8008ed2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008ed6:	fb0a c20b 	mla	r2, sl, fp, ip
 8008eda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008ede:	b289      	uxth	r1, r1
 8008ee0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ee4:	4577      	cmp	r7, lr
 8008ee6:	f849 1b04 	str.w	r1, [r9], #4
 8008eea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008eee:	d8e2      	bhi.n	8008eb6 <__multiply+0xb2>
 8008ef0:	9a01      	ldr	r2, [sp, #4]
 8008ef2:	f845 c002 	str.w	ip, [r5, r2]
 8008ef6:	9a03      	ldr	r2, [sp, #12]
 8008ef8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008efc:	3304      	adds	r3, #4
 8008efe:	f1b9 0f00 	cmp.w	r9, #0
 8008f02:	d020      	beq.n	8008f46 <__multiply+0x142>
 8008f04:	6829      	ldr	r1, [r5, #0]
 8008f06:	f104 0c14 	add.w	ip, r4, #20
 8008f0a:	46ae      	mov	lr, r5
 8008f0c:	f04f 0a00 	mov.w	sl, #0
 8008f10:	f8bc b000 	ldrh.w	fp, [ip]
 8008f14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008f18:	fb09 220b 	mla	r2, r9, fp, r2
 8008f1c:	4492      	add	sl, r2
 8008f1e:	b289      	uxth	r1, r1
 8008f20:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008f24:	f84e 1b04 	str.w	r1, [lr], #4
 8008f28:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008f2c:	f8be 1000 	ldrh.w	r1, [lr]
 8008f30:	0c12      	lsrs	r2, r2, #16
 8008f32:	fb09 1102 	mla	r1, r9, r2, r1
 8008f36:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008f3a:	4567      	cmp	r7, ip
 8008f3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008f40:	d8e6      	bhi.n	8008f10 <__multiply+0x10c>
 8008f42:	9a01      	ldr	r2, [sp, #4]
 8008f44:	50a9      	str	r1, [r5, r2]
 8008f46:	3504      	adds	r5, #4
 8008f48:	e79a      	b.n	8008e80 <__multiply+0x7c>
 8008f4a:	3e01      	subs	r6, #1
 8008f4c:	e79c      	b.n	8008e88 <__multiply+0x84>
 8008f4e:	bf00      	nop
 8008f50:	0800ccd3 	.word	0x0800ccd3
 8008f54:	0800cce4 	.word	0x0800cce4

08008f58 <__pow5mult>:
 8008f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f5c:	4615      	mov	r5, r2
 8008f5e:	f012 0203 	ands.w	r2, r2, #3
 8008f62:	4606      	mov	r6, r0
 8008f64:	460f      	mov	r7, r1
 8008f66:	d007      	beq.n	8008f78 <__pow5mult+0x20>
 8008f68:	4c25      	ldr	r4, [pc, #148]	; (8009000 <__pow5mult+0xa8>)
 8008f6a:	3a01      	subs	r2, #1
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f72:	f7ff fe9b 	bl	8008cac <__multadd>
 8008f76:	4607      	mov	r7, r0
 8008f78:	10ad      	asrs	r5, r5, #2
 8008f7a:	d03d      	beq.n	8008ff8 <__pow5mult+0xa0>
 8008f7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008f7e:	b97c      	cbnz	r4, 8008fa0 <__pow5mult+0x48>
 8008f80:	2010      	movs	r0, #16
 8008f82:	f7fa fa3b 	bl	80033fc <__wrap_malloc>
 8008f86:	4602      	mov	r2, r0
 8008f88:	6270      	str	r0, [r6, #36]	; 0x24
 8008f8a:	b928      	cbnz	r0, 8008f98 <__pow5mult+0x40>
 8008f8c:	4b1d      	ldr	r3, [pc, #116]	; (8009004 <__pow5mult+0xac>)
 8008f8e:	481e      	ldr	r0, [pc, #120]	; (8009008 <__pow5mult+0xb0>)
 8008f90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008f94:	f7fe fee6 	bl	8007d64 <__assert_func>
 8008f98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f9c:	6004      	str	r4, [r0, #0]
 8008f9e:	60c4      	str	r4, [r0, #12]
 8008fa0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008fa4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fa8:	b94c      	cbnz	r4, 8008fbe <__pow5mult+0x66>
 8008faa:	f240 2171 	movw	r1, #625	; 0x271
 8008fae:	4630      	mov	r0, r6
 8008fb0:	f7ff ff12 	bl	8008dd8 <__i2b>
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fba:	4604      	mov	r4, r0
 8008fbc:	6003      	str	r3, [r0, #0]
 8008fbe:	f04f 0900 	mov.w	r9, #0
 8008fc2:	07eb      	lsls	r3, r5, #31
 8008fc4:	d50a      	bpl.n	8008fdc <__pow5mult+0x84>
 8008fc6:	4639      	mov	r1, r7
 8008fc8:	4622      	mov	r2, r4
 8008fca:	4630      	mov	r0, r6
 8008fcc:	f7ff ff1a 	bl	8008e04 <__multiply>
 8008fd0:	4639      	mov	r1, r7
 8008fd2:	4680      	mov	r8, r0
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	f7ff fe47 	bl	8008c68 <_Bfree>
 8008fda:	4647      	mov	r7, r8
 8008fdc:	106d      	asrs	r5, r5, #1
 8008fde:	d00b      	beq.n	8008ff8 <__pow5mult+0xa0>
 8008fe0:	6820      	ldr	r0, [r4, #0]
 8008fe2:	b938      	cbnz	r0, 8008ff4 <__pow5mult+0x9c>
 8008fe4:	4622      	mov	r2, r4
 8008fe6:	4621      	mov	r1, r4
 8008fe8:	4630      	mov	r0, r6
 8008fea:	f7ff ff0b 	bl	8008e04 <__multiply>
 8008fee:	6020      	str	r0, [r4, #0]
 8008ff0:	f8c0 9000 	str.w	r9, [r0]
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	e7e4      	b.n	8008fc2 <__pow5mult+0x6a>
 8008ff8:	4638      	mov	r0, r7
 8008ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ffe:	bf00      	nop
 8009000:	0800ce30 	.word	0x0800ce30
 8009004:	0800cc61 	.word	0x0800cc61
 8009008:	0800cce4 	.word	0x0800cce4

0800900c <__lshift>:
 800900c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009010:	460c      	mov	r4, r1
 8009012:	6849      	ldr	r1, [r1, #4]
 8009014:	6923      	ldr	r3, [r4, #16]
 8009016:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800901a:	68a3      	ldr	r3, [r4, #8]
 800901c:	4607      	mov	r7, r0
 800901e:	4691      	mov	r9, r2
 8009020:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009024:	f108 0601 	add.w	r6, r8, #1
 8009028:	42b3      	cmp	r3, r6
 800902a:	db0b      	blt.n	8009044 <__lshift+0x38>
 800902c:	4638      	mov	r0, r7
 800902e:	f7ff fddb 	bl	8008be8 <_Balloc>
 8009032:	4605      	mov	r5, r0
 8009034:	b948      	cbnz	r0, 800904a <__lshift+0x3e>
 8009036:	4602      	mov	r2, r0
 8009038:	4b2a      	ldr	r3, [pc, #168]	; (80090e4 <__lshift+0xd8>)
 800903a:	482b      	ldr	r0, [pc, #172]	; (80090e8 <__lshift+0xdc>)
 800903c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009040:	f7fe fe90 	bl	8007d64 <__assert_func>
 8009044:	3101      	adds	r1, #1
 8009046:	005b      	lsls	r3, r3, #1
 8009048:	e7ee      	b.n	8009028 <__lshift+0x1c>
 800904a:	2300      	movs	r3, #0
 800904c:	f100 0114 	add.w	r1, r0, #20
 8009050:	f100 0210 	add.w	r2, r0, #16
 8009054:	4618      	mov	r0, r3
 8009056:	4553      	cmp	r3, sl
 8009058:	db37      	blt.n	80090ca <__lshift+0xbe>
 800905a:	6920      	ldr	r0, [r4, #16]
 800905c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009060:	f104 0314 	add.w	r3, r4, #20
 8009064:	f019 091f 	ands.w	r9, r9, #31
 8009068:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800906c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009070:	d02f      	beq.n	80090d2 <__lshift+0xc6>
 8009072:	f1c9 0e20 	rsb	lr, r9, #32
 8009076:	468a      	mov	sl, r1
 8009078:	f04f 0c00 	mov.w	ip, #0
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	fa02 f209 	lsl.w	r2, r2, r9
 8009082:	ea42 020c 	orr.w	r2, r2, ip
 8009086:	f84a 2b04 	str.w	r2, [sl], #4
 800908a:	f853 2b04 	ldr.w	r2, [r3], #4
 800908e:	4298      	cmp	r0, r3
 8009090:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009094:	d8f2      	bhi.n	800907c <__lshift+0x70>
 8009096:	1b03      	subs	r3, r0, r4
 8009098:	3b15      	subs	r3, #21
 800909a:	f023 0303 	bic.w	r3, r3, #3
 800909e:	3304      	adds	r3, #4
 80090a0:	f104 0215 	add.w	r2, r4, #21
 80090a4:	4290      	cmp	r0, r2
 80090a6:	bf38      	it	cc
 80090a8:	2304      	movcc	r3, #4
 80090aa:	f841 c003 	str.w	ip, [r1, r3]
 80090ae:	f1bc 0f00 	cmp.w	ip, #0
 80090b2:	d001      	beq.n	80090b8 <__lshift+0xac>
 80090b4:	f108 0602 	add.w	r6, r8, #2
 80090b8:	3e01      	subs	r6, #1
 80090ba:	4638      	mov	r0, r7
 80090bc:	612e      	str	r6, [r5, #16]
 80090be:	4621      	mov	r1, r4
 80090c0:	f7ff fdd2 	bl	8008c68 <_Bfree>
 80090c4:	4628      	mov	r0, r5
 80090c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80090ce:	3301      	adds	r3, #1
 80090d0:	e7c1      	b.n	8009056 <__lshift+0x4a>
 80090d2:	3904      	subs	r1, #4
 80090d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80090d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80090dc:	4298      	cmp	r0, r3
 80090de:	d8f9      	bhi.n	80090d4 <__lshift+0xc8>
 80090e0:	e7ea      	b.n	80090b8 <__lshift+0xac>
 80090e2:	bf00      	nop
 80090e4:	0800ccd3 	.word	0x0800ccd3
 80090e8:	0800cce4 	.word	0x0800cce4

080090ec <__mcmp>:
 80090ec:	b530      	push	{r4, r5, lr}
 80090ee:	6902      	ldr	r2, [r0, #16]
 80090f0:	690c      	ldr	r4, [r1, #16]
 80090f2:	1b12      	subs	r2, r2, r4
 80090f4:	d10e      	bne.n	8009114 <__mcmp+0x28>
 80090f6:	f100 0314 	add.w	r3, r0, #20
 80090fa:	3114      	adds	r1, #20
 80090fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009100:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009104:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009108:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800910c:	42a5      	cmp	r5, r4
 800910e:	d003      	beq.n	8009118 <__mcmp+0x2c>
 8009110:	d305      	bcc.n	800911e <__mcmp+0x32>
 8009112:	2201      	movs	r2, #1
 8009114:	4610      	mov	r0, r2
 8009116:	bd30      	pop	{r4, r5, pc}
 8009118:	4283      	cmp	r3, r0
 800911a:	d3f3      	bcc.n	8009104 <__mcmp+0x18>
 800911c:	e7fa      	b.n	8009114 <__mcmp+0x28>
 800911e:	f04f 32ff 	mov.w	r2, #4294967295
 8009122:	e7f7      	b.n	8009114 <__mcmp+0x28>

08009124 <__mdiff>:
 8009124:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009128:	460c      	mov	r4, r1
 800912a:	4606      	mov	r6, r0
 800912c:	4611      	mov	r1, r2
 800912e:	4620      	mov	r0, r4
 8009130:	4690      	mov	r8, r2
 8009132:	f7ff ffdb 	bl	80090ec <__mcmp>
 8009136:	1e05      	subs	r5, r0, #0
 8009138:	d110      	bne.n	800915c <__mdiff+0x38>
 800913a:	4629      	mov	r1, r5
 800913c:	4630      	mov	r0, r6
 800913e:	f7ff fd53 	bl	8008be8 <_Balloc>
 8009142:	b930      	cbnz	r0, 8009152 <__mdiff+0x2e>
 8009144:	4b3a      	ldr	r3, [pc, #232]	; (8009230 <__mdiff+0x10c>)
 8009146:	4602      	mov	r2, r0
 8009148:	f240 2132 	movw	r1, #562	; 0x232
 800914c:	4839      	ldr	r0, [pc, #228]	; (8009234 <__mdiff+0x110>)
 800914e:	f7fe fe09 	bl	8007d64 <__assert_func>
 8009152:	2301      	movs	r3, #1
 8009154:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009158:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800915c:	bfa4      	itt	ge
 800915e:	4643      	movge	r3, r8
 8009160:	46a0      	movge	r8, r4
 8009162:	4630      	mov	r0, r6
 8009164:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009168:	bfa6      	itte	ge
 800916a:	461c      	movge	r4, r3
 800916c:	2500      	movge	r5, #0
 800916e:	2501      	movlt	r5, #1
 8009170:	f7ff fd3a 	bl	8008be8 <_Balloc>
 8009174:	b920      	cbnz	r0, 8009180 <__mdiff+0x5c>
 8009176:	4b2e      	ldr	r3, [pc, #184]	; (8009230 <__mdiff+0x10c>)
 8009178:	4602      	mov	r2, r0
 800917a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800917e:	e7e5      	b.n	800914c <__mdiff+0x28>
 8009180:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009184:	6926      	ldr	r6, [r4, #16]
 8009186:	60c5      	str	r5, [r0, #12]
 8009188:	f104 0914 	add.w	r9, r4, #20
 800918c:	f108 0514 	add.w	r5, r8, #20
 8009190:	f100 0e14 	add.w	lr, r0, #20
 8009194:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009198:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800919c:	f108 0210 	add.w	r2, r8, #16
 80091a0:	46f2      	mov	sl, lr
 80091a2:	2100      	movs	r1, #0
 80091a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80091a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80091ac:	fa1f f883 	uxth.w	r8, r3
 80091b0:	fa11 f18b 	uxtah	r1, r1, fp
 80091b4:	0c1b      	lsrs	r3, r3, #16
 80091b6:	eba1 0808 	sub.w	r8, r1, r8
 80091ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80091be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80091c2:	fa1f f888 	uxth.w	r8, r8
 80091c6:	1419      	asrs	r1, r3, #16
 80091c8:	454e      	cmp	r6, r9
 80091ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80091ce:	f84a 3b04 	str.w	r3, [sl], #4
 80091d2:	d8e7      	bhi.n	80091a4 <__mdiff+0x80>
 80091d4:	1b33      	subs	r3, r6, r4
 80091d6:	3b15      	subs	r3, #21
 80091d8:	f023 0303 	bic.w	r3, r3, #3
 80091dc:	3304      	adds	r3, #4
 80091de:	3415      	adds	r4, #21
 80091e0:	42a6      	cmp	r6, r4
 80091e2:	bf38      	it	cc
 80091e4:	2304      	movcc	r3, #4
 80091e6:	441d      	add	r5, r3
 80091e8:	4473      	add	r3, lr
 80091ea:	469e      	mov	lr, r3
 80091ec:	462e      	mov	r6, r5
 80091ee:	4566      	cmp	r6, ip
 80091f0:	d30e      	bcc.n	8009210 <__mdiff+0xec>
 80091f2:	f10c 0203 	add.w	r2, ip, #3
 80091f6:	1b52      	subs	r2, r2, r5
 80091f8:	f022 0203 	bic.w	r2, r2, #3
 80091fc:	3d03      	subs	r5, #3
 80091fe:	45ac      	cmp	ip, r5
 8009200:	bf38      	it	cc
 8009202:	2200      	movcc	r2, #0
 8009204:	441a      	add	r2, r3
 8009206:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800920a:	b17b      	cbz	r3, 800922c <__mdiff+0x108>
 800920c:	6107      	str	r7, [r0, #16]
 800920e:	e7a3      	b.n	8009158 <__mdiff+0x34>
 8009210:	f856 8b04 	ldr.w	r8, [r6], #4
 8009214:	fa11 f288 	uxtah	r2, r1, r8
 8009218:	1414      	asrs	r4, r2, #16
 800921a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800921e:	b292      	uxth	r2, r2
 8009220:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009224:	f84e 2b04 	str.w	r2, [lr], #4
 8009228:	1421      	asrs	r1, r4, #16
 800922a:	e7e0      	b.n	80091ee <__mdiff+0xca>
 800922c:	3f01      	subs	r7, #1
 800922e:	e7ea      	b.n	8009206 <__mdiff+0xe2>
 8009230:	0800ccd3 	.word	0x0800ccd3
 8009234:	0800cce4 	.word	0x0800cce4

08009238 <__d2b>:
 8009238:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800923c:	4689      	mov	r9, r1
 800923e:	2101      	movs	r1, #1
 8009240:	ec57 6b10 	vmov	r6, r7, d0
 8009244:	4690      	mov	r8, r2
 8009246:	f7ff fccf 	bl	8008be8 <_Balloc>
 800924a:	4604      	mov	r4, r0
 800924c:	b930      	cbnz	r0, 800925c <__d2b+0x24>
 800924e:	4602      	mov	r2, r0
 8009250:	4b25      	ldr	r3, [pc, #148]	; (80092e8 <__d2b+0xb0>)
 8009252:	4826      	ldr	r0, [pc, #152]	; (80092ec <__d2b+0xb4>)
 8009254:	f240 310a 	movw	r1, #778	; 0x30a
 8009258:	f7fe fd84 	bl	8007d64 <__assert_func>
 800925c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009260:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009264:	bb35      	cbnz	r5, 80092b4 <__d2b+0x7c>
 8009266:	2e00      	cmp	r6, #0
 8009268:	9301      	str	r3, [sp, #4]
 800926a:	d028      	beq.n	80092be <__d2b+0x86>
 800926c:	4668      	mov	r0, sp
 800926e:	9600      	str	r6, [sp, #0]
 8009270:	f7ff fd82 	bl	8008d78 <__lo0bits>
 8009274:	9900      	ldr	r1, [sp, #0]
 8009276:	b300      	cbz	r0, 80092ba <__d2b+0x82>
 8009278:	9a01      	ldr	r2, [sp, #4]
 800927a:	f1c0 0320 	rsb	r3, r0, #32
 800927e:	fa02 f303 	lsl.w	r3, r2, r3
 8009282:	430b      	orrs	r3, r1
 8009284:	40c2      	lsrs	r2, r0
 8009286:	6163      	str	r3, [r4, #20]
 8009288:	9201      	str	r2, [sp, #4]
 800928a:	9b01      	ldr	r3, [sp, #4]
 800928c:	61a3      	str	r3, [r4, #24]
 800928e:	2b00      	cmp	r3, #0
 8009290:	bf14      	ite	ne
 8009292:	2202      	movne	r2, #2
 8009294:	2201      	moveq	r2, #1
 8009296:	6122      	str	r2, [r4, #16]
 8009298:	b1d5      	cbz	r5, 80092d0 <__d2b+0x98>
 800929a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800929e:	4405      	add	r5, r0
 80092a0:	f8c9 5000 	str.w	r5, [r9]
 80092a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80092a8:	f8c8 0000 	str.w	r0, [r8]
 80092ac:	4620      	mov	r0, r4
 80092ae:	b003      	add	sp, #12
 80092b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092b8:	e7d5      	b.n	8009266 <__d2b+0x2e>
 80092ba:	6161      	str	r1, [r4, #20]
 80092bc:	e7e5      	b.n	800928a <__d2b+0x52>
 80092be:	a801      	add	r0, sp, #4
 80092c0:	f7ff fd5a 	bl	8008d78 <__lo0bits>
 80092c4:	9b01      	ldr	r3, [sp, #4]
 80092c6:	6163      	str	r3, [r4, #20]
 80092c8:	2201      	movs	r2, #1
 80092ca:	6122      	str	r2, [r4, #16]
 80092cc:	3020      	adds	r0, #32
 80092ce:	e7e3      	b.n	8009298 <__d2b+0x60>
 80092d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80092d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80092d8:	f8c9 0000 	str.w	r0, [r9]
 80092dc:	6918      	ldr	r0, [r3, #16]
 80092de:	f7ff fd2b 	bl	8008d38 <__hi0bits>
 80092e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80092e6:	e7df      	b.n	80092a8 <__d2b+0x70>
 80092e8:	0800ccd3 	.word	0x0800ccd3
 80092ec:	0800cce4 	.word	0x0800cce4

080092f0 <_calloc_r>:
 80092f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092f2:	fba1 2402 	umull	r2, r4, r1, r2
 80092f6:	b94c      	cbnz	r4, 800930c <_calloc_r+0x1c>
 80092f8:	4611      	mov	r1, r2
 80092fa:	9201      	str	r2, [sp, #4]
 80092fc:	f7fd fea0 	bl	8007040 <_malloc_r>
 8009300:	9a01      	ldr	r2, [sp, #4]
 8009302:	4605      	mov	r5, r0
 8009304:	b930      	cbnz	r0, 8009314 <_calloc_r+0x24>
 8009306:	4628      	mov	r0, r5
 8009308:	b003      	add	sp, #12
 800930a:	bd30      	pop	{r4, r5, pc}
 800930c:	220c      	movs	r2, #12
 800930e:	6002      	str	r2, [r0, #0]
 8009310:	2500      	movs	r5, #0
 8009312:	e7f8      	b.n	8009306 <_calloc_r+0x16>
 8009314:	4621      	mov	r1, r4
 8009316:	f7fd fe1f 	bl	8006f58 <memset>
 800931a:	e7f4      	b.n	8009306 <_calloc_r+0x16>

0800931c <__sfputc_r>:
 800931c:	6893      	ldr	r3, [r2, #8]
 800931e:	3b01      	subs	r3, #1
 8009320:	2b00      	cmp	r3, #0
 8009322:	b410      	push	{r4}
 8009324:	6093      	str	r3, [r2, #8]
 8009326:	da08      	bge.n	800933a <__sfputc_r+0x1e>
 8009328:	6994      	ldr	r4, [r2, #24]
 800932a:	42a3      	cmp	r3, r4
 800932c:	db01      	blt.n	8009332 <__sfputc_r+0x16>
 800932e:	290a      	cmp	r1, #10
 8009330:	d103      	bne.n	800933a <__sfputc_r+0x1e>
 8009332:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009336:	f7fe bc43 	b.w	8007bc0 <__swbuf_r>
 800933a:	6813      	ldr	r3, [r2, #0]
 800933c:	1c58      	adds	r0, r3, #1
 800933e:	6010      	str	r0, [r2, #0]
 8009340:	7019      	strb	r1, [r3, #0]
 8009342:	4608      	mov	r0, r1
 8009344:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009348:	4770      	bx	lr

0800934a <__sfputs_r>:
 800934a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934c:	4606      	mov	r6, r0
 800934e:	460f      	mov	r7, r1
 8009350:	4614      	mov	r4, r2
 8009352:	18d5      	adds	r5, r2, r3
 8009354:	42ac      	cmp	r4, r5
 8009356:	d101      	bne.n	800935c <__sfputs_r+0x12>
 8009358:	2000      	movs	r0, #0
 800935a:	e007      	b.n	800936c <__sfputs_r+0x22>
 800935c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009360:	463a      	mov	r2, r7
 8009362:	4630      	mov	r0, r6
 8009364:	f7ff ffda 	bl	800931c <__sfputc_r>
 8009368:	1c43      	adds	r3, r0, #1
 800936a:	d1f3      	bne.n	8009354 <__sfputs_r+0xa>
 800936c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009370 <_vfiprintf_r>:
 8009370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009374:	460d      	mov	r5, r1
 8009376:	b09d      	sub	sp, #116	; 0x74
 8009378:	4614      	mov	r4, r2
 800937a:	4698      	mov	r8, r3
 800937c:	4606      	mov	r6, r0
 800937e:	b118      	cbz	r0, 8009388 <_vfiprintf_r+0x18>
 8009380:	6983      	ldr	r3, [r0, #24]
 8009382:	b90b      	cbnz	r3, 8009388 <_vfiprintf_r+0x18>
 8009384:	f7fd fd0c 	bl	8006da0 <__sinit>
 8009388:	4b89      	ldr	r3, [pc, #548]	; (80095b0 <_vfiprintf_r+0x240>)
 800938a:	429d      	cmp	r5, r3
 800938c:	d11b      	bne.n	80093c6 <_vfiprintf_r+0x56>
 800938e:	6875      	ldr	r5, [r6, #4]
 8009390:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009392:	07d9      	lsls	r1, r3, #31
 8009394:	d405      	bmi.n	80093a2 <_vfiprintf_r+0x32>
 8009396:	89ab      	ldrh	r3, [r5, #12]
 8009398:	059a      	lsls	r2, r3, #22
 800939a:	d402      	bmi.n	80093a2 <_vfiprintf_r+0x32>
 800939c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800939e:	f7fd fdc2 	bl	8006f26 <__retarget_lock_acquire_recursive>
 80093a2:	89ab      	ldrh	r3, [r5, #12]
 80093a4:	071b      	lsls	r3, r3, #28
 80093a6:	d501      	bpl.n	80093ac <_vfiprintf_r+0x3c>
 80093a8:	692b      	ldr	r3, [r5, #16]
 80093aa:	b9eb      	cbnz	r3, 80093e8 <_vfiprintf_r+0x78>
 80093ac:	4629      	mov	r1, r5
 80093ae:	4630      	mov	r0, r6
 80093b0:	f7fe fc6a 	bl	8007c88 <__swsetup_r>
 80093b4:	b1c0      	cbz	r0, 80093e8 <_vfiprintf_r+0x78>
 80093b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093b8:	07dc      	lsls	r4, r3, #31
 80093ba:	d50e      	bpl.n	80093da <_vfiprintf_r+0x6a>
 80093bc:	f04f 30ff 	mov.w	r0, #4294967295
 80093c0:	b01d      	add	sp, #116	; 0x74
 80093c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093c6:	4b7b      	ldr	r3, [pc, #492]	; (80095b4 <_vfiprintf_r+0x244>)
 80093c8:	429d      	cmp	r5, r3
 80093ca:	d101      	bne.n	80093d0 <_vfiprintf_r+0x60>
 80093cc:	68b5      	ldr	r5, [r6, #8]
 80093ce:	e7df      	b.n	8009390 <_vfiprintf_r+0x20>
 80093d0:	4b79      	ldr	r3, [pc, #484]	; (80095b8 <_vfiprintf_r+0x248>)
 80093d2:	429d      	cmp	r5, r3
 80093d4:	bf08      	it	eq
 80093d6:	68f5      	ldreq	r5, [r6, #12]
 80093d8:	e7da      	b.n	8009390 <_vfiprintf_r+0x20>
 80093da:	89ab      	ldrh	r3, [r5, #12]
 80093dc:	0598      	lsls	r0, r3, #22
 80093de:	d4ed      	bmi.n	80093bc <_vfiprintf_r+0x4c>
 80093e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093e2:	f7fd fda1 	bl	8006f28 <__retarget_lock_release_recursive>
 80093e6:	e7e9      	b.n	80093bc <_vfiprintf_r+0x4c>
 80093e8:	2300      	movs	r3, #0
 80093ea:	9309      	str	r3, [sp, #36]	; 0x24
 80093ec:	2320      	movs	r3, #32
 80093ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80093f6:	2330      	movs	r3, #48	; 0x30
 80093f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80095bc <_vfiprintf_r+0x24c>
 80093fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009400:	f04f 0901 	mov.w	r9, #1
 8009404:	4623      	mov	r3, r4
 8009406:	469a      	mov	sl, r3
 8009408:	f813 2b01 	ldrb.w	r2, [r3], #1
 800940c:	b10a      	cbz	r2, 8009412 <_vfiprintf_r+0xa2>
 800940e:	2a25      	cmp	r2, #37	; 0x25
 8009410:	d1f9      	bne.n	8009406 <_vfiprintf_r+0x96>
 8009412:	ebba 0b04 	subs.w	fp, sl, r4
 8009416:	d00b      	beq.n	8009430 <_vfiprintf_r+0xc0>
 8009418:	465b      	mov	r3, fp
 800941a:	4622      	mov	r2, r4
 800941c:	4629      	mov	r1, r5
 800941e:	4630      	mov	r0, r6
 8009420:	f7ff ff93 	bl	800934a <__sfputs_r>
 8009424:	3001      	adds	r0, #1
 8009426:	f000 80aa 	beq.w	800957e <_vfiprintf_r+0x20e>
 800942a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800942c:	445a      	add	r2, fp
 800942e:	9209      	str	r2, [sp, #36]	; 0x24
 8009430:	f89a 3000 	ldrb.w	r3, [sl]
 8009434:	2b00      	cmp	r3, #0
 8009436:	f000 80a2 	beq.w	800957e <_vfiprintf_r+0x20e>
 800943a:	2300      	movs	r3, #0
 800943c:	f04f 32ff 	mov.w	r2, #4294967295
 8009440:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009444:	f10a 0a01 	add.w	sl, sl, #1
 8009448:	9304      	str	r3, [sp, #16]
 800944a:	9307      	str	r3, [sp, #28]
 800944c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009450:	931a      	str	r3, [sp, #104]	; 0x68
 8009452:	4654      	mov	r4, sl
 8009454:	2205      	movs	r2, #5
 8009456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800945a:	4858      	ldr	r0, [pc, #352]	; (80095bc <_vfiprintf_r+0x24c>)
 800945c:	f7f6 fec0 	bl	80001e0 <memchr>
 8009460:	9a04      	ldr	r2, [sp, #16]
 8009462:	b9d8      	cbnz	r0, 800949c <_vfiprintf_r+0x12c>
 8009464:	06d1      	lsls	r1, r2, #27
 8009466:	bf44      	itt	mi
 8009468:	2320      	movmi	r3, #32
 800946a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800946e:	0713      	lsls	r3, r2, #28
 8009470:	bf44      	itt	mi
 8009472:	232b      	movmi	r3, #43	; 0x2b
 8009474:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009478:	f89a 3000 	ldrb.w	r3, [sl]
 800947c:	2b2a      	cmp	r3, #42	; 0x2a
 800947e:	d015      	beq.n	80094ac <_vfiprintf_r+0x13c>
 8009480:	9a07      	ldr	r2, [sp, #28]
 8009482:	4654      	mov	r4, sl
 8009484:	2000      	movs	r0, #0
 8009486:	f04f 0c0a 	mov.w	ip, #10
 800948a:	4621      	mov	r1, r4
 800948c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009490:	3b30      	subs	r3, #48	; 0x30
 8009492:	2b09      	cmp	r3, #9
 8009494:	d94e      	bls.n	8009534 <_vfiprintf_r+0x1c4>
 8009496:	b1b0      	cbz	r0, 80094c6 <_vfiprintf_r+0x156>
 8009498:	9207      	str	r2, [sp, #28]
 800949a:	e014      	b.n	80094c6 <_vfiprintf_r+0x156>
 800949c:	eba0 0308 	sub.w	r3, r0, r8
 80094a0:	fa09 f303 	lsl.w	r3, r9, r3
 80094a4:	4313      	orrs	r3, r2
 80094a6:	9304      	str	r3, [sp, #16]
 80094a8:	46a2      	mov	sl, r4
 80094aa:	e7d2      	b.n	8009452 <_vfiprintf_r+0xe2>
 80094ac:	9b03      	ldr	r3, [sp, #12]
 80094ae:	1d19      	adds	r1, r3, #4
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	9103      	str	r1, [sp, #12]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	bfbb      	ittet	lt
 80094b8:	425b      	neglt	r3, r3
 80094ba:	f042 0202 	orrlt.w	r2, r2, #2
 80094be:	9307      	strge	r3, [sp, #28]
 80094c0:	9307      	strlt	r3, [sp, #28]
 80094c2:	bfb8      	it	lt
 80094c4:	9204      	strlt	r2, [sp, #16]
 80094c6:	7823      	ldrb	r3, [r4, #0]
 80094c8:	2b2e      	cmp	r3, #46	; 0x2e
 80094ca:	d10c      	bne.n	80094e6 <_vfiprintf_r+0x176>
 80094cc:	7863      	ldrb	r3, [r4, #1]
 80094ce:	2b2a      	cmp	r3, #42	; 0x2a
 80094d0:	d135      	bne.n	800953e <_vfiprintf_r+0x1ce>
 80094d2:	9b03      	ldr	r3, [sp, #12]
 80094d4:	1d1a      	adds	r2, r3, #4
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	9203      	str	r2, [sp, #12]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	bfb8      	it	lt
 80094de:	f04f 33ff 	movlt.w	r3, #4294967295
 80094e2:	3402      	adds	r4, #2
 80094e4:	9305      	str	r3, [sp, #20]
 80094e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80095cc <_vfiprintf_r+0x25c>
 80094ea:	7821      	ldrb	r1, [r4, #0]
 80094ec:	2203      	movs	r2, #3
 80094ee:	4650      	mov	r0, sl
 80094f0:	f7f6 fe76 	bl	80001e0 <memchr>
 80094f4:	b140      	cbz	r0, 8009508 <_vfiprintf_r+0x198>
 80094f6:	2340      	movs	r3, #64	; 0x40
 80094f8:	eba0 000a 	sub.w	r0, r0, sl
 80094fc:	fa03 f000 	lsl.w	r0, r3, r0
 8009500:	9b04      	ldr	r3, [sp, #16]
 8009502:	4303      	orrs	r3, r0
 8009504:	3401      	adds	r4, #1
 8009506:	9304      	str	r3, [sp, #16]
 8009508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800950c:	482c      	ldr	r0, [pc, #176]	; (80095c0 <_vfiprintf_r+0x250>)
 800950e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009512:	2206      	movs	r2, #6
 8009514:	f7f6 fe64 	bl	80001e0 <memchr>
 8009518:	2800      	cmp	r0, #0
 800951a:	d03f      	beq.n	800959c <_vfiprintf_r+0x22c>
 800951c:	4b29      	ldr	r3, [pc, #164]	; (80095c4 <_vfiprintf_r+0x254>)
 800951e:	bb1b      	cbnz	r3, 8009568 <_vfiprintf_r+0x1f8>
 8009520:	9b03      	ldr	r3, [sp, #12]
 8009522:	3307      	adds	r3, #7
 8009524:	f023 0307 	bic.w	r3, r3, #7
 8009528:	3308      	adds	r3, #8
 800952a:	9303      	str	r3, [sp, #12]
 800952c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800952e:	443b      	add	r3, r7
 8009530:	9309      	str	r3, [sp, #36]	; 0x24
 8009532:	e767      	b.n	8009404 <_vfiprintf_r+0x94>
 8009534:	fb0c 3202 	mla	r2, ip, r2, r3
 8009538:	460c      	mov	r4, r1
 800953a:	2001      	movs	r0, #1
 800953c:	e7a5      	b.n	800948a <_vfiprintf_r+0x11a>
 800953e:	2300      	movs	r3, #0
 8009540:	3401      	adds	r4, #1
 8009542:	9305      	str	r3, [sp, #20]
 8009544:	4619      	mov	r1, r3
 8009546:	f04f 0c0a 	mov.w	ip, #10
 800954a:	4620      	mov	r0, r4
 800954c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009550:	3a30      	subs	r2, #48	; 0x30
 8009552:	2a09      	cmp	r2, #9
 8009554:	d903      	bls.n	800955e <_vfiprintf_r+0x1ee>
 8009556:	2b00      	cmp	r3, #0
 8009558:	d0c5      	beq.n	80094e6 <_vfiprintf_r+0x176>
 800955a:	9105      	str	r1, [sp, #20]
 800955c:	e7c3      	b.n	80094e6 <_vfiprintf_r+0x176>
 800955e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009562:	4604      	mov	r4, r0
 8009564:	2301      	movs	r3, #1
 8009566:	e7f0      	b.n	800954a <_vfiprintf_r+0x1da>
 8009568:	ab03      	add	r3, sp, #12
 800956a:	9300      	str	r3, [sp, #0]
 800956c:	462a      	mov	r2, r5
 800956e:	4b16      	ldr	r3, [pc, #88]	; (80095c8 <_vfiprintf_r+0x258>)
 8009570:	a904      	add	r1, sp, #16
 8009572:	4630      	mov	r0, r6
 8009574:	f7fd fe78 	bl	8007268 <_printf_float>
 8009578:	4607      	mov	r7, r0
 800957a:	1c78      	adds	r0, r7, #1
 800957c:	d1d6      	bne.n	800952c <_vfiprintf_r+0x1bc>
 800957e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009580:	07d9      	lsls	r1, r3, #31
 8009582:	d405      	bmi.n	8009590 <_vfiprintf_r+0x220>
 8009584:	89ab      	ldrh	r3, [r5, #12]
 8009586:	059a      	lsls	r2, r3, #22
 8009588:	d402      	bmi.n	8009590 <_vfiprintf_r+0x220>
 800958a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800958c:	f7fd fccc 	bl	8006f28 <__retarget_lock_release_recursive>
 8009590:	89ab      	ldrh	r3, [r5, #12]
 8009592:	065b      	lsls	r3, r3, #25
 8009594:	f53f af12 	bmi.w	80093bc <_vfiprintf_r+0x4c>
 8009598:	9809      	ldr	r0, [sp, #36]	; 0x24
 800959a:	e711      	b.n	80093c0 <_vfiprintf_r+0x50>
 800959c:	ab03      	add	r3, sp, #12
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	462a      	mov	r2, r5
 80095a2:	4b09      	ldr	r3, [pc, #36]	; (80095c8 <_vfiprintf_r+0x258>)
 80095a4:	a904      	add	r1, sp, #16
 80095a6:	4630      	mov	r0, r6
 80095a8:	f7fe f902 	bl	80077b0 <_printf_i>
 80095ac:	e7e4      	b.n	8009578 <_vfiprintf_r+0x208>
 80095ae:	bf00      	nop
 80095b0:	0800cba0 	.word	0x0800cba0
 80095b4:	0800cbc0 	.word	0x0800cbc0
 80095b8:	0800cb80 	.word	0x0800cb80
 80095bc:	0800ce3c 	.word	0x0800ce3c
 80095c0:	0800ce46 	.word	0x0800ce46
 80095c4:	08007269 	.word	0x08007269
 80095c8:	0800934b 	.word	0x0800934b
 80095cc:	0800ce42 	.word	0x0800ce42

080095d0 <_read_r>:
 80095d0:	b538      	push	{r3, r4, r5, lr}
 80095d2:	4d07      	ldr	r5, [pc, #28]	; (80095f0 <_read_r+0x20>)
 80095d4:	4604      	mov	r4, r0
 80095d6:	4608      	mov	r0, r1
 80095d8:	4611      	mov	r1, r2
 80095da:	2200      	movs	r2, #0
 80095dc:	602a      	str	r2, [r5, #0]
 80095de:	461a      	mov	r2, r3
 80095e0:	f000 f9fa 	bl	80099d8 <_read>
 80095e4:	1c43      	adds	r3, r0, #1
 80095e6:	d102      	bne.n	80095ee <_read_r+0x1e>
 80095e8:	682b      	ldr	r3, [r5, #0]
 80095ea:	b103      	cbz	r3, 80095ee <_read_r+0x1e>
 80095ec:	6023      	str	r3, [r4, #0]
 80095ee:	bd38      	pop	{r3, r4, r5, pc}
 80095f0:	20001344 	.word	0x20001344

080095f4 <abort>:
 80095f4:	b508      	push	{r3, lr}
 80095f6:	2006      	movs	r0, #6
 80095f8:	f000 f860 	bl	80096bc <raise>
 80095fc:	2001      	movs	r0, #1
 80095fe:	f000 f9f3 	bl	80099e8 <_exit>
	...

08009604 <_fstat_r>:
 8009604:	b538      	push	{r3, r4, r5, lr}
 8009606:	4d07      	ldr	r5, [pc, #28]	; (8009624 <_fstat_r+0x20>)
 8009608:	2300      	movs	r3, #0
 800960a:	4604      	mov	r4, r0
 800960c:	4608      	mov	r0, r1
 800960e:	4611      	mov	r1, r2
 8009610:	602b      	str	r3, [r5, #0]
 8009612:	f000 f9b9 	bl	8009988 <_fstat>
 8009616:	1c43      	adds	r3, r0, #1
 8009618:	d102      	bne.n	8009620 <_fstat_r+0x1c>
 800961a:	682b      	ldr	r3, [r5, #0]
 800961c:	b103      	cbz	r3, 8009620 <_fstat_r+0x1c>
 800961e:	6023      	str	r3, [r4, #0]
 8009620:	bd38      	pop	{r3, r4, r5, pc}
 8009622:	bf00      	nop
 8009624:	20001344 	.word	0x20001344

08009628 <_isatty_r>:
 8009628:	b538      	push	{r3, r4, r5, lr}
 800962a:	4d06      	ldr	r5, [pc, #24]	; (8009644 <_isatty_r+0x1c>)
 800962c:	2300      	movs	r3, #0
 800962e:	4604      	mov	r4, r0
 8009630:	4608      	mov	r0, r1
 8009632:	602b      	str	r3, [r5, #0]
 8009634:	f000 f9b8 	bl	80099a8 <_isatty>
 8009638:	1c43      	adds	r3, r0, #1
 800963a:	d102      	bne.n	8009642 <_isatty_r+0x1a>
 800963c:	682b      	ldr	r3, [r5, #0]
 800963e:	b103      	cbz	r3, 8009642 <_isatty_r+0x1a>
 8009640:	6023      	str	r3, [r4, #0]
 8009642:	bd38      	pop	{r3, r4, r5, pc}
 8009644:	20001344 	.word	0x20001344

08009648 <__ascii_mbtowc>:
 8009648:	b082      	sub	sp, #8
 800964a:	b901      	cbnz	r1, 800964e <__ascii_mbtowc+0x6>
 800964c:	a901      	add	r1, sp, #4
 800964e:	b142      	cbz	r2, 8009662 <__ascii_mbtowc+0x1a>
 8009650:	b14b      	cbz	r3, 8009666 <__ascii_mbtowc+0x1e>
 8009652:	7813      	ldrb	r3, [r2, #0]
 8009654:	600b      	str	r3, [r1, #0]
 8009656:	7812      	ldrb	r2, [r2, #0]
 8009658:	1e10      	subs	r0, r2, #0
 800965a:	bf18      	it	ne
 800965c:	2001      	movne	r0, #1
 800965e:	b002      	add	sp, #8
 8009660:	4770      	bx	lr
 8009662:	4610      	mov	r0, r2
 8009664:	e7fb      	b.n	800965e <__ascii_mbtowc+0x16>
 8009666:	f06f 0001 	mvn.w	r0, #1
 800966a:	e7f8      	b.n	800965e <__ascii_mbtowc+0x16>

0800966c <_raise_r>:
 800966c:	291f      	cmp	r1, #31
 800966e:	b538      	push	{r3, r4, r5, lr}
 8009670:	4604      	mov	r4, r0
 8009672:	460d      	mov	r5, r1
 8009674:	d904      	bls.n	8009680 <_raise_r+0x14>
 8009676:	2316      	movs	r3, #22
 8009678:	6003      	str	r3, [r0, #0]
 800967a:	f04f 30ff 	mov.w	r0, #4294967295
 800967e:	bd38      	pop	{r3, r4, r5, pc}
 8009680:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009682:	b112      	cbz	r2, 800968a <_raise_r+0x1e>
 8009684:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009688:	b94b      	cbnz	r3, 800969e <_raise_r+0x32>
 800968a:	4620      	mov	r0, r4
 800968c:	f000 f830 	bl	80096f0 <_getpid_r>
 8009690:	462a      	mov	r2, r5
 8009692:	4601      	mov	r1, r0
 8009694:	4620      	mov	r0, r4
 8009696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800969a:	f000 b817 	b.w	80096cc <_kill_r>
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d00a      	beq.n	80096b8 <_raise_r+0x4c>
 80096a2:	1c59      	adds	r1, r3, #1
 80096a4:	d103      	bne.n	80096ae <_raise_r+0x42>
 80096a6:	2316      	movs	r3, #22
 80096a8:	6003      	str	r3, [r0, #0]
 80096aa:	2001      	movs	r0, #1
 80096ac:	e7e7      	b.n	800967e <_raise_r+0x12>
 80096ae:	2400      	movs	r4, #0
 80096b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80096b4:	4628      	mov	r0, r5
 80096b6:	4798      	blx	r3
 80096b8:	2000      	movs	r0, #0
 80096ba:	e7e0      	b.n	800967e <_raise_r+0x12>

080096bc <raise>:
 80096bc:	4b02      	ldr	r3, [pc, #8]	; (80096c8 <raise+0xc>)
 80096be:	4601      	mov	r1, r0
 80096c0:	6818      	ldr	r0, [r3, #0]
 80096c2:	f7ff bfd3 	b.w	800966c <_raise_r>
 80096c6:	bf00      	nop
 80096c8:	20000774 	.word	0x20000774

080096cc <_kill_r>:
 80096cc:	b538      	push	{r3, r4, r5, lr}
 80096ce:	4d07      	ldr	r5, [pc, #28]	; (80096ec <_kill_r+0x20>)
 80096d0:	2300      	movs	r3, #0
 80096d2:	4604      	mov	r4, r0
 80096d4:	4608      	mov	r0, r1
 80096d6:	4611      	mov	r1, r2
 80096d8:	602b      	str	r3, [r5, #0]
 80096da:	f000 f96d 	bl	80099b8 <_kill>
 80096de:	1c43      	adds	r3, r0, #1
 80096e0:	d102      	bne.n	80096e8 <_kill_r+0x1c>
 80096e2:	682b      	ldr	r3, [r5, #0]
 80096e4:	b103      	cbz	r3, 80096e8 <_kill_r+0x1c>
 80096e6:	6023      	str	r3, [r4, #0]
 80096e8:	bd38      	pop	{r3, r4, r5, pc}
 80096ea:	bf00      	nop
 80096ec:	20001344 	.word	0x20001344

080096f0 <_getpid_r>:
 80096f0:	f000 b952 	b.w	8009998 <_getpid>

080096f4 <__ascii_wctomb>:
 80096f4:	b149      	cbz	r1, 800970a <__ascii_wctomb+0x16>
 80096f6:	2aff      	cmp	r2, #255	; 0xff
 80096f8:	bf85      	ittet	hi
 80096fa:	238a      	movhi	r3, #138	; 0x8a
 80096fc:	6003      	strhi	r3, [r0, #0]
 80096fe:	700a      	strbls	r2, [r1, #0]
 8009700:	f04f 30ff 	movhi.w	r0, #4294967295
 8009704:	bf98      	it	ls
 8009706:	2001      	movls	r0, #1
 8009708:	4770      	bx	lr
 800970a:	4608      	mov	r0, r1
 800970c:	4770      	bx	lr
	...

08009710 <expf>:
 8009710:	b508      	push	{r3, lr}
 8009712:	ed2d 8b02 	vpush	{d8}
 8009716:	eef0 8a40 	vmov.f32	s17, s0
 800971a:	f000 f82f 	bl	800977c <__ieee754_expf>
 800971e:	eeb0 8a40 	vmov.f32	s16, s0
 8009722:	eeb0 0a68 	vmov.f32	s0, s17
 8009726:	f000 f919 	bl	800995c <finitef>
 800972a:	b160      	cbz	r0, 8009746 <expf+0x36>
 800972c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800976c <expf+0x5c>
 8009730:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009738:	dd0a      	ble.n	8009750 <expf+0x40>
 800973a:	f7fd fa11 	bl	8006b60 <__errno>
 800973e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8009770 <expf+0x60>
 8009742:	2322      	movs	r3, #34	; 0x22
 8009744:	6003      	str	r3, [r0, #0]
 8009746:	eeb0 0a48 	vmov.f32	s0, s16
 800974a:	ecbd 8b02 	vpop	{d8}
 800974e:	bd08      	pop	{r3, pc}
 8009750:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009774 <expf+0x64>
 8009754:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800975c:	d5f3      	bpl.n	8009746 <expf+0x36>
 800975e:	f7fd f9ff 	bl	8006b60 <__errno>
 8009762:	2322      	movs	r3, #34	; 0x22
 8009764:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8009778 <expf+0x68>
 8009768:	6003      	str	r3, [r0, #0]
 800976a:	e7ec      	b.n	8009746 <expf+0x36>
 800976c:	42b17180 	.word	0x42b17180
 8009770:	7f800000 	.word	0x7f800000
 8009774:	c2cff1b5 	.word	0xc2cff1b5
 8009778:	00000000 	.word	0x00000000

0800977c <__ieee754_expf>:
 800977c:	ee10 2a10 	vmov	r2, s0
 8009780:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8009784:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009788:	d902      	bls.n	8009790 <__ieee754_expf+0x14>
 800978a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800978e:	4770      	bx	lr
 8009790:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8009794:	d106      	bne.n	80097a4 <__ieee754_expf+0x28>
 8009796:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80098d0 <__ieee754_expf+0x154>
 800979a:	2b00      	cmp	r3, #0
 800979c:	bf18      	it	ne
 800979e:	eeb0 0a67 	vmovne.f32	s0, s15
 80097a2:	4770      	bx	lr
 80097a4:	484b      	ldr	r0, [pc, #300]	; (80098d4 <__ieee754_expf+0x158>)
 80097a6:	4282      	cmp	r2, r0
 80097a8:	dd02      	ble.n	80097b0 <__ieee754_expf+0x34>
 80097aa:	2000      	movs	r0, #0
 80097ac:	f000 b8d0 	b.w	8009950 <__math_oflowf>
 80097b0:	2a00      	cmp	r2, #0
 80097b2:	da05      	bge.n	80097c0 <__ieee754_expf+0x44>
 80097b4:	4a48      	ldr	r2, [pc, #288]	; (80098d8 <__ieee754_expf+0x15c>)
 80097b6:	4291      	cmp	r1, r2
 80097b8:	d902      	bls.n	80097c0 <__ieee754_expf+0x44>
 80097ba:	2000      	movs	r0, #0
 80097bc:	f000 b8c2 	b.w	8009944 <__math_uflowf>
 80097c0:	4a46      	ldr	r2, [pc, #280]	; (80098dc <__ieee754_expf+0x160>)
 80097c2:	4291      	cmp	r1, r2
 80097c4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80097c8:	d952      	bls.n	8009870 <__ieee754_expf+0xf4>
 80097ca:	4a45      	ldr	r2, [pc, #276]	; (80098e0 <__ieee754_expf+0x164>)
 80097cc:	4291      	cmp	r1, r2
 80097ce:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80097d2:	d834      	bhi.n	800983e <__ieee754_expf+0xc2>
 80097d4:	4943      	ldr	r1, [pc, #268]	; (80098e4 <__ieee754_expf+0x168>)
 80097d6:	4411      	add	r1, r2
 80097d8:	ed91 7a00 	vldr	s14, [r1]
 80097dc:	4942      	ldr	r1, [pc, #264]	; (80098e8 <__ieee754_expf+0x16c>)
 80097de:	440a      	add	r2, r1
 80097e0:	edd2 7a00 	vldr	s15, [r2]
 80097e4:	ee30 7a47 	vsub.f32	s14, s0, s14
 80097e8:	f1c3 0201 	rsb	r2, r3, #1
 80097ec:	1ad2      	subs	r2, r2, r3
 80097ee:	ee37 0a67 	vsub.f32	s0, s14, s15
 80097f2:	ee20 6a00 	vmul.f32	s12, s0, s0
 80097f6:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80098ec <__ieee754_expf+0x170>
 80097fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80098f0 <__ieee754_expf+0x174>
 80097fe:	eee6 6a05 	vfma.f32	s13, s12, s10
 8009802:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80098f4 <__ieee754_expf+0x178>
 8009806:	eea6 5a86 	vfma.f32	s10, s13, s12
 800980a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80098f8 <__ieee754_expf+0x17c>
 800980e:	eee5 6a06 	vfma.f32	s13, s10, s12
 8009812:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80098fc <__ieee754_expf+0x180>
 8009816:	eea6 5a86 	vfma.f32	s10, s13, s12
 800981a:	eef0 6a40 	vmov.f32	s13, s0
 800981e:	eee5 6a46 	vfms.f32	s13, s10, s12
 8009822:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8009826:	ee20 5a26 	vmul.f32	s10, s0, s13
 800982a:	bb92      	cbnz	r2, 8009892 <__ieee754_expf+0x116>
 800982c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8009830:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8009834:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009838:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800983c:	4770      	bx	lr
 800983e:	4b30      	ldr	r3, [pc, #192]	; (8009900 <__ieee754_expf+0x184>)
 8009840:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8009904 <__ieee754_expf+0x188>
 8009844:	eddf 6a30 	vldr	s13, [pc, #192]	; 8009908 <__ieee754_expf+0x18c>
 8009848:	4413      	add	r3, r2
 800984a:	edd3 7a00 	vldr	s15, [r3]
 800984e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009852:	eeb0 7a40 	vmov.f32	s14, s0
 8009856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800985a:	ee17 2a90 	vmov	r2, s15
 800985e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009862:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8009866:	eddf 6a29 	vldr	s13, [pc, #164]	; 800990c <__ieee754_expf+0x190>
 800986a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800986e:	e7be      	b.n	80097ee <__ieee754_expf+0x72>
 8009870:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8009874:	d20b      	bcs.n	800988e <__ieee754_expf+0x112>
 8009876:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009910 <__ieee754_expf+0x194>
 800987a:	ee70 6a26 	vadd.f32	s13, s0, s13
 800987e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8009882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009886:	dd02      	ble.n	800988e <__ieee754_expf+0x112>
 8009888:	ee30 0a25 	vadd.f32	s0, s0, s11
 800988c:	4770      	bx	lr
 800988e:	2200      	movs	r2, #0
 8009890:	e7af      	b.n	80097f2 <__ieee754_expf+0x76>
 8009892:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009896:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800989a:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800989e:	bfb8      	it	lt
 80098a0:	3264      	addlt	r2, #100	; 0x64
 80098a2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80098a6:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80098aa:	ee75 7ac0 	vsub.f32	s15, s11, s0
 80098ae:	ee17 3a90 	vmov	r3, s15
 80098b2:	bfab      	itete	ge
 80098b4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80098b8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80098bc:	ee00 3a10 	vmovge	s0, r3
 80098c0:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8009914 <__ieee754_expf+0x198>
 80098c4:	bfbc      	itt	lt
 80098c6:	ee00 3a10 	vmovlt	s0, r3
 80098ca:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80098ce:	4770      	bx	lr
 80098d0:	00000000 	.word	0x00000000
 80098d4:	42b17217 	.word	0x42b17217
 80098d8:	42cff1b5 	.word	0x42cff1b5
 80098dc:	3eb17218 	.word	0x3eb17218
 80098e0:	3f851591 	.word	0x3f851591
 80098e4:	0800cf60 	.word	0x0800cf60
 80098e8:	0800cf68 	.word	0x0800cf68
 80098ec:	3331bb4c 	.word	0x3331bb4c
 80098f0:	b5ddea0e 	.word	0xb5ddea0e
 80098f4:	388ab355 	.word	0x388ab355
 80098f8:	bb360b61 	.word	0xbb360b61
 80098fc:	3e2aaaab 	.word	0x3e2aaaab
 8009900:	0800cf58 	.word	0x0800cf58
 8009904:	3fb8aa3b 	.word	0x3fb8aa3b
 8009908:	3f317180 	.word	0x3f317180
 800990c:	3717f7d1 	.word	0x3717f7d1
 8009910:	7149f2ca 	.word	0x7149f2ca
 8009914:	0d800000 	.word	0x0d800000

08009918 <with_errnof>:
 8009918:	b513      	push	{r0, r1, r4, lr}
 800991a:	4604      	mov	r4, r0
 800991c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009920:	f7fd f91e 	bl	8006b60 <__errno>
 8009924:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009928:	6004      	str	r4, [r0, #0]
 800992a:	b002      	add	sp, #8
 800992c:	bd10      	pop	{r4, pc}

0800992e <xflowf>:
 800992e:	b130      	cbz	r0, 800993e <xflowf+0x10>
 8009930:	eef1 7a40 	vneg.f32	s15, s0
 8009934:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009938:	2022      	movs	r0, #34	; 0x22
 800993a:	f7ff bfed 	b.w	8009918 <with_errnof>
 800993e:	eef0 7a40 	vmov.f32	s15, s0
 8009942:	e7f7      	b.n	8009934 <xflowf+0x6>

08009944 <__math_uflowf>:
 8009944:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800994c <__math_uflowf+0x8>
 8009948:	f7ff bff1 	b.w	800992e <xflowf>
 800994c:	10000000 	.word	0x10000000

08009950 <__math_oflowf>:
 8009950:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009958 <__math_oflowf+0x8>
 8009954:	f7ff bfeb 	b.w	800992e <xflowf>
 8009958:	70000000 	.word	0x70000000

0800995c <finitef>:
 800995c:	b082      	sub	sp, #8
 800995e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009962:	9801      	ldr	r0, [sp, #4]
 8009964:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009968:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800996c:	bfac      	ite	ge
 800996e:	2000      	movge	r0, #0
 8009970:	2001      	movlt	r0, #1
 8009972:	b002      	add	sp, #8
 8009974:	4770      	bx	lr
	...

08009978 <_close>:
 8009978:	4b02      	ldr	r3, [pc, #8]	; (8009984 <_close+0xc>)
 800997a:	2258      	movs	r2, #88	; 0x58
 800997c:	601a      	str	r2, [r3, #0]
 800997e:	f04f 30ff 	mov.w	r0, #4294967295
 8009982:	4770      	bx	lr
 8009984:	20001344 	.word	0x20001344

08009988 <_fstat>:
 8009988:	4b02      	ldr	r3, [pc, #8]	; (8009994 <_fstat+0xc>)
 800998a:	2258      	movs	r2, #88	; 0x58
 800998c:	601a      	str	r2, [r3, #0]
 800998e:	f04f 30ff 	mov.w	r0, #4294967295
 8009992:	4770      	bx	lr
 8009994:	20001344 	.word	0x20001344

08009998 <_getpid>:
 8009998:	4b02      	ldr	r3, [pc, #8]	; (80099a4 <_getpid+0xc>)
 800999a:	2258      	movs	r2, #88	; 0x58
 800999c:	601a      	str	r2, [r3, #0]
 800999e:	f04f 30ff 	mov.w	r0, #4294967295
 80099a2:	4770      	bx	lr
 80099a4:	20001344 	.word	0x20001344

080099a8 <_isatty>:
 80099a8:	4b02      	ldr	r3, [pc, #8]	; (80099b4 <_isatty+0xc>)
 80099aa:	2258      	movs	r2, #88	; 0x58
 80099ac:	601a      	str	r2, [r3, #0]
 80099ae:	2000      	movs	r0, #0
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	20001344 	.word	0x20001344

080099b8 <_kill>:
 80099b8:	4b02      	ldr	r3, [pc, #8]	; (80099c4 <_kill+0xc>)
 80099ba:	2258      	movs	r2, #88	; 0x58
 80099bc:	601a      	str	r2, [r3, #0]
 80099be:	f04f 30ff 	mov.w	r0, #4294967295
 80099c2:	4770      	bx	lr
 80099c4:	20001344 	.word	0x20001344

080099c8 <_lseek>:
 80099c8:	4b02      	ldr	r3, [pc, #8]	; (80099d4 <_lseek+0xc>)
 80099ca:	2258      	movs	r2, #88	; 0x58
 80099cc:	601a      	str	r2, [r3, #0]
 80099ce:	f04f 30ff 	mov.w	r0, #4294967295
 80099d2:	4770      	bx	lr
 80099d4:	20001344 	.word	0x20001344

080099d8 <_read>:
 80099d8:	4b02      	ldr	r3, [pc, #8]	; (80099e4 <_read+0xc>)
 80099da:	2258      	movs	r2, #88	; 0x58
 80099dc:	601a      	str	r2, [r3, #0]
 80099de:	f04f 30ff 	mov.w	r0, #4294967295
 80099e2:	4770      	bx	lr
 80099e4:	20001344 	.word	0x20001344

080099e8 <_exit>:
 80099e8:	e7fe      	b.n	80099e8 <_exit>
	...

080099ec <_init>:
 80099ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ee:	bf00      	nop
 80099f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099f2:	bc08      	pop	{r3}
 80099f4:	469e      	mov	lr, r3
 80099f6:	4770      	bx	lr

080099f8 <_fini>:
 80099f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fa:	bf00      	nop
 80099fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099fe:	bc08      	pop	{r3}
 8009a00:	469e      	mov	lr, r3
 8009a02:	4770      	bx	lr
