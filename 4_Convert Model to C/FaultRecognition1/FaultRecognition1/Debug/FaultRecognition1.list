
FaultRecognition1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000043a0  08007598  08007598  00017598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b938  0800b938  0001b938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b940  0800b940  0001b940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b944  0800b944  0001b944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000004fc  20000000  0800b948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000bf8  200004fc  0800be44  000204fc  2**2
                  ALLOC
  8 ._user_heap_stack 00002400  200010f4  0800be44  000210f4  2**0
                  ALLOC
  9 .ARM.attributes 00000034  00000000  00000000  000204fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014bb8  00000000  00000000  00020530  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003176  00000000  00000000  000350e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007cc0  00000000  00000000  0003825e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000a50  00000000  00000000  0003ff20  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001090  00000000  00000000  00040970  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006d60  00000000  00000000  00041a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004fd0  00000000  00000000  00048760  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      00002e94  00000000  00000000  0004d730  2**0
                  CONTENTS, READONLY
 18 .iar.rtmodel  00000218  00000000  00000000  000505c4  2**0
                  CONTENTS, READONLY
 19 .iar_vfe_header 0000001c  00000000  00000000  000507dc  2**2
                  CONTENTS, READONLY
 20 .debug_frame  0000498c  00000000  00000000  000507f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200004fc 	.word	0x200004fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800757c 	.word	0x0800757c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000500 	.word	0x20000500
 800020c:	0800757c 	.word	0x0800757c

08000210 <ai_array_get_byte_size>:
 8000210:	b909      	cbnz	r1, 8000216 <ai_array_get_byte_size+0x6>
 8000212:	2000      	movs	r0, #0
 8000214:	4770      	bx	lr
 8000216:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800021a:	f3c0 3282 	ubfx	r2, r0, #14, #3
 800021e:	18d3      	adds	r3, r2, r3
 8000220:	4359      	muls	r1, r3
 8000222:	1dc9      	adds	r1, r1, #7
 8000224:	08c9      	lsrs	r1, r1, #3
 8000226:	0d42      	lsrs	r2, r0, #21
 8000228:	00c9      	lsls	r1, r1, #3
 800022a:	f002 0203 	and.w	r2, r2, #3
 800022e:	0c43      	lsrs	r3, r0, #17
 8000230:	40d1      	lsrs	r1, r2
 8000232:	f003 030f 	and.w	r3, r3, #15
 8000236:	2b04      	cmp	r3, #4
 8000238:	d00b      	beq.n	8000252 <ai_array_get_byte_size+0x42>
 800023a:	2b08      	cmp	r3, #8
 800023c:	bf01      	itttt	eq
 800023e:	f3c0 12c6 	ubfxeq	r2, r0, #7, #7
 8000242:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 8000246:	1882      	addeq	r2, r0, r2
 8000248:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 800024c:	1dc9      	adds	r1, r1, #7
 800024e:	08c8      	lsrs	r0, r1, #3
 8000250:	4770      	bx	lr
 8000252:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 8000256:	f3c0 3082 	ubfx	r0, r0, #14, #3
 800025a:	1882      	adds	r2, r0, r2
 800025c:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8000260:	1dc9      	adds	r1, r1, #7
 8000262:	08c8      	lsrs	r0, r1, #3
 8000264:	4770      	bx	lr

08000266 <ai_mem_copy_buffer>:
 8000266:	b510      	push	{r4, lr}
 8000268:	4604      	mov	r4, r0
 800026a:	f005 f97c 	bl	8005566 <__aeabi_memcpy>
 800026e:	4620      	mov	r0, r4
 8000270:	bd10      	pop	{r4, pc}

08000272 <ai_platform_runtime_get_revision>:
 8000272:	f8df 0414 	ldr.w	r0, [pc, #1044]	; 8000688 <.text_19>
 8000276:	6801      	ldr	r1, [r0, #0]
 8000278:	0849      	lsrs	r1, r1, #1
 800027a:	0049      	lsls	r1, r1, #1
 800027c:	6001      	str	r1, [r0, #0]
 800027e:	2001      	movs	r0, #1
 8000280:	f8df 1408 	ldr.w	r1, [pc, #1032]	; 800068c <.text_20>
 8000284:	6088      	str	r0, [r1, #8]
 8000286:	6888      	ldr	r0, [r1, #8]
 8000288:	2800      	cmp	r0, #0
 800028a:	d1fc      	bne.n	8000286 <ai_platform_runtime_get_revision+0x14>
 800028c:	f8df 2400 	ldr.w	r2, [pc, #1024]	; 8000690 <.text_21>
 8000290:	600a      	str	r2, [r1, #0]
 8000292:	6808      	ldr	r0, [r1, #0]
 8000294:	f8df 13fc 	ldr.w	r1, [pc, #1020]	; 8000694 <.text_22>
 8000298:	4288      	cmp	r0, r1
 800029a:	d000      	beq.n	800029e <ai_platform_runtime_get_revision+0x2c>
 800029c:	e7fe      	b.n	800029c <ai_platform_runtime_get_revision+0x2a>
 800029e:	a0a1      	add	r0, pc, #644	; (adr r0, 8000524 <.text_17>)
 80002a0:	4770      	bx	lr

080002a2 <ai_platform_runtime_get_version>:
 80002a2:	f8df 03e4 	ldr.w	r0, [pc, #996]	; 8000688 <.text_19>
 80002a6:	6801      	ldr	r1, [r0, #0]
 80002a8:	0849      	lsrs	r1, r1, #1
 80002aa:	0049      	lsls	r1, r1, #1
 80002ac:	6001      	str	r1, [r0, #0]
 80002ae:	2001      	movs	r0, #1
 80002b0:	f8df 13d8 	ldr.w	r1, [pc, #984]	; 800068c <.text_20>
 80002b4:	6088      	str	r0, [r1, #8]
 80002b6:	6888      	ldr	r0, [r1, #8]
 80002b8:	2800      	cmp	r0, #0
 80002ba:	d1fc      	bne.n	80002b6 <ai_platform_runtime_get_version+0x14>
 80002bc:	f8df 23d0 	ldr.w	r2, [pc, #976]	; 8000690 <.text_21>
 80002c0:	600a      	str	r2, [r1, #0]
 80002c2:	6808      	ldr	r0, [r1, #0]
 80002c4:	f8df 13cc 	ldr.w	r1, [pc, #972]	; 8000694 <.text_22>
 80002c8:	4288      	cmp	r0, r1
 80002ca:	d000      	beq.n	80002ce <ai_platform_runtime_get_version+0x2c>
 80002cc:	e7fe      	b.n	80002cc <ai_platform_runtime_get_version+0x2a>
 80002ce:	f20f 32dc 	addw	r2, pc, #988	; 0x3dc
 80002d2:	6810      	ldr	r0, [r2, #0]
 80002d4:	4770      	bx	lr

080002d6 <ai_platform_api_get_version>:
 80002d6:	f8df 03b0 	ldr.w	r0, [pc, #944]	; 8000688 <.text_19>
 80002da:	6801      	ldr	r1, [r0, #0]
 80002dc:	0849      	lsrs	r1, r1, #1
 80002de:	0049      	lsls	r1, r1, #1
 80002e0:	6001      	str	r1, [r0, #0]
 80002e2:	2001      	movs	r0, #1
 80002e4:	f8df 13a4 	ldr.w	r1, [pc, #932]	; 800068c <.text_20>
 80002e8:	6088      	str	r0, [r1, #8]
 80002ea:	6888      	ldr	r0, [r1, #8]
 80002ec:	2800      	cmp	r0, #0
 80002ee:	d1fc      	bne.n	80002ea <ai_platform_api_get_version+0x14>
 80002f0:	f8df 239c 	ldr.w	r2, [pc, #924]	; 8000690 <.text_21>
 80002f4:	600a      	str	r2, [r1, #0]
 80002f6:	6808      	ldr	r0, [r1, #0]
 80002f8:	f8df 1398 	ldr.w	r1, [pc, #920]	; 8000694 <.text_22>
 80002fc:	4288      	cmp	r0, r1
 80002fe:	d000      	beq.n	8000302 <ai_platform_api_get_version+0x2c>
 8000300:	e7fe      	b.n	8000300 <ai_platform_api_get_version+0x2a>
 8000302:	f20f 32ac 	addw	r2, pc, #940	; 0x3ac
 8000306:	6810      	ldr	r0, [r2, #0]
 8000308:	4770      	bx	lr

0800030a <ai_platform_interface_api_get_version>:
 800030a:	f8df 037c 	ldr.w	r0, [pc, #892]	; 8000688 <.text_19>
 800030e:	6801      	ldr	r1, [r0, #0]
 8000310:	0849      	lsrs	r1, r1, #1
 8000312:	0049      	lsls	r1, r1, #1
 8000314:	6001      	str	r1, [r0, #0]
 8000316:	2001      	movs	r0, #1
 8000318:	f8df 1370 	ldr.w	r1, [pc, #880]	; 800068c <.text_20>
 800031c:	6088      	str	r0, [r1, #8]
 800031e:	6888      	ldr	r0, [r1, #8]
 8000320:	2800      	cmp	r0, #0
 8000322:	d1fc      	bne.n	800031e <ai_platform_interface_api_get_version+0x14>
 8000324:	f8df 2368 	ldr.w	r2, [pc, #872]	; 8000690 <.text_21>
 8000328:	600a      	str	r2, [r1, #0]
 800032a:	6808      	ldr	r0, [r1, #0]
 800032c:	f8df 1364 	ldr.w	r1, [pc, #868]	; 8000694 <.text_22>
 8000330:	4288      	cmp	r0, r1
 8000332:	d000      	beq.n	8000336 <ai_platform_interface_api_get_version+0x2c>
 8000334:	e7fe      	b.n	8000334 <ai_platform_interface_api_get_version+0x2a>
 8000336:	f20f 327c 	addw	r2, pc, #892	; 0x37c
 800033a:	6810      	ldr	r0, [r2, #0]
 800033c:	4770      	bx	lr

0800033e <ai_platform_context_acquire>:
 800033e:	b120      	cbz	r0, 800034a <ai_platform_context_acquire+0xc>
 8000340:	6801      	ldr	r1, [r0, #0]
 8000342:	f8df 2354 	ldr.w	r2, [pc, #852]	; 8000698 <.text_23>
 8000346:	4291      	cmp	r1, r2
 8000348:	d000      	beq.n	800034c <ai_platform_context_acquire+0xe>
 800034a:	2000      	movs	r0, #0
 800034c:	f8df 1338 	ldr.w	r1, [pc, #824]	; 8000688 <.text_19>
 8000350:	680a      	ldr	r2, [r1, #0]
 8000352:	0852      	lsrs	r2, r2, #1
 8000354:	0052      	lsls	r2, r2, #1
 8000356:	600a      	str	r2, [r1, #0]
 8000358:	2101      	movs	r1, #1
 800035a:	f8df 2330 	ldr.w	r2, [pc, #816]	; 800068c <.text_20>
 800035e:	6091      	str	r1, [r2, #8]
 8000360:	6891      	ldr	r1, [r2, #8]
 8000362:	2900      	cmp	r1, #0
 8000364:	d1fc      	bne.n	8000360 <ai_platform_context_acquire+0x22>
 8000366:	f8df 3328 	ldr.w	r3, [pc, #808]	; 8000690 <.text_21>
 800036a:	6013      	str	r3, [r2, #0]
 800036c:	6811      	ldr	r1, [r2, #0]
 800036e:	f8df 2324 	ldr.w	r2, [pc, #804]	; 8000694 <.text_22>
 8000372:	4291      	cmp	r1, r2
 8000374:	d000      	beq.n	8000378 <ai_platform_context_acquire+0x3a>
 8000376:	e7fe      	b.n	8000376 <ai_platform_context_acquire+0x38>
 8000378:	4770      	bx	lr

0800037a <ai_platform_context_release>:
 800037a:	f8df 131c 	ldr.w	r1, [pc, #796]	; 8000698 <.text_23>
 800037e:	6001      	str	r1, [r0, #0]
 8000380:	4770      	bx	lr

08000382 <ai_copy_buffer_fake_src>:
 8000382:	4608      	mov	r0, r1
 8000384:	4770      	bx	lr

08000386 <ai_copy_buffer_fake_dst>:
 8000386:	4770      	bx	lr

08000388 <ai_platform_network_get_error>:
 8000388:	b120      	cbz	r0, 8000394 <ai_platform_network_get_error+0xc>
 800038a:	6801      	ldr	r1, [r0, #0]
 800038c:	f8df 2308 	ldr.w	r2, [pc, #776]	; 8000698 <.text_23>
 8000390:	4291      	cmp	r1, r2
 8000392:	d000      	beq.n	8000396 <ai_platform_network_get_error+0xe>
 8000394:	2000      	movs	r0, #0
 8000396:	49bc      	ldr	r1, [pc, #752]	; (8000688 <.text_19>)
 8000398:	680a      	ldr	r2, [r1, #0]
 800039a:	0852      	lsrs	r2, r2, #1
 800039c:	0052      	lsls	r2, r2, #1
 800039e:	600a      	str	r2, [r1, #0]
 80003a0:	2101      	movs	r1, #1
 80003a2:	4aba      	ldr	r2, [pc, #744]	; (800068c <.text_20>)
 80003a4:	6091      	str	r1, [r2, #8]
 80003a6:	6891      	ldr	r1, [r2, #8]
 80003a8:	2900      	cmp	r1, #0
 80003aa:	d1fc      	bne.n	80003a6 <ai_platform_network_get_error+0x1e>
 80003ac:	4bb8      	ldr	r3, [pc, #736]	; (8000690 <.text_21>)
 80003ae:	6013      	str	r3, [r2, #0]
 80003b0:	6811      	ldr	r1, [r2, #0]
 80003b2:	4ab8      	ldr	r2, [pc, #736]	; (8000694 <.text_22>)
 80003b4:	4291      	cmp	r1, r2
 80003b6:	d000      	beq.n	80003ba <ai_platform_network_get_error+0x32>
 80003b8:	e7fe      	b.n	80003b8 <ai_platform_network_get_error+0x30>
 80003ba:	2800      	cmp	r0, #0
 80003bc:	bf1c      	itt	ne
 80003be:	300c      	addne	r0, #12
 80003c0:	f000 b98a 	bne.w	80006d8 <core_get_error>
 80003c4:	f20f 3000 	addw	r0, pc, #768	; 0x300
 80003c8:	6800      	ldr	r0, [r0, #0]
 80003ca:	4770      	bx	lr

080003cc <ai_platform_network_set_error>:
 80003cc:	2800      	cmp	r0, #0
 80003ce:	bf1c      	itt	ne
 80003d0:	300c      	addne	r0, #12
 80003d2:	f000 b986 	bne.w	80006e2 <core_set_error>
 80003d6:	4770      	bx	lr

080003d8 <ai_platform_network_create>:
 80003d8:	b570      	push	{r4, r5, r6, lr}
 80003da:	9d04      	ldr	r5, [sp, #16]
 80003dc:	4604      	mov	r4, r0
 80003de:	9805      	ldr	r0, [sp, #20]
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	042d      	lsls	r5, r5, #16
 80003e4:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 80003e8:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 80003ec:	f20f 20dc 	addw	r0, pc, #732	; 0x2dc
 80003f0:	6806      	ldr	r6, [r0, #0]
 80003f2:	48a5      	ldr	r0, [pc, #660]	; (8000688 <.text_19>)
 80003f4:	6801      	ldr	r1, [r0, #0]
 80003f6:	0849      	lsrs	r1, r1, #1
 80003f8:	0049      	lsls	r1, r1, #1
 80003fa:	6001      	str	r1, [r0, #0]
 80003fc:	2001      	movs	r0, #1
 80003fe:	49a3      	ldr	r1, [pc, #652]	; (800068c <.text_20>)
 8000400:	6088      	str	r0, [r1, #8]
 8000402:	6888      	ldr	r0, [r1, #8]
 8000404:	2800      	cmp	r0, #0
 8000406:	d1fc      	bne.n	8000402 <ai_platform_network_create+0x2a>
 8000408:	4ba1      	ldr	r3, [pc, #644]	; (8000690 <.text_21>)
 800040a:	600b      	str	r3, [r1, #0]
 800040c:	6808      	ldr	r0, [r1, #0]
 800040e:	49a1      	ldr	r1, [pc, #644]	; (8000694 <.text_22>)
 8000410:	4288      	cmp	r0, r1
 8000412:	d000      	beq.n	8000416 <ai_platform_network_create+0x3e>
 8000414:	e7fe      	b.n	8000414 <ai_platform_network_create+0x3c>
 8000416:	b91c      	cbnz	r4, 8000420 <ai_platform_network_create+0x48>
 8000418:	f20f 20b4 	addw	r0, pc, #692	; 0x2b4
 800041c:	6800      	ldr	r0, [r0, #0]
 800041e:	bd70      	pop	{r4, r5, r6, pc}
 8000420:	499d      	ldr	r1, [pc, #628]	; (8000698 <.text_23>)
 8000422:	6011      	str	r1, [r2, #0]
 8000424:	6022      	str	r2, [r4, #0]
 8000426:	f000 f955 	bl	80006d4 <core_init>
 800042a:	b910      	cbnz	r0, 8000432 <ai_platform_network_create+0x5a>
 800042c:	f20f 2088 	addw	r0, pc, #648	; 0x288
 8000430:	e00b      	b.n	800044a <ai_platform_network_create+0x72>
 8000432:	499a      	ldr	r1, [pc, #616]	; (800069c <.text_24>)
 8000434:	428d      	cmp	r5, r1
 8000436:	bf28      	it	cs
 8000438:	f20f 2080 	addwcs	r0, pc, #640	; 0x280
 800043c:	d205      	bcs.n	800044a <ai_platform_network_create+0x72>
 800043e:	f20f 2080 	addw	r0, pc, #640	; 0x280
 8000442:	f000 f963 	bl	800070c <ai_check_custom_types>
 8000446:	b918      	cbnz	r0, 8000450 <ai_platform_network_create+0x78>
 8000448:	a09e      	add	r0, pc, #632	; (adr r0, 80006c4 <.text_34>)
 800044a:	6806      	ldr	r6, [r0, #0]
 800044c:	2100      	movs	r1, #0
 800044e:	6021      	str	r1, [r4, #0]
 8000450:	4630      	mov	r0, r6
 8000452:	bd70      	pop	{r4, r5, r6, pc}

08000454 <ai_platform_network_destroy>:
 8000454:	b128      	cbz	r0, 8000462 <ai_platform_network_destroy+0xe>
 8000456:	6801      	ldr	r1, [r0, #0]
 8000458:	4a8f      	ldr	r2, [pc, #572]	; (8000698 <.text_23>)
 800045a:	4291      	cmp	r1, r2
 800045c:	bf08      	it	eq
 800045e:	4602      	moveq	r2, r0
 8000460:	d000      	beq.n	8000464 <ai_platform_network_destroy+0x10>
 8000462:	2200      	movs	r2, #0
 8000464:	4988      	ldr	r1, [pc, #544]	; (8000688 <.text_19>)
 8000466:	680b      	ldr	r3, [r1, #0]
 8000468:	085b      	lsrs	r3, r3, #1
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	600b      	str	r3, [r1, #0]
 800046e:	2101      	movs	r1, #1
 8000470:	4b86      	ldr	r3, [pc, #536]	; (800068c <.text_20>)
 8000472:	6099      	str	r1, [r3, #8]
 8000474:	6899      	ldr	r1, [r3, #8]
 8000476:	2900      	cmp	r1, #0
 8000478:	d1fc      	bne.n	8000474 <ai_platform_network_destroy+0x20>
 800047a:	f8df c214 	ldr.w	ip, [pc, #532]	; 8000690 <.text_21>
 800047e:	f8c3 c000 	str.w	ip, [r3]
 8000482:	6819      	ldr	r1, [r3, #0]
 8000484:	4b83      	ldr	r3, [pc, #524]	; (8000694 <.text_22>)
 8000486:	4299      	cmp	r1, r3
 8000488:	d000      	beq.n	800048c <ai_platform_network_destroy+0x38>
 800048a:	e7fe      	b.n	800048a <ai_platform_network_destroy+0x36>
 800048c:	b102      	cbz	r2, 8000490 <ai_platform_network_destroy+0x3c>
 800048e:	2000      	movs	r0, #0
 8000490:	4770      	bx	lr

08000492 <ai_platform_network_init>:
 8000492:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000496:	b081      	sub	sp, #4
 8000498:	460a      	mov	r2, r1
 800049a:	b118      	cbz	r0, 80004a4 <ai_platform_network_init+0x12>
 800049c:	6801      	ldr	r1, [r0, #0]
 800049e:	4b7e      	ldr	r3, [pc, #504]	; (8000698 <.text_23>)
 80004a0:	4299      	cmp	r1, r3
 80004a2:	d000      	beq.n	80004a6 <ai_platform_network_init+0x14>
 80004a4:	2000      	movs	r0, #0
 80004a6:	4978      	ldr	r1, [pc, #480]	; (8000688 <.text_19>)
 80004a8:	680b      	ldr	r3, [r1, #0]
 80004aa:	085b      	lsrs	r3, r3, #1
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	600b      	str	r3, [r1, #0]
 80004b0:	2101      	movs	r1, #1
 80004b2:	4b76      	ldr	r3, [pc, #472]	; (800068c <.text_20>)
 80004b4:	6099      	str	r1, [r3, #8]
 80004b6:	6899      	ldr	r1, [r3, #8]
 80004b8:	2900      	cmp	r1, #0
 80004ba:	d1fc      	bne.n	80004b6 <ai_platform_network_init+0x24>
 80004bc:	4c74      	ldr	r4, [pc, #464]	; (8000690 <.text_21>)
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	6819      	ldr	r1, [r3, #0]
 80004c2:	4b74      	ldr	r3, [pc, #464]	; (8000694 <.text_22>)
 80004c4:	4299      	cmp	r1, r3
 80004c6:	d000      	beq.n	80004ca <ai_platform_network_init+0x38>
 80004c8:	e7fe      	b.n	80004c8 <ai_platform_network_init+0x36>
 80004ca:	b340      	cbz	r0, 800051e <ai_platform_network_init+0x8c>
 80004cc:	b90a      	cbnz	r2, 80004d2 <ai_platform_network_init+0x40>
 80004ce:	2211      	movs	r2, #17
 80004d0:	e006      	b.n	80004e0 <ai_platform_network_init+0x4e>
 80004d2:	69d1      	ldr	r1, [r2, #28]
 80004d4:	b909      	cbnz	r1, 80004da <ai_platform_network_init+0x48>
 80004d6:	2213      	movs	r2, #19
 80004d8:	e002      	b.n	80004e0 <ai_platform_network_init+0x4e>
 80004da:	68d1      	ldr	r1, [r2, #12]
 80004dc:	b941      	cbnz	r1, 80004f0 <ai_platform_network_init+0x5e>
 80004de:	2212      	movs	r2, #18
 80004e0:	2110      	movs	r1, #16
 80004e2:	300c      	adds	r0, #12
 80004e4:	f000 f8fd 	bl	80006e2 <core_set_error>
 80004e8:	2000      	movs	r0, #0
 80004ea:	b001      	add	sp, #4
 80004ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80004f0:	ca78      	ldmia	r2!, {r3, r4, r5, r6}
 80004f2:	f100 0114 	add.w	r1, r0, #20
 80004f6:	f100 0724 	add.w	r7, r0, #36	; 0x24
 80004fa:	e881 0078 	stmia.w	r1, {r3, r4, r5, r6}
 80004fe:	e892 5300 	ldmia.w	r2, {r8, r9, ip, lr}
 8000502:	e887 5300 	stmia.w	r7, {r8, r9, ip, lr}
 8000506:	2103      	movs	r1, #3
 8000508:	6081      	str	r1, [r0, #8]
 800050a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800050c:	b13a      	cbz	r2, 800051e <ai_platform_network_init+0x8c>
 800050e:	6891      	ldr	r1, [r2, #8]
 8000510:	6050      	str	r0, [r2, #4]
 8000512:	428a      	cmp	r2, r1
 8000514:	bf18      	it	ne
 8000516:	2900      	cmpne	r1, #0
 8000518:	bf18      	it	ne
 800051a:	460a      	movne	r2, r1
 800051c:	d1f7      	bne.n	800050e <ai_platform_network_init+0x7c>
 800051e:	b001      	add	sp, #4
 8000520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000524 <.text_17>:
 8000524:	00000000 	.word	0x00000000

08000528 <ai_platform_network_process>:
 8000528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800052c:	b083      	sub	sp, #12
 800052e:	b128      	cbz	r0, 800053c <ai_platform_network_process+0x14>
 8000530:	6803      	ldr	r3, [r0, #0]
 8000532:	4c59      	ldr	r4, [pc, #356]	; (8000698 <.text_23>)
 8000534:	42a3      	cmp	r3, r4
 8000536:	bf08      	it	eq
 8000538:	4605      	moveq	r5, r0
 800053a:	d000      	beq.n	800053e <ai_platform_network_process+0x16>
 800053c:	2500      	movs	r5, #0
 800053e:	4852      	ldr	r0, [pc, #328]	; (8000688 <.text_19>)
 8000540:	6803      	ldr	r3, [r0, #0]
 8000542:	085b      	lsrs	r3, r3, #1
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	6003      	str	r3, [r0, #0]
 8000548:	2001      	movs	r0, #1
 800054a:	4b50      	ldr	r3, [pc, #320]	; (800068c <.text_20>)
 800054c:	6098      	str	r0, [r3, #8]
 800054e:	6898      	ldr	r0, [r3, #8]
 8000550:	2800      	cmp	r0, #0
 8000552:	d1fc      	bne.n	800054e <ai_platform_network_process+0x26>
 8000554:	4c4e      	ldr	r4, [pc, #312]	; (8000690 <.text_21>)
 8000556:	601c      	str	r4, [r3, #0]
 8000558:	6818      	ldr	r0, [r3, #0]
 800055a:	4b4e      	ldr	r3, [pc, #312]	; (8000694 <.text_22>)
 800055c:	4298      	cmp	r0, r3
 800055e:	d000      	beq.n	8000562 <ai_platform_network_process+0x3a>
 8000560:	e7fe      	b.n	8000560 <ai_platform_network_process+0x38>
 8000562:	2d00      	cmp	r5, #0
 8000564:	d048      	beq.n	80005f8 <ai_platform_network_process+0xd0>
 8000566:	68ab      	ldr	r3, [r5, #8]
 8000568:	f003 0003 	and.w	r0, r3, #3
 800056c:	2803      	cmp	r0, #3
 800056e:	d002      	beq.n	8000576 <ai_platform_network_process+0x4e>
 8000570:	2230      	movs	r2, #48	; 0x30
 8000572:	2111      	movs	r1, #17
 8000574:	e03c      	b.n	80005f0 <ai_platform_network_process+0xc8>
 8000576:	000f      	movs	r7, r1
 8000578:	bf1c      	itt	ne
 800057a:	68f8      	ldrne	r0, [r7, #12]
 800057c:	2800      	cmpne	r0, #0
 800057e:	d035      	beq.n	80005ec <ai_platform_network_process+0xc4>
 8000580:	8878      	ldrh	r0, [r7, #2]
 8000582:	b908      	cbnz	r0, 8000588 <ai_platform_network_process+0x60>
 8000584:	2221      	movs	r2, #33	; 0x21
 8000586:	e032      	b.n	80005ee <ai_platform_network_process+0xc6>
 8000588:	0014      	movs	r4, r2
 800058a:	d00b      	beq.n	80005a4 <ai_platform_network_process+0x7c>
 800058c:	68e1      	ldr	r1, [r4, #12]
 800058e:	b351      	cbz	r1, 80005e6 <ai_platform_network_process+0xbe>
 8000590:	8861      	ldrh	r1, [r4, #2]
 8000592:	b911      	cbnz	r1, 800059a <ai_platform_network_process+0x72>
 8000594:	2221      	movs	r2, #33	; 0x21
 8000596:	2113      	movs	r1, #19
 8000598:	e02a      	b.n	80005f0 <ai_platform_network_process+0xc8>
 800059a:	4288      	cmp	r0, r1
 800059c:	d002      	beq.n	80005a4 <ai_platform_network_process+0x7c>
 800059e:	2221      	movs	r2, #33	; 0x21
 80005a0:	2102      	movs	r1, #2
 80005a2:	e025      	b.n	80005f0 <ai_platform_network_process+0xc8>
 80005a4:	05d8      	lsls	r0, r3, #23
 80005a6:	bf4c      	ite	mi
 80005a8:	2002      	movmi	r0, #2
 80005aa:	2000      	movpl	r0, #0
 80005ac:	0a59      	lsrs	r1, r3, #9
 80005ae:	f001 0101 	and.w	r1, r1, #1
 80005b2:	ea41 0800 	orr.w	r8, r1, r0
 80005b6:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80005b8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80005ba:	6806      	ldr	r6, [r0, #0]
 80005bc:	6808      	ldr	r0, [r1, #0]
 80005be:	9000      	str	r0, [sp, #0]
 80005c0:	6871      	ldr	r1, [r6, #4]
 80005c2:	6830      	ldr	r0, [r6, #0]
 80005c4:	f7ff fe24 	bl	8000210 <ai_array_get_byte_size>
 80005c8:	9001      	str	r0, [sp, #4]
 80005ca:	9800      	ldr	r0, [sp, #0]
 80005cc:	6841      	ldr	r1, [r0, #4]
 80005ce:	6800      	ldr	r0, [r0, #0]
 80005d0:	f7ff fe1e 	bl	8000210 <ai_array_get_byte_size>
 80005d4:	68f9      	ldr	r1, [r7, #12]
 80005d6:	2c00      	cmp	r4, #0
 80005d8:	4602      	mov	r2, r0
 80005da:	bf14      	ite	ne
 80005dc:	f8d4 b00c 	ldrne.w	fp, [r4, #12]
 80005e0:	f04f 0b00 	moveq.w	fp, #0
 80005e4:	e00c      	b.n	8000600 <ai_platform_network_process+0xd8>
 80005e6:	2217      	movs	r2, #23
 80005e8:	2113      	movs	r1, #19
 80005ea:	e001      	b.n	80005f0 <ai_platform_network_process+0xc8>
 80005ec:	2217      	movs	r2, #23
 80005ee:	2112      	movs	r1, #18
 80005f0:	f105 000c 	add.w	r0, r5, #12
 80005f4:	f000 f875 	bl	80006e2 <core_set_error>
 80005f8:	2000      	movs	r0, #0
 80005fa:	b003      	add	sp, #12
 80005fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000600:	f018 0002 	ands.w	r0, r8, #2
 8000604:	bf14      	ite	ne
 8000606:	f8df 9098 	ldrne.w	r9, [pc, #152]	; 80006a0 <.text_25>
 800060a:	f8df 9098 	ldreq.w	r9, [pc, #152]	; 80006a4 <.text_26>
 800060e:	ea5f 73c8 	movs.w	r3, r8, lsl #31
 8000612:	bf4c      	ite	mi
 8000614:	f8df a088 	ldrmi.w	sl, [pc, #136]	; 80006a0 <.text_25>
 8000618:	f8df a08c 	ldrpl.w	sl, [pc, #140]	; 80006a8 <.text_27>
 800061c:	887b      	ldrh	r3, [r7, #2]
 800061e:	822b      	strh	r3, [r5, #16]
 8000620:	2700      	movs	r7, #0
 8000622:	826f      	strh	r7, [r5, #18]
 8000624:	b908      	cbnz	r0, 800062a <ai_platform_network_process+0x102>
 8000626:	60b1      	str	r1, [r6, #8]
 8000628:	60f1      	str	r1, [r6, #12]
 800062a:	b144      	cbz	r4, 800063e <ai_platform_network_process+0x116>
 800062c:	ea5f 70c8 	movs.w	r0, r8, lsl #31
 8000630:	d405      	bmi.n	800063e <ai_platform_network_process+0x116>
 8000632:	9b00      	ldr	r3, [sp, #0]
 8000634:	f8c3 b008 	str.w	fp, [r3, #8]
 8000638:	9800      	ldr	r0, [sp, #0]
 800063a:	f8c0 b00c 	str.w	fp, [r0, #12]
 800063e:	8a68      	ldrh	r0, [r5, #18]
 8000640:	8a2b      	ldrh	r3, [r5, #16]
 8000642:	4298      	cmp	r0, r3
 8000644:	d21c      	bcs.n	8000680 <ai_platform_network_process+0x158>
 8000646:	462c      	mov	r4, r5
 8000648:	4635      	mov	r5, r6
 800064a:	9e01      	ldr	r6, [sp, #4]
 800064c:	4617      	mov	r7, r2
 800064e:	4688      	mov	r8, r1
 8000650:	68a8      	ldr	r0, [r5, #8]
 8000652:	4632      	mov	r2, r6
 8000654:	4641      	mov	r1, r8
 8000656:	47c8      	blx	r9
 8000658:	60a8      	str	r0, [r5, #8]
 800065a:	44b0      	add	r8, r6
 800065c:	4620      	mov	r0, r4
 800065e:	f000 f8d7 	bl	8000810 <ai_layers_forward_all>
 8000662:	9800      	ldr	r0, [sp, #0]
 8000664:	6881      	ldr	r1, [r0, #8]
 8000666:	463a      	mov	r2, r7
 8000668:	4658      	mov	r0, fp
 800066a:	47d0      	blx	sl
 800066c:	eb00 0b07 	add.w	fp, r0, r7
 8000670:	8a60      	ldrh	r0, [r4, #18]
 8000672:	8a21      	ldrh	r1, [r4, #16]
 8000674:	1c40      	adds	r0, r0, #1
 8000676:	8260      	strh	r0, [r4, #18]
 8000678:	b280      	uxth	r0, r0
 800067a:	4288      	cmp	r0, r1
 800067c:	d3e8      	bcc.n	8000650 <ai_platform_network_process+0x128>
 800067e:	4625      	mov	r5, r4
 8000680:	8a68      	ldrh	r0, [r5, #18]
 8000682:	b003      	add	sp, #12
 8000684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000688 <.text_19>:
 8000688:	e0002000 	.word	0xe0002000

0800068c <.text_20>:
 800068c:	40023000 	.word	0x40023000

08000690 <.text_21>:
 8000690:	f407a5c2 	.word	0xf407a5c2

08000694 <.text_22>:
 8000694:	b5e8b5cd 	.word	0xb5e8b5cd

08000698 <.text_23>:
 8000698:	a1c00100 	.word	0xa1c00100

0800069c <.text_24>:
 800069c:	01010001 	.word	0x01010001

080006a0 <.text_25>:
 80006a0:	08000267 	.word	0x08000267

080006a4 <.text_26>:
 80006a4:	08000383 	.word	0x08000383

080006a8 <.text_27>:
 80006a8:	08000387 	.word	0x08000387

080006ac <.text_28>:
 80006ac:	00000303 	.word	0x00000303

080006b0 <.text_29>:
 80006b0:	00000001 	.word	0x00000001

080006b4 <.text_30>:
 80006b4:	00000101 	.word	0x00000101

080006b8 <.text_31>:
 80006b8:	00001030 	.word	0x00001030

080006bc <.text_32>:
 80006bc:	00001001 	.word	0x00001001

080006c0 <_platform_network_sanity_check{8}::signatures>:
 80006c0:	84048403                                ....

080006c4 <.text_34>:
 80006c4:	00001002 	.word	0x00001002

080006c8 <.text_35>:
 80006c8:	00001010 	.word	0x00001010

080006cc <.text_36>:
 80006cc:	00000000 	.word	0x00000000

080006d0 <.text_37>:
 80006d0:	00001010 	.word	0x00001010

080006d4 <core_init>:
 80006d4:	2001      	movs	r0, #1
 80006d6:	4770      	bx	lr

080006d8 <core_get_error>:
 80006d8:	4601      	mov	r1, r0
 80006da:	2200      	movs	r2, #0
 80006dc:	6808      	ldr	r0, [r1, #0]
 80006de:	600a      	str	r2, [r1, #0]
 80006e0:	4770      	bx	lr

080006e2 <core_set_error>:
 80006e2:	7803      	ldrb	r3, [r0, #0]
 80006e4:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 80006e8:	d104      	bne.n	80006f4 <core_set_error+0x12>
 80006ea:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80006ee:	6001      	str	r1, [r0, #0]
 80006f0:	2001      	movs	r0, #1
 80006f2:	4770      	bx	lr
 80006f4:	2000      	movs	r0, #0
 80006f6:	4770      	bx	lr

080006f8 <ai_layers_forward_layer>:
 80006f8:	b510      	push	{r4, lr}
 80006fa:	4604      	mov	r4, r0
 80006fc:	68e1      	ldr	r1, [r4, #12]
 80006fe:	4788      	blx	r1
 8000700:	68a0      	ldr	r0, [r4, #8]
 8000702:	42a0      	cmp	r0, r4
 8000704:	bf08      	it	eq
 8000706:	2000      	moveq	r0, #0
 8000708:	bd10      	pop	{r4, pc}
	...

0800070c <ai_check_custom_types>:
 800070c:	b500      	push	{lr}
 800070e:	b081      	sub	sp, #4
 8000710:	b160      	cbz	r0, 800072c <ai_check_custom_types+0x20>
 8000712:	7801      	ldrb	r1, [r0, #0]
 8000714:	2903      	cmp	r1, #3
 8000716:	d109      	bne.n	800072c <ai_check_custom_types+0x20>
 8000718:	f05f 0204 	movs.w	r2, #4
 800071c:	a163      	add	r1, pc, #396	; (adr r1, 80008ac <ai_check_custom_types::ref_signatures>)
 800071e:	f005 f8cb 	bl	80058b8 <memcmp>
 8000722:	1e40      	subs	r0, r0, #1
 8000724:	4180      	sbcs	r0, r0
 8000726:	0fc0      	lsrs	r0, r0, #31
 8000728:	b001      	add	sp, #4
 800072a:	bd00      	pop	{pc}
 800072c:	2000      	movs	r0, #0
 800072e:	b001      	add	sp, #4
 8000730:	bd00      	pop	{pc}
	...

08000734 <ai_layer_type_name>:
 8000734:	f242 7211 	movw	r2, #10001	; 0x2711
 8000738:	1a81      	subs	r1, r0, r2
 800073a:	2901      	cmp	r1, #1
 800073c:	bf84      	itt	hi
 800073e:	1ec9      	subhi	r1, r1, #3
 8000740:	290d      	cmphi	r1, #13
 8000742:	d901      	bls.n	8000748 <ai_layer_type_name+0x14>
 8000744:	390f      	subs	r1, #15
 8000746:	d145      	bne.n	80007d4 <ai_layer_type_name+0xa0>
 8000748:	1a80      	subs	r0, r0, r2
 800074a:	d021      	beq.n	8000790 <ai_layer_type_name+0x5c>
 800074c:	1e40      	subs	r0, r0, #1
 800074e:	d021      	beq.n	8000794 <ai_layer_type_name+0x60>
 8000750:	1e80      	subs	r0, r0, #2
 8000752:	d021      	beq.n	8000798 <ai_layer_type_name+0x64>
 8000754:	1e40      	subs	r0, r0, #1
 8000756:	d021      	beq.n	800079c <ai_layer_type_name+0x68>
 8000758:	1e40      	subs	r0, r0, #1
 800075a:	d021      	beq.n	80007a0 <ai_layer_type_name+0x6c>
 800075c:	1e40      	subs	r0, r0, #1
 800075e:	d021      	beq.n	80007a4 <ai_layer_type_name+0x70>
 8000760:	1e40      	subs	r0, r0, #1
 8000762:	d021      	beq.n	80007a8 <ai_layer_type_name+0x74>
 8000764:	1e40      	subs	r0, r0, #1
 8000766:	d021      	beq.n	80007ac <ai_layer_type_name+0x78>
 8000768:	1e40      	subs	r0, r0, #1
 800076a:	d021      	beq.n	80007b0 <ai_layer_type_name+0x7c>
 800076c:	1e40      	subs	r0, r0, #1
 800076e:	d021      	beq.n	80007b4 <ai_layer_type_name+0x80>
 8000770:	1e40      	subs	r0, r0, #1
 8000772:	d021      	beq.n	80007b8 <ai_layer_type_name+0x84>
 8000774:	1e40      	subs	r0, r0, #1
 8000776:	d021      	beq.n	80007bc <ai_layer_type_name+0x88>
 8000778:	1e40      	subs	r0, r0, #1
 800077a:	d021      	beq.n	80007c0 <ai_layer_type_name+0x8c>
 800077c:	1e40      	subs	r0, r0, #1
 800077e:	d021      	beq.n	80007c4 <ai_layer_type_name+0x90>
 8000780:	1e40      	subs	r0, r0, #1
 8000782:	d021      	beq.n	80007c8 <ai_layer_type_name+0x94>
 8000784:	1e40      	subs	r0, r0, #1
 8000786:	d021      	beq.n	80007cc <ai_layer_type_name+0x98>
 8000788:	1e80      	subs	r0, r0, #2
 800078a:	d021      	beq.n	80007d0 <ai_layer_type_name+0x9c>
 800078c:	a012      	add	r0, pc, #72	; (adr r0, 80007d8 <.text_5>)
 800078e:	4770      	bx	lr
 8000790:	a012      	add	r0, pc, #72	; (adr r0, 80007dc <.text_6>)
 8000792:	4770      	bx	lr
 8000794:	a012      	add	r0, pc, #72	; (adr r0, 80007e0 <.text_7>)
 8000796:	4770      	bx	lr
 8000798:	a027      	add	r0, pc, #156	; (adr r0, 8000838 <.text_14>)
 800079a:	4770      	bx	lr
 800079c:	a028      	add	r0, pc, #160	; (adr r0, 8000840 <.text_15>)
 800079e:	4770      	bx	lr
 80007a0:	a010      	add	r0, pc, #64	; (adr r0, 80007e4 <.text_8>)
 80007a2:	4770      	bx	lr
 80007a4:	a010      	add	r0, pc, #64	; (adr r0, 80007e8 <.text_9>)
 80007a6:	4770      	bx	lr
 80007a8:	a027      	add	r0, pc, #156	; (adr r0, 8000848 <.text_16>)
 80007aa:	4770      	bx	lr
 80007ac:	a00f      	add	r0, pc, #60	; (adr r0, 80007ec <.text_10>)
 80007ae:	4770      	bx	lr
 80007b0:	a027      	add	r0, pc, #156	; (adr r0, 8000850 <.text_17>)
 80007b2:	4770      	bx	lr
 80007b4:	a028      	add	r0, pc, #160	; (adr r0, 8000858 <.text_18>)
 80007b6:	4770      	bx	lr
 80007b8:	a02c      	add	r0, pc, #176	; (adr r0, 800086c <.text_19>)
 80007ba:	4770      	bx	lr
 80007bc:	a02d      	add	r0, pc, #180	; (adr r0, 8000874 <.text_20>)
 80007be:	4770      	bx	lr
 80007c0:	a00b      	add	r0, pc, #44	; (adr r0, 80007f0 <.text_11>)
 80007c2:	4770      	bx	lr
 80007c4:	a02d      	add	r0, pc, #180	; (adr r0, 800087c <.text_21>)
 80007c6:	4770      	bx	lr
 80007c8:	a02e      	add	r0, pc, #184	; (adr r0, 8000884 <.text_22>)
 80007ca:	4770      	bx	lr
 80007cc:	a030      	add	r0, pc, #192	; (adr r0, 8000890 <.text_23>)
 80007ce:	4770      	bx	lr
 80007d0:	a034      	add	r0, pc, #208	; (adr r0, 80008a4 <.text_24>)
 80007d2:	4770      	bx	lr
 80007d4:	a000      	add	r0, pc, #0	; (adr r0, 80007d8 <.text_5>)
 80007d6:	4770      	bx	lr

080007d8 <.text_5>:
 80007d8:	00000000 	.word	0x00000000

080007dc <.text_6>:
 80007dc:	00444441 	.word	0x00444441

080007e0 <.text_7>:
 80007e0:	00004e42 	.word	0x00004e42

080007e4 <.text_8>:
 80007e4:	00555247 	.word	0x00555247

080007e8 <.text_9>:
 80007e8:	004e524c 	.word	0x004e524c

080007ec <.text_10>:
 80007ec:	00004c4e 	.word	0x00004c4e

080007f0 <.text_11>:
 80007f0:	00004d53 	.word	0x00004d53

080007f4 <ai_layer_type_is_valid>:
 80007f4:	f242 7111 	movw	r1, #10001	; 0x2711
 80007f8:	1a40      	subs	r0, r0, r1
 80007fa:	2801      	cmp	r0, #1
 80007fc:	bf84      	itt	hi
 80007fe:	1ec0      	subhi	r0, r0, #3
 8000800:	280d      	cmphi	r0, #13
 8000802:	d901      	bls.n	8000808 <ai_layer_type_is_valid+0x14>
 8000804:	380f      	subs	r0, #15
 8000806:	d101      	bne.n	800080c <ai_layer_type_is_valid+0x18>
 8000808:	2001      	movs	r0, #1
 800080a:	4770      	bx	lr
 800080c:	2000      	movs	r0, #0
 800080e:	4770      	bx	lr

08000810 <ai_layers_forward_all>:
 8000810:	b530      	push	{r4, r5, lr}
 8000812:	4604      	mov	r4, r0
 8000814:	b081      	sub	sp, #4
 8000816:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8000818:	b158      	cbz	r0, 8000832 <ai_layers_forward_all+0x22>
 800081a:	6420      	str	r0, [r4, #64]	; 0x40
 800081c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800081e:	68e9      	ldr	r1, [r5, #12]
 8000820:	4628      	mov	r0, r5
 8000822:	4788      	blx	r1
 8000824:	68a8      	ldr	r0, [r5, #8]
 8000826:	42a8      	cmp	r0, r5
 8000828:	bf08      	it	eq
 800082a:	2000      	moveq	r0, #0
 800082c:	2800      	cmp	r0, #0
 800082e:	6420      	str	r0, [r4, #64]	; 0x40
 8000830:	d1f4      	bne.n	800081c <ai_layers_forward_all+0xc>
 8000832:	b001      	add	sp, #4
 8000834:	bd30      	pop	{r4, r5, pc}
	...

08000838 <.text_14>:
 8000838:	564e4f43 	.word	0x564e4f43
 800083c:	00004432 	.word	0x00004432

08000840 <.text_15>:
 8000840:	534e4544 	.word	0x534e4544
 8000844:	00000045 	.word	0x00000045

08000848 <.text_16>:
 8000848:	4d54534c 	.word	0x4d54534c
 800084c:	00000000 	.word	0x00000000

08000850 <.text_17>:
 8000850:	4d524f4e 	.word	0x4d524f4e
 8000854:	00000000 	.word	0x00000000

08000858 <.text_18>:
 8000858:	4954504f 	.word	0x4954504f
 800085c:	455a494d 	.word	0x455a494d
 8000860:	4f435f44 	.word	0x4f435f44
 8000864:	4432564e 	.word	0x4432564e
 8000868:	00000000 	.word	0x00000000

0800086c <.text_19>:
 800086c:	4d524550 	.word	0x4d524550
 8000870:	00455455 	.word	0x00455455

08000874 <.text_20>:
 8000874:	4c4f4f50 	.word	0x4c4f4f50
 8000878:	00000000 	.word	0x00000000

0800087c <.text_21>:
 800087c:	494c5053 	.word	0x494c5053
 8000880:	00000054 	.word	0x00000054

08000884 <.text_22>:
 8000884:	454d4954 	.word	0x454d4954
 8000888:	4c45445f 	.word	0x4c45445f
 800088c:	00005941 	.word	0x00005941

08000890 <.text_23>:
 8000890:	454d4954 	.word	0x454d4954
 8000894:	5349445f 	.word	0x5349445f
 8000898:	42495254 	.word	0x42495254
 800089c:	44455455 	.word	0x44455455
 80008a0:	00000000 	.word	0x00000000

080008a4 <.text_24>:
 80008a4:	434e4f43 	.word	0x434e4f43
 80008a8:	00005441 	.word	0x00005441

080008ac <ai_check_custom_types::ref_signatures>:
 80008ac:	84048403                                ....

080008b0 <ai_conv2d_kernel_simple_f32>:
 80008b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008b4:	b081      	sub	sp, #4
 80008b6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80008b8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80008ba:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80008be:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80008c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80008c2:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 80008c6:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 80008ca:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80008ce:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 80008d2:	1b2f      	subs	r7, r5, r4
 80008d4:	fb09 fa07 	mul.w	sl, r9, r7
 80008d8:	1b37      	subs	r7, r6, r4
 80008da:	fb07 f709 	mul.w	r7, r7, r9
 80008de:	9700      	str	r7, [sp, #0]
 80008e0:	4288      	cmp	r0, r1
 80008e2:	bf0c      	ite	eq
 80008e4:	ed9f 0a86 	vldreq	s0, [pc, #536]	; 8000b00 <.text_4>
 80008e8:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 80008ec:	fb05 f50c 	mul.w	r5, r5, ip
 80008f0:	fb06 f709 	mul.w	r7, r6, r9
 80008f4:	fb06 860c 	mla	r6, r6, ip, r8
 80008f8:	fb06 f609 	mul.w	r6, r6, r9
 80008fc:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8000900:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8000902:	ebab 0b0e 	sub.w	fp, fp, lr
 8000906:	fb04 f409 	mul.w	r4, r4, r9
 800090a:	fb09 f505 	mul.w	r5, r9, r5
 800090e:	2e00      	cmp	r6, #0
 8000910:	fb0b fb07 	mul.w	fp, fp, r7
 8000914:	eb02 0985 	add.w	r9, r2, r5, lsl #2
 8000918:	d04e      	beq.n	80009b8 <ai_conv2d_kernel_simple_f32+0x108>
 800091a:	460d      	mov	r5, r1
 800091c:	4619      	mov	r1, r3
 800091e:	4632      	mov	r2, r6
 8000920:	ea4f 0300 	mov.w	r3, r0
 8000924:	edd3 0a00 	vldr	s1, [r3]
 8000928:	f1be 0f01 	cmp.w	lr, #1
 800092c:	ee60 0a80 	vmul.f32	s1, s1, s0
 8000930:	464e      	mov	r6, r9
 8000932:	db39      	blt.n	80009a8 <ai_conv2d_kernel_simple_f32+0xf8>
 8000934:	f8dd c000 	ldr.w	ip, [sp]
 8000938:	4670      	mov	r0, lr
 800093a:	2c01      	cmp	r4, #1
 800093c:	db2c      	blt.n	8000998 <ai_conv2d_kernel_simple_f32+0xe8>
 800093e:	f014 0803 	ands.w	r8, r4, #3
 8000942:	d00a      	beq.n	800095a <ai_conv2d_kernel_simple_f32+0xaa>
 8000944:	ed91 1a00 	vldr	s2, [r1]
 8000948:	edd6 1a00 	vldr	s3, [r6]
 800094c:	1d36      	adds	r6, r6, #4
 800094e:	1d09      	adds	r1, r1, #4
 8000950:	f1b8 0801 	subs.w	r8, r8, #1
 8000954:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000958:	d1f4      	bne.n	8000944 <ai_conv2d_kernel_simple_f32+0x94>
 800095a:	08a7      	lsrs	r7, r4, #2
 800095c:	f000 801c 	beq.w	8000998 <ai_conv2d_kernel_simple_f32+0xe8>
 8000960:	ed91 2a00 	vldr	s4, [r1]
 8000964:	ed96 1a00 	vldr	s2, [r6]
 8000968:	edd1 1a01 	vldr	s3, [r1, #4]
 800096c:	edd6 2a01 	vldr	s5, [r6, #4]
 8000970:	ee42 0a01 	vmla.f32	s1, s4, s2
 8000974:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8000978:	ed91 2a02 	vldr	s4, [r1, #8]
 800097c:	ed96 1a02 	vldr	s2, [r6, #8]
 8000980:	edd1 1a03 	vldr	s3, [r1, #12]
 8000984:	edd6 2a03 	vldr	s5, [r6, #12]
 8000988:	3610      	adds	r6, #16
 800098a:	3110      	adds	r1, #16
 800098c:	ee42 0a01 	vmla.f32	s1, s4, s2
 8000990:	1e7f      	subs	r7, r7, #1
 8000992:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8000996:	d1e3      	bne.n	8000960 <ai_conv2d_kernel_simple_f32+0xb0>
 8000998:	1e40      	subs	r0, r0, #1
 800099a:	eb06 068a 	add.w	r6, r6, sl, lsl #2
 800099e:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 80009a2:	d1ca      	bne.n	800093a <ai_conv2d_kernel_simple_f32+0x8a>
 80009a4:	f8cd c000 	str.w	ip, [sp]
 80009a8:	edc5 0a00 	vstr	s1, [r5]
 80009ac:	1d2d      	adds	r5, r5, #4
 80009ae:	1d1b      	adds	r3, r3, #4
 80009b0:	1e52      	subs	r2, r2, #1
 80009b2:	eb01 018b 	add.w	r1, r1, fp, lsl #2
 80009b6:	d1b5      	bne.n	8000924 <ai_conv2d_kernel_simple_f32+0x74>
 80009b8:	b001      	add	sp, #4
 80009ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080009c0 <ai_conv2d_kernel_depthwise_f32>:
 80009c0:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009c4:	b084      	sub	sp, #16
 80009c6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80009c8:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 80009cc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80009ce:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80009d0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80009d2:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 80009d6:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 80009da:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80009dc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 80009e0:	fb09 bb07 	mla	fp, r9, r7, fp
 80009e4:	4611      	mov	r1, r2
 80009e6:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 80009ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80009ec:	9b04      	ldr	r3, [sp, #16]
 80009ee:	eba5 0e0c 	sub.w	lr, r5, ip
 80009f2:	1b00      	subs	r0, r0, r4
 80009f4:	429a      	cmp	r2, r3
 80009f6:	bf0c      	ite	eq
 80009f8:	ed9f 0a41 	vldreq	s0, [pc, #260]	; 8000b00 <.text_4>
 80009fc:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8000a00:	437d      	muls	r5, r7
 8000a02:	fb0a f505 	mul.w	r5, sl, r5
 8000a06:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8000a0a:	2500      	movs	r5, #0
 8000a0c:	eb01 078a 	add.w	r7, r1, sl, lsl #2
 8000a10:	42b9      	cmp	r1, r7
 8000a12:	fbb6 f6fa 	udiv	r6, r6, sl
 8000a16:	fb0a fe0e 	mul.w	lr, sl, lr
 8000a1a:	eba9 080c 	sub.w	r8, r9, ip
 8000a1e:	fb00 f009 	mul.w	r0, r0, r9
 8000a22:	9700      	str	r7, [sp, #0]
 8000a24:	d268      	bcs.n	8000af8 <ai_conv2d_kernel_depthwise_f32+0x138>
 8000a26:	920e      	str	r2, [sp, #56]	; 0x38
 8000a28:	9603      	str	r6, [sp, #12]
 8000a2a:	9a03      	ldr	r2, [sp, #12]
 8000a2c:	2a00      	cmp	r2, #0
 8000a2e:	d05f      	beq.n	8000af0 <ai_conv2d_kernel_depthwise_f32+0x130>
 8000a30:	9b04      	ldr	r3, [sp, #16]
 8000a32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000a34:	9002      	str	r0, [sp, #8]
 8000a36:	eb03 0785 	add.w	r7, r3, r5, lsl #2
 8000a3a:	9b03      	ldr	r3, [sp, #12]
 8000a3c:	f8cd 1004 	str.w	r1, [sp, #4]
 8000a40:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8000a44:	edd6 0a00 	vldr	s1, [r6]
 8000a48:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8000a4c:	2c01      	cmp	r4, #1
 8000a4e:	ee60 0a80 	vmul.f32	s1, s1, s0
 8000a52:	db41      	blt.n	8000ad8 <ai_conv2d_kernel_depthwise_f32+0x118>
 8000a54:	ea4f 0204 	mov.w	r2, r4
 8000a58:	f1bc 0f01 	cmp.w	ip, #1
 8000a5c:	db36      	blt.n	8000acc <ai_conv2d_kernel_depthwise_f32+0x10c>
 8000a5e:	f01c 0103 	ands.w	r1, ip, #3
 8000a62:	d00b      	beq.n	8000a7c <ai_conv2d_kernel_depthwise_f32+0xbc>
 8000a64:	ed9b 1a00 	vldr	s2, [fp]
 8000a68:	edd9 1a00 	vldr	s3, [r9]
 8000a6c:	1e49      	subs	r1, r1, #1
 8000a6e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000a72:	f10b 0b04 	add.w	fp, fp, #4
 8000a76:	eb09 098a 	add.w	r9, r9, sl, lsl #2
 8000a7a:	d1f3      	bne.n	8000a64 <ai_conv2d_kernel_depthwise_f32+0xa4>
 8000a7c:	ea5f 009c 	movs.w	r0, ip, lsr #2
 8000a80:	f000 8024 	beq.w	8000acc <ai_conv2d_kernel_depthwise_f32+0x10c>
 8000a84:	ed9b 1a00 	vldr	s2, [fp]
 8000a88:	edd9 1a00 	vldr	s3, [r9]
 8000a8c:	eb09 018a 	add.w	r1, r9, sl, lsl #2
 8000a90:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000a94:	eddb 1a01 	vldr	s3, [fp, #4]
 8000a98:	ed91 1a00 	vldr	s2, [r1]
 8000a9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8000aa0:	ee41 0a81 	vmla.f32	s1, s3, s2
 8000aa4:	ed9b 1a02 	vldr	s2, [fp, #8]
 8000aa8:	edd1 1a00 	vldr	s3, [r1]
 8000aac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8000ab0:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000ab4:	eddb 1a03 	vldr	s3, [fp, #12]
 8000ab8:	ed91 1a00 	vldr	s2, [r1]
 8000abc:	1e40      	subs	r0, r0, #1
 8000abe:	ee41 0a81 	vmla.f32	s1, s3, s2
 8000ac2:	f10b 0b10 	add.w	fp, fp, #16
 8000ac6:	eb01 098a 	add.w	r9, r1, sl, lsl #2
 8000aca:	d1db      	bne.n	8000a84 <ai_conv2d_kernel_depthwise_f32+0xc4>
 8000acc:	1e52      	subs	r2, r2, #1
 8000ace:	eb09 098e 	add.w	r9, r9, lr, lsl #2
 8000ad2:	eb0b 0b88 	add.w	fp, fp, r8, lsl #2
 8000ad6:	d1bf      	bne.n	8000a58 <ai_conv2d_kernel_depthwise_f32+0x98>
 8000ad8:	9802      	ldr	r0, [sp, #8]
 8000ada:	edc7 0a00 	vstr	s1, [r7]
 8000ade:	1c6d      	adds	r5, r5, #1
 8000ae0:	1d3f      	adds	r7, r7, #4
 8000ae2:	1d36      	adds	r6, r6, #4
 8000ae4:	1e5b      	subs	r3, r3, #1
 8000ae6:	eb0b 0b80 	add.w	fp, fp, r0, lsl #2
 8000aea:	d1ab      	bne.n	8000a44 <ai_conv2d_kernel_depthwise_f32+0x84>
 8000aec:	9802      	ldr	r0, [sp, #8]
 8000aee:	9901      	ldr	r1, [sp, #4]
 8000af0:	9a00      	ldr	r2, [sp, #0]
 8000af2:	1d09      	adds	r1, r1, #4
 8000af4:	4291      	cmp	r1, r2
 8000af6:	d398      	bcc.n	8000a2a <ai_conv2d_kernel_depthwise_f32+0x6a>
 8000af8:	b005      	add	sp, #20
 8000afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000b00 <.text_4>:
 8000b00:	00000000 	.word	0x00000000

08000b04 <ai_conv2d_kernel_group_f32>:
 8000b04:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b08:	b084      	sub	sp, #16
 8000b0a:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8000b0e:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8000b12:	9818      	ldr	r0, [sp, #96]	; 0x60
 8000b14:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000b16:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8000b18:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8000b1a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8000b1c:	ebae 0e0c 	sub.w	lr, lr, ip
 8000b20:	4692      	mov	sl, r2
 8000b22:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000b24:	fbb1 f9f2 	udiv	r9, r1, r2
 8000b28:	9911      	ldr	r1, [sp, #68]	; 0x44
 8000b2a:	f8cd 900c 	str.w	r9, [sp, #12]
 8000b2e:	1a09      	subs	r1, r1, r0
 8000b30:	4379      	muls	r1, r7
 8000b32:	461e      	mov	r6, r3
 8000b34:	fbb7 f3f2 	udiv	r3, r7, r2
 8000b38:	fb04 fb03 	mul.w	fp, r4, r3
 8000b3c:	fb0e fe0b 	mul.w	lr, lr, fp
 8000b40:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
 8000b44:	eba7 0903 	sub.w	r9, r7, r3
 8000b48:	eba4 0800 	sub.w	r8, r4, r0
 8000b4c:	fb04 b405 	mla	r4, r4, r5, fp
 8000b50:	435c      	muls	r4, r3
 8000b52:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8000b56:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8000b58:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000b5c:	455e      	cmp	r6, fp
 8000b5e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8000b60:	bf0c      	ite	eq
 8000b62:	ed9f 0a3f 	vldreq	s0, [pc, #252]	; 8000c60 <.text_6>
 8000b66:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8000b6a:	4375      	muls	r5, r6
 8000b6c:	436f      	muls	r7, r5
 8000b6e:	eb0a 0587 	add.w	r5, sl, r7, lsl #2
 8000b72:	2a00      	cmp	r2, #0
 8000b74:	fb08 f803 	mul.w	r8, r8, r3
 8000b78:	f04f 0a00 	mov.w	sl, #0
 8000b7c:	d06c      	beq.n	8000c58 <ai_conv2d_kernel_group_f32+0x154>
 8000b7e:	9200      	str	r2, [sp, #0]
 8000b80:	9a03      	ldr	r2, [sp, #12]
 8000b82:	2a00      	cmp	r2, #0
 8000b84:	d062      	beq.n	8000c4c <ai_conv2d_kernel_group_f32+0x148>
 8000b86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000b88:	9f04      	ldr	r7, [sp, #16]
 8000b8a:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
 8000b8e:	eb02 068a 	add.w	r6, r2, sl, lsl #2
 8000b92:	9a03      	ldr	r2, [sp, #12]
 8000b94:	f8cd e008 	str.w	lr, [sp, #8]
 8000b98:	eb07 078a 	add.w	r7, r7, sl, lsl #2
 8000b9c:	f8cd 5004 	str.w	r5, [sp, #4]
 8000ba0:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8000ba4:	edd6 0a00 	vldr	s1, [r6]
 8000ba8:	9d01      	ldr	r5, [sp, #4]
 8000baa:	f1be 0f01 	cmp.w	lr, #1
 8000bae:	ee60 0a80 	vmul.f32	s1, s1, s0
 8000bb2:	db3b      	blt.n	8000c2c <ai_conv2d_kernel_group_f32+0x128>
 8000bb4:	2801      	cmp	r0, #1
 8000bb6:	db32      	blt.n	8000c1e <ai_conv2d_kernel_group_f32+0x11a>
 8000bb8:	ea4f 0c00 	mov.w	ip, r0
 8000bbc:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 8000bc0:	455d      	cmp	r5, fp
 8000bc2:	d227      	bcs.n	8000c14 <ai_conv2d_kernel_group_f32+0x110>
 8000bc4:	ed94 1a00 	vldr	s2, [r4]
 8000bc8:	edd5 1a00 	vldr	s3, [r5]
 8000bcc:	1d2d      	adds	r5, r5, #4
 8000bce:	1d24      	adds	r4, r4, #4
 8000bd0:	455d      	cmp	r5, fp
 8000bd2:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000bd6:	d21d      	bcs.n	8000c14 <ai_conv2d_kernel_group_f32+0x110>
 8000bd8:	ed94 1a00 	vldr	s2, [r4]
 8000bdc:	edd5 1a00 	vldr	s3, [r5]
 8000be0:	1d2d      	adds	r5, r5, #4
 8000be2:	1d24      	adds	r4, r4, #4
 8000be4:	455d      	cmp	r5, fp
 8000be6:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000bea:	d213      	bcs.n	8000c14 <ai_conv2d_kernel_group_f32+0x110>
 8000bec:	ed94 1a00 	vldr	s2, [r4]
 8000bf0:	edd5 1a00 	vldr	s3, [r5]
 8000bf4:	1d2d      	adds	r5, r5, #4
 8000bf6:	1d24      	adds	r4, r4, #4
 8000bf8:	455d      	cmp	r5, fp
 8000bfa:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000bfe:	d209      	bcs.n	8000c14 <ai_conv2d_kernel_group_f32+0x110>
 8000c00:	ed94 1a00 	vldr	s2, [r4]
 8000c04:	edd5 1a00 	vldr	s3, [r5]
 8000c08:	1d2d      	adds	r5, r5, #4
 8000c0a:	1d24      	adds	r4, r4, #4
 8000c0c:	455d      	cmp	r5, fp
 8000c0e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000c12:	d3d7      	bcc.n	8000bc4 <ai_conv2d_kernel_group_f32+0xc0>
 8000c14:	f1bc 0c01 	subs.w	ip, ip, #1
 8000c18:	eb05 0589 	add.w	r5, r5, r9, lsl #2
 8000c1c:	d1ce      	bne.n	8000bbc <ai_conv2d_kernel_group_f32+0xb8>
 8000c1e:	f1be 0e01 	subs.w	lr, lr, #1
 8000c22:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8000c26:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8000c2a:	d1c3      	bne.n	8000bb4 <ai_conv2d_kernel_group_f32+0xb0>
 8000c2c:	9d02      	ldr	r5, [sp, #8]
 8000c2e:	edc7 0a00 	vstr	s1, [r7]
 8000c32:	1d3f      	adds	r7, r7, #4
 8000c34:	1d36      	adds	r6, r6, #4
 8000c36:	1e52      	subs	r2, r2, #1
 8000c38:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8000c3c:	f10a 0a01 	add.w	sl, sl, #1
 8000c40:	d1ae      	bne.n	8000ba0 <ai_conv2d_kernel_group_f32+0x9c>
 8000c42:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8000c46:	f8dd e008 	ldr.w	lr, [sp, #8]
 8000c4a:	9d01      	ldr	r5, [sp, #4]
 8000c4c:	9a00      	ldr	r2, [sp, #0]
 8000c4e:	1e52      	subs	r2, r2, #1
 8000c50:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8000c54:	9200      	str	r2, [sp, #0]
 8000c56:	d193      	bne.n	8000b80 <ai_conv2d_kernel_group_f32+0x7c>
 8000c58:	b005      	add	sp, #20
 8000c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000c60 <.text_6>:
 8000c60:	00000000 	.word	0x00000000

08000c64 <ai_conv2d_kernel_f32>:
 8000c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c68:	b08d      	sub	sp, #52	; 0x34
 8000c6a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8000c6c:	b904      	cbnz	r4, 8000c70 <ai_conv2d_kernel_f32+0xc>
 8000c6e:	460c      	mov	r4, r1
 8000c70:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8000c72:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8000c74:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8000c78:	f8dd e080 	ldr.w	lr, [sp, #128]	; 0x80
 8000c7c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8000c7e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8000c82:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8000c86:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8000c8a:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 8000c8e:	900b      	str	r0, [sp, #44]	; 0x2c
 8000c90:	1bbf      	subs	r7, r7, r6
 8000c92:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000c94:	f1b8 0f01 	cmp.w	r8, #1
 8000c98:	ebae 0e05 	sub.w	lr, lr, r5
 8000c9c:	d114      	bne.n	8000cc8 <ai_conv2d_kernel_f32+0x64>
 8000c9e:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8000ca2:	9508      	str	r5, [sp, #32]
 8000ca4:	9707      	str	r7, [sp, #28]
 8000ca6:	9001      	str	r0, [sp, #4]
 8000ca8:	f8cd c008 	str.w	ip, [sp, #8]
 8000cac:	9606      	str	r6, [sp, #24]
 8000cae:	f8cd b014 	str.w	fp, [sp, #20]
 8000cb2:	f8cd a010 	str.w	sl, [sp, #16]
 8000cb6:	f8cd 900c 	str.w	r9, [sp, #12]
 8000cba:	9400      	str	r4, [sp, #0]
 8000cbc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000cbe:	f7ff fdf7 	bl	80008b0 <ai_conv2d_kernel_simple_f32>
 8000cc2:	b00d      	add	sp, #52	; 0x34
 8000cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cc8:	4580      	cmp	r8, r0
 8000cca:	d114      	bne.n	8000cf6 <ai_conv2d_kernel_f32+0x92>
 8000ccc:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8000cd0:	9508      	str	r5, [sp, #32]
 8000cd2:	9707      	str	r7, [sp, #28]
 8000cd4:	9001      	str	r0, [sp, #4]
 8000cd6:	f8cd c008 	str.w	ip, [sp, #8]
 8000cda:	9606      	str	r6, [sp, #24]
 8000cdc:	f8cd b014 	str.w	fp, [sp, #20]
 8000ce0:	f8cd a010 	str.w	sl, [sp, #16]
 8000ce4:	f8cd 900c 	str.w	r9, [sp, #12]
 8000ce8:	9400      	str	r4, [sp, #0]
 8000cea:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000cec:	f7ff fe68 	bl	80009c0 <ai_conv2d_kernel_depthwise_f32>
 8000cf0:	b00d      	add	sp, #52	; 0x34
 8000cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cf6:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8000cfa:	9509      	str	r5, [sp, #36]	; 0x24
 8000cfc:	9708      	str	r7, [sp, #32]
 8000cfe:	9001      	str	r0, [sp, #4]
 8000d00:	f8cd c008 	str.w	ip, [sp, #8]
 8000d04:	9607      	str	r6, [sp, #28]
 8000d06:	f8cd 8018 	str.w	r8, [sp, #24]
 8000d0a:	f8cd b014 	str.w	fp, [sp, #20]
 8000d0e:	f8cd a010 	str.w	sl, [sp, #16]
 8000d12:	f8cd 900c 	str.w	r9, [sp, #12]
 8000d16:	9400      	str	r4, [sp, #0]
 8000d18:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000d1a:	f7ff fef3 	bl	8000b04 <ai_conv2d_kernel_group_f32>
 8000d1e:	b00d      	add	sp, #52	; 0x34
 8000d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000d24 <func_dummy>:
 8000d24:	4770      	bx	lr
	...

08000d28 <ai_dict8_dot_array_f32>:
 8000d28:	b4f0      	push	{r4, r5, r6, r7}
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	9804      	ldr	r0, [sp, #16]
 8000d2e:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 8000d32:	3d20      	subs	r5, #32
 8000d34:	2808      	cmp	r0, #8
 8000d36:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800109c <.text_11>
 8000d3a:	d22f      	bcs.n	8000d9c <ai_dict8_dot_array_f32+0x74>
 8000d3c:	3520      	adds	r5, #32
 8000d3e:	42ab      	cmp	r3, r5
 8000d40:	d224      	bcs.n	8000d8c <ai_dict8_dot_array_f32+0x64>
 8000d42:	7808      	ldrb	r0, [r1, #0]
 8000d44:	ed93 1a00 	vldr	s2, [r3]
 8000d48:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8000d4c:	1d18      	adds	r0, r3, #4
 8000d4e:	edd6 0a00 	vldr	s1, [r6]
 8000d52:	42a8      	cmp	r0, r5
 8000d54:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000d58:	d218      	bcs.n	8000d8c <ai_dict8_dot_array_f32+0x64>
 8000d5a:	784b      	ldrb	r3, [r1, #1]
 8000d5c:	ed90 1a00 	vldr	s2, [r0]
 8000d60:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8000d64:	1d00      	adds	r0, r0, #4
 8000d66:	edd6 0a00 	vldr	s1, [r6]
 8000d6a:	42a8      	cmp	r0, r5
 8000d6c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000d70:	d20c      	bcs.n	8000d8c <ai_dict8_dot_array_f32+0x64>
 8000d72:	788b      	ldrb	r3, [r1, #2]
 8000d74:	ed90 1a00 	vldr	s2, [r0]
 8000d78:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8000d7c:	1d03      	adds	r3, r0, #4
 8000d7e:	1cc9      	adds	r1, r1, #3
 8000d80:	edd6 0a00 	vldr	s1, [r6]
 8000d84:	42ab      	cmp	r3, r5
 8000d86:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000d8a:	d3da      	bcc.n	8000d42 <ai_dict8_dot_array_f32+0x1a>
 8000d8c:	edd4 0a00 	vldr	s1, [r4]
 8000d90:	ee30 0a80 	vadd.f32	s0, s1, s0
 8000d94:	ed84 0a00 	vstr	s0, [r4]
 8000d98:	bcf0      	pop	{r4, r5, r6, r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	f001 0003 	and.w	r0, r1, #3
 8000da0:	2803      	cmp	r0, #3
 8000da2:	d8f3      	bhi.n	8000d8c <ai_dict8_dot_array_f32+0x64>
 8000da4:	e8df f000 	tbb	[pc, r0]
 8000da8:	4c413603 	.word	0x4c413603
 8000dac:	e7ee      	b.n	8000d8c <ai_dict8_dot_array_f32+0x64>
 8000dae:	429d      	cmp	r5, r3
 8000db0:	f080 80d5 	bcs.w	8000f5e <ai_dict8_dot_array_f32+0x236>
 8000db4:	3520      	adds	r5, #32
 8000db6:	42ab      	cmp	r3, r5
 8000db8:	d2e8      	bcs.n	8000d8c <ai_dict8_dot_array_f32+0x64>
 8000dba:	7808      	ldrb	r0, [r1, #0]
 8000dbc:	ed93 1a00 	vldr	s2, [r3]
 8000dc0:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8000dc4:	1d18      	adds	r0, r3, #4
 8000dc6:	edd6 0a00 	vldr	s1, [r6]
 8000dca:	42a8      	cmp	r0, r5
 8000dcc:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000dd0:	d2dc      	bcs.n	8000d8c <ai_dict8_dot_array_f32+0x64>
 8000dd2:	784b      	ldrb	r3, [r1, #1]
 8000dd4:	ed90 1a00 	vldr	s2, [r0]
 8000dd8:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8000ddc:	1d00      	adds	r0, r0, #4
 8000dde:	edd6 0a00 	vldr	s1, [r6]
 8000de2:	42a8      	cmp	r0, r5
 8000de4:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000de8:	d2d0      	bcs.n	8000d8c <ai_dict8_dot_array_f32+0x64>
 8000dea:	788b      	ldrb	r3, [r1, #2]
 8000dec:	ed90 1a00 	vldr	s2, [r0]
 8000df0:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8000df4:	1d03      	adds	r3, r0, #4
 8000df6:	1cc9      	adds	r1, r1, #3
 8000df8:	edd6 0a00 	vldr	s1, [r6]
 8000dfc:	42ab      	cmp	r3, r5
 8000dfe:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000e02:	d3da      	bcc.n	8000dba <ai_dict8_dot_array_f32+0x92>
 8000e04:	edd4 0a00 	vldr	s1, [r4]
 8000e08:	ee30 0a80 	vadd.f32	s0, s1, s0
 8000e0c:	ed84 0a00 	vstr	s0, [r4]
 8000e10:	bcf0      	pop	{r4, r5, r6, r7}
 8000e12:	4770      	bx	lr
 8000e14:	f811 0b01 	ldrb.w	r0, [r1], #1
 8000e18:	ed93 1a00 	vldr	s2, [r3]
 8000e1c:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8000e20:	1d1b      	adds	r3, r3, #4
 8000e22:	edd6 0a00 	vldr	s1, [r6]
 8000e26:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000e2a:	f811 0b01 	ldrb.w	r0, [r1], #1
 8000e2e:	ed93 1a00 	vldr	s2, [r3]
 8000e32:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8000e36:	1d1b      	adds	r3, r3, #4
 8000e38:	edd6 0a00 	vldr	s1, [r6]
 8000e3c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000e40:	f811 0b01 	ldrb.w	r0, [r1], #1
 8000e44:	ed93 1a00 	vldr	s2, [r3]
 8000e48:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8000e4c:	1d1b      	adds	r3, r3, #4
 8000e4e:	edd6 0a00 	vldr	s1, [r6]
 8000e52:	429d      	cmp	r5, r3
 8000e54:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000e58:	d34e      	bcc.n	8000ef8 <ai_dict8_dot_array_f32+0x1d0>
 8000e5a:	78cf      	ldrb	r7, [r1, #3]
 8000e5c:	ed93 4a00 	vldr	s8, [r3]
 8000e60:	ed93 3a01 	vldr	s6, [r3, #4]
 8000e64:	ed93 2a02 	vldr	s4, [r3, #8]
 8000e68:	ed93 1a03 	vldr	s2, [r3, #12]
 8000e6c:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000e70:	788f      	ldrb	r7, [r1, #2]
 8000e72:	edd6 0a00 	vldr	s1, [r6]
 8000e76:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000e7a:	784f      	ldrb	r7, [r1, #1]
 8000e7c:	edd6 1a00 	vldr	s3, [r6]
 8000e80:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000e84:	780f      	ldrb	r7, [r1, #0]
 8000e86:	edd6 2a00 	vldr	s5, [r6]
 8000e8a:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000e8e:	f103 0010 	add.w	r0, r3, #16
 8000e92:	edd6 3a00 	vldr	s7, [r6]
 8000e96:	790b      	ldrb	r3, [r1, #4]
 8000e98:	ee03 0a84 	vmla.f32	s0, s7, s8
 8000e9c:	ee02 0a83 	vmla.f32	s0, s5, s6
 8000ea0:	ee01 0a82 	vmla.f32	s0, s3, s4
 8000ea4:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8000ea8:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000eac:	794b      	ldrb	r3, [r1, #5]
 8000eae:	edd7 0a00 	vldr	s1, [r7]
 8000eb2:	ed90 4a00 	vldr	s8, [r0]
 8000eb6:	edd0 3a01 	vldr	s7, [r0, #4]
 8000eba:	ed90 3a02 	vldr	s6, [r0, #8]
 8000ebe:	edd0 2a03 	vldr	s5, [r0, #12]
 8000ec2:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8000ec6:	798b      	ldrb	r3, [r1, #6]
 8000ec8:	ed97 1a00 	vldr	s2, [r7]
 8000ecc:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8000ed0:	79cb      	ldrb	r3, [r1, #7]
 8000ed2:	edd7 1a00 	vldr	s3, [r7]
 8000ed6:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8000eda:	ee00 0a84 	vmla.f32	s0, s1, s8
 8000ede:	3108      	adds	r1, #8
 8000ee0:	f100 0310 	add.w	r3, r0, #16
 8000ee4:	ee01 0a23 	vmla.f32	s0, s2, s7
 8000ee8:	ed97 2a00 	vldr	s4, [r7]
 8000eec:	ee01 0a83 	vmla.f32	s0, s3, s6
 8000ef0:	429d      	cmp	r5, r3
 8000ef2:	ee02 0a22 	vmla.f32	s0, s4, s5
 8000ef6:	d2b0      	bcs.n	8000e5a <ai_dict8_dot_array_f32+0x132>
 8000ef8:	3520      	adds	r5, #32
 8000efa:	42ab      	cmp	r3, r5
 8000efc:	f4bf af46 	bcs.w	8000d8c <ai_dict8_dot_array_f32+0x64>
 8000f00:	7808      	ldrb	r0, [r1, #0]
 8000f02:	ed93 1a00 	vldr	s2, [r3]
 8000f06:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8000f0a:	1d18      	adds	r0, r3, #4
 8000f0c:	edd6 0a00 	vldr	s1, [r6]
 8000f10:	42a8      	cmp	r0, r5
 8000f12:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000f16:	f4bf af39 	bcs.w	8000d8c <ai_dict8_dot_array_f32+0x64>
 8000f1a:	784b      	ldrb	r3, [r1, #1]
 8000f1c:	ed90 1a00 	vldr	s2, [r0]
 8000f20:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8000f24:	1d00      	adds	r0, r0, #4
 8000f26:	edd6 0a00 	vldr	s1, [r6]
 8000f2a:	42a8      	cmp	r0, r5
 8000f2c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000f30:	f4bf af2c 	bcs.w	8000d8c <ai_dict8_dot_array_f32+0x64>
 8000f34:	788b      	ldrb	r3, [r1, #2]
 8000f36:	ed90 1a00 	vldr	s2, [r0]
 8000f3a:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8000f3e:	1d03      	adds	r3, r0, #4
 8000f40:	1cc9      	adds	r1, r1, #3
 8000f42:	edd6 0a00 	vldr	s1, [r6]
 8000f46:	42ab      	cmp	r3, r5
 8000f48:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000f4c:	d3d8      	bcc.n	8000f00 <ai_dict8_dot_array_f32+0x1d8>
 8000f4e:	edd4 0a00 	vldr	s1, [r4]
 8000f52:	ee30 0a80 	vadd.f32	s0, s1, s0
 8000f56:	ed84 0a00 	vstr	s0, [r4]
 8000f5a:	bcf0      	pop	{r4, r5, r6, r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	78cf      	ldrb	r7, [r1, #3]
 8000f60:	ed93 4a00 	vldr	s8, [r3]
 8000f64:	ed93 3a01 	vldr	s6, [r3, #4]
 8000f68:	ed93 2a02 	vldr	s4, [r3, #8]
 8000f6c:	ed93 1a03 	vldr	s2, [r3, #12]
 8000f70:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000f74:	788f      	ldrb	r7, [r1, #2]
 8000f76:	edd6 0a00 	vldr	s1, [r6]
 8000f7a:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000f7e:	784f      	ldrb	r7, [r1, #1]
 8000f80:	edd6 1a00 	vldr	s3, [r6]
 8000f84:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000f88:	780f      	ldrb	r7, [r1, #0]
 8000f8a:	edd6 2a00 	vldr	s5, [r6]
 8000f8e:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000f92:	f103 0010 	add.w	r0, r3, #16
 8000f96:	edd6 3a00 	vldr	s7, [r6]
 8000f9a:	790b      	ldrb	r3, [r1, #4]
 8000f9c:	ee03 0a84 	vmla.f32	s0, s7, s8
 8000fa0:	ee02 0a83 	vmla.f32	s0, s5, s6
 8000fa4:	ee01 0a82 	vmla.f32	s0, s3, s4
 8000fa8:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8000fac:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000fb0:	794b      	ldrb	r3, [r1, #5]
 8000fb2:	edd7 0a00 	vldr	s1, [r7]
 8000fb6:	ed90 4a00 	vldr	s8, [r0]
 8000fba:	edd0 3a01 	vldr	s7, [r0, #4]
 8000fbe:	ed90 3a02 	vldr	s6, [r0, #8]
 8000fc2:	edd0 2a03 	vldr	s5, [r0, #12]
 8000fc6:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8000fca:	798b      	ldrb	r3, [r1, #6]
 8000fcc:	ed97 1a00 	vldr	s2, [r7]
 8000fd0:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8000fd4:	79cb      	ldrb	r3, [r1, #7]
 8000fd6:	edd7 1a00 	vldr	s3, [r7]
 8000fda:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8000fde:	ee00 0a84 	vmla.f32	s0, s1, s8
 8000fe2:	3108      	adds	r1, #8
 8000fe4:	f100 0310 	add.w	r3, r0, #16
 8000fe8:	ee01 0a23 	vmla.f32	s0, s2, s7
 8000fec:	ed97 2a00 	vldr	s4, [r7]
 8000ff0:	ee01 0a83 	vmla.f32	s0, s3, s6
 8000ff4:	429d      	cmp	r5, r3
 8000ff6:	ee02 0a22 	vmla.f32	s0, s4, s5
 8000ffa:	d2b0      	bcs.n	8000f5e <ai_dict8_dot_array_f32+0x236>
 8000ffc:	e6da      	b.n	8000db4 <ai_dict8_dot_array_f32+0x8c>
	...

08001000 <ai_dict4_dot_array_f32>:
 8001000:	b4f0      	push	{r4, r5, r6, r7}
 8001002:	9c04      	ldr	r4, [sp, #16]
 8001004:	0865      	lsrs	r5, r4, #1
 8001006:	006d      	lsls	r5, r5, #1
 8001008:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800100c:	42ab      	cmp	r3, r5
 800100e:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800109c <.text_11>
 8001012:	d22f      	bcs.n	8001074 <ai_dict4_dot_array_f32+0x74>
 8001014:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001018:	ed93 2a00 	vldr	s4, [r3]
 800101c:	ed93 1a01 	vldr	s2, [r3, #4]
 8001020:	f006 070f 	and.w	r7, r6, #15
 8001024:	0936      	lsrs	r6, r6, #4
 8001026:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800102a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800102e:	edd6 1a00 	vldr	s3, [r6]
 8001032:	edd7 0a00 	vldr	s1, [r7]
 8001036:	3308      	adds	r3, #8
 8001038:	ee01 0a82 	vmla.f32	s0, s3, s4
 800103c:	42ab      	cmp	r3, r5
 800103e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001042:	d217      	bcs.n	8001074 <ai_dict4_dot_array_f32+0x74>
 8001044:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001048:	ed93 2a00 	vldr	s4, [r3]
 800104c:	ed93 1a01 	vldr	s2, [r3, #4]
 8001050:	f006 070f 	and.w	r7, r6, #15
 8001054:	0936      	lsrs	r6, r6, #4
 8001056:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800105a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800105e:	edd6 1a00 	vldr	s3, [r6]
 8001062:	edd7 0a00 	vldr	s1, [r7]
 8001066:	3308      	adds	r3, #8
 8001068:	ee01 0a82 	vmla.f32	s0, s3, s4
 800106c:	42ab      	cmp	r3, r5
 800106e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001072:	d3cf      	bcc.n	8001014 <ai_dict4_dot_array_f32+0x14>
 8001074:	07e4      	lsls	r4, r4, #31
 8001076:	d509      	bpl.n	800108c <ai_dict4_dot_array_f32+0x8c>
 8001078:	7809      	ldrb	r1, [r1, #0]
 800107a:	ed93 1a00 	vldr	s2, [r3]
 800107e:	0909      	lsrs	r1, r1, #4
 8001080:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001084:	edd2 0a00 	vldr	s1, [r2]
 8001088:	ee00 0a81 	vmla.f32	s0, s1, s2
 800108c:	edd0 1a00 	vldr	s3, [r0]
 8001090:	ee31 0a80 	vadd.f32	s0, s3, s0
 8001094:	ed80 0a00 	vstr	s0, [r0]
 8001098:	bcf0      	pop	{r4, r5, r6, r7}
 800109a:	4770      	bx	lr

0800109c <.text_11>:
 800109c:	00000000 	.word	0x00000000

080010a0 <forward_conv2d>:
 80010a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010a4:	4605      	mov	r5, r0
 80010a6:	b09b      	sub	sp, #108	; 0x6c
 80010a8:	6968      	ldr	r0, [r5, #20]
 80010aa:	6800      	ldr	r0, [r0, #0]
 80010ac:	6801      	ldr	r1, [r0, #0]
 80010ae:	6842      	ldr	r2, [r0, #4]
 80010b0:	6880      	ldr	r0, [r0, #8]
 80010b2:	680f      	ldr	r7, [r1, #0]
 80010b4:	f8d2 a000 	ldr.w	sl, [r2]
 80010b8:	f8d0 e000 	ldr.w	lr, [r0]
 80010bc:	6840      	ldr	r0, [r0, #4]
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	920d      	str	r2, [sp, #52]	; 0x34
 80010c2:	2800      	cmp	r0, #0
 80010c4:	f8da 3008 	ldr.w	r3, [sl, #8]
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	f8da 1010 	ldr.w	r1, [sl, #16]
 80010ce:	f8da 900c 	ldr.w	r9, [sl, #12]
 80010d2:	693c      	ldr	r4, [r7, #16]
 80010d4:	f8d7 800c 	ldr.w	r8, [r7, #12]
 80010d8:	8c2b      	ldrh	r3, [r5, #32]
 80010da:	930c      	str	r3, [sp, #48]	; 0x30
 80010dc:	8cae      	ldrh	r6, [r5, #36]	; 0x24
 80010de:	960f      	str	r6, [sp, #60]	; 0x3c
 80010e0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80010e2:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
 80010e4:	f8de 300c 	ldr.w	r3, [lr, #12]
 80010e8:	930e      	str	r3, [sp, #56]	; 0x38
 80010ea:	b292      	uxth	r2, r2
 80010ec:	f8de 3008 	ldr.w	r3, [lr, #8]
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	683f      	ldr	r7, [r7, #0]
 80010f4:	f8d7 c008 	ldr.w	ip, [r7, #8]
 80010f8:	f8de 7000 	ldr.w	r7, [lr]
 80010fc:	f8d7 e008 	ldr.w	lr, [r7, #8]
 8001100:	69ab      	ldr	r3, [r5, #24]
 8001102:	bf1a      	itte	ne
 8001104:	6800      	ldrne	r0, [r0, #0]
 8001106:	6887      	ldrne	r7, [r0, #8]
 8001108:	2700      	moveq	r7, #0
 800110a:	f8da 0000 	ldr.w	r0, [sl]
 800110e:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8001112:	69e8      	ldr	r0, [r5, #28]
 8001114:	2800      	cmp	r0, #0
 8001116:	bf14      	ite	ne
 8001118:	4605      	movne	r5, r0
 800111a:	f8df 5710 	ldreq.w	r5, [pc, #1808]	; 800182c <.text_17>
 800111e:	4252      	negs	r2, r2
 8001120:	2900      	cmp	r1, #0
 8001122:	920b      	str	r2, [sp, #44]	; 0x2c
 8001124:	d06b      	beq.n	80011fe <forward_conv2d+0x15e>
 8001126:	4276      	negs	r6, r6
 8001128:	9619      	str	r6, [sp, #100]	; 0x64
 800112a:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
 800112e:	9415      	str	r4, [sp, #84]	; 0x54
 8001130:	9110      	str	r1, [sp, #64]	; 0x40
 8001132:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8001136:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001138:	9915      	ldr	r1, [sp, #84]	; 0x54
 800113a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800113c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800113e:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8001140:	4240      	negs	r0, r0
 8001142:	bfd8      	it	le
 8001144:	2000      	movle	r0, #0
 8001146:	1a89      	subs	r1, r1, r2
 8001148:	4559      	cmp	r1, fp
 800114a:	bf28      	it	cs
 800114c:	4659      	movcs	r1, fp
 800114e:	2c00      	cmp	r4, #0
 8001150:	fb08 6202 	mla	r2, r8, r2, r6
 8001154:	d04b      	beq.n	80011ee <forward_conv2d+0x14e>
 8001156:	9402      	str	r4, [sp, #8]
 8001158:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800115c:	9c01      	ldr	r4, [sp, #4]
 800115e:	f8dd 9000 	ldr.w	r9, [sp]
 8001162:	9314      	str	r3, [sp, #80]	; 0x50
 8001164:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 8001168:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 800116c:	9711      	str	r7, [sp, #68]	; 0x44
 800116e:	9018      	str	r0, [sp, #96]	; 0x60
 8001170:	9117      	str	r1, [sp, #92]	; 0x5c
 8001172:	4693      	mov	fp, r2
 8001174:	9f02      	ldr	r7, [sp, #8]
 8001176:	4270      	negs	r0, r6
 8001178:	bfd8      	it	le
 800117a:	2000      	movle	r0, #0
 800117c:	eba8 0106 	sub.w	r1, r8, r6
 8001180:	4549      	cmp	r1, r9
 8001182:	bf28      	it	cs
 8001184:	4649      	movcs	r1, r9
 8001186:	910a      	str	r1, [sp, #40]	; 0x28
 8001188:	9009      	str	r0, [sp, #36]	; 0x24
 800118a:	f8cd 9010 	str.w	r9, [sp, #16]
 800118e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001192:	9402      	str	r4, [sp, #8]
 8001194:	4458      	add	r0, fp
 8001196:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001198:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800119a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800119c:	9108      	str	r1, [sp, #32]
 800119e:	9207      	str	r2, [sp, #28]
 80011a0:	9914      	ldr	r1, [sp, #80]	; 0x50
 80011a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80011a4:	9106      	str	r1, [sp, #24]
 80011a6:	9205      	str	r2, [sp, #20]
 80011a8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80011aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80011ac:	9101      	str	r1, [sp, #4]
 80011ae:	9200      	str	r2, [sp, #0]
 80011b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80011b2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80011b4:	4350      	muls	r0, r2
 80011b6:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 80011ba:	4651      	mov	r1, sl
 80011bc:	2000      	movs	r0, #0
 80011be:	f7ff fd51 	bl	8000c64 <ai_conv2d_kernel_f32>
 80011c2:	4622      	mov	r2, r4
 80011c4:	4651      	mov	r1, sl
 80011c6:	4650      	mov	r0, sl
 80011c8:	47a8      	blx	r5
 80011ca:	980c      	ldr	r0, [sp, #48]	; 0x30
 80011cc:	1986      	adds	r6, r0, r6
 80011ce:	1e7f      	subs	r7, r7, #1
 80011d0:	eb0a 0a84 	add.w	sl, sl, r4, lsl #2
 80011d4:	4483      	add	fp, r0
 80011d6:	d1ce      	bne.n	8001176 <forward_conv2d+0xd6>
 80011d8:	9401      	str	r4, [sp, #4]
 80011da:	f8cd 9000 	str.w	r9, [sp]
 80011de:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 80011e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80011e4:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 80011e8:	f8dd e048 	ldr.w	lr, [sp, #72]	; 0x48
 80011ec:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80011ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80011f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80011f2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80011f4:	1851      	adds	r1, r2, r1
 80011f6:	1e64      	subs	r4, r4, #1
 80011f8:	910b      	str	r1, [sp, #44]	; 0x2c
 80011fa:	9410      	str	r4, [sp, #64]	; 0x40
 80011fc:	d19b      	bne.n	8001136 <forward_conv2d+0x96>
 80011fe:	b01b      	add	sp, #108	; 0x6c
 8001200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001204 <forward_conv2d_nl_pool>:
 8001204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001208:	4603      	mov	r3, r0
 800120a:	b0b5      	sub	sp, #212	; 0xd4
 800120c:	6958      	ldr	r0, [r3, #20]
 800120e:	6800      	ldr	r0, [r0, #0]
 8001210:	6801      	ldr	r1, [r0, #0]
 8001212:	6842      	ldr	r2, [r0, #4]
 8001214:	f8d1 b000 	ldr.w	fp, [r1]
 8001218:	6817      	ldr	r7, [r2, #0]
 800121a:	6880      	ldr	r0, [r0, #8]
 800121c:	f8d0 a000 	ldr.w	sl, [r0]
 8001220:	6844      	ldr	r4, [r0, #4]
 8001222:	f10b 0114 	add.w	r1, fp, #20
 8001226:	e891 1064 	ldmia.w	r1, {r2, r5, r6, ip}
 800122a:	a82d      	add	r0, sp, #180	; 0xb4
 800122c:	e880 1064 	stmia.w	r0, {r2, r5, r6, ip}
 8001230:	f8db 0008 	ldr.w	r0, [fp, #8]
 8001234:	9004      	str	r0, [sp, #16]
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	9103      	str	r1, [sp, #12]
 800123a:	6938      	ldr	r0, [r7, #16]
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	921b      	str	r2, [sp, #108]	; 0x6c
 8001240:	f8db 5010 	ldr.w	r5, [fp, #16]
 8001244:	950d      	str	r5, [sp, #52]	; 0x34
 8001246:	f8db 200c 	ldr.w	r2, [fp, #12]
 800124a:	9202      	str	r2, [sp, #8]
 800124c:	8c1d      	ldrh	r5, [r3, #32]
 800124e:	9511      	str	r5, [sp, #68]	; 0x44
 8001250:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8001252:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 8001254:	9110      	str	r1, [sp, #64]	; 0x40
 8001256:	f8b3 c02c 	ldrh.w	ip, [r3, #44]	; 0x2c
 800125a:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
 800125e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8001260:	f8ad 5004 	strh.w	r5, [sp, #4]
 8001264:	699e      	ldr	r6, [r3, #24]
 8001266:	960c      	str	r6, [sp, #48]	; 0x30
 8001268:	f8da 1008 	ldr.w	r1, [sl, #8]
 800126c:	9100      	str	r1, [sp, #0]
 800126e:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8001270:	f8da 100c 	ldr.w	r1, [sl, #12]
 8001274:	950f      	str	r5, [sp, #60]	; 0x3c
 8001276:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8001278:	951a      	str	r5, [sp, #104]	; 0x68
 800127a:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 800127c:	9519      	str	r5, [sp, #100]	; 0x64
 800127e:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8001280:	951d      	str	r5, [sp, #116]	; 0x74
 8001282:	6a3e      	ldr	r6, [r7, #32]
 8001284:	f8d3 8048 	ldr.w	r8, [r3, #72]	; 0x48
 8001288:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800128a:	4346      	muls	r6, r0
 800128c:	9605      	str	r6, [sp, #20]
 800128e:	2c00      	cmp	r4, #0
 8001290:	69fe      	ldr	r6, [r7, #28]
 8001292:	9618      	str	r6, [sp, #96]	; 0x60
 8001294:	f8db 6000 	ldr.w	r6, [fp]
 8001298:	68b6      	ldr	r6, [r6, #8]
 800129a:	9617      	str	r6, [sp, #92]	; 0x5c
 800129c:	f8da 6000 	ldr.w	r6, [sl]
 80012a0:	68b6      	ldr	r6, [r6, #8]
 80012a2:	960b      	str	r6, [sp, #44]	; 0x2c
 80012a4:	bf1a      	itte	ne
 80012a6:	6824      	ldrne	r4, [r4, #0]
 80012a8:	f8d4 b008 	ldrne.w	fp, [r4, #8]
 80012ac:	f04f 0b00 	moveq.w	fp, #0
 80012b0:	69dc      	ldr	r4, [r3, #28]
 80012b2:	2c00      	cmp	r4, #0
 80012b4:	bf12      	itee	ne
 80012b6:	940e      	strne	r4, [sp, #56]	; 0x38
 80012b8:	f8df 4570 	ldreq.w	r4, [pc, #1392]	; 800182c <.text_17>
 80012bc:	940e      	streq	r4, [sp, #56]	; 0x38
 80012be:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 80012c0:	9c00      	ldr	r4, [sp, #0]
 80012c2:	9616      	str	r6, [sp, #88]	; 0x58
 80012c4:	426d      	negs	r5, r5
 80012c6:	9b02      	ldr	r3, [sp, #8]
 80012c8:	683f      	ldr	r7, [r7, #0]
 80012ca:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 80012ce:	eba3 0904 	sub.w	r9, r3, r4
 80012d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80012d4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80012d6:	4499      	add	r9, r3
 80012d8:	fa19 f38e 	uxtah	r3, r9, lr
 80012dc:	f8d7 e008 	ldr.w	lr, [r7, #8]
 80012e0:	9f05      	ldr	r7, [sp, #20]
 80012e2:	fbb3 f4f4 	udiv	r4, r3, r4
 80012e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80012e8:	1a5b      	subs	r3, r3, r1
 80012ea:	4463      	add	r3, ip
 80012ec:	199e      	adds	r6, r3, r6
 80012ee:	fbb6 f3f2 	udiv	r3, r6, r2
 80012f2:	1c64      	adds	r4, r4, #1
 80012f4:	1c5b      	adds	r3, r3, #1
 80012f6:	4477      	add	r7, lr
 80012f8:	2800      	cmp	r0, #0
 80012fa:	9715      	str	r7, [sp, #84]	; 0x54
 80012fc:	f000 8118 	beq.w	8001530 <forward_conv2d_nl_pool+0x32c>
 8001300:	f1c8 0800 	rsb	r8, r8, #0
 8001304:	f8cd 80d0 	str.w	r8, [sp, #208]	; 0xd0
 8001308:	932a      	str	r3, [sp, #168]	; 0xa8
 800130a:	9514      	str	r5, [sp, #80]	; 0x50
 800130c:	9024      	str	r0, [sp, #144]	; 0x90
 800130e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001310:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8001312:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8001314:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8001316:	2b00      	cmp	r3, #0
 8001318:	bfd8      	it	le
 800131a:	2300      	movle	r3, #0
 800131c:	1975      	adds	r5, r6, r5
 800131e:	42a8      	cmp	r0, r5
 8001320:	bf32      	itee	cc
 8001322:	4607      	movcc	r7, r0
 8001324:	9f14      	ldrcs	r7, [sp, #80]	; 0x50
 8001326:	19f7      	addcs	r7, r6, r7
 8001328:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800132a:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 800132c:	2800      	cmp	r0, #0
 800132e:	f000 80f6 	beq.w	800151e <forward_conv2d_nl_pool+0x31a>
 8001332:	1bde      	subs	r6, r3, r7
 8001334:	9633      	str	r6, [sp, #204]	; 0xcc
 8001336:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
 800133a:	9425      	str	r4, [sp, #148]	; 0x94
 800133c:	9323      	str	r3, [sp, #140]	; 0x8c
 800133e:	9728      	str	r7, [sp, #160]	; 0xa0
 8001340:	9513      	str	r5, [sp, #76]	; 0x4c
 8001342:	9022      	str	r0, [sp, #136]	; 0x88
 8001344:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8001346:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001348:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800134a:	2800      	cmp	r0, #0
 800134c:	bfcc      	ite	gt
 800134e:	4606      	movgt	r6, r0
 8001350:	2600      	movle	r6, #0
 8001352:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001354:	18e3      	adds	r3, r4, r3
 8001356:	4298      	cmp	r0, r3
 8001358:	bf32      	itee	cc
 800135a:	4603      	movcc	r3, r0
 800135c:	9b13      	ldrcs	r3, [sp, #76]	; 0x4c
 800135e:	18e3      	addcs	r3, r4, r3
 8001360:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8001362:	1af4      	subs	r4, r6, r3
 8001364:	fb04 fa00 	mul.w	sl, r4, r0
 8001368:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800136a:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800136c:	42a0      	cmp	r0, r4
 800136e:	46f0      	mov	r8, lr
 8001370:	f04f 0900 	mov.w	r9, #0
 8001374:	f280 80c5 	bge.w	8001502 <forward_conv2d_nl_pool+0x2fe>
 8001378:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 800137a:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800137c:	922c      	str	r2, [sp, #176]	; 0xb0
 800137e:	4350      	muls	r0, r2
 8001380:	1b04      	subs	r4, r0, r4
 8001382:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8001384:	9621      	str	r6, [sp, #132]	; 0x84
 8001386:	1b45      	subs	r5, r0, r5
 8001388:	9811      	ldr	r0, [sp, #68]	; 0x44
 800138a:	9327      	str	r3, [sp, #156]	; 0x9c
 800138c:	9412      	str	r4, [sp, #72]	; 0x48
 800138e:	951f      	str	r5, [sp, #124]	; 0x7c
 8001390:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001394:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8001396:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8001398:	4252      	negs	r2, r2
 800139a:	bfd8      	it	le
 800139c:	2200      	movle	r2, #0
 800139e:	1b1b      	subs	r3, r3, r4
 80013a0:	428b      	cmp	r3, r1
 80013a2:	bf3a      	itte	cc
 80013a4:	9b0d      	ldrcc	r3, [sp, #52]	; 0x34
 80013a6:	1b1d      	subcc	r5, r3, r4
 80013a8:	460d      	movcs	r5, r1
 80013aa:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80013ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80013ae:	4344      	muls	r4, r0
 80013b0:	1ae3      	subs	r3, r4, r3
 80013b2:	9c21      	ldr	r4, [sp, #132]	; 0x84
 80013b4:	42b4      	cmp	r4, r6
 80013b6:	f280 8099 	bge.w	80014ec <forward_conv2d_nl_pool+0x2e8>
 80013ba:	1aad      	subs	r5, r5, r2
 80013bc:	9532      	str	r5, [sp, #200]	; 0xc8
 80013be:	eba6 0c04 	sub.w	ip, r6, r4
 80013c2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80013c4:	9e30      	ldr	r6, [sp, #192]	; 0xc0
 80013c6:	9c04      	ldr	r4, [sp, #16]
 80013c8:	9f00      	ldr	r7, [sp, #0]
 80013ca:	f8cd b098 	str.w	fp, [sp, #152]	; 0x98
 80013ce:	4375      	muls	r5, r6
 80013d0:	9531      	str	r5, [sp, #196]	; 0xc4
 80013d2:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
 80013d6:	9d03      	ldr	r5, [sp, #12]
 80013d8:	9e02      	ldr	r6, [sp, #8]
 80013da:	9011      	str	r0, [sp, #68]	; 0x44
 80013dc:	911c      	str	r1, [sp, #112]	; 0x70
 80013de:	f8cd e0a4 	str.w	lr, [sp, #164]	; 0xa4
 80013e2:	921e      	str	r2, [sp, #120]	; 0x78
 80013e4:	469a      	mov	sl, r3
 80013e6:	46e3      	mov	fp, ip
 80013e8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80013ea:	f8dd e0bc 	ldr.w	lr, [sp, #188]	; 0xbc
 80013ee:	f1da 0100 	rsbs	r1, sl, #0
 80013f2:	bfd8      	it	le
 80013f4:	2100      	movle	r1, #0
 80013f6:	eb01 0c0a 	add.w	ip, r1, sl
 80013fa:	fb0e 220c 	mla	r2, lr, ip, r2
 80013fe:	eba6 000a 	sub.w	r0, r6, sl
 8001402:	42b8      	cmp	r0, r7
 8001404:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001406:	4402      	add	r2, r0
 8001408:	9826      	ldr	r0, [sp, #152]	; 0x98
 800140a:	bf34      	ite	cc
 800140c:	eba6 030a 	subcc.w	r3, r6, sl
 8001410:	463b      	movcs	r3, r7
 8001412:	b908      	cbnz	r0, 8001418 <forward_conv2d_nl_pool+0x214>
 8001414:	ea4f 0008 	mov.w	r0, r8
 8001418:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 800141c:	f8dd c0c8 	ldr.w	ip, [sp, #200]	; 0xc8
 8001420:	1a5b      	subs	r3, r3, r1
 8001422:	f1be 0f01 	cmp.w	lr, #1
 8001426:	d112      	bne.n	800144e <forward_conv2d_nl_pool+0x24a>
 8001428:	9108      	str	r1, [sp, #32]
 800142a:	9309      	str	r3, [sp, #36]	; 0x24
 800142c:	f8cd c01c 	str.w	ip, [sp, #28]
 8001430:	991e      	ldr	r1, [sp, #120]	; 0x78
 8001432:	9106      	str	r1, [sp, #24]
 8001434:	991c      	ldr	r1, [sp, #112]	; 0x70
 8001436:	9105      	str	r1, [sp, #20]
 8001438:	9000      	str	r0, [sp, #0]
 800143a:	9704      	str	r7, [sp, #16]
 800143c:	9603      	str	r6, [sp, #12]
 800143e:	9502      	str	r5, [sp, #8]
 8001440:	9401      	str	r4, [sp, #4]
 8001442:	4641      	mov	r1, r8
 8001444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001446:	2000      	movs	r0, #0
 8001448:	f7ff fa32 	bl	80008b0 <ai_conv2d_kernel_simple_f32>
 800144c:	e028      	b.n	80014a0 <forward_conv2d_nl_pool+0x29c>
 800144e:	45a6      	cmp	lr, r4
 8001450:	d112      	bne.n	8001478 <forward_conv2d_nl_pool+0x274>
 8001452:	9309      	str	r3, [sp, #36]	; 0x24
 8001454:	9108      	str	r1, [sp, #32]
 8001456:	9000      	str	r0, [sp, #0]
 8001458:	f8cd c01c 	str.w	ip, [sp, #28]
 800145c:	9704      	str	r7, [sp, #16]
 800145e:	9603      	str	r6, [sp, #12]
 8001460:	9502      	str	r5, [sp, #8]
 8001462:	9401      	str	r4, [sp, #4]
 8001464:	2000      	movs	r0, #0
 8001466:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8001468:	991e      	ldr	r1, [sp, #120]	; 0x78
 800146a:	9305      	str	r3, [sp, #20]
 800146c:	9106      	str	r1, [sp, #24]
 800146e:	4641      	mov	r1, r8
 8001470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001472:	f7ff faa5 	bl	80009c0 <ai_conv2d_kernel_depthwise_f32>
 8001476:	e013      	b.n	80014a0 <forward_conv2d_nl_pool+0x29c>
 8001478:	9109      	str	r1, [sp, #36]	; 0x24
 800147a:	930a      	str	r3, [sp, #40]	; 0x28
 800147c:	9000      	str	r0, [sp, #0]
 800147e:	f8cd c020 	str.w	ip, [sp, #32]
 8001482:	9704      	str	r7, [sp, #16]
 8001484:	9603      	str	r6, [sp, #12]
 8001486:	9502      	str	r5, [sp, #8]
 8001488:	9401      	str	r4, [sp, #4]
 800148a:	2000      	movs	r0, #0
 800148c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800148e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001490:	9107      	str	r1, [sp, #28]
 8001492:	9306      	str	r3, [sp, #24]
 8001494:	991c      	ldr	r1, [sp, #112]	; 0x70
 8001496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001498:	9105      	str	r1, [sp, #20]
 800149a:	4641      	mov	r1, r8
 800149c:	f7ff fb32 	bl	8000b04 <ai_conv2d_kernel_group_f32>
 80014a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80014a2:	462a      	mov	r2, r5
 80014a4:	4641      	mov	r1, r8
 80014a6:	4640      	mov	r0, r8
 80014a8:	4798      	blx	r3
 80014aa:	9820      	ldr	r0, [sp, #128]	; 0x80
 80014ac:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80014b0:	f109 0901 	add.w	r9, r9, #1
 80014b4:	4548      	cmp	r0, r9
 80014b6:	bf18      	it	ne
 80014b8:	2000      	movne	r0, #0
 80014ba:	9000      	str	r0, [sp, #0]
 80014bc:	462b      	mov	r3, r5
 80014be:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80014c0:	462a      	mov	r2, r5
 80014c2:	4641      	mov	r1, r8
 80014c4:	47e0      	blx	ip
 80014c6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80014c8:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 80014cc:	f1bb 0b01 	subs.w	fp, fp, #1
 80014d0:	4482      	add	sl, r0
 80014d2:	d189      	bne.n	80013e8 <forward_conv2d_nl_pool+0x1e4>
 80014d4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80014d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80014d8:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 80014dc:	f8dd e0a4 	ldr.w	lr, [sp, #164]	; 0xa4
 80014e0:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80014e4:	9404      	str	r4, [sp, #16]
 80014e6:	9503      	str	r5, [sp, #12]
 80014e8:	9602      	str	r6, [sp, #8]
 80014ea:	9700      	str	r7, [sp, #0]
 80014ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80014ee:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80014f0:	189a      	adds	r2, r3, r2
 80014f2:	9212      	str	r2, [sp, #72]	; 0x48
 80014f4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80014f6:	1e52      	subs	r2, r2, #1
 80014f8:	921f      	str	r2, [sp, #124]	; 0x7c
 80014fa:	f47f af49 	bne.w	8001390 <forward_conv2d_nl_pool+0x18c>
 80014fe:	9011      	str	r0, [sp, #68]	; 0x44
 8001500:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8001502:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8001504:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8001506:	1818      	adds	r0, r3, r0
 8001508:	9013      	str	r0, [sp, #76]	; 0x4c
 800150a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800150c:	9818      	ldr	r0, [sp, #96]	; 0x60
 800150e:	1e5b      	subs	r3, r3, #1
 8001510:	4486      	add	lr, r0
 8001512:	9322      	str	r3, [sp, #136]	; 0x88
 8001514:	f47f af16 	bne.w	8001344 <forward_conv2d_nl_pool+0x140>
 8001518:	f8dd c0ac 	ldr.w	ip, [sp, #172]	; 0xac
 800151c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800151e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001520:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8001522:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8001524:	18eb      	adds	r3, r5, r3
 8001526:	1e76      	subs	r6, r6, #1
 8001528:	9314      	str	r3, [sp, #80]	; 0x50
 800152a:	9624      	str	r6, [sp, #144]	; 0x90
 800152c:	f47f aeef 	bne.w	800130e <forward_conv2d_nl_pool+0x10a>
 8001530:	b035      	add	sp, #212	; 0xd4
 8001532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001538 <forward_dense>:
 8001538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800153c:	b089      	sub	sp, #36	; 0x24
 800153e:	6940      	ldr	r0, [r0, #20]
 8001540:	6800      	ldr	r0, [r0, #0]
 8001542:	6801      	ldr	r1, [r0, #0]
 8001544:	6842      	ldr	r2, [r0, #4]
 8001546:	6880      	ldr	r0, [r0, #8]
 8001548:	f8d0 8000 	ldr.w	r8, [r0]
 800154c:	6844      	ldr	r4, [r0, #4]
 800154e:	680e      	ldr	r6, [r1, #0]
 8001550:	f8d2 e000 	ldr.w	lr, [r2]
 8001554:	f8de 000c 	ldr.w	r0, [lr, #12]
 8001558:	f8de 2010 	ldr.w	r2, [lr, #16]
 800155c:	68b5      	ldr	r5, [r6, #8]
 800155e:	f8de 1008 	ldr.w	r1, [lr, #8]
 8001562:	4350      	muls	r0, r2
 8001564:	f8d8 2000 	ldr.w	r2, [r8]
 8001568:	6813      	ldr	r3, [r2, #0]
 800156a:	ea4f 5a53 	mov.w	sl, r3, lsr #21
 800156e:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 8001572:	f00a 0a03 	and.w	sl, sl, #3
 8001576:	0c5b      	lsrs	r3, r3, #17
 8001578:	2700      	movs	r7, #0
 800157a:	fa29 f90a 	lsr.w	r9, r9, sl
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	f8cd 9004 	str.w	r9, [sp, #4]
 8001586:	2b04      	cmp	r3, #4
 8001588:	6836      	ldr	r6, [r6, #0]
 800158a:	bf14      	ite	ne
 800158c:	2b08      	cmpne	r3, #8
 800158e:	68d7      	ldreq	r7, [r2, #12]
 8001590:	f8de 2000 	ldr.w	r2, [lr]
 8001594:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8001598:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800159c:	68b2      	ldr	r2, [r6, #8]
 800159e:	2800      	cmp	r0, #0
 80015a0:	eb09 0681 	add.w	r6, r9, r1, lsl #2
 80015a4:	d066      	beq.n	8001674 <forward_dense+0x13c>
 80015a6:	f8cd 801c 	str.w	r8, [sp, #28]
 80015aa:	9405      	str	r4, [sp, #20]
 80015ac:	9106      	str	r1, [sp, #24]
 80015ae:	9704      	str	r7, [sp, #16]
 80015b0:	9600      	str	r6, [sp, #0]
 80015b2:	9003      	str	r0, [sp, #12]
 80015b4:	9807      	ldr	r0, [sp, #28]
 80015b6:	6801      	ldr	r1, [r0, #0]
 80015b8:	6888      	ldr	r0, [r1, #8]
 80015ba:	9905      	ldr	r1, [sp, #20]
 80015bc:	b109      	cbz	r1, 80015c2 <forward_dense+0x8a>
 80015be:	680c      	ldr	r4, [r1, #0]
 80015c0:	68a1      	ldr	r1, [r4, #8]
 80015c2:	9c04      	ldr	r4, [sp, #16]
 80015c4:	2c00      	cmp	r4, #0
 80015c6:	9c00      	ldr	r4, [sp, #0]
 80015c8:	d110      	bne.n	80015ec <forward_dense+0xb4>
 80015ca:	45a1      	cmp	r9, r4
 80015cc:	d247      	bcs.n	800165e <forward_dense+0x126>
 80015ce:	46a2      	mov	sl, r4
 80015d0:	462e      	mov	r6, r5
 80015d2:	464f      	mov	r7, r9
 80015d4:	461c      	mov	r4, r3
 80015d6:	4690      	mov	r8, r2
 80015d8:	4681      	mov	r9, r0
 80015da:	460d      	mov	r5, r1
 80015dc:	2d00      	cmp	r5, #0
 80015de:	bf19      	ittee	ne
 80015e0:	f855 0b04 	ldrne.w	r0, [r5], #4
 80015e4:	9002      	strne	r0, [sp, #8]
 80015e6:	2100      	moveq	r1, #0
 80015e8:	9102      	streq	r1, [sp, #8]
 80015ea:	e028      	b.n	800163e <forward_dense+0x106>
 80015ec:	45a1      	cmp	r9, r4
 80015ee:	d236      	bcs.n	800165e <forward_dense+0x126>
 80015f0:	9c04      	ldr	r4, [sp, #16]
 80015f2:	9f00      	ldr	r7, [sp, #0]
 80015f4:	4698      	mov	r8, r3
 80015f6:	4616      	mov	r6, r2
 80015f8:	4682      	mov	sl, r0
 80015fa:	468b      	mov	fp, r1
 80015fc:	f1bb 0f00 	cmp.w	fp, #0
 8001600:	bf19      	ittee	ne
 8001602:	f85b 0b04 	ldrne.w	r0, [fp], #4
 8001606:	9002      	strne	r0, [sp, #8]
 8001608:	2000      	moveq	r0, #0
 800160a:	9002      	streq	r0, [sp, #8]
 800160c:	9901      	ldr	r1, [sp, #4]
 800160e:	9500      	str	r5, [sp, #0]
 8001610:	2904      	cmp	r1, #4
 8001612:	4633      	mov	r3, r6
 8001614:	4622      	mov	r2, r4
 8001616:	4651      	mov	r1, sl
 8001618:	a802      	add	r0, sp, #8
 800161a:	d103      	bne.n	8001624 <forward_dense+0xec>
 800161c:	f7ff fcf0 	bl	8001000 <ai_dict4_dot_array_f32>
 8001620:	e002      	b.n	8001628 <forward_dense+0xf0>
 8001622:	bf00      	nop
 8001624:	f7ff fb80 	bl	8000d28 <ai_dict8_dot_array_f32>
 8001628:	9802      	ldr	r0, [sp, #8]
 800162a:	f849 0b04 	str.w	r0, [r9], #4
 800162e:	45b9      	cmp	r9, r7
 8001630:	44c2      	add	sl, r8
 8001632:	d3e3      	bcc.n	80015fc <forward_dense+0xc4>
 8001634:	9404      	str	r4, [sp, #16]
 8001636:	4643      	mov	r3, r8
 8001638:	4632      	mov	r2, r6
 800163a:	9700      	str	r7, [sp, #0]
 800163c:	e00f      	b.n	800165e <forward_dense+0x126>
 800163e:	4633      	mov	r3, r6
 8001640:	4642      	mov	r2, r8
 8001642:	4649      	mov	r1, r9
 8001644:	a802      	add	r0, sp, #8
 8001646:	f000 fff5 	bl	8002634 <ai_math_dot_array>
 800164a:	9802      	ldr	r0, [sp, #8]
 800164c:	f847 0b04 	str.w	r0, [r7], #4
 8001650:	4557      	cmp	r7, sl
 8001652:	44a1      	add	r9, r4
 8001654:	d3c2      	bcc.n	80015dc <forward_dense+0xa4>
 8001656:	4635      	mov	r5, r6
 8001658:	4623      	mov	r3, r4
 800165a:	46b9      	mov	r9, r7
 800165c:	4642      	mov	r2, r8
 800165e:	9800      	ldr	r0, [sp, #0]
 8001660:	9906      	ldr	r1, [sp, #24]
 8001662:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 8001666:	9803      	ldr	r0, [sp, #12]
 8001668:	9400      	str	r4, [sp, #0]
 800166a:	1e40      	subs	r0, r0, #1
 800166c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8001670:	9003      	str	r0, [sp, #12]
 8001672:	d19f      	bne.n	80015b4 <forward_dense+0x7c>
 8001674:	b009      	add	sp, #36	; 0x24
 8001676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800167c <arm_mat_gemm_f32>:
 800167c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001680:	b08a      	sub	sp, #40	; 0x28
 8001682:	4615      	mov	r5, r2
 8001684:	468b      	mov	fp, r1
 8001686:	469a      	mov	sl, r3
 8001688:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800168a:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800168e:	6869      	ldr	r1, [r5, #4]
 8001690:	9100      	str	r1, [sp, #0]
 8001692:	685c      	ldr	r4, [r3, #4]
 8001694:	9402      	str	r4, [sp, #8]
 8001696:	f8b3 9000 	ldrh.w	r9, [r3]
 800169a:	8804      	ldrh	r4, [r0, #0]
 800169c:	885e      	ldrh	r6, [r3, #2]
 800169e:	8840      	ldrh	r0, [r0, #2]
 80016a0:	f8bb 1000 	ldrh.w	r1, [fp]
 80016a4:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 80016a8:	f8b5 e000 	ldrh.w	lr, [r5]
 80016ac:	886f      	ldrh	r7, [r5, #2]
 80016ae:	f8db 3004 	ldr.w	r3, [fp, #4]
 80016b2:	9305      	str	r3, [sp, #20]
 80016b4:	9304      	str	r3, [sp, #16]
 80016b6:	2500      	movs	r5, #0
 80016b8:	fa4f f38a 	sxtb.w	r3, sl
 80016bc:	2b00      	cmp	r3, #0
 80016be:	bf0c      	ite	eq
 80016c0:	46a0      	moveq	r8, r4
 80016c2:	4680      	movne	r8, r0
 80016c4:	2f01      	cmp	r7, #1
 80016c6:	bf0c      	ite	eq
 80016c8:	2300      	moveq	r3, #0
 80016ca:	2304      	movne	r3, #4
 80016cc:	f1be 0f01 	cmp.w	lr, #1
 80016d0:	d104      	bne.n	80016dc <arm_mat_gemm_f32+0x60>
 80016d2:	2f01      	cmp	r7, #1
 80016d4:	d007      	beq.n	80016e6 <arm_mat_gemm_f32+0x6a>
 80016d6:	f1c6 0e00 	rsb	lr, r6, #0
 80016da:	e005      	b.n	80016e8 <arm_mat_gemm_f32+0x6c>
 80016dc:	2f01      	cmp	r7, #1
 80016de:	bf08      	it	eq
 80016e0:	f04f 0e01 	moveq.w	lr, #1
 80016e4:	d000      	beq.n	80016e8 <arm_mat_gemm_f32+0x6c>
 80016e6:	46ae      	mov	lr, r5
 80016e8:	fa0f f78e 	sxth.w	r7, lr
 80016ec:	9701      	str	r7, [sp, #4]
 80016ee:	fa4f f78a 	sxtb.w	r7, sl
 80016f2:	2f00      	cmp	r7, #0
 80016f4:	bf0c      	ite	eq
 80016f6:	46a3      	moveq	fp, r4
 80016f8:	4683      	movne	fp, r0
 80016fa:	45cb      	cmp	fp, r9
 80016fc:	d115      	bne.n	800172a <arm_mat_gemm_f32+0xae>
 80016fe:	f99d e04c 	ldrsb.w	lr, [sp, #76]	; 0x4c
 8001702:	f1be 0f00 	cmp.w	lr, #0
 8001706:	bf0c      	ite	eq
 8001708:	4691      	moveq	r9, r2
 800170a:	4689      	movne	r9, r1
 800170c:	45b1      	cmp	r9, r6
 800170e:	d10c      	bne.n	800172a <arm_mat_gemm_f32+0xae>
 8001710:	fa4f f68a 	sxtb.w	r6, sl
 8001714:	2e00      	cmp	r6, #0
 8001716:	bf0c      	ite	eq
 8001718:	4683      	moveq	fp, r0
 800171a:	46a3      	movne	fp, r4
 800171c:	f1be 0f00 	cmp.w	lr, #0
 8001720:	bf0c      	ite	eq
 8001722:	460e      	moveq	r6, r1
 8001724:	4616      	movne	r6, r2
 8001726:	45b3      	cmp	fp, r6
 8001728:	d06c      	beq.n	8001804 <arm_mat_gemm_f32+0x188>
 800172a:	f06f 0002 	mvn.w	r0, #2
 800172e:	b00a      	add	sp, #40	; 0x28
 8001730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001734:	9d05      	ldr	r5, [sp, #20]
 8001736:	0097      	lsls	r7, r2, #2
 8001738:	9708      	str	r7, [sp, #32]
 800173a:	0086      	lsls	r6, r0, #2
 800173c:	9607      	str	r6, [sp, #28]
 800173e:	f8cd c018 	str.w	ip, [sp, #24]
 8001742:	f8ad 4002 	strh.w	r4, [sp, #2]
 8001746:	4644      	mov	r4, r8
 8001748:	f8dd c010 	ldr.w	ip, [sp, #16]
 800174c:	fa4f f68a 	sxtb.w	r6, sl
 8001750:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8001754:	2e00      	cmp	r6, #0
 8001756:	ed9f 1a34 	vldr	s2, [pc, #208]	; 8001828 <.text_16>
 800175a:	bf0c      	ite	eq
 800175c:	4606      	moveq	r6, r0
 800175e:	f8bd 6002 	ldrhne.w	r6, [sp, #2]
 8001762:	b1b6      	cbz	r6, 8001792 <arm_mat_gemm_f32+0x116>
 8001764:	fa4f f78a 	sxtb.w	r7, sl
 8001768:	2f00      	cmp	r7, #0
 800176a:	bf0c      	ite	eq
 800176c:	2704      	moveq	r7, #4
 800176e:	9f07      	ldrne	r7, [sp, #28]
 8001770:	f1be 0f00 	cmp.w	lr, #0
 8001774:	edd8 1a00 	vldr	s3, [r8]
 8001778:	ed95 2a00 	vldr	s4, [r5]
 800177c:	44b8      	add	r8, r7
 800177e:	bf0c      	ite	eq
 8001780:	9f08      	ldreq	r7, [sp, #32]
 8001782:	2704      	movne	r7, #4
 8001784:	19ed      	adds	r5, r5, r7
 8001786:	1e76      	subs	r6, r6, #1
 8001788:	b2b7      	uxth	r7, r6
 800178a:	2f00      	cmp	r7, #0
 800178c:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001790:	d1e8      	bne.n	8001764 <arm_mat_gemm_f32+0xe8>
 8001792:	ee20 1a01 	vmul.f32	s2, s0, s2
 8001796:	eddb 1a00 	vldr	s3, [fp]
 800179a:	1e64      	subs	r4, r4, #1
 800179c:	ee00 1aa1 	vmla.f32	s2, s1, s3
 80017a0:	b2a4      	uxth	r4, r4
 80017a2:	f1be 0f00 	cmp.w	lr, #0
 80017a6:	ed89 1a00 	vstr	s2, [r9]
 80017aa:	bf0e      	itee	eq
 80017ac:	1b15      	subeq	r5, r2, r4
 80017ae:	1b0d      	subne	r5, r1, r4
 80017b0:	4355      	mulne	r5, r2
 80017b2:	2c00      	cmp	r4, #0
 80017b4:	f109 0904 	add.w	r9, r9, #4
 80017b8:	449b      	add	fp, r3
 80017ba:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
 80017be:	d1c5      	bne.n	800174c <arm_mat_gemm_f32+0xd0>
 80017c0:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80017c4:	9d06      	ldr	r5, [sp, #24]
 80017c6:	f8bd 4002 	ldrh.w	r4, [sp, #2]
 80017ca:	f8cd c010 	str.w	ip, [sp, #16]
 80017ce:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80017d0:	444e      	add	r6, r9
 80017d2:	9603      	str	r6, [sp, #12]
 80017d4:	fa4f f68a 	sxtb.w	r6, sl
 80017d8:	2e00      	cmp	r6, #0
 80017da:	bf0c      	ite	eq
 80017dc:	ea4f 0c80 	moveq.w	ip, r0, lsl #2
 80017e0:	f04f 0c04 	movne.w	ip, #4
 80017e4:	44ac      	add	ip, r5
 80017e6:	9d01      	ldr	r5, [sp, #4]
 80017e8:	eb0b 0b85 	add.w	fp, fp, r5, lsl #2
 80017ec:	f8bd 5000 	ldrh.w	r5, [sp]
 80017f0:	1e6e      	subs	r6, r5, #1
 80017f2:	f8ad 6000 	strh.w	r6, [sp]
 80017f6:	f8bd 5000 	ldrh.w	r5, [sp]
 80017fa:	b955      	cbnz	r5, 8001812 <arm_mat_gemm_f32+0x196>
 80017fc:	2000      	movs	r0, #0
 80017fe:	b00a      	add	sp, #40	; 0x28
 8001800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001804:	f8dd b000 	ldr.w	fp, [sp]
 8001808:	9503      	str	r5, [sp, #12]
 800180a:	f8ad 8000 	strh.w	r8, [sp]
 800180e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8001812:	ae03      	add	r6, sp, #12
 8001814:	9d02      	ldr	r5, [sp, #8]
 8001816:	8836      	ldrh	r6, [r6, #0]
 8001818:	f1be 0f00 	cmp.w	lr, #0
 800181c:	eb05 0986 	add.w	r9, r5, r6, lsl #2
 8001820:	bf0c      	ite	eq
 8001822:	4690      	moveq	r8, r2
 8001824:	4688      	movne	r8, r1
 8001826:	e785      	b.n	8001734 <arm_mat_gemm_f32+0xb8>

08001828 <.text_16>:
 8001828:	00000000 	.word	0x00000000

0800182c <.text_17>:
 800182c:	08000d25 	.word	0x08000d25

08001830 <forward_gemm>:
 8001830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001832:	b08b      	sub	sp, #44	; 0x2c
 8001834:	6941      	ldr	r1, [r0, #20]
 8001836:	6809      	ldr	r1, [r1, #0]
 8001838:	680a      	ldr	r2, [r1, #0]
 800183a:	6849      	ldr	r1, [r1, #4]
 800183c:	6809      	ldr	r1, [r1, #0]
 800183e:	680d      	ldr	r5, [r1, #0]
 8001840:	6814      	ldr	r4, [r2, #0]
 8001842:	6853      	ldr	r3, [r2, #4]
 8001844:	6892      	ldr	r2, [r2, #8]
 8001846:	68ad      	ldr	r5, [r5, #8]
 8001848:	68ce      	ldr	r6, [r1, #12]
 800184a:	690f      	ldr	r7, [r1, #16]
 800184c:	9509      	str	r5, [sp, #36]	; 0x24
 800184e:	f8ad 7020 	strh.w	r7, [sp, #32]
 8001852:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
 8001856:	6825      	ldr	r5, [r4, #0]
 8001858:	68e6      	ldr	r6, [r4, #12]
 800185a:	68ad      	ldr	r5, [r5, #8]
 800185c:	6924      	ldr	r4, [r4, #16]
 800185e:	f8ad 4018 	strh.w	r4, [sp, #24]
 8001862:	f8ad 601a 	strh.w	r6, [sp, #26]
 8001866:	9507      	str	r5, [sp, #28]
 8001868:	681c      	ldr	r4, [r3, #0]
 800186a:	68dd      	ldr	r5, [r3, #12]
 800186c:	68a4      	ldr	r4, [r4, #8]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	f8ad 3010 	strh.w	r3, [sp, #16]
 8001874:	f8ad 5012 	strh.w	r5, [sp, #18]
 8001878:	9405      	str	r4, [sp, #20]
 800187a:	6813      	ldr	r3, [r2, #0]
 800187c:	68d4      	ldr	r4, [r2, #12]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	6912      	ldr	r2, [r2, #16]
 8001882:	f8ad 2008 	strh.w	r2, [sp, #8]
 8001886:	f8ad 400a 	strh.w	r4, [sp, #10]
 800188a:	aa08      	add	r2, sp, #32
 800188c:	9303      	str	r3, [sp, #12]
 800188e:	9201      	str	r2, [sp, #4]
 8001890:	aa02      	add	r2, sp, #8
 8001892:	f990 1021 	ldrsb.w	r1, [r0, #33]	; 0x21
 8001896:	9100      	str	r1, [sp, #0]
 8001898:	a904      	add	r1, sp, #16
 800189a:	f990 3020 	ldrsb.w	r3, [r0, #32]
 800189e:	edd0 0a07 	vldr	s1, [r0, #28]
 80018a2:	ed90 0a06 	vldr	s0, [r0, #24]
 80018a6:	a806      	add	r0, sp, #24
 80018a8:	f7ff fee8 	bl	800167c <arm_mat_gemm_f32>
 80018ac:	b00b      	add	sp, #44	; 0x2c
 80018ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018b0 <nl_func_sm_channel_f32>:
 80018b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018b4:	460f      	mov	r7, r1
 80018b6:	4614      	mov	r4, r2
 80018b8:	ed2d 8b02 	vpush	{d8}
 80018bc:	2c02      	cmp	r4, #2
 80018be:	4606      	mov	r6, r0
 80018c0:	ed97 8a00 	vldr	s16, [r7]
 80018c4:	eddf 8ac3 	vldr	s17, [pc, #780]	; 8001bd4 <.text_11>
 80018c8:	d33d      	bcc.n	8001946 <nl_func_sm_channel_f32+0x96>
 80018ca:	1e61      	subs	r1, r4, #1
 80018cc:	1d3a      	adds	r2, r7, #4
 80018ce:	f011 0003 	ands.w	r0, r1, #3
 80018d2:	d00c      	beq.n	80018ee <nl_func_sm_channel_f32+0x3e>
 80018d4:	ed92 0a00 	vldr	s0, [r2]
 80018d8:	eeb4 0a48 	vcmp.f32	s0, s16
 80018dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e0:	bf58      	it	pl
 80018e2:	eeb0 8a40 	vmovpl.f32	s16, s0
 80018e6:	1e40      	subs	r0, r0, #1
 80018e8:	f102 0204 	add.w	r2, r2, #4
 80018ec:	d1f2      	bne.n	80018d4 <nl_func_sm_channel_f32+0x24>
 80018ee:	0889      	lsrs	r1, r1, #2
 80018f0:	f000 802b 	beq.w	800194a <nl_func_sm_channel_f32+0x9a>
 80018f4:	ed92 0a00 	vldr	s0, [r2]
 80018f8:	eeb4 0a48 	vcmp.f32	s0, s16
 80018fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001900:	bf58      	it	pl
 8001902:	eeb0 8a40 	vmovpl.f32	s16, s0
 8001906:	ed92 0a01 	vldr	s0, [r2, #4]
 800190a:	eeb4 0a48 	vcmp.f32	s0, s16
 800190e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001912:	bf58      	it	pl
 8001914:	eeb0 8a40 	vmovpl.f32	s16, s0
 8001918:	ed92 0a02 	vldr	s0, [r2, #8]
 800191c:	eeb4 0a48 	vcmp.f32	s0, s16
 8001920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001924:	bf58      	it	pl
 8001926:	eeb0 8a40 	vmovpl.f32	s16, s0
 800192a:	ed92 0a03 	vldr	s0, [r2, #12]
 800192e:	eeb4 0a48 	vcmp.f32	s0, s16
 8001932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001936:	bf58      	it	pl
 8001938:	eeb0 8a40 	vmovpl.f32	s16, s0
 800193c:	1e49      	subs	r1, r1, #1
 800193e:	f102 0210 	add.w	r2, r2, #16
 8001942:	d1d7      	bne.n	80018f4 <nl_func_sm_channel_f32+0x44>
 8001944:	e001      	b.n	800194a <nl_func_sm_channel_f32+0x9a>
 8001946:	2c00      	cmp	r4, #0
 8001948:	d040      	beq.n	80019cc <nl_func_sm_channel_f32+0x11c>
 800194a:	46b0      	mov	r8, r6
 800194c:	ea4f 0504 	mov.w	r5, r4
 8001950:	ed97 0a00 	vldr	s0, [r7]
 8001954:	ee30 0a48 	vsub.f32	s0, s0, s16
 8001958:	f004 fe02 	bl	8006560 <expf>
 800195c:	1d3f      	adds	r7, r7, #4
 800195e:	ed88 0a00 	vstr	s0, [r8]
 8001962:	1e6d      	subs	r5, r5, #1
 8001964:	ee78 8a80 	vadd.f32	s17, s17, s0
 8001968:	f108 0804 	add.w	r8, r8, #4
 800196c:	d1f0      	bne.n	8001950 <nl_func_sm_channel_f32+0xa0>
 800196e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001972:	f014 0003 	ands.w	r0, r4, #3
 8001976:	ee80 0a28 	vdiv.f32	s0, s0, s17
 800197a:	d009      	beq.n	8001990 <nl_func_sm_channel_f32+0xe0>
 800197c:	edd6 0a00 	vldr	s1, [r6]
 8001980:	ee60 0a80 	vmul.f32	s1, s1, s0
 8001984:	edc6 0a00 	vstr	s1, [r6]
 8001988:	1e40      	subs	r0, r0, #1
 800198a:	f106 0604 	add.w	r6, r6, #4
 800198e:	d1f5      	bne.n	800197c <nl_func_sm_channel_f32+0xcc>
 8001990:	08a4      	lsrs	r4, r4, #2
 8001992:	d01b      	beq.n	80019cc <nl_func_sm_channel_f32+0x11c>
 8001994:	edd6 0a00 	vldr	s1, [r6]
 8001998:	ee60 0a80 	vmul.f32	s1, s1, s0
 800199c:	edc6 0a00 	vstr	s1, [r6]
 80019a0:	1e64      	subs	r4, r4, #1
 80019a2:	ed96 1a01 	vldr	s2, [r6, #4]
 80019a6:	edd6 0a02 	vldr	s1, [r6, #8]
 80019aa:	ee21 1a00 	vmul.f32	s2, s2, s0
 80019ae:	ed86 1a01 	vstr	s2, [r6, #4]
 80019b2:	ee60 0a80 	vmul.f32	s1, s1, s0
 80019b6:	ed96 1a03 	vldr	s2, [r6, #12]
 80019ba:	edc6 0a02 	vstr	s1, [r6, #8]
 80019be:	ee21 1a00 	vmul.f32	s2, s2, s0
 80019c2:	ed86 1a03 	vstr	s2, [r6, #12]
 80019c6:	f106 0610 	add.w	r6, r6, #16
 80019ca:	d1e3      	bne.n	8001994 <nl_func_sm_channel_f32+0xe4>
 80019cc:	ecbd 8b02 	vpop	{d8}
 80019d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080019d4 <nl_func_sm_array_f32>:
 80019d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019d8:	b081      	sub	sp, #4
 80019da:	460c      	mov	r4, r1
 80019dc:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 80019e0:	9e08      	ldr	r6, [sp, #32]
 80019e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80019e4:	454c      	cmp	r4, r9
 80019e6:	4680      	mov	r8, r0
 80019e8:	461d      	mov	r5, r3
 80019ea:	d20a      	bcs.n	8001a02 <nl_func_sm_array_f32+0x2e>
 80019ec:	462a      	mov	r2, r5
 80019ee:	4621      	mov	r1, r4
 80019f0:	4640      	mov	r0, r8
 80019f2:	f7ff ff5d 	bl	80018b0 <nl_func_sm_channel_f32>
 80019f6:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 80019fa:	454c      	cmp	r4, r9
 80019fc:	eb08 0887 	add.w	r8, r8, r7, lsl #2
 8001a00:	d3f4      	bcc.n	80019ec <nl_func_sm_array_f32+0x18>
 8001a02:	b001      	add	sp, #4
 8001a04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001a08 <nl_func_tanh_array_f32>:
 8001a08:	b570      	push	{r4, r5, r6, lr}
 8001a0a:	460d      	mov	r5, r1
 8001a0c:	eb05 0682 	add.w	r6, r5, r2, lsl #2
 8001a10:	42b5      	cmp	r5, r6
 8001a12:	4604      	mov	r4, r0
 8001a14:	f080 800a 	bcs.w	8001a2c <nl_func_tanh_array_f32+0x24>
 8001a18:	ed95 0a00 	vldr	s0, [r5]
 8001a1c:	f004 fd4e 	bl	80064bc <tanhf>
 8001a20:	ed84 0a00 	vstr	s0, [r4]
 8001a24:	1d24      	adds	r4, r4, #4
 8001a26:	1d2d      	adds	r5, r5, #4
 8001a28:	42b5      	cmp	r5, r6
 8001a2a:	d3f5      	bcc.n	8001a18 <nl_func_tanh_array_f32+0x10>
 8001a2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001a30 <nl_func_sigmoid_array_f32>:
 8001a30:	b570      	push	{r4, r5, r6, lr}
 8001a32:	460d      	mov	r5, r1
 8001a34:	eb05 0682 	add.w	r6, r5, r2, lsl #2
 8001a38:	42b5      	cmp	r5, r6
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	f080 8014 	bcs.w	8001a68 <nl_func_sigmoid_array_f32+0x38>
 8001a40:	ed95 0a00 	vldr	s0, [r5]
 8001a44:	eeb1 0a40 	vneg.f32	s0, s0
 8001a48:	f004 fd8a 	bl	8006560 <expf>
 8001a4c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001a50:	ee70 0a20 	vadd.f32	s1, s0, s1
 8001a54:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001a58:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8001a5c:	ed84 0a00 	vstr	s0, [r4]
 8001a60:	1d24      	adds	r4, r4, #4
 8001a62:	1d2d      	adds	r5, r5, #4
 8001a64:	42b5      	cmp	r5, r6
 8001a66:	d3eb      	bcc.n	8001a40 <nl_func_sigmoid_array_f32+0x10>
 8001a68:	bd70      	pop	{r4, r5, r6, pc}
	...

08001a6c <nl_func_sign_array_f32>:
 8001a6c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001a70:	4291      	cmp	r1, r2
 8001a72:	d216      	bcs.n	8001aa2 <nl_func_sign_array_f32+0x36>
 8001a74:	f04f 33ff 	mov.w	r3, #4294967295
 8001a78:	ed91 0a00 	vldr	s0, [r1]
 8001a7c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a84:	bfcc      	ite	gt
 8001a86:	ed9f 0ac6 	vldrgt	s0, [pc, #792]	; 8001da0 <.text_16>
 8001a8a:	ee00 3a10 	vmovle	s0, r3
 8001a8e:	1d09      	adds	r1, r1, #4
 8001a90:	4684      	mov	ip, r0
 8001a92:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001a96:	4291      	cmp	r1, r2
 8001a98:	f10c 0004 	add.w	r0, ip, #4
 8001a9c:	ed8c 0a00 	vstr	s0, [ip]
 8001aa0:	d3ea      	bcc.n	8001a78 <nl_func_sign_array_f32+0xc>
 8001aa2:	4770      	bx	lr

08001aa4 <nl_func_clip_array_f32>:
 8001aa4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001aa8:	4291      	cmp	r1, r2
 8001aaa:	d216      	bcs.n	8001ada <nl_func_clip_array_f32+0x36>
 8001aac:	4603      	mov	r3, r0
 8001aae:	ed91 1a00 	vldr	s2, [r1]
 8001ab2:	1d18      	adds	r0, r3, #4
 8001ab4:	eeb4 0a41 	vcmp.f32	s0, s2
 8001ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abc:	bf58      	it	pl
 8001abe:	eeb0 1a40 	vmovpl.f32	s2, s0
 8001ac2:	eeb4 1a60 	vcmp.f32	s2, s1
 8001ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aca:	bf58      	it	pl
 8001acc:	eeb0 1a60 	vmovpl.f32	s2, s1
 8001ad0:	1d09      	adds	r1, r1, #4
 8001ad2:	4291      	cmp	r1, r2
 8001ad4:	ed83 1a00 	vstr	s2, [r3]
 8001ad8:	d3e8      	bcc.n	8001aac <nl_func_clip_array_f32+0x8>
 8001ada:	4770      	bx	lr

08001adc <nl_func_relu_array_f32>:
 8001adc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001ae0:	4291      	cmp	r1, r2
 8001ae2:	d20f      	bcs.n	8001b04 <nl_func_relu_array_f32+0x28>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	ed91 0a00 	vldr	s0, [r1]
 8001aea:	1d18      	adds	r0, r3, #4
 8001aec:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af4:	bfd8      	it	le
 8001af6:	ed9f 0a37 	vldrle	s0, [pc, #220]	; 8001bd4 <.text_11>
 8001afa:	1d09      	adds	r1, r1, #4
 8001afc:	4291      	cmp	r1, r2
 8001afe:	ed83 0a00 	vstr	s0, [r3]
 8001b02:	d3ef      	bcc.n	8001ae4 <nl_func_relu_array_f32+0x8>
 8001b04:	4770      	bx	lr
	...

08001b08 <nl_func_relu6_array_f32>:
 8001b08:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001b0c:	4291      	cmp	r1, r2
 8001b0e:	d21a      	bcs.n	8001b46 <nl_func_relu6_array_f32+0x3e>
 8001b10:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8001b14:	4603      	mov	r3, r0
 8001b16:	edd1 0a00 	vldr	s1, [r1]
 8001b1a:	1d18      	adds	r0, r3, #4
 8001b1c:	eef5 0a40 	vcmp.f32	s1, #0.0
 8001b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b24:	dd08      	ble.n	8001b38 <nl_func_relu6_array_f32+0x30>
 8001b26:	eef4 0a40 	vcmp.f32	s1, s0
 8001b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2e:	bf58      	it	pl
 8001b30:	eef0 0a40 	vmovpl.f32	s1, s0
 8001b34:	e002      	b.n	8001b3c <nl_func_relu6_array_f32+0x34>
 8001b36:	bf00      	nop
 8001b38:	eddf 0a26 	vldr	s1, [pc, #152]	; 8001bd4 <.text_11>
 8001b3c:	1d09      	adds	r1, r1, #4
 8001b3e:	4291      	cmp	r1, r2
 8001b40:	edc3 0a00 	vstr	s1, [r3]
 8001b44:	d3e6      	bcc.n	8001b14 <nl_func_relu6_array_f32+0xc>
 8001b46:	4770      	bx	lr

08001b48 <nl_func_selu_array_f32>:
 8001b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b4a:	b081      	sub	sp, #4
 8001b4c:	460d      	mov	r5, r1
 8001b4e:	eb05 0682 	add.w	r6, r5, r2, lsl #2
 8001b52:	ed2d 8b04 	vpush	{d8-d9}
 8001b56:	42b5      	cmp	r5, r6
 8001b58:	4604      	mov	r4, r0
 8001b5a:	eef0 8a40 	vmov.f32	s17, s0
 8001b5e:	eeb0 8a60 	vmov.f32	s16, s1
 8001b62:	d232      	bcs.n	8001bca <nl_func_selu_array_f32+0x82>
 8001b64:	4627      	mov	r7, r4
 8001b66:	ed95 9a00 	vldr	s18, [r5]
 8001b6a:	1d3c      	adds	r4, r7, #4
 8001b6c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8001b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b74:	bf4c      	ite	mi
 8001b76:	eddf 9a17 	vldrmi	s19, [pc, #92]	; 8001bd4 <.text_11>
 8001b7a:	eef0 9a49 	vmovpl.f32	s19, s18
 8001b7e:	eeb0 0a49 	vmov.f32	s0, s18
 8001b82:	f004 fced 	bl	8006560 <expf>
 8001b86:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001b8a:	ee30 0a20 	vadd.f32	s0, s0, s1
 8001b8e:	ee20 0a28 	vmul.f32	s0, s0, s17
 8001b92:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9a:	dd05      	ble.n	8001ba8 <nl_func_selu_array_f32+0x60>
 8001b9c:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8001bd4 <.text_11>
 8001ba0:	ee79 9a81 	vadd.f32	s19, s19, s2
 8001ba4:	e00a      	b.n	8001bbc <nl_func_selu_array_f32+0x74>
 8001ba6:	bf00      	nop
 8001ba8:	eeb0 0a49 	vmov.f32	s0, s18
 8001bac:	f004 fcd8 	bl	8006560 <expf>
 8001bb0:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001bb4:	ee30 0a20 	vadd.f32	s0, s0, s1
 8001bb8:	ee40 9a28 	vmla.f32	s19, s0, s17
 8001bbc:	1d2d      	adds	r5, r5, #4
 8001bbe:	ee28 0a29 	vmul.f32	s0, s16, s19
 8001bc2:	42b5      	cmp	r5, r6
 8001bc4:	ed87 0a00 	vstr	s0, [r7]
 8001bc8:	d3cc      	bcc.n	8001b64 <nl_func_selu_array_f32+0x1c>
 8001bca:	ecbd 8b04 	vpop	{d8-d9}
 8001bce:	b001      	add	sp, #4
 8001bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001bd4 <.text_11>:
 8001bd4:	00000000 	.word	0x00000000

08001bd8 <nl_func_prelu_array_f32>:
 8001bd8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001bdc:	4299      	cmp	r1, r3
 8001bde:	d220      	bcs.n	8001c22 <nl_func_prelu_array_f32+0x4a>
 8001be0:	ed91 0a00 	vldr	s0, [r1]
 8001be4:	ed92 1a00 	vldr	s2, [r2]
 8001be8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf0:	bf4c      	ite	mi
 8001bf2:	eddf 0aa5 	vldrmi	s1, [pc, #660]	; 8001e88 <.text_19>
 8001bf6:	eef0 0a40 	vmovpl.f32	s1, s0
 8001bfa:	eeb1 0a40 	vneg.f32	s0, s0
 8001bfe:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c06:	bf48      	it	mi
 8001c08:	ed9f 0a9f 	vldrmi	s0, [pc, #636]	; 8001e88 <.text_19>
 8001c0c:	1d09      	adds	r1, r1, #4
 8001c0e:	1d12      	adds	r2, r2, #4
 8001c10:	4684      	mov	ip, r0
 8001c12:	ee41 0a40 	vmls.f32	s1, s2, s0
 8001c16:	4299      	cmp	r1, r3
 8001c18:	f10c 0004 	add.w	r0, ip, #4
 8001c1c:	edcc 0a00 	vstr	s1, [ip]
 8001c20:	d3de      	bcc.n	8001be0 <nl_func_prelu_array_f32+0x8>
 8001c22:	4770      	bx	lr

08001c24 <forward_relu>:
 8001c24:	6940      	ldr	r0, [r0, #20]
 8001c26:	6803      	ldr	r3, [r0, #0]
 8001c28:	6819      	ldr	r1, [r3, #0]
 8001c2a:	f8d1 c000 	ldr.w	ip, [r1]
 8001c2e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8001c32:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001c36:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8001c3a:	4342      	muls	r2, r0
 8001c3c:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8001c40:	f8dc c000 	ldr.w	ip, [ip]
 8001c44:	434a      	muls	r2, r1
 8001c46:	6859      	ldr	r1, [r3, #4]
 8001c48:	680b      	ldr	r3, [r1, #0]
 8001c4a:	4342      	muls	r2, r0
 8001c4c:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001c50:	f8d3 c000 	ldr.w	ip, [r3]
 8001c54:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8001c58:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001c5c:	4290      	cmp	r0, r2
 8001c5e:	d20f      	bcs.n	8001c80 <forward_relu+0x5c>
 8001c60:	460b      	mov	r3, r1
 8001c62:	ed90 0a00 	vldr	s0, [r0]
 8001c66:	1d19      	adds	r1, r3, #4
 8001c68:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c70:	bfd8      	it	le
 8001c72:	ed9f 0a85 	vldrle	s0, [pc, #532]	; 8001e88 <.text_19>
 8001c76:	1d00      	adds	r0, r0, #4
 8001c78:	4290      	cmp	r0, r2
 8001c7a:	ed83 0a00 	vstr	s0, [r3]
 8001c7e:	d3ef      	bcc.n	8001c60 <forward_relu+0x3c>
 8001c80:	4770      	bx	lr
	...

08001c84 <forward_relu6>:
 8001c84:	6940      	ldr	r0, [r0, #20]
 8001c86:	6803      	ldr	r3, [r0, #0]
 8001c88:	6819      	ldr	r1, [r3, #0]
 8001c8a:	f8d1 c000 	ldr.w	ip, [r1]
 8001c8e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8001c92:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001c96:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8001c9a:	4342      	muls	r2, r0
 8001c9c:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8001ca0:	f8dc c000 	ldr.w	ip, [ip]
 8001ca4:	434a      	muls	r2, r1
 8001ca6:	6859      	ldr	r1, [r3, #4]
 8001ca8:	680b      	ldr	r3, [r1, #0]
 8001caa:	4342      	muls	r2, r0
 8001cac:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001cb0:	f8d3 c000 	ldr.w	ip, [r3]
 8001cb4:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8001cb8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001cbc:	4290      	cmp	r0, r2
 8001cbe:	d21a      	bcs.n	8001cf6 <forward_relu6+0x72>
 8001cc0:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	edd0 0a00 	vldr	s1, [r0]
 8001cca:	1d19      	adds	r1, r3, #4
 8001ccc:	eef5 0a40 	vcmp.f32	s1, #0.0
 8001cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd4:	dd08      	ble.n	8001ce8 <forward_relu6+0x64>
 8001cd6:	eef4 0a40 	vcmp.f32	s1, s0
 8001cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cde:	bf58      	it	pl
 8001ce0:	eef0 0a40 	vmovpl.f32	s1, s0
 8001ce4:	e002      	b.n	8001cec <forward_relu6+0x68>
 8001ce6:	bf00      	nop
 8001ce8:	eddf 0a67 	vldr	s1, [pc, #412]	; 8001e88 <.text_19>
 8001cec:	1d00      	adds	r0, r0, #4
 8001cee:	4290      	cmp	r0, r2
 8001cf0:	edc3 0a00 	vstr	s1, [r3]
 8001cf4:	d3e6      	bcc.n	8001cc4 <forward_relu6+0x40>
 8001cf6:	4770      	bx	lr

08001cf8 <forward_selu>:
 8001cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cfa:	b081      	sub	sp, #4
 8001cfc:	ed2d 8b04 	vpush	{d8-d9}
 8001d00:	6941      	ldr	r1, [r0, #20]
 8001d02:	ed90 8a07 	vldr	s16, [r0, #28]
 8001d06:	680d      	ldr	r5, [r1, #0]
 8001d08:	edd0 8a06 	vldr	s17, [r0, #24]
 8001d0c:	682a      	ldr	r2, [r5, #0]
 8001d0e:	6814      	ldr	r4, [r2, #0]
 8001d10:	6820      	ldr	r0, [r4, #0]
 8001d12:	6863      	ldr	r3, [r4, #4]
 8001d14:	68a1      	ldr	r1, [r4, #8]
 8001d16:	68e2      	ldr	r2, [r4, #12]
 8001d18:	434b      	muls	r3, r1
 8001d1a:	6921      	ldr	r1, [r4, #16]
 8001d1c:	6884      	ldr	r4, [r0, #8]
 8001d1e:	6868      	ldr	r0, [r5, #4]
 8001d20:	4353      	muls	r3, r2
 8001d22:	434b      	muls	r3, r1
 8001d24:	6801      	ldr	r1, [r0, #0]
 8001d26:	680a      	ldr	r2, [r1, #0]
 8001d28:	6895      	ldr	r5, [r2, #8]
 8001d2a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8001d2e:	42b4      	cmp	r4, r6
 8001d30:	d231      	bcs.n	8001d96 <forward_selu+0x9e>
 8001d32:	462f      	mov	r7, r5
 8001d34:	ed94 9a00 	vldr	s18, [r4]
 8001d38:	1d3d      	adds	r5, r7, #4
 8001d3a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8001d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d42:	bf4c      	ite	mi
 8001d44:	eddf 9a50 	vldrmi	s19, [pc, #320]	; 8001e88 <.text_19>
 8001d48:	eef0 9a49 	vmovpl.f32	s19, s18
 8001d4c:	eeb0 0a49 	vmov.f32	s0, s18
 8001d50:	f004 fc06 	bl	8006560 <expf>
 8001d54:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001d58:	ee30 0a20 	vadd.f32	s0, s0, s1
 8001d5c:	ee20 0a28 	vmul.f32	s0, s0, s17
 8001d60:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d68:	dd04      	ble.n	8001d74 <forward_selu+0x7c>
 8001d6a:	ed9f 1a47 	vldr	s2, [pc, #284]	; 8001e88 <.text_19>
 8001d6e:	ee79 9a81 	vadd.f32	s19, s19, s2
 8001d72:	e009      	b.n	8001d88 <forward_selu+0x90>
 8001d74:	eeb0 0a49 	vmov.f32	s0, s18
 8001d78:	f004 fbf2 	bl	8006560 <expf>
 8001d7c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001d80:	ee30 0a20 	vadd.f32	s0, s0, s1
 8001d84:	ee40 9a28 	vmla.f32	s19, s0, s17
 8001d88:	1d24      	adds	r4, r4, #4
 8001d8a:	ee28 0a29 	vmul.f32	s0, s16, s19
 8001d8e:	42b4      	cmp	r4, r6
 8001d90:	ed87 0a00 	vstr	s0, [r7]
 8001d94:	d3cd      	bcc.n	8001d32 <forward_selu+0x3a>
 8001d96:	ecbd 8b04 	vpop	{d8-d9}
 8001d9a:	b001      	add	sp, #4
 8001d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001da0 <.text_16>:
 8001da0:	00000001 	.word	0x00000001

08001da4 <forward_prelu>:
 8001da4:	b430      	push	{r4, r5}
 8001da6:	6941      	ldr	r1, [r0, #20]
 8001da8:	680c      	ldr	r4, [r1, #0]
 8001daa:	6822      	ldr	r2, [r4, #0]
 8001dac:	6815      	ldr	r5, [r2, #0]
 8001dae:	686b      	ldr	r3, [r5, #4]
 8001db0:	68a9      	ldr	r1, [r5, #8]
 8001db2:	68ea      	ldr	r2, [r5, #12]
 8001db4:	6980      	ldr	r0, [r0, #24]
 8001db6:	434b      	muls	r3, r1
 8001db8:	6929      	ldr	r1, [r5, #16]
 8001dba:	682d      	ldr	r5, [r5, #0]
 8001dbc:	4353      	muls	r3, r2
 8001dbe:	6862      	ldr	r2, [r4, #4]
 8001dc0:	6814      	ldr	r4, [r2, #0]
 8001dc2:	434b      	muls	r3, r1
 8001dc4:	68a9      	ldr	r1, [r5, #8]
 8001dc6:	6825      	ldr	r5, [r4, #0]
 8001dc8:	6804      	ldr	r4, [r0, #0]
 8001dca:	68aa      	ldr	r2, [r5, #8]
 8001dcc:	68a0      	ldr	r0, [r4, #8]
 8001dce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001dd2:	4299      	cmp	r1, r3
 8001dd4:	d21f      	bcs.n	8001e16 <forward_prelu+0x72>
 8001dd6:	4614      	mov	r4, r2
 8001dd8:	ed91 0a00 	vldr	s0, [r1]
 8001ddc:	1d22      	adds	r2, r4, #4
 8001dde:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de6:	bf4c      	ite	mi
 8001de8:	eddf 0a27 	vldrmi	s1, [pc, #156]	; 8001e88 <.text_19>
 8001dec:	eef0 0a40 	vmovpl.f32	s1, s0
 8001df0:	eeb1 0a40 	vneg.f32	s0, s0
 8001df4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfc:	bf48      	it	mi
 8001dfe:	ed9f 0a22 	vldrmi	s0, [pc, #136]	; 8001e88 <.text_19>
 8001e02:	ed90 1a00 	vldr	s2, [r0]
 8001e06:	1d09      	adds	r1, r1, #4
 8001e08:	1d00      	adds	r0, r0, #4
 8001e0a:	ee41 0a40 	vmls.f32	s1, s2, s0
 8001e0e:	4299      	cmp	r1, r3
 8001e10:	edc4 0a00 	vstr	s1, [r4]
 8001e14:	d3df      	bcc.n	8001dd6 <forward_prelu+0x32>
 8001e16:	bc30      	pop	{r4, r5}
 8001e18:	4770      	bx	lr
	...

08001e1c <forward_sign>:
 8001e1c:	6940      	ldr	r0, [r0, #20]
 8001e1e:	6803      	ldr	r3, [r0, #0]
 8001e20:	6819      	ldr	r1, [r3, #0]
 8001e22:	f8d1 c000 	ldr.w	ip, [r1]
 8001e26:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8001e2a:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001e2e:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8001e32:	4342      	muls	r2, r0
 8001e34:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8001e38:	f8dc c000 	ldr.w	ip, [ip]
 8001e3c:	434a      	muls	r2, r1
 8001e3e:	6859      	ldr	r1, [r3, #4]
 8001e40:	680b      	ldr	r3, [r1, #0]
 8001e42:	4342      	muls	r2, r0
 8001e44:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001e48:	f8d3 c000 	ldr.w	ip, [r3]
 8001e4c:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8001e50:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001e54:	4290      	cmp	r0, r2
 8001e56:	d216      	bcs.n	8001e86 <forward_sign+0x6a>
 8001e58:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5c:	ed90 0a00 	vldr	s0, [r0]
 8001e60:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e68:	bfcc      	ite	gt
 8001e6a:	ed9f 0a08 	vldrgt	s0, [pc, #32]	; 8001e8c <.text_20>
 8001e6e:	ee00 3a10 	vmovle	s0, r3
 8001e72:	1d00      	adds	r0, r0, #4
 8001e74:	468c      	mov	ip, r1
 8001e76:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001e7a:	4290      	cmp	r0, r2
 8001e7c:	f10c 0104 	add.w	r1, ip, #4
 8001e80:	ed8c 0a00 	vstr	s0, [ip]
 8001e84:	d3ea      	bcc.n	8001e5c <forward_sign+0x40>
 8001e86:	4770      	bx	lr

08001e88 <.text_19>:
 8001e88:	00000000 	.word	0x00000000

08001e8c <.text_20>:
 8001e8c:	00000001 	.word	0x00000001

08001e90 <forward_clip>:
 8001e90:	b430      	push	{r4, r5}
 8001e92:	6941      	ldr	r1, [r0, #20]
 8001e94:	ed90 0a07 	vldr	s0, [r0, #28]
 8001e98:	680c      	ldr	r4, [r1, #0]
 8001e9a:	edd0 0a06 	vldr	s1, [r0, #24]
 8001e9e:	6822      	ldr	r2, [r4, #0]
 8001ea0:	6815      	ldr	r5, [r2, #0]
 8001ea2:	686b      	ldr	r3, [r5, #4]
 8001ea4:	68a9      	ldr	r1, [r5, #8]
 8001ea6:	68ea      	ldr	r2, [r5, #12]
 8001ea8:	6828      	ldr	r0, [r5, #0]
 8001eaa:	6880      	ldr	r0, [r0, #8]
 8001eac:	434b      	muls	r3, r1
 8001eae:	6929      	ldr	r1, [r5, #16]
 8001eb0:	4353      	muls	r3, r2
 8001eb2:	434b      	muls	r3, r1
 8001eb4:	6861      	ldr	r1, [r4, #4]
 8001eb6:	680a      	ldr	r2, [r1, #0]
 8001eb8:	6814      	ldr	r4, [r2, #0]
 8001eba:	68a1      	ldr	r1, [r4, #8]
 8001ebc:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8001ec0:	4290      	cmp	r0, r2
 8001ec2:	d216      	bcs.n	8001ef2 <forward_clip+0x62>
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	ed90 1a00 	vldr	s2, [r0]
 8001eca:	1d19      	adds	r1, r3, #4
 8001ecc:	eef4 0a41 	vcmp.f32	s1, s2
 8001ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed4:	bf58      	it	pl
 8001ed6:	eeb0 1a60 	vmovpl.f32	s2, s1
 8001eda:	eeb4 1a40 	vcmp.f32	s2, s0
 8001ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee2:	bf58      	it	pl
 8001ee4:	eeb0 1a40 	vmovpl.f32	s2, s0
 8001ee8:	1d00      	adds	r0, r0, #4
 8001eea:	4290      	cmp	r0, r2
 8001eec:	ed83 1a00 	vstr	s2, [r3]
 8001ef0:	d3e8      	bcc.n	8001ec4 <forward_clip+0x34>
 8001ef2:	bc30      	pop	{r4, r5}
 8001ef4:	4770      	bx	lr
	...

08001ef8 <forward_sigmoid>:
 8001ef8:	b570      	push	{r4, r5, r6, lr}
 8001efa:	6940      	ldr	r0, [r0, #20]
 8001efc:	6803      	ldr	r3, [r0, #0]
 8001efe:	6819      	ldr	r1, [r3, #0]
 8001f00:	680c      	ldr	r4, [r1, #0]
 8001f02:	6862      	ldr	r2, [r4, #4]
 8001f04:	68a0      	ldr	r0, [r4, #8]
 8001f06:	68e1      	ldr	r1, [r4, #12]
 8001f08:	4342      	muls	r2, r0
 8001f0a:	6920      	ldr	r0, [r4, #16]
 8001f0c:	6824      	ldr	r4, [r4, #0]
 8001f0e:	68a4      	ldr	r4, [r4, #8]
 8001f10:	434a      	muls	r2, r1
 8001f12:	4342      	muls	r2, r0
 8001f14:	6858      	ldr	r0, [r3, #4]
 8001f16:	6801      	ldr	r1, [r0, #0]
 8001f18:	680b      	ldr	r3, [r1, #0]
 8001f1a:	689d      	ldr	r5, [r3, #8]
 8001f1c:	eb04 0682 	add.w	r6, r4, r2, lsl #2
 8001f20:	42b4      	cmp	r4, r6
 8001f22:	d213      	bcs.n	8001f4c <forward_sigmoid+0x54>
 8001f24:	ed94 0a00 	vldr	s0, [r4]
 8001f28:	eeb1 0a40 	vneg.f32	s0, s0
 8001f2c:	f004 fb18 	bl	8006560 <expf>
 8001f30:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001f34:	ee70 0a20 	vadd.f32	s1, s0, s1
 8001f38:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001f3c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8001f40:	ed85 0a00 	vstr	s0, [r5]
 8001f44:	1d2d      	adds	r5, r5, #4
 8001f46:	1d24      	adds	r4, r4, #4
 8001f48:	42b4      	cmp	r4, r6
 8001f4a:	d3eb      	bcc.n	8001f24 <forward_sigmoid+0x2c>
 8001f4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001f50 <forward_tanh>:
 8001f50:	b570      	push	{r4, r5, r6, lr}
 8001f52:	6940      	ldr	r0, [r0, #20]
 8001f54:	6803      	ldr	r3, [r0, #0]
 8001f56:	6819      	ldr	r1, [r3, #0]
 8001f58:	680c      	ldr	r4, [r1, #0]
 8001f5a:	6862      	ldr	r2, [r4, #4]
 8001f5c:	68a0      	ldr	r0, [r4, #8]
 8001f5e:	68e1      	ldr	r1, [r4, #12]
 8001f60:	4342      	muls	r2, r0
 8001f62:	6920      	ldr	r0, [r4, #16]
 8001f64:	6824      	ldr	r4, [r4, #0]
 8001f66:	68a4      	ldr	r4, [r4, #8]
 8001f68:	434a      	muls	r2, r1
 8001f6a:	4342      	muls	r2, r0
 8001f6c:	6858      	ldr	r0, [r3, #4]
 8001f6e:	6801      	ldr	r1, [r0, #0]
 8001f70:	680b      	ldr	r3, [r1, #0]
 8001f72:	689d      	ldr	r5, [r3, #8]
 8001f74:	eb04 0682 	add.w	r6, r4, r2, lsl #2
 8001f78:	42b4      	cmp	r4, r6
 8001f7a:	d209      	bcs.n	8001f90 <forward_tanh+0x40>
 8001f7c:	ed94 0a00 	vldr	s0, [r4]
 8001f80:	f004 fa9c 	bl	80064bc <tanhf>
 8001f84:	ed85 0a00 	vstr	s0, [r5]
 8001f88:	1d2d      	adds	r5, r5, #4
 8001f8a:	1d24      	adds	r4, r4, #4
 8001f8c:	42b4      	cmp	r4, r6
 8001f8e:	d3f5      	bcc.n	8001f7c <forward_tanh+0x2c>
 8001f90:	bd70      	pop	{r4, r5, r6, pc}

08001f92 <forward_sm>:
 8001f92:	b530      	push	{r4, r5, lr}
 8001f94:	b083      	sub	sp, #12
 8001f96:	6940      	ldr	r0, [r0, #20]
 8001f98:	6804      	ldr	r4, [r0, #0]
 8001f9a:	6821      	ldr	r1, [r4, #0]
 8001f9c:	680d      	ldr	r5, [r1, #0]
 8001f9e:	68aa      	ldr	r2, [r5, #8]
 8001fa0:	9201      	str	r2, [sp, #4]
 8001fa2:	9200      	str	r2, [sp, #0]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	6868      	ldr	r0, [r5, #4]
 8001fa8:	68e9      	ldr	r1, [r5, #12]
 8001faa:	4342      	muls	r2, r0
 8001fac:	6928      	ldr	r0, [r5, #16]
 8001fae:	682d      	ldr	r5, [r5, #0]
 8001fb0:	434a      	muls	r2, r1
 8001fb2:	4342      	muls	r2, r0
 8001fb4:	6860      	ldr	r0, [r4, #4]
 8001fb6:	6804      	ldr	r4, [r0, #0]
 8001fb8:	68a9      	ldr	r1, [r5, #8]
 8001fba:	6825      	ldr	r5, [r4, #0]
 8001fbc:	68a8      	ldr	r0, [r5, #8]
 8001fbe:	f7ff fd09 	bl	80019d4 <nl_func_sm_array_f32>
 8001fc2:	b003      	add	sp, #12
 8001fc4:	bd30      	pop	{r4, r5, pc}
	...

08001fc8 <pool_func_mp_array_f32>:
 8001fc8:	b470      	push	{r4, r5, r6}
 8001fca:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 8001fce:	42a1      	cmp	r1, r4
 8001fd0:	d257      	bcs.n	8002082 <pool_func_mp_array_f32+0xba>
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d051      	beq.n	800207a <pool_func_mp_array_f32+0xb2>
 8001fd6:	f013 0203 	ands.w	r2, r3, #3
 8001fda:	460d      	mov	r5, r1
 8001fdc:	4606      	mov	r6, r0
 8001fde:	d011      	beq.n	8002004 <pool_func_mp_array_f32+0x3c>
 8001fe0:	ed96 0a00 	vldr	s0, [r6]
 8001fe4:	edd5 0a00 	vldr	s1, [r5]
 8001fe8:	eef4 0a40 	vcmp.f32	s1, s0
 8001fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff0:	bf58      	it	pl
 8001ff2:	eeb0 0a60 	vmovpl.f32	s0, s1
 8001ff6:	ed86 0a00 	vstr	s0, [r6]
 8001ffa:	1e52      	subs	r2, r2, #1
 8001ffc:	1d36      	adds	r6, r6, #4
 8001ffe:	1d2d      	adds	r5, r5, #4
 8002000:	2a00      	cmp	r2, #0
 8002002:	d1ed      	bne.n	8001fe0 <pool_func_mp_array_f32+0x18>
 8002004:	089a      	lsrs	r2, r3, #2
 8002006:	d038      	beq.n	800207a <pool_func_mp_array_f32+0xb2>
 8002008:	edd5 0a00 	vldr	s1, [r5]
 800200c:	edd6 1a00 	vldr	s3, [r6]
 8002010:	eef4 0a61 	vcmp.f32	s1, s3
 8002014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002018:	bf48      	it	mi
 800201a:	eef0 0a61 	vmovmi.f32	s1, s3
 800201e:	edc6 0a00 	vstr	s1, [r6]
 8002022:	edd5 0a01 	vldr	s1, [r5, #4]
 8002026:	edd6 1a01 	vldr	s3, [r6, #4]
 800202a:	ed96 0a02 	vldr	s0, [r6, #8]
 800202e:	eef4 0a61 	vcmp.f32	s1, s3
 8002032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002036:	bf48      	it	mi
 8002038:	eef0 0a61 	vmovmi.f32	s1, s3
 800203c:	edc6 0a01 	vstr	s1, [r6, #4]
 8002040:	ed95 1a02 	vldr	s2, [r5, #8]
 8002044:	edd6 1a03 	vldr	s3, [r6, #12]
 8002048:	eeb4 1a40 	vcmp.f32	s2, s0
 800204c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002050:	bf48      	it	mi
 8002052:	eeb0 1a40 	vmovmi.f32	s2, s0
 8002056:	ed86 1a02 	vstr	s2, [r6, #8]
 800205a:	edd5 0a03 	vldr	s1, [r5, #12]
 800205e:	eef4 0a61 	vcmp.f32	s1, s3
 8002062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002066:	bf58      	it	pl
 8002068:	eef0 1a60 	vmovpl.f32	s3, s1
 800206c:	edc6 1a03 	vstr	s3, [r6, #12]
 8002070:	1e52      	subs	r2, r2, #1
 8002072:	3610      	adds	r6, #16
 8002074:	3510      	adds	r5, #16
 8002076:	2a00      	cmp	r2, #0
 8002078:	d1c6      	bne.n	8002008 <pool_func_mp_array_f32+0x40>
 800207a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800207e:	42a1      	cmp	r1, r4
 8002080:	d3a7      	bcc.n	8001fd2 <pool_func_mp_array_f32+0xa>
 8002082:	bc70      	pop	{r4, r5, r6}
 8002084:	4770      	bx	lr
	...

08002088 <pool_func_ap_array_f32>:
 8002088:	b470      	push	{r4, r5, r6}
 800208a:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 800208e:	42a1      	cmp	r1, r4
 8002090:	d24f      	bcs.n	8002132 <pool_func_ap_array_f32+0xaa>
 8002092:	2b00      	cmp	r3, #0
 8002094:	d049      	beq.n	800212a <pool_func_ap_array_f32+0xa2>
 8002096:	f013 0203 	ands.w	r2, r3, #3
 800209a:	460d      	mov	r5, r1
 800209c:	4606      	mov	r6, r0
 800209e:	d00e      	beq.n	80020be <pool_func_ap_array_f32+0x36>
 80020a0:	ed95 0a00 	vldr	s0, [r5]
 80020a4:	4288      	cmp	r0, r1
 80020a6:	bf1c      	itt	ne
 80020a8:	edd6 0a00 	vldrne	s1, [r6]
 80020ac:	ee30 0a80 	vaddne.f32	s0, s1, s0
 80020b0:	ed86 0a00 	vstr	s0, [r6]
 80020b4:	1e52      	subs	r2, r2, #1
 80020b6:	1d36      	adds	r6, r6, #4
 80020b8:	1d2d      	adds	r5, r5, #4
 80020ba:	2a00      	cmp	r2, #0
 80020bc:	d1f0      	bne.n	80020a0 <pool_func_ap_array_f32+0x18>
 80020be:	089a      	lsrs	r2, r3, #2
 80020c0:	d033      	beq.n	800212a <pool_func_ap_array_f32+0xa2>
 80020c2:	4288      	cmp	r0, r1
 80020c4:	edd5 1a00 	vldr	s3, [r5]
 80020c8:	d10c      	bne.n	80020e4 <pool_func_ap_array_f32+0x5c>
 80020ca:	edc6 1a00 	vstr	s3, [r6]
 80020ce:	ed95 0a01 	vldr	s0, [r5, #4]
 80020d2:	ed86 0a01 	vstr	s0, [r6, #4]
 80020d6:	edd5 1a02 	vldr	s3, [r5, #8]
 80020da:	edc6 1a02 	vstr	s3, [r6, #8]
 80020de:	edd5 1a03 	vldr	s3, [r5, #12]
 80020e2:	e01b      	b.n	800211c <pool_func_ap_array_f32+0x94>
 80020e4:	edd6 0a00 	vldr	s1, [r6]
 80020e8:	ee30 0aa1 	vadd.f32	s0, s1, s3
 80020ec:	ed86 0a00 	vstr	s0, [r6]
 80020f0:	ed96 1a01 	vldr	s2, [r6, #4]
 80020f4:	ed95 0a01 	vldr	s0, [r5, #4]
 80020f8:	edd6 1a02 	vldr	s3, [r6, #8]
 80020fc:	ee31 0a00 	vadd.f32	s0, s2, s0
 8002100:	ed86 0a01 	vstr	s0, [r6, #4]
 8002104:	edd5 0a02 	vldr	s1, [r5, #8]
 8002108:	ee31 0aa0 	vadd.f32	s0, s3, s1
 800210c:	ed86 0a02 	vstr	s0, [r6, #8]
 8002110:	ed96 0a03 	vldr	s0, [r6, #12]
 8002114:	ed95 1a03 	vldr	s2, [r5, #12]
 8002118:	ee70 1a01 	vadd.f32	s3, s0, s2
 800211c:	edc6 1a03 	vstr	s3, [r6, #12]
 8002120:	1e52      	subs	r2, r2, #1
 8002122:	3610      	adds	r6, #16
 8002124:	3510      	adds	r5, #16
 8002126:	2a00      	cmp	r2, #0
 8002128:	d1cb      	bne.n	80020c2 <pool_func_ap_array_f32+0x3a>
 800212a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800212e:	42a1      	cmp	r1, r4
 8002130:	d3af      	bcc.n	8002092 <pool_func_ap_array_f32+0xa>
 8002132:	9903      	ldr	r1, [sp, #12]
 8002134:	b3a1      	cbz	r1, 80021a0 <pool_func_ap_array_f32+0x118>
 8002136:	ee00 1a10 	vmov	s0, r1
 800213a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800213e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002142:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8002146:	b35b      	cbz	r3, 80021a0 <pool_func_ap_array_f32+0x118>
 8002148:	f013 0103 	ands.w	r1, r3, #3
 800214c:	f000 800a 	beq.w	8002164 <pool_func_ap_array_f32+0xdc>
 8002150:	edd0 0a00 	vldr	s1, [r0]
 8002154:	ee60 0a80 	vmul.f32	s1, s1, s0
 8002158:	edc0 0a00 	vstr	s1, [r0]
 800215c:	1e49      	subs	r1, r1, #1
 800215e:	f100 0004 	add.w	r0, r0, #4
 8002162:	d1f5      	bne.n	8002150 <pool_func_ap_array_f32+0xc8>
 8002164:	089b      	lsrs	r3, r3, #2
 8002166:	d01b      	beq.n	80021a0 <pool_func_ap_array_f32+0x118>
 8002168:	edd0 0a00 	vldr	s1, [r0]
 800216c:	ee60 0a80 	vmul.f32	s1, s1, s0
 8002170:	edc0 0a00 	vstr	s1, [r0]
 8002174:	1e5b      	subs	r3, r3, #1
 8002176:	ed90 1a01 	vldr	s2, [r0, #4]
 800217a:	edd0 0a02 	vldr	s1, [r0, #8]
 800217e:	ee21 1a00 	vmul.f32	s2, s2, s0
 8002182:	ed80 1a01 	vstr	s2, [r0, #4]
 8002186:	ee60 0a80 	vmul.f32	s1, s1, s0
 800218a:	ed90 1a03 	vldr	s2, [r0, #12]
 800218e:	edc0 0a02 	vstr	s1, [r0, #8]
 8002192:	ee21 1a00 	vmul.f32	s2, s2, s0
 8002196:	ed80 1a03 	vstr	s2, [r0, #12]
 800219a:	f100 0010 	add.w	r0, r0, #16
 800219e:	d1e3      	bne.n	8002168 <pool_func_ap_array_f32+0xe0>
 80021a0:	bc70      	pop	{r4, r5, r6}
 80021a2:	4770      	bx	lr

080021a4 <forward_mp>:
 80021a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021a8:	4603      	mov	r3, r0
 80021aa:	b08e      	sub	sp, #56	; 0x38
 80021ac:	6958      	ldr	r0, [r3, #20]
 80021ae:	6800      	ldr	r0, [r0, #0]
 80021b0:	6801      	ldr	r1, [r0, #0]
 80021b2:	6840      	ldr	r0, [r0, #4]
 80021b4:	680c      	ldr	r4, [r1, #0]
 80021b6:	6807      	ldr	r7, [r0, #0]
 80021b8:	6921      	ldr	r1, [r4, #16]
 80021ba:	693d      	ldr	r5, [r7, #16]
 80021bc:	9109      	str	r1, [sp, #36]	; 0x24
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	9208      	str	r2, [sp, #32]
 80021c2:	f8d4 800c 	ldr.w	r8, [r4, #12]
 80021c6:	68a1      	ldr	r1, [r4, #8]
 80021c8:	699a      	ldr	r2, [r3, #24]
 80021ca:	69d8      	ldr	r0, [r3, #28]
 80021cc:	9007      	str	r0, [sp, #28]
 80021ce:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80021d0:	6a18      	ldr	r0, [r3, #32]
 80021d2:	960d      	str	r6, [sp, #52]	; 0x34
 80021d4:	683f      	ldr	r7, [r7, #0]
 80021d6:	6824      	ldr	r4, [r4, #0]
 80021d8:	f8d7 e008 	ldr.w	lr, [r7, #8]
 80021dc:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 80021de:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 80021e0:	68a4      	ldr	r4, [r4, #8]
 80021e2:	427f      	negs	r7, r7
 80021e4:	2d00      	cmp	r5, #0
 80021e6:	9700      	str	r7, [sp, #0]
 80021e8:	f000 80d9 	beq.w	800239e <forward_mp+0x1fa>
 80021ec:	9501      	str	r5, [sp, #4]
 80021ee:	4276      	negs	r6, r6
 80021f0:	960c      	str	r6, [sp, #48]	; 0x30
 80021f2:	fb01 f508 	mul.w	r5, r1, r8
 80021f6:	950b      	str	r5, [sp, #44]	; 0x2c
 80021f8:	9d00      	ldr	r5, [sp, #0]
 80021fa:	9b00      	ldr	r3, [sp, #0]
 80021fc:	9f00      	ldr	r7, [sp, #0]
 80021fe:	426d      	negs	r5, r5
 8002200:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002202:	bfcc      	ite	gt
 8002204:	2600      	movgt	r6, #0
 8002206:	9e00      	ldrle	r6, [sp, #0]
 8002208:	1aeb      	subs	r3, r5, r3
 800220a:	9d07      	ldr	r5, [sp, #28]
 800220c:	42ab      	cmp	r3, r5
 800220e:	bf88      	it	hi
 8002210:	462b      	movhi	r3, r5
 8002212:	19df      	adds	r7, r3, r7
 8002214:	9b08      	ldr	r3, [sp, #32]
 8002216:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 80b7 	beq.w	800238c <forward_mp+0x1e8>
 800221e:	fb08 fa06 	mul.w	sl, r8, r6
 8002222:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8002226:	f8cd 800c 	str.w	r8, [sp, #12]
 800222a:	9202      	str	r2, [sp, #8]
 800222c:	9006      	str	r0, [sp, #24]
 800222e:	9605      	str	r6, [sp, #20]
 8002230:	9704      	str	r7, [sp, #16]
 8002232:	4268      	negs	r0, r5
 8002234:	9f03      	ldr	r7, [sp, #12]
 8002236:	9a02      	ldr	r2, [sp, #8]
 8002238:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800223c:	bfcc      	ite	gt
 800223e:	2000      	movgt	r0, #0
 8002240:	4628      	movle	r0, r5
 8002242:	1b7f      	subs	r7, r7, r5
 8002244:	4297      	cmp	r7, r2
 8002246:	bf88      	it	hi
 8002248:	4617      	movhi	r7, r2
 800224a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800224c:	197f      	adds	r7, r7, r5
 800224e:	1a3f      	subs	r7, r7, r0
 8002250:	1880      	adds	r0, r0, r2
 8002252:	4348      	muls	r0, r1
 8002254:	434f      	muls	r7, r1
 8002256:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 800225a:	b311      	cbz	r1, 80022a2 <forward_mp+0xfe>
 800225c:	f011 0003 	ands.w	r0, r1, #3
 8002260:	4672      	mov	r2, lr
 8002262:	4666      	mov	r6, ip
 8002264:	f000 8006 	beq.w	8002274 <forward_mp+0xd0>
 8002268:	f856 9b04 	ldr.w	r9, [r6], #4
 800226c:	f842 9b04 	str.w	r9, [r2], #4
 8002270:	1e40      	subs	r0, r0, #1
 8002272:	d1f9      	bne.n	8002268 <forward_mp+0xc4>
 8002274:	0888      	lsrs	r0, r1, #2
 8002276:	d014      	beq.n	80022a2 <forward_mp+0xfe>
 8002278:	ed96 0a00 	vldr	s0, [r6]
 800227c:	ed82 0a00 	vstr	s0, [r2]
 8002280:	1e40      	subs	r0, r0, #1
 8002282:	edd6 0a01 	vldr	s1, [r6, #4]
 8002286:	edc2 0a01 	vstr	s1, [r2, #4]
 800228a:	ed96 0a02 	vldr	s0, [r6, #8]
 800228e:	ed82 0a02 	vstr	s0, [r2, #8]
 8002292:	edd6 0a03 	vldr	s1, [r6, #12]
 8002296:	edc2 0a03 	vstr	s1, [r2, #12]
 800229a:	3210      	adds	r2, #16
 800229c:	3610      	adds	r6, #16
 800229e:	2800      	cmp	r0, #0
 80022a0:	d1ea      	bne.n	8002278 <forward_mp+0xd4>
 80022a2:	9805      	ldr	r0, [sp, #20]
 80022a4:	9a04      	ldr	r2, [sp, #16]
 80022a6:	4290      	cmp	r0, r2
 80022a8:	da66      	bge.n	8002378 <forward_mp+0x1d4>
 80022aa:	4610      	mov	r0, r2
 80022ac:	9a05      	ldr	r2, [sp, #20]
 80022ae:	1a82      	subs	r2, r0, r2
 80022b0:	46e2      	mov	sl, ip
 80022b2:	eb0a 0b87 	add.w	fp, sl, r7, lsl #2
 80022b6:	45da      	cmp	sl, fp
 80022b8:	d25a      	bcs.n	8002370 <forward_mp+0x1cc>
 80022ba:	2900      	cmp	r1, #0
 80022bc:	d054      	beq.n	8002368 <forward_mp+0x1c4>
 80022be:	f011 0003 	ands.w	r0, r1, #3
 80022c2:	4656      	mov	r6, sl
 80022c4:	46f1      	mov	r9, lr
 80022c6:	d012      	beq.n	80022ee <forward_mp+0x14a>
 80022c8:	ed99 0a00 	vldr	s0, [r9]
 80022cc:	edd6 0a00 	vldr	s1, [r6]
 80022d0:	eef4 0a40 	vcmp.f32	s1, s0
 80022d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d8:	bf58      	it	pl
 80022da:	eeb0 0a60 	vmovpl.f32	s0, s1
 80022de:	1e40      	subs	r0, r0, #1
 80022e0:	1d36      	adds	r6, r6, #4
 80022e2:	ed89 0a00 	vstr	s0, [r9]
 80022e6:	2800      	cmp	r0, #0
 80022e8:	f109 0904 	add.w	r9, r9, #4
 80022ec:	d1ec      	bne.n	80022c8 <forward_mp+0x124>
 80022ee:	0888      	lsrs	r0, r1, #2
 80022f0:	f000 803a 	beq.w	8002368 <forward_mp+0x1c4>
 80022f4:	edd6 0a00 	vldr	s1, [r6]
 80022f8:	edd9 1a00 	vldr	s3, [r9]
 80022fc:	eef4 0a61 	vcmp.f32	s1, s3
 8002300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002304:	bf48      	it	mi
 8002306:	eef0 0a61 	vmovmi.f32	s1, s3
 800230a:	edc9 0a00 	vstr	s1, [r9]
 800230e:	edd6 0a01 	vldr	s1, [r6, #4]
 8002312:	edd9 1a01 	vldr	s3, [r9, #4]
 8002316:	ed99 0a02 	vldr	s0, [r9, #8]
 800231a:	eef4 0a61 	vcmp.f32	s1, s3
 800231e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002322:	bf48      	it	mi
 8002324:	eef0 0a61 	vmovmi.f32	s1, s3
 8002328:	edc9 0a01 	vstr	s1, [r9, #4]
 800232c:	ed96 1a02 	vldr	s2, [r6, #8]
 8002330:	edd9 1a03 	vldr	s3, [r9, #12]
 8002334:	eeb4 1a40 	vcmp.f32	s2, s0
 8002338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233c:	bf48      	it	mi
 800233e:	eeb0 1a40 	vmovmi.f32	s2, s0
 8002342:	ed89 1a02 	vstr	s2, [r9, #8]
 8002346:	edd6 0a03 	vldr	s1, [r6, #12]
 800234a:	eef4 0a61 	vcmp.f32	s1, s3
 800234e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002352:	bf58      	it	pl
 8002354:	eef0 1a60 	vmovpl.f32	s3, s1
 8002358:	1e40      	subs	r0, r0, #1
 800235a:	3610      	adds	r6, #16
 800235c:	edc9 1a03 	vstr	s3, [r9, #12]
 8002360:	2800      	cmp	r0, #0
 8002362:	f109 0910 	add.w	r9, r9, #16
 8002366:	d1c5      	bne.n	80022f4 <forward_mp+0x150>
 8002368:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 800236c:	45da      	cmp	sl, fp
 800236e:	d3a4      	bcc.n	80022ba <forward_mp+0x116>
 8002370:	1e52      	subs	r2, r2, #1
 8002372:	eb0c 0c88 	add.w	ip, ip, r8, lsl #2
 8002376:	d19b      	bne.n	80022b0 <forward_mp+0x10c>
 8002378:	9806      	ldr	r0, [sp, #24]
 800237a:	1945      	adds	r5, r0, r5
 800237c:	1e5b      	subs	r3, r3, #1
 800237e:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 8002382:	f47f af56 	bne.w	8002232 <forward_mp+0x8e>
 8002386:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800238a:	9a02      	ldr	r2, [sp, #8]
 800238c:	9d00      	ldr	r5, [sp, #0]
 800238e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002390:	195d      	adds	r5, r3, r5
 8002392:	9500      	str	r5, [sp, #0]
 8002394:	9d01      	ldr	r5, [sp, #4]
 8002396:	1e6d      	subs	r5, r5, #1
 8002398:	9501      	str	r5, [sp, #4]
 800239a:	f47f af2d 	bne.w	80021f8 <forward_mp+0x54>
 800239e:	b00e      	add	sp, #56	; 0x38
 80023a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080023a4 <forward_ap>:
 80023a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023a8:	b094      	sub	sp, #80	; 0x50
 80023aa:	6941      	ldr	r1, [r0, #20]
 80023ac:	6809      	ldr	r1, [r1, #0]
 80023ae:	680a      	ldr	r2, [r1, #0]
 80023b0:	6849      	ldr	r1, [r1, #4]
 80023b2:	6815      	ldr	r5, [r2, #0]
 80023b4:	680e      	ldr	r6, [r1, #0]
 80023b6:	692a      	ldr	r2, [r5, #16]
 80023b8:	6933      	ldr	r3, [r6, #16]
 80023ba:	920c      	str	r2, [sp, #48]	; 0x30
 80023bc:	68f4      	ldr	r4, [r6, #12]
 80023be:	940b      	str	r4, [sp, #44]	; 0x2c
 80023c0:	68ea      	ldr	r2, [r5, #12]
 80023c2:	68a9      	ldr	r1, [r5, #8]
 80023c4:	f8d0 8018 	ldr.w	r8, [r0, #24]
 80023c8:	69c4      	ldr	r4, [r0, #28]
 80023ca:	940a      	str	r4, [sp, #40]	; 0x28
 80023cc:	f8d0 c020 	ldr.w	ip, [r0, #32]
 80023d0:	6a47      	ldr	r7, [r0, #36]	; 0x24
 80023d2:	9713      	str	r7, [sp, #76]	; 0x4c
 80023d4:	682d      	ldr	r5, [r5, #0]
 80023d6:	6a87      	ldr	r7, [r0, #40]	; 0x28
 80023d8:	6834      	ldr	r4, [r6, #0]
 80023da:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80023dc:	f8d5 e008 	ldr.w	lr, [r5, #8]
 80023e0:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80023e4:	4240      	negs	r0, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	9001      	str	r0, [sp, #4]
 80023ea:	f000 8120 	beq.w	800262e <forward_ap+0x28a>
 80023ee:	427f      	negs	r7, r7
 80023f0:	fb01 f402 	mul.w	r4, r1, r2
 80023f4:	9303      	str	r3, [sp, #12]
 80023f6:	9712      	str	r7, [sp, #72]	; 0x48
 80023f8:	9411      	str	r4, [sp, #68]	; 0x44
 80023fa:	9801      	ldr	r0, [sp, #4]
 80023fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80023fe:	9e01      	ldr	r6, [sp, #4]
 8002400:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8002402:	4240      	negs	r0, r0
 8002404:	9801      	ldr	r0, [sp, #4]
 8002406:	bfcc      	ite	gt
 8002408:	2700      	movgt	r7, #0
 800240a:	9f01      	ldrle	r7, [sp, #4]
 800240c:	1a18      	subs	r0, r3, r0
 800240e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002410:	4298      	cmp	r0, r3
 8002412:	bf88      	it	hi
 8002414:	4618      	movhi	r0, r3
 8002416:	1986      	adds	r6, r0, r6
 8002418:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800241a:	2800      	cmp	r0, #0
 800241c:	f000 80fe 	beq.w	800261c <forward_ap+0x278>
 8002420:	4605      	mov	r5, r0
 8002422:	fb02 f007 	mul.w	r0, r2, r7
 8002426:	9010      	str	r0, [sp, #64]	; 0x40
 8002428:	9205      	str	r2, [sp, #20]
 800242a:	1bb8      	subs	r0, r7, r6
 800242c:	900f      	str	r0, [sp, #60]	; 0x3c
 800242e:	f8cd 8010 	str.w	r8, [sp, #16]
 8002432:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8002436:	f8cd e020 	str.w	lr, [sp, #32]
 800243a:	9707      	str	r7, [sp, #28]
 800243c:	9606      	str	r6, [sp, #24]
 800243e:	9400      	str	r4, [sp, #0]
 8002440:	9502      	str	r5, [sp, #8]
 8002442:	9800      	ldr	r0, [sp, #0]
 8002444:	9a05      	ldr	r2, [sp, #20]
 8002446:	f8dd e000 	ldr.w	lr, [sp]
 800244a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800244c:	4240      	negs	r0, r0
 800244e:	9800      	ldr	r0, [sp, #0]
 8002450:	bfcc      	ite	gt
 8002452:	f04f 0c00 	movgt.w	ip, #0
 8002456:	f8dd c000 	ldrle.w	ip, [sp]
 800245a:	1a10      	subs	r0, r2, r0
 800245c:	9a04      	ldr	r2, [sp, #16]
 800245e:	4290      	cmp	r0, r2
 8002460:	bf88      	it	hi
 8002462:	4610      	movhi	r0, r2
 8002464:	4486      	add	lr, r0
 8002466:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002468:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800246a:	ebac 050e 	sub.w	r5, ip, lr
 800246e:	4345      	muls	r5, r0
 8002470:	9808      	ldr	r0, [sp, #32]
 8002472:	4462      	add	r2, ip
 8002474:	434a      	muls	r2, r1
 8002476:	ebae 060c 	sub.w	r6, lr, ip
 800247a:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 800247e:	434e      	muls	r6, r1
 8002480:	2200      	movs	r2, #0
 8002482:	b189      	cbz	r1, 80024a8 <forward_ap+0x104>
 8002484:	f011 0003 	ands.w	r0, r1, #3
 8002488:	464b      	mov	r3, r9
 800248a:	d003      	beq.n	8002494 <forward_ap+0xf0>
 800248c:	1e40      	subs	r0, r0, #1
 800248e:	f843 2b04 	str.w	r2, [r3], #4
 8002492:	d1fb      	bne.n	800248c <forward_ap+0xe8>
 8002494:	0888      	lsrs	r0, r1, #2
 8002496:	d007      	beq.n	80024a8 <forward_ap+0x104>
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]
 800249c:	609a      	str	r2, [r3, #8]
 800249e:	60da      	str	r2, [r3, #12]
 80024a0:	1e40      	subs	r0, r0, #1
 80024a2:	f103 0310 	add.w	r3, r3, #16
 80024a6:	d1f7      	bne.n	8002498 <forward_ap+0xf4>
 80024a8:	9807      	ldr	r0, [sp, #28]
 80024aa:	9b06      	ldr	r3, [sp, #24]
 80024ac:	4298      	cmp	r0, r3
 80024ae:	f280 80a3 	bge.w	80025f8 <forward_ap+0x254>
 80024b2:	1a1b      	subs	r3, r3, r0
 80024b4:	ebae 000c 	sub.w	r0, lr, ip
 80024b8:	900d      	str	r0, [sp, #52]	; 0x34
 80024ba:	940e      	str	r4, [sp, #56]	; 0x38
 80024bc:	4694      	mov	ip, r2
 80024be:	980d      	ldr	r0, [sp, #52]	; 0x34
 80024c0:	4484      	add	ip, r0
 80024c2:	4565      	cmp	r5, ip
 80024c4:	46be      	mov	lr, r7
 80024c6:	bf0c      	ite	eq
 80024c8:	462c      	moveq	r4, r5
 80024ca:	2400      	movne	r4, #0
 80024cc:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 80024d0:	45c6      	cmp	lr, r8
 80024d2:	d24e      	bcs.n	8002572 <forward_ap+0x1ce>
 80024d4:	2200      	movs	r2, #0
 80024d6:	2900      	cmp	r1, #0
 80024d8:	d047      	beq.n	800256a <forward_ap+0x1c6>
 80024da:	f011 0003 	ands.w	r0, r1, #3
 80024de:	46f2      	mov	sl, lr
 80024e0:	46cb      	mov	fp, r9
 80024e2:	d010      	beq.n	8002506 <forward_ap+0x162>
 80024e4:	ed9a 0a00 	vldr	s0, [sl]
 80024e8:	45f1      	cmp	r9, lr
 80024ea:	bf1c      	itt	ne
 80024ec:	eddb 0a00 	vldrne	s1, [fp]
 80024f0:	ee30 0a80 	vaddne.f32	s0, s1, s0
 80024f4:	1c52      	adds	r2, r2, #1
 80024f6:	ed8b 0a00 	vstr	s0, [fp]
 80024fa:	1e40      	subs	r0, r0, #1
 80024fc:	f10b 0b04 	add.w	fp, fp, #4
 8002500:	f10a 0a04 	add.w	sl, sl, #4
 8002504:	d1ee      	bne.n	80024e4 <forward_ap+0x140>
 8002506:	0888      	lsrs	r0, r1, #2
 8002508:	f000 802f 	beq.w	800256a <forward_ap+0x1c6>
 800250c:	eb0e 0a82 	add.w	sl, lr, r2, lsl #2
 8002510:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002514:	edda 1a00 	vldr	s3, [sl]
 8002518:	45f1      	cmp	r9, lr
 800251a:	bf1c      	itt	ne
 800251c:	ed92 0a00 	vldrne	s0, [r2]
 8002520:	ee70 1a21 	vaddne.f32	s3, s0, s3
 8002524:	edc2 1a00 	vstr	s3, [r2]
 8002528:	edda 1a01 	vldr	s3, [sl, #4]
 800252c:	bf1c      	itt	ne
 800252e:	edd2 0a01 	vldrne	s1, [r2, #4]
 8002532:	ee70 1aa1 	vaddne.f32	s3, s1, s3
 8002536:	edc2 1a01 	vstr	s3, [r2, #4]
 800253a:	ed9a 1a02 	vldr	s2, [sl, #8]
 800253e:	bf1c      	itt	ne
 8002540:	ed92 0a02 	vldrne	s0, [r2, #8]
 8002544:	ee30 1a01 	vaddne.f32	s2, s0, s2
 8002548:	ed82 1a02 	vstr	s2, [r2, #8]
 800254c:	edda 1a03 	vldr	s3, [sl, #12]
 8002550:	bf1c      	itt	ne
 8002552:	edd2 0a03 	vldrne	s1, [r2, #12]
 8002556:	ee70 1aa1 	vaddne.f32	s3, s1, s3
 800255a:	edc2 1a03 	vstr	s3, [r2, #12]
 800255e:	1e40      	subs	r0, r0, #1
 8002560:	3210      	adds	r2, #16
 8002562:	2800      	cmp	r0, #0
 8002564:	f10a 0a10 	add.w	sl, sl, #16
 8002568:	d1d4      	bne.n	8002514 <forward_ap+0x170>
 800256a:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 800256e:	45c6      	cmp	lr, r8
 8002570:	d3b0      	bcc.n	80024d4 <forward_ap+0x130>
 8002572:	2c00      	cmp	r4, #0
 8002574:	d03a      	beq.n	80025ec <forward_ap+0x248>
 8002576:	ee00 4a10 	vmov	s0, r4
 800257a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800257e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002582:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8002586:	2200      	movs	r2, #0
 8002588:	b381      	cbz	r1, 80025ec <forward_ap+0x248>
 800258a:	f011 0003 	ands.w	r0, r1, #3
 800258e:	464c      	mov	r4, r9
 8002590:	f000 800b 	beq.w	80025aa <forward_ap+0x206>
 8002594:	edd4 0a00 	vldr	s1, [r4]
 8002598:	ee60 0a80 	vmul.f32	s1, s1, s0
 800259c:	1c52      	adds	r2, r2, #1
 800259e:	edc4 0a00 	vstr	s1, [r4]
 80025a2:	1e40      	subs	r0, r0, #1
 80025a4:	f104 0404 	add.w	r4, r4, #4
 80025a8:	d1f4      	bne.n	8002594 <forward_ap+0x1f0>
 80025aa:	0888      	lsrs	r0, r1, #2
 80025ac:	f000 801e 	beq.w	80025ec <forward_ap+0x248>
 80025b0:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80025b4:	edd2 0a00 	vldr	s1, [r2]
 80025b8:	ee60 0a80 	vmul.f32	s1, s1, s0
 80025bc:	edc2 0a00 	vstr	s1, [r2]
 80025c0:	1e40      	subs	r0, r0, #1
 80025c2:	ed92 1a01 	vldr	s2, [r2, #4]
 80025c6:	edd2 0a02 	vldr	s1, [r2, #8]
 80025ca:	ee21 1a00 	vmul.f32	s2, s2, s0
 80025ce:	ed82 1a01 	vstr	s2, [r2, #4]
 80025d2:	ee60 0a80 	vmul.f32	s1, s1, s0
 80025d6:	ed92 1a03 	vldr	s2, [r2, #12]
 80025da:	edc2 0a02 	vstr	s1, [r2, #8]
 80025de:	ee21 1a00 	vmul.f32	s2, s2, s0
 80025e2:	ed82 1a03 	vstr	s2, [r2, #12]
 80025e6:	f102 0210 	add.w	r2, r2, #16
 80025ea:	d1e3      	bne.n	80025b4 <forward_ap+0x210>
 80025ec:	980e      	ldr	r0, [sp, #56]	; 0x38
 80025ee:	1e5b      	subs	r3, r3, #1
 80025f0:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 80025f4:	f47f af63 	bne.w	80024be <forward_ap+0x11a>
 80025f8:	9800      	ldr	r0, [sp, #0]
 80025fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80025fc:	1810      	adds	r0, r2, r0
 80025fe:	9000      	str	r0, [sp, #0]
 8002600:	eb09 0981 	add.w	r9, r9, r1, lsl #2
 8002604:	9802      	ldr	r0, [sp, #8]
 8002606:	1e40      	subs	r0, r0, #1
 8002608:	9002      	str	r0, [sp, #8]
 800260a:	f47f af1a 	bne.w	8002442 <forward_ap+0x9e>
 800260e:	9a05      	ldr	r2, [sp, #20]
 8002610:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8002614:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8002618:	f8dd e020 	ldr.w	lr, [sp, #32]
 800261c:	9c01      	ldr	r4, [sp, #4]
 800261e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002620:	191c      	adds	r4, r3, r4
 8002622:	9401      	str	r4, [sp, #4]
 8002624:	9c03      	ldr	r4, [sp, #12]
 8002626:	1e64      	subs	r4, r4, #1
 8002628:	9403      	str	r4, [sp, #12]
 800262a:	f47f aee6 	bne.w	80023fa <forward_ap+0x56>
 800262e:	b014      	add	sp, #80	; 0x50
 8002630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002634 <ai_math_dot_array>:
 8002634:	b530      	push	{r4, r5, lr}
 8002636:	4604      	mov	r4, r0
 8002638:	4608      	mov	r0, r1
 800263a:	b081      	sub	sp, #4
 800263c:	4611      	mov	r1, r2
 800263e:	461a      	mov	r2, r3
 8002640:	2500      	movs	r5, #0
 8002642:	9500      	str	r5, [sp, #0]
 8002644:	466b      	mov	r3, sp
 8002646:	f000 feed 	bl	8003424 <arm_dot_prod_f32>
 800264a:	ed94 0a00 	vldr	s0, [r4]
 800264e:	eddd 0a00 	vldr	s1, [sp]
 8002652:	ee70 0a20 	vadd.f32	s1, s0, s1
 8002656:	edc4 0a00 	vstr	s1, [r4]
 800265a:	b001      	add	sp, #4
 800265c:	bd30      	pop	{r4, r5, pc}
	...

08002660 <ai_math_sqrt>:
 8002660:	eef0 0a40 	vmov.f32	s1, s0
 8002664:	eef5 0a40 	vcmp.f32	s1, #0.0
 8002668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266c:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8002710 <.text_12>
 8002670:	db01      	blt.n	8002676 <ai_math_sqrt+0x16>
 8002672:	eeb1 0ae0 	vsqrt.f32	s0, s1
 8002676:	4770      	bx	lr

08002678 <ai_math_exp>:
 8002678:	f003 bf72 	b.w	8006560 <expf>

0800267c <ai_math_pow>:
 800267c:	f003 bfea 	b.w	8006654 <powf>

08002680 <ai_math_tanh>:
 8002680:	f003 bf1c 	b.w	80064bc <tanhf>

08002684 <ai_math_relu>:
 8002684:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268c:	bfd8      	it	le
 800268e:	ed9f 0a20 	vldrle	s0, [pc, #128]	; 8002710 <.text_12>
 8002692:	4770      	bx	lr

08002694 <ai_math_prelu>:
 8002694:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800269c:	bfd8      	it	le
 800269e:	ee20 0a20 	vmulle.f32	s0, s0, s1
 80026a2:	4770      	bx	lr

080026a4 <ai_math_sigmoid>:
 80026a4:	b500      	push	{lr}
 80026a6:	b081      	sub	sp, #4
 80026a8:	eeb1 0a40 	vneg.f32	s0, s0
 80026ac:	f003 ff58 	bl	8006560 <expf>
 80026b0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80026b4:	ee30 0a20 	vadd.f32	s0, s0, s1
 80026b8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80026bc:	ee81 0a00 	vdiv.f32	s0, s2, s0
 80026c0:	b001      	add	sp, #4
 80026c2:	bd00      	pop	{pc}

080026c4 <ai_math_hard_sigmoid>:
 80026c4:	eef0 0a40 	vmov.f32	s1, s0
 80026c8:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8002714 <.text_13>
 80026cc:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80026d0:	ee00 0a81 	vmla.f32	s0, s1, s2
 80026d4:	eddf 0a10 	vldr	s1, [pc, #64]	; 8002718 <.text_14>
 80026d8:	eeb4 0a60 	vcmp.f32	s0, s1
 80026dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e0:	da07      	bge.n	80026f2 <ai_math_hard_sigmoid+0x2e>
 80026e2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80026e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ea:	d504      	bpl.n	80026f6 <ai_math_hard_sigmoid+0x32>
 80026ec:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8002710 <.text_12>
 80026f0:	4770      	bx	lr
 80026f2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80026f6:	4770      	bx	lr

080026f8 <ai_math_sign>:
 80026f8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80026fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002700:	bfcc      	ite	gt
 8002702:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 800271c <.text_15>
 8002706:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 8002720 <.text_16>
 800270a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800270e:	4770      	bx	lr

08002710 <.text_12>:
 8002710:	00000000 	.word	0x00000000

08002714 <.text_13>:
 8002714:	3e4ccccd 	.word	0x3e4ccccd

08002718 <.text_14>:
 8002718:	3f800001 	.word	0x3f800001

0800271c <.text_15>:
 800271c:	00000001 	.word	0x00000001

08002720 <.text_16>:
 8002720:	ffffffff 	.word	0xffffffff
	...

08002730 <memchr>:
 8002730:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8002734:	2a10      	cmp	r2, #16
 8002736:	db2b      	blt.n	8002790 <memchr+0x60>
 8002738:	f010 0f07 	tst.w	r0, #7
 800273c:	d008      	beq.n	8002750 <memchr+0x20>
 800273e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002742:	3a01      	subs	r2, #1
 8002744:	428b      	cmp	r3, r1
 8002746:	d02d      	beq.n	80027a4 <memchr+0x74>
 8002748:	f010 0f07 	tst.w	r0, #7
 800274c:	b342      	cbz	r2, 80027a0 <memchr+0x70>
 800274e:	d1f6      	bne.n	800273e <memchr+0xe>
 8002750:	b4f0      	push	{r4, r5, r6, r7}
 8002752:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8002756:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800275a:	f022 0407 	bic.w	r4, r2, #7
 800275e:	f07f 0700 	mvns.w	r7, #0
 8002762:	2300      	movs	r3, #0
 8002764:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8002768:	3c08      	subs	r4, #8
 800276a:	ea85 0501 	eor.w	r5, r5, r1
 800276e:	ea86 0601 	eor.w	r6, r6, r1
 8002772:	fa85 f547 	uadd8	r5, r5, r7
 8002776:	faa3 f587 	sel	r5, r3, r7
 800277a:	fa86 f647 	uadd8	r6, r6, r7
 800277e:	faa5 f687 	sel	r6, r5, r7
 8002782:	b98e      	cbnz	r6, 80027a8 <memchr+0x78>
 8002784:	d1ee      	bne.n	8002764 <memchr+0x34>
 8002786:	bcf0      	pop	{r4, r5, r6, r7}
 8002788:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800278c:	f002 0207 	and.w	r2, r2, #7
 8002790:	b132      	cbz	r2, 80027a0 <memchr+0x70>
 8002792:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002796:	3a01      	subs	r2, #1
 8002798:	ea83 0301 	eor.w	r3, r3, r1
 800279c:	b113      	cbz	r3, 80027a4 <memchr+0x74>
 800279e:	d1f8      	bne.n	8002792 <memchr+0x62>
 80027a0:	2000      	movs	r0, #0
 80027a2:	4770      	bx	lr
 80027a4:	3801      	subs	r0, #1
 80027a6:	4770      	bx	lr
 80027a8:	2d00      	cmp	r5, #0
 80027aa:	bf06      	itte	eq
 80027ac:	4635      	moveq	r5, r6
 80027ae:	3803      	subeq	r0, #3
 80027b0:	3807      	subne	r0, #7
 80027b2:	f015 0f01 	tst.w	r5, #1
 80027b6:	d107      	bne.n	80027c8 <memchr+0x98>
 80027b8:	3001      	adds	r0, #1
 80027ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80027be:	bf02      	ittt	eq
 80027c0:	3001      	addeq	r0, #1
 80027c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80027c6:	3001      	addeq	r0, #1
 80027c8:	bcf0      	pop	{r4, r5, r6, r7}
 80027ca:	3801      	subs	r0, #1
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop

080027d0 <__aeabi_drsub>:
 80027d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80027d4:	e002      	b.n	80027dc <__adddf3>
 80027d6:	bf00      	nop

080027d8 <__aeabi_dsub>:
 80027d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080027dc <__adddf3>:
 80027dc:	b530      	push	{r4, r5, lr}
 80027de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80027e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80027e6:	ea94 0f05 	teq	r4, r5
 80027ea:	bf08      	it	eq
 80027ec:	ea90 0f02 	teqeq	r0, r2
 80027f0:	bf1f      	itttt	ne
 80027f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80027f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80027fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80027fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002802:	f000 80e2 	beq.w	80029ca <__adddf3+0x1ee>
 8002806:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800280a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800280e:	bfb8      	it	lt
 8002810:	426d      	neglt	r5, r5
 8002812:	dd0c      	ble.n	800282e <__adddf3+0x52>
 8002814:	442c      	add	r4, r5
 8002816:	ea80 0202 	eor.w	r2, r0, r2
 800281a:	ea81 0303 	eor.w	r3, r1, r3
 800281e:	ea82 0000 	eor.w	r0, r2, r0
 8002822:	ea83 0101 	eor.w	r1, r3, r1
 8002826:	ea80 0202 	eor.w	r2, r0, r2
 800282a:	ea81 0303 	eor.w	r3, r1, r3
 800282e:	2d36      	cmp	r5, #54	; 0x36
 8002830:	bf88      	it	hi
 8002832:	bd30      	pophi	{r4, r5, pc}
 8002834:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8002838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800283c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8002840:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8002844:	d002      	beq.n	800284c <__adddf3+0x70>
 8002846:	4240      	negs	r0, r0
 8002848:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800284c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8002850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002854:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8002858:	d002      	beq.n	8002860 <__adddf3+0x84>
 800285a:	4252      	negs	r2, r2
 800285c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002860:	ea94 0f05 	teq	r4, r5
 8002864:	f000 80a7 	beq.w	80029b6 <__adddf3+0x1da>
 8002868:	f1a4 0401 	sub.w	r4, r4, #1
 800286c:	f1d5 0e20 	rsbs	lr, r5, #32
 8002870:	db0d      	blt.n	800288e <__adddf3+0xb2>
 8002872:	fa02 fc0e 	lsl.w	ip, r2, lr
 8002876:	fa22 f205 	lsr.w	r2, r2, r5
 800287a:	1880      	adds	r0, r0, r2
 800287c:	f141 0100 	adc.w	r1, r1, #0
 8002880:	fa03 f20e 	lsl.w	r2, r3, lr
 8002884:	1880      	adds	r0, r0, r2
 8002886:	fa43 f305 	asr.w	r3, r3, r5
 800288a:	4159      	adcs	r1, r3
 800288c:	e00e      	b.n	80028ac <__adddf3+0xd0>
 800288e:	f1a5 0520 	sub.w	r5, r5, #32
 8002892:	f10e 0e20 	add.w	lr, lr, #32
 8002896:	2a01      	cmp	r2, #1
 8002898:	fa03 fc0e 	lsl.w	ip, r3, lr
 800289c:	bf28      	it	cs
 800289e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80028a2:	fa43 f305 	asr.w	r3, r3, r5
 80028a6:	18c0      	adds	r0, r0, r3
 80028a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80028ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80028b0:	d507      	bpl.n	80028c2 <__adddf3+0xe6>
 80028b2:	f04f 0e00 	mov.w	lr, #0
 80028b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80028ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80028be:	eb6e 0101 	sbc.w	r1, lr, r1
 80028c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80028c6:	d31b      	bcc.n	8002900 <__adddf3+0x124>
 80028c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80028cc:	d30c      	bcc.n	80028e8 <__adddf3+0x10c>
 80028ce:	0849      	lsrs	r1, r1, #1
 80028d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80028d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80028d8:	f104 0401 	add.w	r4, r4, #1
 80028dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80028e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80028e4:	f080 809a 	bcs.w	8002a1c <__adddf3+0x240>
 80028e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80028ec:	bf08      	it	eq
 80028ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80028f2:	f150 0000 	adcs.w	r0, r0, #0
 80028f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80028fa:	ea41 0105 	orr.w	r1, r1, r5
 80028fe:	bd30      	pop	{r4, r5, pc}
 8002900:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8002904:	4140      	adcs	r0, r0
 8002906:	eb41 0101 	adc.w	r1, r1, r1
 800290a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800290e:	f1a4 0401 	sub.w	r4, r4, #1
 8002912:	d1e9      	bne.n	80028e8 <__adddf3+0x10c>
 8002914:	f091 0f00 	teq	r1, #0
 8002918:	bf04      	itt	eq
 800291a:	4601      	moveq	r1, r0
 800291c:	2000      	moveq	r0, #0
 800291e:	fab1 f381 	clz	r3, r1
 8002922:	bf08      	it	eq
 8002924:	3320      	addeq	r3, #32
 8002926:	f1a3 030b 	sub.w	r3, r3, #11
 800292a:	f1b3 0220 	subs.w	r2, r3, #32
 800292e:	da0c      	bge.n	800294a <__adddf3+0x16e>
 8002930:	320c      	adds	r2, #12
 8002932:	dd08      	ble.n	8002946 <__adddf3+0x16a>
 8002934:	f102 0c14 	add.w	ip, r2, #20
 8002938:	f1c2 020c 	rsb	r2, r2, #12
 800293c:	fa01 f00c 	lsl.w	r0, r1, ip
 8002940:	fa21 f102 	lsr.w	r1, r1, r2
 8002944:	e00c      	b.n	8002960 <__adddf3+0x184>
 8002946:	f102 0214 	add.w	r2, r2, #20
 800294a:	bfd8      	it	le
 800294c:	f1c2 0c20 	rsble	ip, r2, #32
 8002950:	fa01 f102 	lsl.w	r1, r1, r2
 8002954:	fa20 fc0c 	lsr.w	ip, r0, ip
 8002958:	bfdc      	itt	le
 800295a:	ea41 010c 	orrle.w	r1, r1, ip
 800295e:	4090      	lslle	r0, r2
 8002960:	1ae4      	subs	r4, r4, r3
 8002962:	bfa2      	ittt	ge
 8002964:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8002968:	4329      	orrge	r1, r5
 800296a:	bd30      	popge	{r4, r5, pc}
 800296c:	ea6f 0404 	mvn.w	r4, r4
 8002970:	3c1f      	subs	r4, #31
 8002972:	da1c      	bge.n	80029ae <__adddf3+0x1d2>
 8002974:	340c      	adds	r4, #12
 8002976:	dc0e      	bgt.n	8002996 <__adddf3+0x1ba>
 8002978:	f104 0414 	add.w	r4, r4, #20
 800297c:	f1c4 0220 	rsb	r2, r4, #32
 8002980:	fa20 f004 	lsr.w	r0, r0, r4
 8002984:	fa01 f302 	lsl.w	r3, r1, r2
 8002988:	ea40 0003 	orr.w	r0, r0, r3
 800298c:	fa21 f304 	lsr.w	r3, r1, r4
 8002990:	ea45 0103 	orr.w	r1, r5, r3
 8002994:	bd30      	pop	{r4, r5, pc}
 8002996:	f1c4 040c 	rsb	r4, r4, #12
 800299a:	f1c4 0220 	rsb	r2, r4, #32
 800299e:	fa20 f002 	lsr.w	r0, r0, r2
 80029a2:	fa01 f304 	lsl.w	r3, r1, r4
 80029a6:	ea40 0003 	orr.w	r0, r0, r3
 80029aa:	4629      	mov	r1, r5
 80029ac:	bd30      	pop	{r4, r5, pc}
 80029ae:	fa21 f004 	lsr.w	r0, r1, r4
 80029b2:	4629      	mov	r1, r5
 80029b4:	bd30      	pop	{r4, r5, pc}
 80029b6:	f094 0f00 	teq	r4, #0
 80029ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80029be:	bf06      	itte	eq
 80029c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80029c4:	3401      	addeq	r4, #1
 80029c6:	3d01      	subne	r5, #1
 80029c8:	e74e      	b.n	8002868 <__adddf3+0x8c>
 80029ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80029ce:	bf18      	it	ne
 80029d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80029d4:	d029      	beq.n	8002a2a <__adddf3+0x24e>
 80029d6:	ea94 0f05 	teq	r4, r5
 80029da:	bf08      	it	eq
 80029dc:	ea90 0f02 	teqeq	r0, r2
 80029e0:	d005      	beq.n	80029ee <__adddf3+0x212>
 80029e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80029e6:	bf04      	itt	eq
 80029e8:	4619      	moveq	r1, r3
 80029ea:	4610      	moveq	r0, r2
 80029ec:	bd30      	pop	{r4, r5, pc}
 80029ee:	ea91 0f03 	teq	r1, r3
 80029f2:	bf1e      	ittt	ne
 80029f4:	2100      	movne	r1, #0
 80029f6:	2000      	movne	r0, #0
 80029f8:	bd30      	popne	{r4, r5, pc}
 80029fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80029fe:	d105      	bne.n	8002a0c <__adddf3+0x230>
 8002a00:	0040      	lsls	r0, r0, #1
 8002a02:	4149      	adcs	r1, r1
 8002a04:	bf28      	it	cs
 8002a06:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8002a0a:	bd30      	pop	{r4, r5, pc}
 8002a0c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8002a10:	bf3c      	itt	cc
 8002a12:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8002a16:	bd30      	popcc	{r4, r5, pc}
 8002a18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002a1c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8002a20:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002a24:	f04f 0000 	mov.w	r0, #0
 8002a28:	bd30      	pop	{r4, r5, pc}
 8002a2a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002a2e:	bf1a      	itte	ne
 8002a30:	4619      	movne	r1, r3
 8002a32:	4610      	movne	r0, r2
 8002a34:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8002a38:	bf1c      	itt	ne
 8002a3a:	460b      	movne	r3, r1
 8002a3c:	4602      	movne	r2, r0
 8002a3e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002a42:	bf06      	itte	eq
 8002a44:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8002a48:	ea91 0f03 	teqeq	r1, r3
 8002a4c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8002a50:	bd30      	pop	{r4, r5, pc}
 8002a52:	bf00      	nop

08002a54 <__aeabi_ui2d>:
 8002a54:	f090 0f00 	teq	r0, #0
 8002a58:	bf04      	itt	eq
 8002a5a:	2100      	moveq	r1, #0
 8002a5c:	4770      	bxeq	lr
 8002a5e:	b530      	push	{r4, r5, lr}
 8002a60:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002a64:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002a68:	f04f 0500 	mov.w	r5, #0
 8002a6c:	f04f 0100 	mov.w	r1, #0
 8002a70:	e750      	b.n	8002914 <__adddf3+0x138>
 8002a72:	bf00      	nop

08002a74 <__aeabi_i2d>:
 8002a74:	f090 0f00 	teq	r0, #0
 8002a78:	bf04      	itt	eq
 8002a7a:	2100      	moveq	r1, #0
 8002a7c:	4770      	bxeq	lr
 8002a7e:	b530      	push	{r4, r5, lr}
 8002a80:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002a84:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002a88:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8002a8c:	bf48      	it	mi
 8002a8e:	4240      	negmi	r0, r0
 8002a90:	f04f 0100 	mov.w	r1, #0
 8002a94:	e73e      	b.n	8002914 <__adddf3+0x138>
 8002a96:	bf00      	nop

08002a98 <__aeabi_f2d>:
 8002a98:	0042      	lsls	r2, r0, #1
 8002a9a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8002a9e:	ea4f 0131 	mov.w	r1, r1, rrx
 8002aa2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8002aa6:	bf1f      	itttt	ne
 8002aa8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8002aac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8002ab0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8002ab4:	4770      	bxne	lr
 8002ab6:	f092 0f00 	teq	r2, #0
 8002aba:	bf14      	ite	ne
 8002abc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8002ac0:	4770      	bxeq	lr
 8002ac2:	b530      	push	{r4, r5, lr}
 8002ac4:	f44f 7460 	mov.w	r4, #896	; 0x380
 8002ac8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002acc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002ad0:	e720      	b.n	8002914 <__adddf3+0x138>
 8002ad2:	bf00      	nop

08002ad4 <__aeabi_ul2d>:
 8002ad4:	ea50 0201 	orrs.w	r2, r0, r1
 8002ad8:	bf08      	it	eq
 8002ada:	4770      	bxeq	lr
 8002adc:	b530      	push	{r4, r5, lr}
 8002ade:	f04f 0500 	mov.w	r5, #0
 8002ae2:	e00a      	b.n	8002afa <__aeabi_l2d+0x16>

08002ae4 <__aeabi_l2d>:
 8002ae4:	ea50 0201 	orrs.w	r2, r0, r1
 8002ae8:	bf08      	it	eq
 8002aea:	4770      	bxeq	lr
 8002aec:	b530      	push	{r4, r5, lr}
 8002aee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8002af2:	d502      	bpl.n	8002afa <__aeabi_l2d+0x16>
 8002af4:	4240      	negs	r0, r0
 8002af6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002afa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002afe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002b02:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8002b06:	f43f aedc 	beq.w	80028c2 <__adddf3+0xe6>
 8002b0a:	f04f 0203 	mov.w	r2, #3
 8002b0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002b12:	bf18      	it	ne
 8002b14:	3203      	addne	r2, #3
 8002b16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002b1a:	bf18      	it	ne
 8002b1c:	3203      	addne	r2, #3
 8002b1e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8002b22:	f1c2 0320 	rsb	r3, r2, #32
 8002b26:	fa00 fc03 	lsl.w	ip, r0, r3
 8002b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8002b2e:	fa01 fe03 	lsl.w	lr, r1, r3
 8002b32:	ea40 000e 	orr.w	r0, r0, lr
 8002b36:	fa21 f102 	lsr.w	r1, r1, r2
 8002b3a:	4414      	add	r4, r2
 8002b3c:	e6c1      	b.n	80028c2 <__adddf3+0xe6>
 8002b3e:	bf00      	nop

08002b40 <__aeabi_dmul>:
 8002b40:	b570      	push	{r4, r5, r6, lr}
 8002b42:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002b46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8002b4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002b4e:	bf1d      	ittte	ne
 8002b50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002b54:	ea94 0f0c 	teqne	r4, ip
 8002b58:	ea95 0f0c 	teqne	r5, ip
 8002b5c:	f000 f8de 	bleq	8002d1c <__aeabi_dmul+0x1dc>
 8002b60:	442c      	add	r4, r5
 8002b62:	ea81 0603 	eor.w	r6, r1, r3
 8002b66:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8002b6a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8002b6e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8002b72:	bf18      	it	ne
 8002b74:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8002b78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002b7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b80:	d038      	beq.n	8002bf4 <__aeabi_dmul+0xb4>
 8002b82:	fba0 ce02 	umull	ip, lr, r0, r2
 8002b86:	f04f 0500 	mov.w	r5, #0
 8002b8a:	fbe1 e502 	umlal	lr, r5, r1, r2
 8002b8e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8002b92:	fbe0 e503 	umlal	lr, r5, r0, r3
 8002b96:	f04f 0600 	mov.w	r6, #0
 8002b9a:	fbe1 5603 	umlal	r5, r6, r1, r3
 8002b9e:	f09c 0f00 	teq	ip, #0
 8002ba2:	bf18      	it	ne
 8002ba4:	f04e 0e01 	orrne.w	lr, lr, #1
 8002ba8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8002bac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8002bb0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8002bb4:	d204      	bcs.n	8002bc0 <__aeabi_dmul+0x80>
 8002bb6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8002bba:	416d      	adcs	r5, r5
 8002bbc:	eb46 0606 	adc.w	r6, r6, r6
 8002bc0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8002bc4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8002bc8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8002bcc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8002bd0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8002bd4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002bd8:	bf88      	it	hi
 8002bda:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8002bde:	d81e      	bhi.n	8002c1e <__aeabi_dmul+0xde>
 8002be0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8002be4:	bf08      	it	eq
 8002be6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8002bea:	f150 0000 	adcs.w	r0, r0, #0
 8002bee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002bf2:	bd70      	pop	{r4, r5, r6, pc}
 8002bf4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8002bf8:	ea46 0101 	orr.w	r1, r6, r1
 8002bfc:	ea40 0002 	orr.w	r0, r0, r2
 8002c00:	ea81 0103 	eor.w	r1, r1, r3
 8002c04:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8002c08:	bfc2      	ittt	gt
 8002c0a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002c0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002c12:	bd70      	popgt	{r4, r5, r6, pc}
 8002c14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002c18:	f04f 0e00 	mov.w	lr, #0
 8002c1c:	3c01      	subs	r4, #1
 8002c1e:	f300 80ab 	bgt.w	8002d78 <__aeabi_dmul+0x238>
 8002c22:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8002c26:	bfde      	ittt	le
 8002c28:	2000      	movle	r0, #0
 8002c2a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8002c2e:	bd70      	pople	{r4, r5, r6, pc}
 8002c30:	f1c4 0400 	rsb	r4, r4, #0
 8002c34:	3c20      	subs	r4, #32
 8002c36:	da35      	bge.n	8002ca4 <__aeabi_dmul+0x164>
 8002c38:	340c      	adds	r4, #12
 8002c3a:	dc1b      	bgt.n	8002c74 <__aeabi_dmul+0x134>
 8002c3c:	f104 0414 	add.w	r4, r4, #20
 8002c40:	f1c4 0520 	rsb	r5, r4, #32
 8002c44:	fa00 f305 	lsl.w	r3, r0, r5
 8002c48:	fa20 f004 	lsr.w	r0, r0, r4
 8002c4c:	fa01 f205 	lsl.w	r2, r1, r5
 8002c50:	ea40 0002 	orr.w	r0, r0, r2
 8002c54:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8002c58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002c5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002c60:	fa21 f604 	lsr.w	r6, r1, r4
 8002c64:	eb42 0106 	adc.w	r1, r2, r6
 8002c68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002c6c:	bf08      	it	eq
 8002c6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002c72:	bd70      	pop	{r4, r5, r6, pc}
 8002c74:	f1c4 040c 	rsb	r4, r4, #12
 8002c78:	f1c4 0520 	rsb	r5, r4, #32
 8002c7c:	fa00 f304 	lsl.w	r3, r0, r4
 8002c80:	fa20 f005 	lsr.w	r0, r0, r5
 8002c84:	fa01 f204 	lsl.w	r2, r1, r4
 8002c88:	ea40 0002 	orr.w	r0, r0, r2
 8002c8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002c90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002c94:	f141 0100 	adc.w	r1, r1, #0
 8002c98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002c9c:	bf08      	it	eq
 8002c9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002ca2:	bd70      	pop	{r4, r5, r6, pc}
 8002ca4:	f1c4 0520 	rsb	r5, r4, #32
 8002ca8:	fa00 f205 	lsl.w	r2, r0, r5
 8002cac:	ea4e 0e02 	orr.w	lr, lr, r2
 8002cb0:	fa20 f304 	lsr.w	r3, r0, r4
 8002cb4:	fa01 f205 	lsl.w	r2, r1, r5
 8002cb8:	ea43 0302 	orr.w	r3, r3, r2
 8002cbc:	fa21 f004 	lsr.w	r0, r1, r4
 8002cc0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002cc4:	fa21 f204 	lsr.w	r2, r1, r4
 8002cc8:	ea20 0002 	bic.w	r0, r0, r2
 8002ccc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8002cd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002cd4:	bf08      	it	eq
 8002cd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002cda:	bd70      	pop	{r4, r5, r6, pc}
 8002cdc:	f094 0f00 	teq	r4, #0
 8002ce0:	d10f      	bne.n	8002d02 <__aeabi_dmul+0x1c2>
 8002ce2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8002ce6:	0040      	lsls	r0, r0, #1
 8002ce8:	eb41 0101 	adc.w	r1, r1, r1
 8002cec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002cf0:	bf08      	it	eq
 8002cf2:	3c01      	subeq	r4, #1
 8002cf4:	d0f7      	beq.n	8002ce6 <__aeabi_dmul+0x1a6>
 8002cf6:	ea41 0106 	orr.w	r1, r1, r6
 8002cfa:	f095 0f00 	teq	r5, #0
 8002cfe:	bf18      	it	ne
 8002d00:	4770      	bxne	lr
 8002d02:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8002d06:	0052      	lsls	r2, r2, #1
 8002d08:	eb43 0303 	adc.w	r3, r3, r3
 8002d0c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002d10:	bf08      	it	eq
 8002d12:	3d01      	subeq	r5, #1
 8002d14:	d0f7      	beq.n	8002d06 <__aeabi_dmul+0x1c6>
 8002d16:	ea43 0306 	orr.w	r3, r3, r6
 8002d1a:	4770      	bx	lr
 8002d1c:	ea94 0f0c 	teq	r4, ip
 8002d20:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002d24:	bf18      	it	ne
 8002d26:	ea95 0f0c 	teqne	r5, ip
 8002d2a:	d00c      	beq.n	8002d46 <__aeabi_dmul+0x206>
 8002d2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002d30:	bf18      	it	ne
 8002d32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002d36:	d1d1      	bne.n	8002cdc <__aeabi_dmul+0x19c>
 8002d38:	ea81 0103 	eor.w	r1, r1, r3
 8002d3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002d40:	f04f 0000 	mov.w	r0, #0
 8002d44:	bd70      	pop	{r4, r5, r6, pc}
 8002d46:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002d4a:	bf06      	itte	eq
 8002d4c:	4610      	moveq	r0, r2
 8002d4e:	4619      	moveq	r1, r3
 8002d50:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002d54:	d019      	beq.n	8002d8a <__aeabi_dmul+0x24a>
 8002d56:	ea94 0f0c 	teq	r4, ip
 8002d5a:	d102      	bne.n	8002d62 <__aeabi_dmul+0x222>
 8002d5c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8002d60:	d113      	bne.n	8002d8a <__aeabi_dmul+0x24a>
 8002d62:	ea95 0f0c 	teq	r5, ip
 8002d66:	d105      	bne.n	8002d74 <__aeabi_dmul+0x234>
 8002d68:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8002d6c:	bf1c      	itt	ne
 8002d6e:	4610      	movne	r0, r2
 8002d70:	4619      	movne	r1, r3
 8002d72:	d10a      	bne.n	8002d8a <__aeabi_dmul+0x24a>
 8002d74:	ea81 0103 	eor.w	r1, r1, r3
 8002d78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002d7c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8002d80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002d84:	f04f 0000 	mov.w	r0, #0
 8002d88:	bd70      	pop	{r4, r5, r6, pc}
 8002d8a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8002d8e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8002d92:	bd70      	pop	{r4, r5, r6, pc}

08002d94 <__aeabi_ddiv>:
 8002d94:	b570      	push	{r4, r5, r6, lr}
 8002d96:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002d9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8002d9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002da2:	bf1d      	ittte	ne
 8002da4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002da8:	ea94 0f0c 	teqne	r4, ip
 8002dac:	ea95 0f0c 	teqne	r5, ip
 8002db0:	f000 f8a7 	bleq	8002f02 <__aeabi_ddiv+0x16e>
 8002db4:	eba4 0405 	sub.w	r4, r4, r5
 8002db8:	ea81 0e03 	eor.w	lr, r1, r3
 8002dbc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002dc0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002dc4:	f000 8088 	beq.w	8002ed8 <__aeabi_ddiv+0x144>
 8002dc8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002dcc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8002dd0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8002dd4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8002dd8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8002ddc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8002de0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8002de4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8002de8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8002dec:	429d      	cmp	r5, r3
 8002dee:	bf08      	it	eq
 8002df0:	4296      	cmpeq	r6, r2
 8002df2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8002df6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8002dfa:	d202      	bcs.n	8002e02 <__aeabi_ddiv+0x6e>
 8002dfc:	085b      	lsrs	r3, r3, #1
 8002dfe:	ea4f 0232 	mov.w	r2, r2, rrx
 8002e02:	1ab6      	subs	r6, r6, r2
 8002e04:	eb65 0503 	sbc.w	r5, r5, r3
 8002e08:	085b      	lsrs	r3, r3, #1
 8002e0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8002e0e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002e12:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8002e16:	ebb6 0e02 	subs.w	lr, r6, r2
 8002e1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002e1e:	bf22      	ittt	cs
 8002e20:	1ab6      	subcs	r6, r6, r2
 8002e22:	4675      	movcs	r5, lr
 8002e24:	ea40 000c 	orrcs.w	r0, r0, ip
 8002e28:	085b      	lsrs	r3, r3, #1
 8002e2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8002e2e:	ebb6 0e02 	subs.w	lr, r6, r2
 8002e32:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002e36:	bf22      	ittt	cs
 8002e38:	1ab6      	subcs	r6, r6, r2
 8002e3a:	4675      	movcs	r5, lr
 8002e3c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8002e40:	085b      	lsrs	r3, r3, #1
 8002e42:	ea4f 0232 	mov.w	r2, r2, rrx
 8002e46:	ebb6 0e02 	subs.w	lr, r6, r2
 8002e4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002e4e:	bf22      	ittt	cs
 8002e50:	1ab6      	subcs	r6, r6, r2
 8002e52:	4675      	movcs	r5, lr
 8002e54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8002e58:	085b      	lsrs	r3, r3, #1
 8002e5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8002e5e:	ebb6 0e02 	subs.w	lr, r6, r2
 8002e62:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002e66:	bf22      	ittt	cs
 8002e68:	1ab6      	subcs	r6, r6, r2
 8002e6a:	4675      	movcs	r5, lr
 8002e6c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8002e70:	ea55 0e06 	orrs.w	lr, r5, r6
 8002e74:	d018      	beq.n	8002ea8 <__aeabi_ddiv+0x114>
 8002e76:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8002e7a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8002e7e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8002e82:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002e86:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8002e8a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8002e8e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8002e92:	d1c0      	bne.n	8002e16 <__aeabi_ddiv+0x82>
 8002e94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002e98:	d10b      	bne.n	8002eb2 <__aeabi_ddiv+0x11e>
 8002e9a:	ea41 0100 	orr.w	r1, r1, r0
 8002e9e:	f04f 0000 	mov.w	r0, #0
 8002ea2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8002ea6:	e7b6      	b.n	8002e16 <__aeabi_ddiv+0x82>
 8002ea8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002eac:	bf04      	itt	eq
 8002eae:	4301      	orreq	r1, r0
 8002eb0:	2000      	moveq	r0, #0
 8002eb2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002eb6:	bf88      	it	hi
 8002eb8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8002ebc:	f63f aeaf 	bhi.w	8002c1e <__aeabi_dmul+0xde>
 8002ec0:	ebb5 0c03 	subs.w	ip, r5, r3
 8002ec4:	bf04      	itt	eq
 8002ec6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8002eca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002ece:	f150 0000 	adcs.w	r0, r0, #0
 8002ed2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002ed6:	bd70      	pop	{r4, r5, r6, pc}
 8002ed8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8002edc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8002ee0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8002ee4:	bfc2      	ittt	gt
 8002ee6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002eea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002eee:	bd70      	popgt	{r4, r5, r6, pc}
 8002ef0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002ef4:	f04f 0e00 	mov.w	lr, #0
 8002ef8:	3c01      	subs	r4, #1
 8002efa:	e690      	b.n	8002c1e <__aeabi_dmul+0xde>
 8002efc:	ea45 0e06 	orr.w	lr, r5, r6
 8002f00:	e68d      	b.n	8002c1e <__aeabi_dmul+0xde>
 8002f02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002f06:	ea94 0f0c 	teq	r4, ip
 8002f0a:	bf08      	it	eq
 8002f0c:	ea95 0f0c 	teqeq	r5, ip
 8002f10:	f43f af3b 	beq.w	8002d8a <__aeabi_dmul+0x24a>
 8002f14:	ea94 0f0c 	teq	r4, ip
 8002f18:	d10a      	bne.n	8002f30 <__aeabi_ddiv+0x19c>
 8002f1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002f1e:	f47f af34 	bne.w	8002d8a <__aeabi_dmul+0x24a>
 8002f22:	ea95 0f0c 	teq	r5, ip
 8002f26:	f47f af25 	bne.w	8002d74 <__aeabi_dmul+0x234>
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	e72c      	b.n	8002d8a <__aeabi_dmul+0x24a>
 8002f30:	ea95 0f0c 	teq	r5, ip
 8002f34:	d106      	bne.n	8002f44 <__aeabi_ddiv+0x1b0>
 8002f36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002f3a:	f43f aefd 	beq.w	8002d38 <__aeabi_dmul+0x1f8>
 8002f3e:	4610      	mov	r0, r2
 8002f40:	4619      	mov	r1, r3
 8002f42:	e722      	b.n	8002d8a <__aeabi_dmul+0x24a>
 8002f44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002f48:	bf18      	it	ne
 8002f4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002f4e:	f47f aec5 	bne.w	8002cdc <__aeabi_dmul+0x19c>
 8002f52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8002f56:	f47f af0d 	bne.w	8002d74 <__aeabi_dmul+0x234>
 8002f5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8002f5e:	f47f aeeb 	bne.w	8002d38 <__aeabi_dmul+0x1f8>
 8002f62:	e712      	b.n	8002d8a <__aeabi_dmul+0x24a>

08002f64 <__gedf2>:
 8002f64:	f04f 3cff 	mov.w	ip, #4294967295
 8002f68:	e006      	b.n	8002f78 <__cmpdf2+0x4>
 8002f6a:	bf00      	nop

08002f6c <__ledf2>:
 8002f6c:	f04f 0c01 	mov.w	ip, #1
 8002f70:	e002      	b.n	8002f78 <__cmpdf2+0x4>
 8002f72:	bf00      	nop

08002f74 <__cmpdf2>:
 8002f74:	f04f 0c01 	mov.w	ip, #1
 8002f78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8002f7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002f80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002f84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002f88:	bf18      	it	ne
 8002f8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8002f8e:	d01b      	beq.n	8002fc8 <__cmpdf2+0x54>
 8002f90:	b001      	add	sp, #4
 8002f92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8002f96:	bf0c      	ite	eq
 8002f98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8002f9c:	ea91 0f03 	teqne	r1, r3
 8002fa0:	bf02      	ittt	eq
 8002fa2:	ea90 0f02 	teqeq	r0, r2
 8002fa6:	2000      	moveq	r0, #0
 8002fa8:	4770      	bxeq	lr
 8002faa:	f110 0f00 	cmn.w	r0, #0
 8002fae:	ea91 0f03 	teq	r1, r3
 8002fb2:	bf58      	it	pl
 8002fb4:	4299      	cmppl	r1, r3
 8002fb6:	bf08      	it	eq
 8002fb8:	4290      	cmpeq	r0, r2
 8002fba:	bf2c      	ite	cs
 8002fbc:	17d8      	asrcs	r0, r3, #31
 8002fbe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8002fc2:	f040 0001 	orr.w	r0, r0, #1
 8002fc6:	4770      	bx	lr
 8002fc8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002fcc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002fd0:	d102      	bne.n	8002fd8 <__cmpdf2+0x64>
 8002fd2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8002fd6:	d107      	bne.n	8002fe8 <__cmpdf2+0x74>
 8002fd8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002fdc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002fe0:	d1d6      	bne.n	8002f90 <__cmpdf2+0x1c>
 8002fe2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8002fe6:	d0d3      	beq.n	8002f90 <__cmpdf2+0x1c>
 8002fe8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop

08002ff0 <__aeabi_cdrcmple>:
 8002ff0:	4684      	mov	ip, r0
 8002ff2:	4610      	mov	r0, r2
 8002ff4:	4662      	mov	r2, ip
 8002ff6:	468c      	mov	ip, r1
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4663      	mov	r3, ip
 8002ffc:	e000      	b.n	8003000 <__aeabi_cdcmpeq>
 8002ffe:	bf00      	nop

08003000 <__aeabi_cdcmpeq>:
 8003000:	b501      	push	{r0, lr}
 8003002:	f7ff ffb7 	bl	8002f74 <__cmpdf2>
 8003006:	2800      	cmp	r0, #0
 8003008:	bf48      	it	mi
 800300a:	f110 0f00 	cmnmi.w	r0, #0
 800300e:	bd01      	pop	{r0, pc}

08003010 <__aeabi_dcmpeq>:
 8003010:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003014:	f7ff fff4 	bl	8003000 <__aeabi_cdcmpeq>
 8003018:	bf0c      	ite	eq
 800301a:	2001      	moveq	r0, #1
 800301c:	2000      	movne	r0, #0
 800301e:	f85d fb08 	ldr.w	pc, [sp], #8
 8003022:	bf00      	nop

08003024 <__aeabi_dcmplt>:
 8003024:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003028:	f7ff ffea 	bl	8003000 <__aeabi_cdcmpeq>
 800302c:	bf34      	ite	cc
 800302e:	2001      	movcc	r0, #1
 8003030:	2000      	movcs	r0, #0
 8003032:	f85d fb08 	ldr.w	pc, [sp], #8
 8003036:	bf00      	nop

08003038 <__aeabi_dcmple>:
 8003038:	f84d ed08 	str.w	lr, [sp, #-8]!
 800303c:	f7ff ffe0 	bl	8003000 <__aeabi_cdcmpeq>
 8003040:	bf94      	ite	ls
 8003042:	2001      	movls	r0, #1
 8003044:	2000      	movhi	r0, #0
 8003046:	f85d fb08 	ldr.w	pc, [sp], #8
 800304a:	bf00      	nop

0800304c <__aeabi_dcmpge>:
 800304c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003050:	f7ff ffce 	bl	8002ff0 <__aeabi_cdrcmple>
 8003054:	bf94      	ite	ls
 8003056:	2001      	movls	r0, #1
 8003058:	2000      	movhi	r0, #0
 800305a:	f85d fb08 	ldr.w	pc, [sp], #8
 800305e:	bf00      	nop

08003060 <__aeabi_dcmpgt>:
 8003060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003064:	f7ff ffc4 	bl	8002ff0 <__aeabi_cdrcmple>
 8003068:	bf34      	ite	cc
 800306a:	2001      	movcc	r0, #1
 800306c:	2000      	movcs	r0, #0
 800306e:	f85d fb08 	ldr.w	pc, [sp], #8
 8003072:	bf00      	nop

08003074 <__aeabi_d2f>:
 8003074:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8003078:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800307c:	bf24      	itt	cs
 800307e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8003082:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8003086:	d90d      	bls.n	80030a4 <__aeabi_d2f+0x30>
 8003088:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800308c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8003090:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8003094:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8003098:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800309c:	bf08      	it	eq
 800309e:	f020 0001 	biceq.w	r0, r0, #1
 80030a2:	4770      	bx	lr
 80030a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80030a8:	d121      	bne.n	80030ee <__aeabi_d2f+0x7a>
 80030aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80030ae:	bfbc      	itt	lt
 80030b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80030b4:	4770      	bxlt	lr
 80030b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80030ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80030be:	f1c2 0218 	rsb	r2, r2, #24
 80030c2:	f1c2 0c20 	rsb	ip, r2, #32
 80030c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80030ca:	fa20 f002 	lsr.w	r0, r0, r2
 80030ce:	bf18      	it	ne
 80030d0:	f040 0001 	orrne.w	r0, r0, #1
 80030d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80030d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80030dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80030e0:	ea40 000c 	orr.w	r0, r0, ip
 80030e4:	fa23 f302 	lsr.w	r3, r3, r2
 80030e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80030ec:	e7cc      	b.n	8003088 <__aeabi_d2f+0x14>
 80030ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80030f2:	d107      	bne.n	8003104 <__aeabi_d2f+0x90>
 80030f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80030f8:	bf1e      	ittt	ne
 80030fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80030fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8003102:	4770      	bxne	lr
 8003104:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8003108:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800310c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop

08003114 <__aeabi_uldivmod>:
 8003114:	b953      	cbnz	r3, 800312c <__aeabi_uldivmod+0x18>
 8003116:	b94a      	cbnz	r2, 800312c <__aeabi_uldivmod+0x18>
 8003118:	2900      	cmp	r1, #0
 800311a:	bf08      	it	eq
 800311c:	2800      	cmpeq	r0, #0
 800311e:	bf1c      	itt	ne
 8003120:	f04f 31ff 	movne.w	r1, #4294967295
 8003124:	f04f 30ff 	movne.w	r0, #4294967295
 8003128:	f000 b97a 	b.w	8003420 <__aeabi_idiv0>
 800312c:	f1ad 0c08 	sub.w	ip, sp, #8
 8003130:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8003134:	f000 f806 	bl	8003144 <__udivmoddi4>
 8003138:	f8dd e004 	ldr.w	lr, [sp, #4]
 800313c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003140:	b004      	add	sp, #16
 8003142:	4770      	bx	lr

08003144 <__udivmoddi4>:
 8003144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003148:	468c      	mov	ip, r1
 800314a:	460d      	mov	r5, r1
 800314c:	4604      	mov	r4, r0
 800314e:	9e08      	ldr	r6, [sp, #32]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d151      	bne.n	80031f8 <__udivmoddi4+0xb4>
 8003154:	428a      	cmp	r2, r1
 8003156:	4617      	mov	r7, r2
 8003158:	d96d      	bls.n	8003236 <__udivmoddi4+0xf2>
 800315a:	fab2 fe82 	clz	lr, r2
 800315e:	f1be 0f00 	cmp.w	lr, #0
 8003162:	d00b      	beq.n	800317c <__udivmoddi4+0x38>
 8003164:	f1ce 0c20 	rsb	ip, lr, #32
 8003168:	fa01 f50e 	lsl.w	r5, r1, lr
 800316c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003170:	fa02 f70e 	lsl.w	r7, r2, lr
 8003174:	ea4c 0c05 	orr.w	ip, ip, r5
 8003178:	fa00 f40e 	lsl.w	r4, r0, lr
 800317c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8003180:	0c25      	lsrs	r5, r4, #16
 8003182:	fbbc f8fa 	udiv	r8, ip, sl
 8003186:	fa1f f987 	uxth.w	r9, r7
 800318a:	fb0a cc18 	mls	ip, sl, r8, ip
 800318e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8003192:	fb08 f309 	mul.w	r3, r8, r9
 8003196:	42ab      	cmp	r3, r5
 8003198:	d90a      	bls.n	80031b0 <__udivmoddi4+0x6c>
 800319a:	19ed      	adds	r5, r5, r7
 800319c:	f108 32ff 	add.w	r2, r8, #4294967295
 80031a0:	f080 8123 	bcs.w	80033ea <__udivmoddi4+0x2a6>
 80031a4:	42ab      	cmp	r3, r5
 80031a6:	f240 8120 	bls.w	80033ea <__udivmoddi4+0x2a6>
 80031aa:	f1a8 0802 	sub.w	r8, r8, #2
 80031ae:	443d      	add	r5, r7
 80031b0:	1aed      	subs	r5, r5, r3
 80031b2:	b2a4      	uxth	r4, r4
 80031b4:	fbb5 f0fa 	udiv	r0, r5, sl
 80031b8:	fb0a 5510 	mls	r5, sl, r0, r5
 80031bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80031c0:	fb00 f909 	mul.w	r9, r0, r9
 80031c4:	45a1      	cmp	r9, r4
 80031c6:	d909      	bls.n	80031dc <__udivmoddi4+0x98>
 80031c8:	19e4      	adds	r4, r4, r7
 80031ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80031ce:	f080 810a 	bcs.w	80033e6 <__udivmoddi4+0x2a2>
 80031d2:	45a1      	cmp	r9, r4
 80031d4:	f240 8107 	bls.w	80033e6 <__udivmoddi4+0x2a2>
 80031d8:	3802      	subs	r0, #2
 80031da:	443c      	add	r4, r7
 80031dc:	eba4 0409 	sub.w	r4, r4, r9
 80031e0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80031e4:	2100      	movs	r1, #0
 80031e6:	2e00      	cmp	r6, #0
 80031e8:	d061      	beq.n	80032ae <__udivmoddi4+0x16a>
 80031ea:	fa24 f40e 	lsr.w	r4, r4, lr
 80031ee:	2300      	movs	r3, #0
 80031f0:	6034      	str	r4, [r6, #0]
 80031f2:	6073      	str	r3, [r6, #4]
 80031f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031f8:	428b      	cmp	r3, r1
 80031fa:	d907      	bls.n	800320c <__udivmoddi4+0xc8>
 80031fc:	2e00      	cmp	r6, #0
 80031fe:	d054      	beq.n	80032aa <__udivmoddi4+0x166>
 8003200:	2100      	movs	r1, #0
 8003202:	e886 0021 	stmia.w	r6, {r0, r5}
 8003206:	4608      	mov	r0, r1
 8003208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800320c:	fab3 f183 	clz	r1, r3
 8003210:	2900      	cmp	r1, #0
 8003212:	f040 808e 	bne.w	8003332 <__udivmoddi4+0x1ee>
 8003216:	42ab      	cmp	r3, r5
 8003218:	d302      	bcc.n	8003220 <__udivmoddi4+0xdc>
 800321a:	4282      	cmp	r2, r0
 800321c:	f200 80fa 	bhi.w	8003414 <__udivmoddi4+0x2d0>
 8003220:	1a84      	subs	r4, r0, r2
 8003222:	eb65 0503 	sbc.w	r5, r5, r3
 8003226:	2001      	movs	r0, #1
 8003228:	46ac      	mov	ip, r5
 800322a:	2e00      	cmp	r6, #0
 800322c:	d03f      	beq.n	80032ae <__udivmoddi4+0x16a>
 800322e:	e886 1010 	stmia.w	r6, {r4, ip}
 8003232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003236:	b912      	cbnz	r2, 800323e <__udivmoddi4+0xfa>
 8003238:	2701      	movs	r7, #1
 800323a:	fbb7 f7f2 	udiv	r7, r7, r2
 800323e:	fab7 fe87 	clz	lr, r7
 8003242:	f1be 0f00 	cmp.w	lr, #0
 8003246:	d134      	bne.n	80032b2 <__udivmoddi4+0x16e>
 8003248:	1beb      	subs	r3, r5, r7
 800324a:	0c3a      	lsrs	r2, r7, #16
 800324c:	fa1f fc87 	uxth.w	ip, r7
 8003250:	2101      	movs	r1, #1
 8003252:	fbb3 f8f2 	udiv	r8, r3, r2
 8003256:	0c25      	lsrs	r5, r4, #16
 8003258:	fb02 3318 	mls	r3, r2, r8, r3
 800325c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8003260:	fb0c f308 	mul.w	r3, ip, r8
 8003264:	42ab      	cmp	r3, r5
 8003266:	d907      	bls.n	8003278 <__udivmoddi4+0x134>
 8003268:	19ed      	adds	r5, r5, r7
 800326a:	f108 30ff 	add.w	r0, r8, #4294967295
 800326e:	d202      	bcs.n	8003276 <__udivmoddi4+0x132>
 8003270:	42ab      	cmp	r3, r5
 8003272:	f200 80d1 	bhi.w	8003418 <__udivmoddi4+0x2d4>
 8003276:	4680      	mov	r8, r0
 8003278:	1aed      	subs	r5, r5, r3
 800327a:	b2a3      	uxth	r3, r4
 800327c:	fbb5 f0f2 	udiv	r0, r5, r2
 8003280:	fb02 5510 	mls	r5, r2, r0, r5
 8003284:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8003288:	fb0c fc00 	mul.w	ip, ip, r0
 800328c:	45a4      	cmp	ip, r4
 800328e:	d907      	bls.n	80032a0 <__udivmoddi4+0x15c>
 8003290:	19e4      	adds	r4, r4, r7
 8003292:	f100 33ff 	add.w	r3, r0, #4294967295
 8003296:	d202      	bcs.n	800329e <__udivmoddi4+0x15a>
 8003298:	45a4      	cmp	ip, r4
 800329a:	f200 80b8 	bhi.w	800340e <__udivmoddi4+0x2ca>
 800329e:	4618      	mov	r0, r3
 80032a0:	eba4 040c 	sub.w	r4, r4, ip
 80032a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80032a8:	e79d      	b.n	80031e6 <__udivmoddi4+0xa2>
 80032aa:	4631      	mov	r1, r6
 80032ac:	4630      	mov	r0, r6
 80032ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032b2:	f1ce 0420 	rsb	r4, lr, #32
 80032b6:	fa05 f30e 	lsl.w	r3, r5, lr
 80032ba:	fa07 f70e 	lsl.w	r7, r7, lr
 80032be:	fa20 f804 	lsr.w	r8, r0, r4
 80032c2:	0c3a      	lsrs	r2, r7, #16
 80032c4:	fa25 f404 	lsr.w	r4, r5, r4
 80032c8:	ea48 0803 	orr.w	r8, r8, r3
 80032cc:	fbb4 f1f2 	udiv	r1, r4, r2
 80032d0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80032d4:	fb02 4411 	mls	r4, r2, r1, r4
 80032d8:	fa1f fc87 	uxth.w	ip, r7
 80032dc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80032e0:	fb01 f30c 	mul.w	r3, r1, ip
 80032e4:	42ab      	cmp	r3, r5
 80032e6:	fa00 f40e 	lsl.w	r4, r0, lr
 80032ea:	d909      	bls.n	8003300 <__udivmoddi4+0x1bc>
 80032ec:	19ed      	adds	r5, r5, r7
 80032ee:	f101 30ff 	add.w	r0, r1, #4294967295
 80032f2:	f080 808a 	bcs.w	800340a <__udivmoddi4+0x2c6>
 80032f6:	42ab      	cmp	r3, r5
 80032f8:	f240 8087 	bls.w	800340a <__udivmoddi4+0x2c6>
 80032fc:	3902      	subs	r1, #2
 80032fe:	443d      	add	r5, r7
 8003300:	1aeb      	subs	r3, r5, r3
 8003302:	fa1f f588 	uxth.w	r5, r8
 8003306:	fbb3 f0f2 	udiv	r0, r3, r2
 800330a:	fb02 3310 	mls	r3, r2, r0, r3
 800330e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8003312:	fb00 f30c 	mul.w	r3, r0, ip
 8003316:	42ab      	cmp	r3, r5
 8003318:	d907      	bls.n	800332a <__udivmoddi4+0x1e6>
 800331a:	19ed      	adds	r5, r5, r7
 800331c:	f100 38ff 	add.w	r8, r0, #4294967295
 8003320:	d26f      	bcs.n	8003402 <__udivmoddi4+0x2be>
 8003322:	42ab      	cmp	r3, r5
 8003324:	d96d      	bls.n	8003402 <__udivmoddi4+0x2be>
 8003326:	3802      	subs	r0, #2
 8003328:	443d      	add	r5, r7
 800332a:	1aeb      	subs	r3, r5, r3
 800332c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8003330:	e78f      	b.n	8003252 <__udivmoddi4+0x10e>
 8003332:	f1c1 0720 	rsb	r7, r1, #32
 8003336:	fa22 f807 	lsr.w	r8, r2, r7
 800333a:	408b      	lsls	r3, r1
 800333c:	fa05 f401 	lsl.w	r4, r5, r1
 8003340:	ea48 0303 	orr.w	r3, r8, r3
 8003344:	fa20 fe07 	lsr.w	lr, r0, r7
 8003348:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800334c:	40fd      	lsrs	r5, r7
 800334e:	ea4e 0e04 	orr.w	lr, lr, r4
 8003352:	fbb5 f9fc 	udiv	r9, r5, ip
 8003356:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800335a:	fb0c 5519 	mls	r5, ip, r9, r5
 800335e:	fa1f f883 	uxth.w	r8, r3
 8003362:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8003366:	fb09 f408 	mul.w	r4, r9, r8
 800336a:	42ac      	cmp	r4, r5
 800336c:	fa02 f201 	lsl.w	r2, r2, r1
 8003370:	fa00 fa01 	lsl.w	sl, r0, r1
 8003374:	d908      	bls.n	8003388 <__udivmoddi4+0x244>
 8003376:	18ed      	adds	r5, r5, r3
 8003378:	f109 30ff 	add.w	r0, r9, #4294967295
 800337c:	d243      	bcs.n	8003406 <__udivmoddi4+0x2c2>
 800337e:	42ac      	cmp	r4, r5
 8003380:	d941      	bls.n	8003406 <__udivmoddi4+0x2c2>
 8003382:	f1a9 0902 	sub.w	r9, r9, #2
 8003386:	441d      	add	r5, r3
 8003388:	1b2d      	subs	r5, r5, r4
 800338a:	fa1f fe8e 	uxth.w	lr, lr
 800338e:	fbb5 f0fc 	udiv	r0, r5, ip
 8003392:	fb0c 5510 	mls	r5, ip, r0, r5
 8003396:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800339a:	fb00 f808 	mul.w	r8, r0, r8
 800339e:	45a0      	cmp	r8, r4
 80033a0:	d907      	bls.n	80033b2 <__udivmoddi4+0x26e>
 80033a2:	18e4      	adds	r4, r4, r3
 80033a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80033a8:	d229      	bcs.n	80033fe <__udivmoddi4+0x2ba>
 80033aa:	45a0      	cmp	r8, r4
 80033ac:	d927      	bls.n	80033fe <__udivmoddi4+0x2ba>
 80033ae:	3802      	subs	r0, #2
 80033b0:	441c      	add	r4, r3
 80033b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80033b6:	eba4 0408 	sub.w	r4, r4, r8
 80033ba:	fba0 8902 	umull	r8, r9, r0, r2
 80033be:	454c      	cmp	r4, r9
 80033c0:	46c6      	mov	lr, r8
 80033c2:	464d      	mov	r5, r9
 80033c4:	d315      	bcc.n	80033f2 <__udivmoddi4+0x2ae>
 80033c6:	d012      	beq.n	80033ee <__udivmoddi4+0x2aa>
 80033c8:	b156      	cbz	r6, 80033e0 <__udivmoddi4+0x29c>
 80033ca:	ebba 030e 	subs.w	r3, sl, lr
 80033ce:	eb64 0405 	sbc.w	r4, r4, r5
 80033d2:	fa04 f707 	lsl.w	r7, r4, r7
 80033d6:	40cb      	lsrs	r3, r1
 80033d8:	431f      	orrs	r7, r3
 80033da:	40cc      	lsrs	r4, r1
 80033dc:	6037      	str	r7, [r6, #0]
 80033de:	6074      	str	r4, [r6, #4]
 80033e0:	2100      	movs	r1, #0
 80033e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033e6:	4618      	mov	r0, r3
 80033e8:	e6f8      	b.n	80031dc <__udivmoddi4+0x98>
 80033ea:	4690      	mov	r8, r2
 80033ec:	e6e0      	b.n	80031b0 <__udivmoddi4+0x6c>
 80033ee:	45c2      	cmp	sl, r8
 80033f0:	d2ea      	bcs.n	80033c8 <__udivmoddi4+0x284>
 80033f2:	ebb8 0e02 	subs.w	lr, r8, r2
 80033f6:	eb69 0503 	sbc.w	r5, r9, r3
 80033fa:	3801      	subs	r0, #1
 80033fc:	e7e4      	b.n	80033c8 <__udivmoddi4+0x284>
 80033fe:	4628      	mov	r0, r5
 8003400:	e7d7      	b.n	80033b2 <__udivmoddi4+0x26e>
 8003402:	4640      	mov	r0, r8
 8003404:	e791      	b.n	800332a <__udivmoddi4+0x1e6>
 8003406:	4681      	mov	r9, r0
 8003408:	e7be      	b.n	8003388 <__udivmoddi4+0x244>
 800340a:	4601      	mov	r1, r0
 800340c:	e778      	b.n	8003300 <__udivmoddi4+0x1bc>
 800340e:	3802      	subs	r0, #2
 8003410:	443c      	add	r4, r7
 8003412:	e745      	b.n	80032a0 <__udivmoddi4+0x15c>
 8003414:	4608      	mov	r0, r1
 8003416:	e708      	b.n	800322a <__udivmoddi4+0xe6>
 8003418:	f1a8 0802 	sub.w	r8, r8, #2
 800341c:	443d      	add	r5, r7
 800341e:	e72b      	b.n	8003278 <__udivmoddi4+0x134>

08003420 <__aeabi_idiv0>:
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop

08003424 <arm_dot_prod_f32>:
void arm_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t blockSize,
  float32_t * result)
{
 8003424:	b5f0      	push	{r4, r5, r6, r7, lr}
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8003426:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8003494 <arm_dot_prod_f32+0x70>

#if defined (ARM_MATH_DSP)

/* Run the below code for Cortex-M4 and Cortex-M3 */
  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 800342a:	0896      	lsrs	r6, r2, #2
 800342c:	4605      	mov	r5, r0
 800342e:	460c      	mov	r4, r1
 8003430:	4637      	mov	r7, r6
 8003432:	3510      	adds	r5, #16
 8003434:	3410      	adds	r4, #16

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8003436:	b95f      	cbnz	r7, 8003450 <arm_dot_prod_f32+0x2c>
 8003438:	0134      	lsls	r4, r6, #4
 800343a:	4421      	add	r1, r4
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 800343c:	f002 0203 	and.w	r2, r2, #3
 8003440:	4420      	add	r0, r4
 8003442:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */


  while (blkCnt > 0U)
 8003446:	4291      	cmp	r1, r2
 8003448:	d11c      	bne.n	8003484 <arm_dot_prod_f32+0x60>

    /* Decrement the loop counter */
    blkCnt--;
  }
  /* Store the result back in the destination buffer */
  *result = sum;
 800344a:	edc3 7a00 	vstr	s15, [r3]
 800344e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sum += (*pSrcA++) * (*pSrcB++);
 8003450:	ed55 6a04 	vldr	s13, [r5, #-16]
 8003454:	ed14 7a04 	vldr	s14, [r4, #-16]
 8003458:	eee6 7a87 	vfma.f32	s15, s13, s14
    blkCnt--;
 800345c:	3f01      	subs	r7, #1
    sum += (*pSrcA++) * (*pSrcB++);
 800345e:	ed55 6a03 	vldr	s13, [r5, #-12]
 8003462:	ed14 7a03 	vldr	s14, [r4, #-12]
 8003466:	eee6 7a87 	vfma.f32	s15, s13, s14
    sum += (*pSrcA++) * (*pSrcB++);
 800346a:	ed55 6a02 	vldr	s13, [r5, #-8]
 800346e:	ed14 7a02 	vldr	s14, [r4, #-8]
 8003472:	eee6 7a87 	vfma.f32	s15, s13, s14
    sum += (*pSrcA++) * (*pSrcB++);
 8003476:	ed55 6a01 	vldr	s13, [r5, #-4]
 800347a:	ed14 7a01 	vldr	s14, [r4, #-4]
 800347e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003482:	e7d6      	b.n	8003432 <arm_dot_prod_f32+0xe>
    sum += (*pSrcA++) * (*pSrcB++);
 8003484:	ecf0 6a01 	vldmia	r0!, {s13}
 8003488:	ecb1 7a01 	vldmia	r1!, {s14}
 800348c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003490:	e7d9      	b.n	8003446 <arm_dot_prod_f32+0x22>
 8003492:	bf00      	nop
 8003494:	00000000 	.word	0x00000000

08003498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003498:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800349a:	4a0e      	ldr	r2, [pc, #56]	; (80034d4 <HAL_InitTick+0x3c>)
 800349c:	4b0e      	ldr	r3, [pc, #56]	; (80034d8 <HAL_InitTick+0x40>)
{
 800349e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034a0:	7818      	ldrb	r0, [r3, #0]
 80034a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034a6:	fbb3 f3f0 	udiv	r3, r3, r0
 80034aa:	6810      	ldr	r0, [r2, #0]
 80034ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80034b0:	f000 f89c 	bl	80035ec <HAL_SYSTICK_Config>
 80034b4:	4604      	mov	r4, r0
 80034b6:	b958      	cbnz	r0, 80034d0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034b8:	2d0f      	cmp	r5, #15
 80034ba:	d809      	bhi.n	80034d0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034bc:	4602      	mov	r2, r0
 80034be:	4629      	mov	r1, r5
 80034c0:	f04f 30ff 	mov.w	r0, #4294967295
 80034c4:	f000 f85e 	bl	8003584 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034c8:	4b04      	ldr	r3, [pc, #16]	; (80034dc <HAL_InitTick+0x44>)
 80034ca:	4620      	mov	r0, r4
 80034cc:	601d      	str	r5, [r3, #0]
 80034ce:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80034d0:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80034d2:	bd38      	pop	{r3, r4, r5, pc}
 80034d4:	20000490 	.word	0x20000490
 80034d8:	20000000 	.word	0x20000000
 80034dc:	20000004 	.word	0x20000004

080034e0 <HAL_Init>:
{
 80034e0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034e2:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <HAL_Init+0x30>)
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034f2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034fa:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034fc:	2003      	movs	r0, #3
 80034fe:	f000 f82f 	bl	8003560 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003502:	2000      	movs	r0, #0
 8003504:	f7ff ffc8 	bl	8003498 <HAL_InitTick>
  HAL_MspInit();
 8003508:	f001 fefa 	bl	8005300 <HAL_MspInit>
}
 800350c:	2000      	movs	r0, #0
 800350e:	bd08      	pop	{r3, pc}
 8003510:	40023c00 	.word	0x40023c00

08003514 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003514:	4a03      	ldr	r2, [pc, #12]	; (8003524 <HAL_IncTick+0x10>)
 8003516:	4b04      	ldr	r3, [pc, #16]	; (8003528 <HAL_IncTick+0x14>)
 8003518:	6811      	ldr	r1, [r2, #0]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	440b      	add	r3, r1
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	20001044 	.word	0x20001044
 8003528:	20000000 	.word	0x20000000

0800352c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800352c:	4b01      	ldr	r3, [pc, #4]	; (8003534 <HAL_GetTick+0x8>)
 800352e:	6818      	ldr	r0, [r3, #0]
}
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20001044 	.word	0x20001044

08003538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003538:	b538      	push	{r3, r4, r5, lr}
 800353a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800353c:	f7ff fff6 	bl	800352c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003540:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8003542:	bf1c      	itt	ne
 8003544:	4b05      	ldrne	r3, [pc, #20]	; (800355c <HAL_Delay+0x24>)
 8003546:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8003548:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800354a:	bf18      	it	ne
 800354c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800354e:	f7ff ffed 	bl	800352c <HAL_GetTick>
 8003552:	1b40      	subs	r0, r0, r5
 8003554:	4284      	cmp	r4, r0
 8003556:	d8fa      	bhi.n	800354e <HAL_Delay+0x16>
  {
  }
}
 8003558:	bd38      	pop	{r3, r4, r5, pc}
 800355a:	bf00      	nop
 800355c:	20000000 	.word	0x20000000

08003560 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003560:	4a07      	ldr	r2, [pc, #28]	; (8003580 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003562:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003564:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003568:	041b      	lsls	r3, r3, #16
 800356a:	0c1b      	lsrs	r3, r3, #16
 800356c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003570:	0200      	lsls	r0, r0, #8
 8003572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003576:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800357a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800357c:	60d3      	str	r3, [r2, #12]
 800357e:	4770      	bx	lr
 8003580:	e000ed00 	.word	0xe000ed00

08003584 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003584:	4b17      	ldr	r3, [pc, #92]	; (80035e4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003586:	b530      	push	{r4, r5, lr}
 8003588:	68dc      	ldr	r4, [r3, #12]
 800358a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800358e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003592:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003594:	2b04      	cmp	r3, #4
 8003596:	bf28      	it	cs
 8003598:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800359a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800359c:	f04f 0501 	mov.w	r5, #1
 80035a0:	fa05 f303 	lsl.w	r3, r5, r3
 80035a4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035a8:	bf8c      	ite	hi
 80035aa:	3c03      	subhi	r4, #3
 80035ac:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ae:	4019      	ands	r1, r3
 80035b0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035b2:	fa05 f404 	lsl.w	r4, r5, r4
 80035b6:	3c01      	subs	r4, #1
 80035b8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80035ba:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035bc:	ea42 0201 	orr.w	r2, r2, r1
 80035c0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c4:	bfad      	iteet	ge
 80035c6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ca:	f000 000f 	andlt.w	r0, r0, #15
 80035ce:	4b06      	ldrlt	r3, [pc, #24]	; (80035e8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d4:	bfb5      	itete	lt
 80035d6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035da:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035dc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80035e0:	bd30      	pop	{r4, r5, pc}
 80035e2:	bf00      	nop
 80035e4:	e000ed00 	.word	0xe000ed00
 80035e8:	e000ed14 	.word	0xe000ed14

080035ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035ec:	3801      	subs	r0, #1
 80035ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80035f2:	d20a      	bcs.n	800360a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035f4:	4b06      	ldr	r3, [pc, #24]	; (8003610 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f6:	4a07      	ldr	r2, [pc, #28]	; (8003614 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035f8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035fa:	21f0      	movs	r1, #240	; 0xf0
 80035fc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003600:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003602:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003604:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800360a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	e000e010 	.word	0xe000e010
 8003614:	e000ed00 	.word	0xe000ed00

08003618 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003618:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800361a:	4604      	mov	r4, r0
 800361c:	b160      	cbz	r0, 8003638 <HAL_CRC_Init+0x20>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800361e:	7943      	ldrb	r3, [r0, #5]
 8003620:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003624:	b913      	cbnz	r3, 800362c <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003626:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003628:	f001 fe86 	bl	8005338 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800362c:	2302      	movs	r3, #2
 800362e:	7163      	strb	r3, [r4, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003630:	2301      	movs	r3, #1
 8003632:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8003634:	2000      	movs	r0, #0
 8003636:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003638:	2001      	movs	r0, #1
}
 800363a:	bd10      	pop	{r4, pc}

0800363c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800363c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003640:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003642:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003644:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80037e8 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003648:	4a65      	ldr	r2, [pc, #404]	; (80037e0 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800364a:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 80037ec <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800364e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003650:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8003652:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003656:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8003658:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800365c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8003660:	45b6      	cmp	lr, r6
 8003662:	f040 80aa 	bne.w	80037ba <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003666:	684c      	ldr	r4, [r1, #4]
 8003668:	f024 0710 	bic.w	r7, r4, #16
 800366c:	2f02      	cmp	r7, #2
 800366e:	d116      	bne.n	800369e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8003670:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8003674:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003678:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800367c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003680:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8003684:	f04f 0c0f 	mov.w	ip, #15
 8003688:	fa0c fc0b 	lsl.w	ip, ip, fp
 800368c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003690:	690d      	ldr	r5, [r1, #16]
 8003692:	fa05 f50b 	lsl.w	r5, r5, fp
 8003696:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800369a:	f8ca 5020 	str.w	r5, [sl, #32]
 800369e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036a2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80036a4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036a8:	fa05 f50a 	lsl.w	r5, r5, sl
 80036ac:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036ae:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036b2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036b6:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036ba:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036bc:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036c0:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80036c2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036c6:	d811      	bhi.n	80036ec <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80036c8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036ca:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036ce:	68cf      	ldr	r7, [r1, #12]
 80036d0:	fa07 fc0a 	lsl.w	ip, r7, sl
 80036d4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80036d8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80036da:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036dc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80036e0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80036e4:	409f      	lsls	r7, r3
 80036e6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80036ea:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80036ec:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036ee:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036f0:	688f      	ldr	r7, [r1, #8]
 80036f2:	fa07 f70a 	lsl.w	r7, r7, sl
 80036f6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80036f8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036fa:	00e5      	lsls	r5, r4, #3
 80036fc:	d55d      	bpl.n	80037ba <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036fe:	f04f 0b00 	mov.w	fp, #0
 8003702:	f8cd b00c 	str.w	fp, [sp, #12]
 8003706:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800370a:	4d36      	ldr	r5, [pc, #216]	; (80037e4 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800370c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8003710:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8003714:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8003718:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800371c:	9703      	str	r7, [sp, #12]
 800371e:	9f03      	ldr	r7, [sp, #12]
 8003720:	f023 0703 	bic.w	r7, r3, #3
 8003724:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8003728:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800372c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8003730:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003734:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003738:	f04f 0e0f 	mov.w	lr, #15
 800373c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003740:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003742:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003746:	d03f      	beq.n	80037c8 <HAL_GPIO_Init+0x18c>
 8003748:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800374c:	42a8      	cmp	r0, r5
 800374e:	d03d      	beq.n	80037cc <HAL_GPIO_Init+0x190>
 8003750:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003754:	42a8      	cmp	r0, r5
 8003756:	d03b      	beq.n	80037d0 <HAL_GPIO_Init+0x194>
 8003758:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800375c:	42a8      	cmp	r0, r5
 800375e:	d039      	beq.n	80037d4 <HAL_GPIO_Init+0x198>
 8003760:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003764:	42a8      	cmp	r0, r5
 8003766:	d037      	beq.n	80037d8 <HAL_GPIO_Init+0x19c>
 8003768:	4548      	cmp	r0, r9
 800376a:	d037      	beq.n	80037dc <HAL_GPIO_Init+0x1a0>
 800376c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003770:	42a8      	cmp	r0, r5
 8003772:	bf14      	ite	ne
 8003774:	2507      	movne	r5, #7
 8003776:	2506      	moveq	r5, #6
 8003778:	fa05 f50c 	lsl.w	r5, r5, ip
 800377c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003780:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8003782:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003784:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003786:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800378a:	bf0c      	ite	eq
 800378c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800378e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8003790:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8003792:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003794:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8003798:	bf0c      	ite	eq
 800379a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800379c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800379e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037a0:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037a2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80037a6:	bf0c      	ite	eq
 80037a8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80037aa:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80037ac:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80037ae:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037b0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80037b2:	bf54      	ite	pl
 80037b4:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80037b6:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80037b8:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ba:	3301      	adds	r3, #1
 80037bc:	2b10      	cmp	r3, #16
 80037be:	f47f af48 	bne.w	8003652 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80037c2:	b005      	add	sp, #20
 80037c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037c8:	465d      	mov	r5, fp
 80037ca:	e7d5      	b.n	8003778 <HAL_GPIO_Init+0x13c>
 80037cc:	2501      	movs	r5, #1
 80037ce:	e7d3      	b.n	8003778 <HAL_GPIO_Init+0x13c>
 80037d0:	2502      	movs	r5, #2
 80037d2:	e7d1      	b.n	8003778 <HAL_GPIO_Init+0x13c>
 80037d4:	2503      	movs	r5, #3
 80037d6:	e7cf      	b.n	8003778 <HAL_GPIO_Init+0x13c>
 80037d8:	2504      	movs	r5, #4
 80037da:	e7cd      	b.n	8003778 <HAL_GPIO_Init+0x13c>
 80037dc:	2505      	movs	r5, #5
 80037de:	e7cb      	b.n	8003778 <HAL_GPIO_Init+0x13c>
 80037e0:	40013c00 	.word	0x40013c00
 80037e4:	40020000 	.word	0x40020000
 80037e8:	40023800 	.word	0x40023800
 80037ec:	40021400 	.word	0x40021400

080037f0 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037f0:	6801      	ldr	r1, [r0, #0]
 80037f2:	694b      	ldr	r3, [r1, #20]
 80037f4:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	d010      	beq.n	8003820 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037fe:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8003802:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8003804:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003806:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003808:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800380c:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003810:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003812:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003816:	f043 0304 	orr.w	r3, r3, #4
 800381a:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 800381c:	2001      	movs	r0, #1
 800381e:	4770      	bx	lr
  }
  return HAL_OK;
 8003820:	4618      	mov	r0, r3
}
 8003822:	4770      	bx	lr

08003824 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003828:	4604      	mov	r4, r0
 800382a:	4617      	mov	r7, r2
 800382c:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800382e:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8003832:	b28e      	uxth	r6, r1
 8003834:	6825      	ldr	r5, [r4, #0]
 8003836:	f1b8 0f01 	cmp.w	r8, #1
 800383a:	bf0c      	ite	eq
 800383c:	696b      	ldreq	r3, [r5, #20]
 800383e:	69ab      	ldrne	r3, [r5, #24]
 8003840:	ea36 0303 	bics.w	r3, r6, r3
 8003844:	bf14      	ite	ne
 8003846:	2001      	movne	r0, #1
 8003848:	2000      	moveq	r0, #0
 800384a:	b908      	cbnz	r0, 8003850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 800384c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003850:	696b      	ldr	r3, [r5, #20]
 8003852:	055a      	lsls	r2, r3, #21
 8003854:	d516      	bpl.n	8003884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003856:	682b      	ldr	r3, [r5, #0]
 8003858:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800385c:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800385e:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8003862:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8003864:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003866:	2300      	movs	r3, #0
 8003868:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800386a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800386e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003872:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003874:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003878:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800387a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800387e:	2001      	movs	r0, #1
 8003880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003884:	1c7b      	adds	r3, r7, #1
 8003886:	d0d5      	beq.n	8003834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003888:	f7ff fe50 	bl	800352c <HAL_GetTick>
 800388c:	eba0 0009 	sub.w	r0, r0, r9
 8003890:	4287      	cmp	r7, r0
 8003892:	d301      	bcc.n	8003898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 8003894:	2f00      	cmp	r7, #0
 8003896:	d1cd      	bne.n	8003834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003898:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800389a:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800389c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800389e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80038a8:	f042 0220 	orr.w	r2, r2, #32
 80038ac:	e7e4      	b.n	8003878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

080038ae <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80038ae:	b570      	push	{r4, r5, r6, lr}
 80038b0:	4604      	mov	r4, r0
 80038b2:	460d      	mov	r5, r1
 80038b4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038b6:	6823      	ldr	r3, [r4, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	075b      	lsls	r3, r3, #29
 80038bc:	d501      	bpl.n	80038c2 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80038be:	2000      	movs	r0, #0
 80038c0:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038c2:	4620      	mov	r0, r4
 80038c4:	f7ff ff94 	bl	80037f0 <I2C_IsAcknowledgeFailed>
 80038c8:	b9a8      	cbnz	r0, 80038f6 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80038ca:	1c6a      	adds	r2, r5, #1
 80038cc:	d0f3      	beq.n	80038b6 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ce:	f7ff fe2d 	bl	800352c <HAL_GetTick>
 80038d2:	1b80      	subs	r0, r0, r6
 80038d4:	4285      	cmp	r5, r0
 80038d6:	d301      	bcc.n	80038dc <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80038d8:	2d00      	cmp	r5, #0
 80038da:	d1ec      	bne.n	80038b6 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038dc:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80038de:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038e0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038e2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ea:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80038ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038f0:	f042 0220 	orr.w	r2, r2, #32
 80038f4:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80038f6:	2001      	movs	r0, #1
}
 80038f8:	bd70      	pop	{r4, r5, r6, pc}

080038fa <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80038fa:	b570      	push	{r4, r5, r6, lr}
 80038fc:	4604      	mov	r4, r0
 80038fe:	460d      	mov	r5, r1
 8003900:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003902:	6820      	ldr	r0, [r4, #0]
 8003904:	6943      	ldr	r3, [r0, #20]
 8003906:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800390a:	d001      	beq.n	8003910 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 800390c:	2000      	movs	r0, #0
}
 800390e:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003910:	6942      	ldr	r2, [r0, #20]
 8003912:	06d2      	lsls	r2, r2, #27
 8003914:	d50e      	bpl.n	8003934 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003916:	f06f 0210 	mvn.w	r2, #16
 800391a:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800391c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800391e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003920:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003924:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003928:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800392a:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800392c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8003930:	2001      	movs	r0, #1
 8003932:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003934:	f7ff fdfa 	bl	800352c <HAL_GetTick>
 8003938:	1b80      	subs	r0, r0, r6
 800393a:	42a8      	cmp	r0, r5
 800393c:	d801      	bhi.n	8003942 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 800393e:	2d00      	cmp	r5, #0
 8003940:	d1df      	bne.n	8003902 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003942:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8003944:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003946:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003948:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800394c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003950:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003952:	f042 0220 	orr.w	r2, r2, #32
 8003956:	e7e8      	b.n	800392a <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08003958 <I2C_WaitOnFlagUntilTimeout>:
{
 8003958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800395c:	9e08      	ldr	r6, [sp, #32]
 800395e:	4604      	mov	r4, r0
 8003960:	4690      	mov	r8, r2
 8003962:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003964:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8003968:	b28d      	uxth	r5, r1
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	f1b9 0f01 	cmp.w	r9, #1
 8003970:	bf0c      	ite	eq
 8003972:	695b      	ldreq	r3, [r3, #20]
 8003974:	699b      	ldrne	r3, [r3, #24]
 8003976:	ea35 0303 	bics.w	r3, r5, r3
 800397a:	bf0c      	ite	eq
 800397c:	2301      	moveq	r3, #1
 800397e:	2300      	movne	r3, #0
 8003980:	4543      	cmp	r3, r8
 8003982:	d002      	beq.n	800398a <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8003984:	2000      	movs	r0, #0
}
 8003986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 800398a:	1c7b      	adds	r3, r7, #1
 800398c:	d0ed      	beq.n	800396a <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398e:	f7ff fdcd 	bl	800352c <HAL_GetTick>
 8003992:	1b80      	subs	r0, r0, r6
 8003994:	4287      	cmp	r7, r0
 8003996:	d301      	bcc.n	800399c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003998:	2f00      	cmp	r7, #0
 800399a:	d1e6      	bne.n	800396a <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800399c:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800399e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80039a0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039a2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80039ac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039b0:	f042 0220 	orr.w	r2, r2, #32
 80039b4:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80039b6:	2001      	movs	r0, #1
 80039b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080039bc <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80039bc:	b570      	push	{r4, r5, r6, lr}
 80039be:	4604      	mov	r4, r0
 80039c0:	460d      	mov	r5, r1
 80039c2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	061b      	lsls	r3, r3, #24
 80039ca:	d501      	bpl.n	80039d0 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80039cc:	2000      	movs	r0, #0
 80039ce:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039d0:	4620      	mov	r0, r4
 80039d2:	f7ff ff0d 	bl	80037f0 <I2C_IsAcknowledgeFailed>
 80039d6:	b9a8      	cbnz	r0, 8003a04 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80039d8:	1c6a      	adds	r2, r5, #1
 80039da:	d0f3      	beq.n	80039c4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039dc:	f7ff fda6 	bl	800352c <HAL_GetTick>
 80039e0:	1b80      	subs	r0, r0, r6
 80039e2:	4285      	cmp	r5, r0
 80039e4:	d301      	bcc.n	80039ea <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80039e6:	2d00      	cmp	r5, #0
 80039e8:	d1ec      	bne.n	80039c4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80039ea:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80039ec:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80039ee:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039f0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80039fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039fe:	f042 0220 	orr.w	r2, r2, #32
 8003a02:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003a04:	2001      	movs	r0, #1
}
 8003a06:	bd70      	pop	{r4, r5, r6, pc}

08003a08 <I2C_RequestMemoryRead>:
{
 8003a08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003a0c:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a0e:	6803      	ldr	r3, [r0, #0]
{
 8003a10:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003a12:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a1a:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a22:	601a      	str	r2, [r3, #0]
{
 8003a24:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a26:	9500      	str	r5, [sp, #0]
 8003a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8003a30:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a32:	f7ff ff91 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 8003a36:	b118      	cbz	r0, 8003a40 <I2C_RequestMemoryRead+0x38>
    return HAL_ERROR;
 8003a38:	2001      	movs	r0, #1
}
 8003a3a:	b004      	add	sp, #16
 8003a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a40:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a42:	492b      	ldr	r1, [pc, #172]	; (8003af0 <I2C_RequestMemoryRead+0xe8>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a44:	b2ff      	uxtb	r7, r7
 8003a46:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8003a4a:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a4c:	4620      	mov	r0, r4
 8003a4e:	462b      	mov	r3, r5
 8003a50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a52:	f7ff fee7 	bl	8003824 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a56:	2800      	cmp	r0, #0
 8003a58:	d1ee      	bne.n	8003a38 <I2C_RequestMemoryRead+0x30>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a5a:	6823      	ldr	r3, [r4, #0]
 8003a5c:	9003      	str	r0, [sp, #12]
 8003a5e:	695a      	ldr	r2, [r3, #20]
 8003a60:	9203      	str	r2, [sp, #12]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a66:	462a      	mov	r2, r5
 8003a68:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a6a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	f7ff ffa5 	bl	80039bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003a72:	b140      	cbz	r0, 8003a86 <I2C_RequestMemoryRead+0x7e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a76:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a78:	bf01      	itttt	eq
 8003a7a:	6822      	ldreq	r2, [r4, #0]
 8003a7c:	6813      	ldreq	r3, [r2, #0]
 8003a7e:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8003a82:	6013      	streq	r3, [r2, #0]
 8003a84:	e7d8      	b.n	8003a38 <I2C_RequestMemoryRead+0x30>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a86:	f1b8 0f01 	cmp.w	r8, #1
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	d125      	bne.n	8003ada <I2C_RequestMemoryRead+0xd2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a8e:	b2f6      	uxtb	r6, r6
 8003a90:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a92:	462a      	mov	r2, r5
 8003a94:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003a96:	4620      	mov	r0, r4
 8003a98:	f7ff ff90 	bl	80039bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	2800      	cmp	r0, #0
 8003aa0:	d1e8      	bne.n	8003a74 <I2C_RequestMemoryRead+0x6c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aa2:	6821      	ldr	r1, [r4, #0]
 8003aa4:	680b      	ldr	r3, [r1, #0]
 8003aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aaa:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003aac:	4620      	mov	r0, r4
 8003aae:	9500      	str	r5, [sp, #0]
 8003ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ab2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ab6:	f7ff ff4f 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 8003aba:	2800      	cmp	r0, #0
 8003abc:	d1bc      	bne.n	8003a38 <I2C_RequestMemoryRead+0x30>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003abe:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ac0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ac2:	490b      	ldr	r1, [pc, #44]	; (8003af0 <I2C_RequestMemoryRead+0xe8>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ac4:	f047 0701 	orr.w	r7, r7, #1
 8003ac8:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003aca:	4620      	mov	r0, r4
 8003acc:	462b      	mov	r3, r5
 8003ace:	f7ff fea9 	bl	8003824 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_ERROR;
 8003ad2:	3000      	adds	r0, #0
 8003ad4:	bf18      	it	ne
 8003ad6:	2001      	movne	r0, #1
 8003ad8:	e7af      	b.n	8003a3a <I2C_RequestMemoryRead+0x32>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ada:	0a32      	lsrs	r2, r6, #8
 8003adc:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ade:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003ae0:	462a      	mov	r2, r5
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	f7ff ff6a 	bl	80039bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003ae8:	2800      	cmp	r0, #0
 8003aea:	d1c3      	bne.n	8003a74 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003aec:	6823      	ldr	r3, [r4, #0]
 8003aee:	e7ce      	b.n	8003a8e <I2C_RequestMemoryRead+0x86>
 8003af0:	00010002 	.word	0x00010002

08003af4 <HAL_I2C_Init>:
{
 8003af4:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8003af6:	4604      	mov	r4, r0
 8003af8:	b908      	cbnz	r0, 8003afe <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8003afa:	2001      	movs	r0, #1
 8003afc:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003afe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003b02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003b06:	b91b      	cbnz	r3, 8003b10 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8003b08:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003b0c:	f001 fc2c 	bl	8005368 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8003b10:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b12:	2324      	movs	r3, #36	; 0x24
 8003b14:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003b18:	6813      	ldr	r3, [r2, #0]
 8003b1a:	f023 0301 	bic.w	r3, r3, #1
 8003b1e:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b20:	f000 fb3c 	bl	800419c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b24:	6865      	ldr	r5, [r4, #4]
 8003b26:	4b41      	ldr	r3, [pc, #260]	; (8003c2c <HAL_I2C_Init+0x138>)
 8003b28:	429d      	cmp	r5, r3
 8003b2a:	d84d      	bhi.n	8003bc8 <HAL_I2C_Init+0xd4>
 8003b2c:	4b40      	ldr	r3, [pc, #256]	; (8003c30 <HAL_I2C_Init+0x13c>)
 8003b2e:	4298      	cmp	r0, r3
 8003b30:	d9e3      	bls.n	8003afa <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b32:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8003b34:	493f      	ldr	r1, [pc, #252]	; (8003c34 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b36:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8003b38:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b40:	430b      	orrs	r3, r1
 8003b42:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b44:	6a13      	ldr	r3, [r2, #32]
 8003b46:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b4a:	3101      	adds	r1, #1
 8003b4c:	4319      	orrs	r1, r3
 8003b4e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b50:	69d1      	ldr	r1, [r2, #28]
 8003b52:	4b36      	ldr	r3, [pc, #216]	; (8003c2c <HAL_I2C_Init+0x138>)
 8003b54:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003b58:	429d      	cmp	r5, r3
 8003b5a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003b5e:	f100 30ff 	add.w	r0, r0, #4294967295
 8003b62:	d848      	bhi.n	8003bf6 <HAL_I2C_Init+0x102>
 8003b64:	006d      	lsls	r5, r5, #1
 8003b66:	fbb0 f0f5 	udiv	r0, r0, r5
 8003b6a:	3001      	adds	r0, #1
 8003b6c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	bf38      	it	cc
 8003b74:	2304      	movcc	r3, #4
 8003b76:	430b      	orrs	r3, r1
 8003b78:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b7a:	6811      	ldr	r1, [r2, #0]
 8003b7c:	6a20      	ldr	r0, [r4, #32]
 8003b7e:	69e3      	ldr	r3, [r4, #28]
 8003b80:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8003b84:	4303      	orrs	r3, r0
 8003b86:	430b      	orrs	r3, r1
 8003b88:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b8a:	6891      	ldr	r1, [r2, #8]
 8003b8c:	68e0      	ldr	r0, [r4, #12]
 8003b8e:	6923      	ldr	r3, [r4, #16]
 8003b90:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8003b94:	4303      	orrs	r3, r0
 8003b96:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003b9a:	430b      	orrs	r3, r1
 8003b9c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b9e:	68d1      	ldr	r1, [r2, #12]
 8003ba0:	69a0      	ldr	r0, [r4, #24]
 8003ba2:	6963      	ldr	r3, [r4, #20]
 8003ba4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003ba8:	4303      	orrs	r3, r0
 8003baa:	430b      	orrs	r3, r1
 8003bac:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003bae:	6813      	ldr	r3, [r2, #0]
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb6:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8003bb8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bba:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bbc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bc0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8003bc6:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bc8:	4b1b      	ldr	r3, [pc, #108]	; (8003c38 <HAL_I2C_Init+0x144>)
 8003bca:	4298      	cmp	r0, r3
 8003bcc:	d995      	bls.n	8003afa <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bce:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8003bd0:	4e18      	ldr	r6, [pc, #96]	; (8003c34 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bd2:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8003bd4:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bdc:	4333      	orrs	r3, r6
 8003bde:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003be0:	6a13      	ldr	r3, [r2, #32]
 8003be2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003be6:	4371      	muls	r1, r6
 8003be8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bec:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8003bf0:	fbb1 f1f6 	udiv	r1, r1, r6
 8003bf4:	e7a9      	b.n	8003b4a <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bf6:	68a3      	ldr	r3, [r4, #8]
 8003bf8:	b953      	cbnz	r3, 8003c10 <HAL_I2C_Init+0x11c>
 8003bfa:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8003bfe:	fbb0 f0f3 	udiv	r0, r0, r3
 8003c02:	1c43      	adds	r3, r0, #1
 8003c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c08:	b16b      	cbz	r3, 8003c26 <HAL_I2C_Init+0x132>
 8003c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c0e:	e7b2      	b.n	8003b76 <HAL_I2C_Init+0x82>
 8003c10:	2319      	movs	r3, #25
 8003c12:	436b      	muls	r3, r5
 8003c14:	fbb0 f0f3 	udiv	r0, r0, r3
 8003c18:	1c43      	adds	r3, r0, #1
 8003c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c1e:	b113      	cbz	r3, 8003c26 <HAL_I2C_Init+0x132>
 8003c20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c24:	e7a7      	b.n	8003b76 <HAL_I2C_Init+0x82>
 8003c26:	2301      	movs	r3, #1
 8003c28:	e7a5      	b.n	8003b76 <HAL_I2C_Init+0x82>
 8003c2a:	bf00      	nop
 8003c2c:	000186a0 	.word	0x000186a0
 8003c30:	001e847f 	.word	0x001e847f
 8003c34:	000f4240 	.word	0x000f4240
 8003c38:	003d08ff 	.word	0x003d08ff

08003c3c <HAL_I2C_Master_Transmit>:
{
 8003c3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003c40:	4604      	mov	r4, r0
 8003c42:	461f      	mov	r7, r3
 8003c44:	460d      	mov	r5, r1
 8003c46:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8003c48:	f7ff fc70 	bl	800352c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c4c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003c50:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8003c52:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c54:	d004      	beq.n	8003c60 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8003c56:	2502      	movs	r5, #2
}
 8003c58:	4628      	mov	r0, r5
 8003c5a:	b004      	add	sp, #16
 8003c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c60:	9000      	str	r0, [sp, #0]
 8003c62:	2319      	movs	r3, #25
 8003c64:	2201      	movs	r2, #1
 8003c66:	4958      	ldr	r1, [pc, #352]	; (8003dc8 <HAL_I2C_Master_Transmit+0x18c>)
 8003c68:	4620      	mov	r0, r4
 8003c6a:	f7ff fe75 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 8003c6e:	2800      	cmp	r0, #0
 8003c70:	d1f1      	bne.n	8003c56 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8003c72:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d0ed      	beq.n	8003c56 <HAL_I2C_Master_Transmit+0x1a>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8003c86:	bf5e      	ittt	pl
 8003c88:	681a      	ldrpl	r2, [r3, #0]
 8003c8a:	f042 0201 	orrpl.w	r2, r2, #1
 8003c8e:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c96:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c98:	2221      	movs	r2, #33	; 0x21
 8003c9a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c9e:	2210      	movs	r2, #16
 8003ca0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8003ca8:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003caa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003cac:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cae:	4a47      	ldr	r2, [pc, #284]	; (8003dcc <HAL_I2C_Master_Transmit+0x190>)
 8003cb0:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cb2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8003cb4:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003cb8:	2a08      	cmp	r2, #8
 8003cba:	d004      	beq.n	8003cc6 <HAL_I2C_Master_Transmit+0x8a>
 8003cbc:	2a01      	cmp	r2, #1
 8003cbe:	d002      	beq.n	8003cc6 <HAL_I2C_Master_Transmit+0x8a>
 8003cc0:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003cc4:	d104      	bne.n	8003cd0 <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	e002      	b.n	8003cd6 <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003cd0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003cd2:	2a12      	cmp	r2, #18
 8003cd4:	d0f7      	beq.n	8003cc6 <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cd6:	9600      	str	r6, [sp, #0]
 8003cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	f7ff fe39 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 8003ce6:	b108      	cbz	r0, 8003cec <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 8003ce8:	2501      	movs	r5, #1
 8003cea:	e7b5      	b.n	8003c58 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cec:	6923      	ldr	r3, [r4, #16]
 8003cee:	6822      	ldr	r2, [r4, #0]
 8003cf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cf4:	d113      	bne.n	8003d1e <HAL_I2C_Master_Transmit+0xe2>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cf6:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8003cfa:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cfc:	4633      	mov	r3, r6
 8003cfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d00:	4933      	ldr	r1, [pc, #204]	; (8003dd0 <HAL_I2C_Master_Transmit+0x194>)
 8003d02:	4620      	mov	r0, r4
 8003d04:	f7ff fd8e 	bl	8003824 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d08:	4605      	mov	r5, r0
 8003d0a:	2800      	cmp	r0, #0
 8003d0c:	d1ec      	bne.n	8003ce8 <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d0e:	6823      	ldr	r3, [r4, #0]
 8003d10:	9003      	str	r0, [sp, #12]
 8003d12:	695a      	ldr	r2, [r3, #20]
 8003d14:	9203      	str	r2, [sp, #12]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	9303      	str	r3, [sp, #12]
 8003d1a:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8003d1c:	e044      	b.n	8003da8 <HAL_I2C_Master_Transmit+0x16c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d1e:	11eb      	asrs	r3, r5, #7
 8003d20:	f003 0306 	and.w	r3, r3, #6
 8003d24:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003d28:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d2a:	492a      	ldr	r1, [pc, #168]	; (8003dd4 <HAL_I2C_Master_Transmit+0x198>)
 8003d2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d2e:	4633      	mov	r3, r6
 8003d30:	4620      	mov	r0, r4
 8003d32:	f7ff fd77 	bl	8003824 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d36:	2800      	cmp	r0, #0
 8003d38:	d1d6      	bne.n	8003ce8 <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	b2ed      	uxtb	r5, r5
 8003d3e:	611d      	str	r5, [r3, #16]
 8003d40:	e7dc      	b.n	8003cfc <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d42:	4632      	mov	r2, r6
 8003d44:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003d46:	4620      	mov	r0, r4
 8003d48:	f7ff fe38 	bl	80039bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003d4c:	b140      	cbz	r0, 8003d60 <HAL_I2C_Master_Transmit+0x124>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d50:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d52:	bf01      	itttt	eq
 8003d54:	6822      	ldreq	r2, [r4, #0]
 8003d56:	6813      	ldreq	r3, [r2, #0]
 8003d58:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8003d5c:	6013      	streq	r3, [r2, #0]
 8003d5e:	e7c3      	b.n	8003ce8 <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d62:	6820      	ldr	r0, [r4, #0]
 8003d64:	461a      	mov	r2, r3
 8003d66:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003d6a:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8003d6c:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003d6e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003d70:	3a01      	subs	r2, #1
 8003d72:	b292      	uxth	r2, r2
 8003d74:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003d76:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d78:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8003d7a:	1e51      	subs	r1, r2, #1
 8003d7c:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d7e:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8003d80:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d82:	d50a      	bpl.n	8003d9a <HAL_I2C_Master_Transmit+0x15e>
 8003d84:	b149      	cbz	r1, 8003d9a <HAL_I2C_Master_Transmit+0x15e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d86:	7859      	ldrb	r1, [r3, #1]
 8003d88:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8003d8a:	3302      	adds	r3, #2
 8003d8c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003d8e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8003d94:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8003d96:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003d98:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d9a:	4632      	mov	r2, r6
 8003d9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003d9e:	4620      	mov	r0, r4
 8003da0:	f7ff fd85 	bl	80038ae <I2C_WaitOnBTFFlagUntilTimeout>
 8003da4:	2800      	cmp	r0, #0
 8003da6:	d1d2      	bne.n	8003d4e <HAL_I2C_Master_Transmit+0x112>
    while (hi2c->XferSize > 0U)
 8003da8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1c9      	bne.n	8003d42 <HAL_I2C_Master_Transmit+0x106>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dae:	6821      	ldr	r1, [r4, #0]
 8003db0:	680a      	ldr	r2, [r1, #0]
 8003db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db6:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003db8:	2220      	movs	r2, #32
 8003dba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003dbe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8003dc6:	e747      	b.n	8003c58 <HAL_I2C_Master_Transmit+0x1c>
 8003dc8:	00100002 	.word	0x00100002
 8003dcc:	ffff0000 	.word	0xffff0000
 8003dd0:	00010002 	.word	0x00010002
 8003dd4:	00010008 	.word	0x00010008

08003dd8 <HAL_I2C_Mem_Read>:
{
 8003dd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ddc:	4604      	mov	r4, r0
 8003dde:	b087      	sub	sp, #28
 8003de0:	4699      	mov	r9, r3
 8003de2:	460d      	mov	r5, r1
 8003de4:	4690      	mov	r8, r2
 8003de6:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8003de8:	f7ff fba0 	bl	800352c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dec:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003df0:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8003df2:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003df4:	d004      	beq.n	8003e00 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8003df6:	2502      	movs	r5, #2
}
 8003df8:	4628      	mov	r0, r5
 8003dfa:	b007      	add	sp, #28
 8003dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e00:	9000      	str	r0, [sp, #0]
 8003e02:	2319      	movs	r3, #25
 8003e04:	2201      	movs	r2, #1
 8003e06:	4977      	ldr	r1, [pc, #476]	; (8003fe4 <HAL_I2C_Mem_Read+0x20c>)
 8003e08:	4620      	mov	r0, r4
 8003e0a:	f7ff fda5 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 8003e0e:	2800      	cmp	r0, #0
 8003e10:	d1f1      	bne.n	8003df6 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8003e12:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d0ed      	beq.n	8003df6 <HAL_I2C_Mem_Read+0x1e>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e20:	6823      	ldr	r3, [r4, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8003e26:	bf5e      	ittt	pl
 8003e28:	681a      	ldrpl	r2, [r3, #0]
 8003e2a:	f042 0201 	orrpl.w	r2, r2, #1
 8003e2e:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e36:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e38:	2322      	movs	r3, #34	; 0x22
 8003e3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e3e:	2340      	movs	r3, #64	; 0x40
 8003e40:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e44:	2300      	movs	r3, #0
 8003e46:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003e48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e4a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e4c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8003e50:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003e54:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e56:	4b64      	ldr	r3, [pc, #400]	; (8003fe8 <HAL_I2C_Mem_Read+0x210>)
 8003e58:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	9601      	str	r6, [sp, #4]
 8003e5e:	9700      	str	r7, [sp, #0]
 8003e60:	464b      	mov	r3, r9
 8003e62:	4642      	mov	r2, r8
 8003e64:	4620      	mov	r0, r4
 8003e66:	f7ff fdcf 	bl	8003a08 <I2C_RequestMemoryRead>
 8003e6a:	4605      	mov	r5, r0
 8003e6c:	b108      	cbz	r0, 8003e72 <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 8003e6e:	2501      	movs	r5, #1
 8003e70:	e7c2      	b.n	8003df8 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8003e72:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003e74:	6823      	ldr	r3, [r4, #0]
 8003e76:	b992      	cbnz	r2, 8003e9e <HAL_I2C_Mem_Read+0xc6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e78:	9002      	str	r0, [sp, #8]
 8003e7a:	695a      	ldr	r2, [r3, #20]
 8003e7c:	9202      	str	r2, [sp, #8]
 8003e7e:	699a      	ldr	r2, [r3, #24]
 8003e80:	9202      	str	r2, [sp, #8]
 8003e82:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e8a:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003e8c:	2320      	movs	r3, #32
 8003e8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e92:	2300      	movs	r3, #0
 8003e94:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003e98:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003e9c:	e7ac      	b.n	8003df8 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8003e9e:	2a01      	cmp	r2, #1
 8003ea0:	d12c      	bne.n	8003efc <HAL_I2C_Mem_Read+0x124>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eaa:	9003      	str	r0, [sp, #12]
 8003eac:	695a      	ldr	r2, [r3, #20]
 8003eae:	9203      	str	r2, [sp, #12]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	9203      	str	r2, [sp, #12]
 8003eb4:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ebc:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ebe:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8003fec <HAL_I2C_Mem_Read+0x214>
    while (hi2c->XferSize > 0U)
 8003ec2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0e1      	beq.n	8003e8c <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d86e      	bhi.n	8003faa <HAL_I2C_Mem_Read+0x1d2>
        if (hi2c->XferSize == 1U)
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d12d      	bne.n	8003f2c <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ed0:	4632      	mov	r2, r6
 8003ed2:	4639      	mov	r1, r7
 8003ed4:	4620      	mov	r0, r4
 8003ed6:	f7ff fd10 	bl	80038fa <I2C_WaitOnRXNEFlagUntilTimeout>
 8003eda:	2800      	cmp	r0, #0
 8003edc:	d1c7      	bne.n	8003e6e <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ede:	6822      	ldr	r2, [r4, #0]
 8003ee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ee2:	6912      	ldr	r2, [r2, #16]
 8003ee4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003ee6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ee8:	3301      	adds	r3, #1
 8003eea:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003eec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003ef2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003efa:	e7e2      	b.n	8003ec2 <HAL_I2C_Mem_Read+0xea>
    else if (hi2c->XferSize == 2U)
 8003efc:	2a02      	cmp	r2, #2
 8003efe:	d10e      	bne.n	8003f1e <HAL_I2C_Mem_Read+0x146>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f06:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f0e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f10:	9004      	str	r0, [sp, #16]
 8003f12:	695a      	ldr	r2, [r3, #20]
 8003f14:	9204      	str	r2, [sp, #16]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	9304      	str	r3, [sp, #16]
 8003f1a:	9b04      	ldr	r3, [sp, #16]
 8003f1c:	e7cf      	b.n	8003ebe <HAL_I2C_Mem_Read+0xe6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f1e:	9005      	str	r0, [sp, #20]
 8003f20:	695a      	ldr	r2, [r3, #20]
 8003f22:	9205      	str	r2, [sp, #20]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	9305      	str	r3, [sp, #20]
 8003f28:	9b05      	ldr	r3, [sp, #20]
 8003f2a:	e7c8      	b.n	8003ebe <HAL_I2C_Mem_Read+0xe6>
        else if (hi2c->XferSize == 2U)
 8003f2c:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f2e:	9600      	str	r6, [sp, #0]
 8003f30:	463b      	mov	r3, r7
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	4641      	mov	r1, r8
 8003f38:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8003f3a:	d119      	bne.n	8003f70 <HAL_I2C_Mem_Read+0x198>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f3c:	f7ff fd0c 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 8003f40:	2800      	cmp	r0, #0
 8003f42:	d194      	bne.n	8003e6e <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4c:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f4e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8003f54:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003f56:	1c53      	adds	r3, r2, #1
 8003f58:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003f5a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003f60:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f68:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	7053      	strb	r3, [r2, #1]
 8003f6e:	e7ba      	b.n	8003ee6 <HAL_I2C_Mem_Read+0x10e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f70:	f7ff fcf2 	bl	8003958 <I2C_WaitOnFlagUntilTimeout>
 8003f74:	4602      	mov	r2, r0
 8003f76:	2800      	cmp	r0, #0
 8003f78:	f47f af79 	bne.w	8003e6e <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7c:	6823      	ldr	r3, [r4, #0]
 8003f7e:	6819      	ldr	r1, [r3, #0]
 8003f80:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003f84:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f86:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	700b      	strb	r3, [r1, #0]
          hi2c->pBuffPtr++;
 8003f8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f8e:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 8003f90:	3301      	adds	r3, #1
 8003f92:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003f94:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003f96:	3b01      	subs	r3, #1
 8003f98:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003f9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fa2:	4641      	mov	r1, r8
 8003fa4:	463b      	mov	r3, r7
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	e7c8      	b.n	8003f3c <HAL_I2C_Mem_Read+0x164>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003faa:	4632      	mov	r2, r6
 8003fac:	4639      	mov	r1, r7
 8003fae:	4620      	mov	r0, r4
 8003fb0:	f7ff fca3 	bl	80038fa <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fb4:	2800      	cmp	r0, #0
 8003fb6:	f47f af5a 	bne.w	8003e6e <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fba:	6822      	ldr	r2, [r4, #0]
 8003fbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fbe:	6912      	ldr	r2, [r2, #16]
 8003fc0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003fc2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003fc4:	1c53      	adds	r3, r2, #1
 8003fc6:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8003fc8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003fce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fd6:	6823      	ldr	r3, [r4, #0]
 8003fd8:	6959      	ldr	r1, [r3, #20]
 8003fda:	0749      	lsls	r1, r1, #29
 8003fdc:	f57f af71 	bpl.w	8003ec2 <HAL_I2C_Mem_Read+0xea>
 8003fe0:	e7c3      	b.n	8003f6a <HAL_I2C_Mem_Read+0x192>
 8003fe2:	bf00      	nop
 8003fe4:	00100002 	.word	0x00100002
 8003fe8:	ffff0000 	.word	0xffff0000
 8003fec:	00010004 	.word	0x00010004

08003ff0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	9301      	str	r3, [sp, #4]
 8003ff6:	4b18      	ldr	r3, [pc, #96]	; (8004058 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ff8:	4c18      	ldr	r4, [pc, #96]	; (800405c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ffc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004000:	641a      	str	r2, [r3, #64]	; 0x40
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004008:	9301      	str	r3, [sp, #4]
 800400a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800400c:	4b14      	ldr	r3, [pc, #80]	; (8004060 <HAL_PWREx_EnableOverDrive+0x70>)
 800400e:	2201      	movs	r2, #1
 8004010:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8004012:	f7ff fa8b 	bl	800352c <HAL_GetTick>
 8004016:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004018:	6863      	ldr	r3, [r4, #4]
 800401a:	03da      	lsls	r2, r3, #15
 800401c:	d50b      	bpl.n	8004036 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800401e:	4b11      	ldr	r3, [pc, #68]	; (8004064 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004020:	4c0e      	ldr	r4, [pc, #56]	; (800405c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004022:	2201      	movs	r2, #1
 8004024:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8004026:	f7ff fa81 	bl	800352c <HAL_GetTick>
 800402a:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800402c:	6863      	ldr	r3, [r4, #4]
 800402e:	039b      	lsls	r3, r3, #14
 8004030:	d50a      	bpl.n	8004048 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8004032:	2000      	movs	r0, #0
 8004034:	e006      	b.n	8004044 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004036:	f7ff fa79 	bl	800352c <HAL_GetTick>
 800403a:	1b40      	subs	r0, r0, r5
 800403c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004040:	d9ea      	bls.n	8004018 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8004042:	2003      	movs	r0, #3
}
 8004044:	b003      	add	sp, #12
 8004046:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004048:	f7ff fa70 	bl	800352c <HAL_GetTick>
 800404c:	1b40      	subs	r0, r0, r5
 800404e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004052:	d9eb      	bls.n	800402c <HAL_PWREx_EnableOverDrive+0x3c>
 8004054:	e7f5      	b.n	8004042 <HAL_PWREx_EnableOverDrive+0x52>
 8004056:	bf00      	nop
 8004058:	40023800 	.word	0x40023800
 800405c:	40007000 	.word	0x40007000
 8004060:	420e0040 	.word	0x420e0040
 8004064:	420e0044 	.word	0x420e0044

08004068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800406c:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800406e:	4604      	mov	r4, r0
 8004070:	b910      	cbnz	r0, 8004078 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8004072:	2001      	movs	r0, #1
 8004074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004078:	4b44      	ldr	r3, [pc, #272]	; (800418c <HAL_RCC_ClockConfig+0x124>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	f002 020f 	and.w	r2, r2, #15
 8004080:	428a      	cmp	r2, r1
 8004082:	d328      	bcc.n	80040d6 <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004084:	6821      	ldr	r1, [r4, #0]
 8004086:	078f      	lsls	r7, r1, #30
 8004088:	d42d      	bmi.n	80040e6 <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800408a:	07c8      	lsls	r0, r1, #31
 800408c:	d440      	bmi.n	8004110 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800408e:	4b3f      	ldr	r3, [pc, #252]	; (800418c <HAL_RCC_ClockConfig+0x124>)
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	f002 020f 	and.w	r2, r2, #15
 8004096:	4295      	cmp	r5, r2
 8004098:	d366      	bcc.n	8004168 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800409a:	6822      	ldr	r2, [r4, #0]
 800409c:	0751      	lsls	r1, r2, #29
 800409e:	d46c      	bmi.n	800417a <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a0:	0713      	lsls	r3, r2, #28
 80040a2:	d507      	bpl.n	80040b4 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040a4:	4a3a      	ldr	r2, [pc, #232]	; (8004190 <HAL_RCC_ClockConfig+0x128>)
 80040a6:	6921      	ldr	r1, [r4, #16]
 80040a8:	6893      	ldr	r3, [r2, #8]
 80040aa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80040ae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80040b2:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040b4:	f000 f892 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 80040b8:	4b35      	ldr	r3, [pc, #212]	; (8004190 <HAL_RCC_ClockConfig+0x128>)
 80040ba:	4a36      	ldr	r2, [pc, #216]	; (8004194 <HAL_RCC_ClockConfig+0x12c>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80040c2:	5cd3      	ldrb	r3, [r2, r3]
 80040c4:	40d8      	lsrs	r0, r3
 80040c6:	4b34      	ldr	r3, [pc, #208]	; (8004198 <HAL_RCC_ClockConfig+0x130>)
 80040c8:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80040ca:	2000      	movs	r0, #0
 80040cc:	f7ff f9e4 	bl	8003498 <HAL_InitTick>

  return HAL_OK;
 80040d0:	2000      	movs	r0, #0
 80040d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d6:	b2ca      	uxtb	r2, r1
 80040d8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 030f 	and.w	r3, r3, #15
 80040e0:	4299      	cmp	r1, r3
 80040e2:	d1c6      	bne.n	8004072 <HAL_RCC_ClockConfig+0xa>
 80040e4:	e7ce      	b.n	8004084 <HAL_RCC_ClockConfig+0x1c>
 80040e6:	4b2a      	ldr	r3, [pc, #168]	; (8004190 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040ec:	bf1e      	ittt	ne
 80040ee:	689a      	ldrne	r2, [r3, #8]
 80040f0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80040f4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040f8:	bf42      	ittt	mi
 80040fa:	689a      	ldrmi	r2, [r3, #8]
 80040fc:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8004100:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	68a0      	ldr	r0, [r4, #8]
 8004106:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800410a:	4302      	orrs	r2, r0
 800410c:	609a      	str	r2, [r3, #8]
 800410e:	e7bc      	b.n	800408a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004110:	6862      	ldr	r2, [r4, #4]
 8004112:	4b1f      	ldr	r3, [pc, #124]	; (8004190 <HAL_RCC_ClockConfig+0x128>)
 8004114:	2a01      	cmp	r2, #1
 8004116:	d11d      	bne.n	8004154 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411e:	d0a8      	beq.n	8004072 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004120:	4e1b      	ldr	r6, [pc, #108]	; (8004190 <HAL_RCC_ClockConfig+0x128>)
 8004122:	68b3      	ldr	r3, [r6, #8]
 8004124:	f023 0303 	bic.w	r3, r3, #3
 8004128:	4313      	orrs	r3, r2
 800412a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800412c:	f7ff f9fe 	bl	800352c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004130:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004134:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004136:	68b3      	ldr	r3, [r6, #8]
 8004138:	6862      	ldr	r2, [r4, #4]
 800413a:	f003 030c 	and.w	r3, r3, #12
 800413e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004142:	d0a4      	beq.n	800408e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004144:	f7ff f9f2 	bl	800352c <HAL_GetTick>
 8004148:	1bc0      	subs	r0, r0, r7
 800414a:	4540      	cmp	r0, r8
 800414c:	d9f3      	bls.n	8004136 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800414e:	2003      	movs	r0, #3
}
 8004150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004154:	1e91      	subs	r1, r2, #2
 8004156:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004158:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800415a:	d802      	bhi.n	8004162 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800415c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004160:	e7dd      	b.n	800411e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004162:	f013 0f02 	tst.w	r3, #2
 8004166:	e7da      	b.n	800411e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004168:	b2ea      	uxtb	r2, r5
 800416a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	429d      	cmp	r5, r3
 8004174:	f47f af7d 	bne.w	8004072 <HAL_RCC_ClockConfig+0xa>
 8004178:	e78f      	b.n	800409a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800417a:	4905      	ldr	r1, [pc, #20]	; (8004190 <HAL_RCC_ClockConfig+0x128>)
 800417c:	68e0      	ldr	r0, [r4, #12]
 800417e:	688b      	ldr	r3, [r1, #8]
 8004180:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004184:	4303      	orrs	r3, r0
 8004186:	608b      	str	r3, [r1, #8]
 8004188:	e78a      	b.n	80040a0 <HAL_RCC_ClockConfig+0x38>
 800418a:	bf00      	nop
 800418c:	40023c00 	.word	0x40023c00
 8004190:	40023800 	.word	0x40023800
 8004194:	0800b835 	.word	0x0800b835
 8004198:	20000490 	.word	0x20000490

0800419c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800419c:	4b04      	ldr	r3, [pc, #16]	; (80041b0 <HAL_RCC_GetPCLK1Freq+0x14>)
 800419e:	4a05      	ldr	r2, [pc, #20]	; (80041b4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80041a6:	5cd3      	ldrb	r3, [r2, r3]
 80041a8:	4a03      	ldr	r2, [pc, #12]	; (80041b8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80041aa:	6810      	ldr	r0, [r2, #0]
}
 80041ac:	40d8      	lsrs	r0, r3
 80041ae:	4770      	bx	lr
 80041b0:	40023800 	.word	0x40023800
 80041b4:	0800b845 	.word	0x0800b845
 80041b8:	20000490 	.word	0x20000490

080041bc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041bc:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80041be:	4a05      	ldr	r2, [pc, #20]	; (80041d4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80041c6:	5cd3      	ldrb	r3, [r2, r3]
 80041c8:	4a03      	ldr	r2, [pc, #12]	; (80041d8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80041ca:	6810      	ldr	r0, [r2, #0]
}
 80041cc:	40d8      	lsrs	r0, r3
 80041ce:	4770      	bx	lr
 80041d0:	40023800 	.word	0x40023800
 80041d4:	0800b845 	.word	0x0800b845
 80041d8:	20000490 	.word	0x20000490

080041dc <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041dc:	4920      	ldr	r1, [pc, #128]	; (8004260 <HAL_RCC_GetSysClockFreq+0x84>)
{
 80041de:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041e0:	688b      	ldr	r3, [r1, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	d007      	beq.n	80041fa <HAL_RCC_GetSysClockFreq+0x1e>
 80041ea:	2b0c      	cmp	r3, #12
 80041ec:	d020      	beq.n	8004230 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041ee:	4a1d      	ldr	r2, [pc, #116]	; (8004264 <HAL_RCC_GetSysClockFreq+0x88>)
 80041f0:	481d      	ldr	r0, [pc, #116]	; (8004268 <HAL_RCC_GetSysClockFreq+0x8c>)
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	bf18      	it	ne
 80041f6:	4610      	movne	r0, r2
 80041f8:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041fa:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041fc:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041fe:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004200:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004204:	bf14      	ite	ne
 8004206:	4818      	ldrne	r0, [pc, #96]	; (8004268 <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004208:	4816      	ldreq	r0, [pc, #88]	; (8004264 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800420a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800420e:	bf18      	it	ne
 8004210:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004212:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004216:	fba1 0100 	umull	r0, r1, r1, r0
 800421a:	f7fe ff7b 	bl	8003114 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800421e:	4b10      	ldr	r3, [pc, #64]	; (8004260 <HAL_RCC_GetSysClockFreq+0x84>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004226:	3301      	adds	r3, #1
 8004228:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 800422a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800422e:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004230:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004232:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004234:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004236:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800423a:	bf14      	ite	ne
 800423c:	480a      	ldrne	r0, [pc, #40]	; (8004268 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800423e:	4809      	ldreq	r0, [pc, #36]	; (8004264 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004240:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004244:	bf18      	it	ne
 8004246:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004248:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800424c:	fba1 0100 	umull	r0, r1, r1, r0
 8004250:	f7fe ff60 	bl	8003114 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004254:	4b02      	ldr	r3, [pc, #8]	; (8004260 <HAL_RCC_GetSysClockFreq+0x84>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f3c3 7302 	ubfx	r3, r3, #28, #3
 800425c:	e7e5      	b.n	800422a <HAL_RCC_GetSysClockFreq+0x4e>
 800425e:	bf00      	nop
 8004260:	40023800 	.word	0x40023800
 8004264:	00f42400 	.word	0x00f42400
 8004268:	007a1200 	.word	0x007a1200

0800426c <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800426c:	6803      	ldr	r3, [r0, #0]
{
 800426e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004272:	07df      	lsls	r7, r3, #31
{
 8004274:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004276:	d410      	bmi.n	800429a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004278:	6823      	ldr	r3, [r4, #0]
 800427a:	079e      	lsls	r6, r3, #30
 800427c:	d467      	bmi.n	800434e <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800427e:	6823      	ldr	r3, [r4, #0]
 8004280:	071a      	lsls	r2, r3, #28
 8004282:	f100 80b2 	bmi.w	80043ea <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004286:	6823      	ldr	r3, [r4, #0]
 8004288:	075b      	lsls	r3, r3, #29
 800428a:	f100 80d0 	bmi.w	800442e <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800428e:	69a2      	ldr	r2, [r4, #24]
 8004290:	2a00      	cmp	r2, #0
 8004292:	f040 8139 	bne.w	8004508 <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8004296:	2000      	movs	r0, #0
 8004298:	e01e      	b.n	80042d8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800429a:	4b97      	ldr	r3, [pc, #604]	; (80044f8 <HAL_RCC_OscConfig+0x28c>)
 800429c:	689a      	ldr	r2, [r3, #8]
 800429e:	f002 020c 	and.w	r2, r2, #12
 80042a2:	2a04      	cmp	r2, #4
 80042a4:	d010      	beq.n	80042c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80042ac:	2a08      	cmp	r2, #8
 80042ae:	d102      	bne.n	80042b6 <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	025d      	lsls	r5, r3, #9
 80042b4:	d408      	bmi.n	80042c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042b6:	4b90      	ldr	r3, [pc, #576]	; (80044f8 <HAL_RCC_OscConfig+0x28c>)
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042be:	2a0c      	cmp	r2, #12
 80042c0:	d10d      	bne.n	80042de <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	0250      	lsls	r0, r2, #9
 80042c6:	d50a      	bpl.n	80042de <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c8:	4b8b      	ldr	r3, [pc, #556]	; (80044f8 <HAL_RCC_OscConfig+0x28c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	0399      	lsls	r1, r3, #14
 80042ce:	d5d3      	bpl.n	8004278 <HAL_RCC_OscConfig+0xc>
 80042d0:	6863      	ldr	r3, [r4, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1d0      	bne.n	8004278 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80042d6:	2001      	movs	r0, #1
}
 80042d8:	b002      	add	sp, #8
 80042da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042de:	6862      	ldr	r2, [r4, #4]
 80042e0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80042e4:	d111      	bne.n	800430a <HAL_RCC_OscConfig+0x9e>
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80042ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80042ee:	f7ff f91d 	bl	800352c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f2:	4d81      	ldr	r5, [pc, #516]	; (80044f8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80042f4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f6:	682b      	ldr	r3, [r5, #0]
 80042f8:	039a      	lsls	r2, r3, #14
 80042fa:	d4bd      	bmi.n	8004278 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042fc:	f7ff f916 	bl	800352c <HAL_GetTick>
 8004300:	1b80      	subs	r0, r0, r6
 8004302:	2864      	cmp	r0, #100	; 0x64
 8004304:	d9f7      	bls.n	80042f6 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8004306:	2003      	movs	r0, #3
 8004308:	e7e6      	b.n	80042d8 <HAL_RCC_OscConfig+0x6c>
 800430a:	4d7b      	ldr	r5, [pc, #492]	; (80044f8 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800430c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8004310:	682b      	ldr	r3, [r5, #0]
 8004312:	d107      	bne.n	8004324 <HAL_RCC_OscConfig+0xb8>
 8004314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004318:	602b      	str	r3, [r5, #0]
 800431a:	682b      	ldr	r3, [r5, #0]
 800431c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004320:	602b      	str	r3, [r5, #0]
 8004322:	e7e4      	b.n	80042ee <HAL_RCC_OscConfig+0x82>
 8004324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004328:	602b      	str	r3, [r5, #0]
 800432a:	682b      	ldr	r3, [r5, #0]
 800432c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004330:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004332:	2a00      	cmp	r2, #0
 8004334:	d1db      	bne.n	80042ee <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8004336:	f7ff f8f9 	bl	800352c <HAL_GetTick>
 800433a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800433c:	682b      	ldr	r3, [r5, #0]
 800433e:	039b      	lsls	r3, r3, #14
 8004340:	d59a      	bpl.n	8004278 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004342:	f7ff f8f3 	bl	800352c <HAL_GetTick>
 8004346:	1b80      	subs	r0, r0, r6
 8004348:	2864      	cmp	r0, #100	; 0x64
 800434a:	d9f7      	bls.n	800433c <HAL_RCC_OscConfig+0xd0>
 800434c:	e7db      	b.n	8004306 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800434e:	4b6a      	ldr	r3, [pc, #424]	; (80044f8 <HAL_RCC_OscConfig+0x28c>)
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	f012 0f0c 	tst.w	r2, #12
 8004356:	d010      	beq.n	800437a <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800435e:	2a08      	cmp	r2, #8
 8004360:	d102      	bne.n	8004368 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	025f      	lsls	r7, r3, #9
 8004366:	d508      	bpl.n	800437a <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004368:	4a63      	ldr	r2, [pc, #396]	; (80044f8 <HAL_RCC_OscConfig+0x28c>)
 800436a:	6893      	ldr	r3, [r2, #8]
 800436c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004370:	2b0c      	cmp	r3, #12
 8004372:	d111      	bne.n	8004398 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004374:	6853      	ldr	r3, [r2, #4]
 8004376:	025e      	lsls	r6, r3, #9
 8004378:	d40e      	bmi.n	8004398 <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800437a:	4b5f      	ldr	r3, [pc, #380]	; (80044f8 <HAL_RCC_OscConfig+0x28c>)
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	0795      	lsls	r5, r2, #30
 8004380:	d502      	bpl.n	8004388 <HAL_RCC_OscConfig+0x11c>
 8004382:	68e2      	ldr	r2, [r4, #12]
 8004384:	2a01      	cmp	r2, #1
 8004386:	d1a6      	bne.n	80042d6 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	6921      	ldr	r1, [r4, #16]
 800438c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004390:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8004394:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004396:	e772      	b.n	800427e <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004398:	68e2      	ldr	r2, [r4, #12]
 800439a:	4b58      	ldr	r3, [pc, #352]	; (80044fc <HAL_RCC_OscConfig+0x290>)
 800439c:	b1b2      	cbz	r2, 80043cc <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 800439e:	2201      	movs	r2, #1
 80043a0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80043a2:	f7ff f8c3 	bl	800352c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a6:	4d54      	ldr	r5, [pc, #336]	; (80044f8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80043a8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043aa:	682b      	ldr	r3, [r5, #0]
 80043ac:	0798      	lsls	r0, r3, #30
 80043ae:	d507      	bpl.n	80043c0 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b0:	682b      	ldr	r3, [r5, #0]
 80043b2:	6922      	ldr	r2, [r4, #16]
 80043b4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80043b8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80043bc:	602b      	str	r3, [r5, #0]
 80043be:	e75e      	b.n	800427e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043c0:	f7ff f8b4 	bl	800352c <HAL_GetTick>
 80043c4:	1b80      	subs	r0, r0, r6
 80043c6:	2802      	cmp	r0, #2
 80043c8:	d9ef      	bls.n	80043aa <HAL_RCC_OscConfig+0x13e>
 80043ca:	e79c      	b.n	8004306 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 80043cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80043ce:	f7ff f8ad 	bl	800352c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043d2:	4d49      	ldr	r5, [pc, #292]	; (80044f8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80043d4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043d6:	682b      	ldr	r3, [r5, #0]
 80043d8:	0799      	lsls	r1, r3, #30
 80043da:	f57f af50 	bpl.w	800427e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043de:	f7ff f8a5 	bl	800352c <HAL_GetTick>
 80043e2:	1b80      	subs	r0, r0, r6
 80043e4:	2802      	cmp	r0, #2
 80043e6:	d9f6      	bls.n	80043d6 <HAL_RCC_OscConfig+0x16a>
 80043e8:	e78d      	b.n	8004306 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043ea:	6962      	ldr	r2, [r4, #20]
 80043ec:	4b44      	ldr	r3, [pc, #272]	; (8004500 <HAL_RCC_OscConfig+0x294>)
 80043ee:	b17a      	cbz	r2, 8004410 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 80043f0:	2201      	movs	r2, #1
 80043f2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80043f4:	f7ff f89a 	bl	800352c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043f8:	4d3f      	ldr	r5, [pc, #252]	; (80044f8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80043fa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043fc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80043fe:	079f      	lsls	r7, r3, #30
 8004400:	f53f af41 	bmi.w	8004286 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004404:	f7ff f892 	bl	800352c <HAL_GetTick>
 8004408:	1b80      	subs	r0, r0, r6
 800440a:	2802      	cmp	r0, #2
 800440c:	d9f6      	bls.n	80043fc <HAL_RCC_OscConfig+0x190>
 800440e:	e77a      	b.n	8004306 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8004410:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004412:	f7ff f88b 	bl	800352c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004416:	4d38      	ldr	r5, [pc, #224]	; (80044f8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8004418:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800441a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800441c:	0798      	lsls	r0, r3, #30
 800441e:	f57f af32 	bpl.w	8004286 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004422:	f7ff f883 	bl	800352c <HAL_GetTick>
 8004426:	1b80      	subs	r0, r0, r6
 8004428:	2802      	cmp	r0, #2
 800442a:	d9f6      	bls.n	800441a <HAL_RCC_OscConfig+0x1ae>
 800442c:	e76b      	b.n	8004306 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800442e:	4b32      	ldr	r3, [pc, #200]	; (80044f8 <HAL_RCC_OscConfig+0x28c>)
 8004430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004432:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8004436:	d128      	bne.n	800448a <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004438:	9201      	str	r2, [sp, #4]
 800443a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800443c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004440:	641a      	str	r2, [r3, #64]	; 0x40
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004448:	9301      	str	r3, [sp, #4]
 800444a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800444c:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800444e:	4d2d      	ldr	r5, [pc, #180]	; (8004504 <HAL_RCC_OscConfig+0x298>)
 8004450:	682b      	ldr	r3, [r5, #0]
 8004452:	05d9      	lsls	r1, r3, #23
 8004454:	d51b      	bpl.n	800448e <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004456:	68a3      	ldr	r3, [r4, #8]
 8004458:	4d27      	ldr	r5, [pc, #156]	; (80044f8 <HAL_RCC_OscConfig+0x28c>)
 800445a:	2b01      	cmp	r3, #1
 800445c:	d127      	bne.n	80044ae <HAL_RCC_OscConfig+0x242>
 800445e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004466:	f7ff f861 	bl	800352c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446a:	4d23      	ldr	r5, [pc, #140]	; (80044f8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800446c:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800446e:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004472:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004474:	079b      	lsls	r3, r3, #30
 8004476:	d539      	bpl.n	80044ec <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 8004478:	2e00      	cmp	r6, #0
 800447a:	f43f af08 	beq.w	800428e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800447e:	4a1e      	ldr	r2, [pc, #120]	; (80044f8 <HAL_RCC_OscConfig+0x28c>)
 8004480:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004482:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004486:	6413      	str	r3, [r2, #64]	; 0x40
 8004488:	e701      	b.n	800428e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800448a:	2600      	movs	r6, #0
 800448c:	e7df      	b.n	800444e <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800448e:	682b      	ldr	r3, [r5, #0]
 8004490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004494:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004496:	f7ff f849 	bl	800352c <HAL_GetTick>
 800449a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449c:	682b      	ldr	r3, [r5, #0]
 800449e:	05da      	lsls	r2, r3, #23
 80044a0:	d4d9      	bmi.n	8004456 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a2:	f7ff f843 	bl	800352c <HAL_GetTick>
 80044a6:	1bc0      	subs	r0, r0, r7
 80044a8:	2802      	cmp	r0, #2
 80044aa:	d9f7      	bls.n	800449c <HAL_RCC_OscConfig+0x230>
 80044ac:	e72b      	b.n	8004306 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ae:	2b05      	cmp	r3, #5
 80044b0:	d104      	bne.n	80044bc <HAL_RCC_OscConfig+0x250>
 80044b2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80044b4:	f043 0304 	orr.w	r3, r3, #4
 80044b8:	672b      	str	r3, [r5, #112]	; 0x70
 80044ba:	e7d0      	b.n	800445e <HAL_RCC_OscConfig+0x1f2>
 80044bc:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80044be:	f022 0201 	bic.w	r2, r2, #1
 80044c2:	672a      	str	r2, [r5, #112]	; 0x70
 80044c4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80044c6:	f022 0204 	bic.w	r2, r2, #4
 80044ca:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1ca      	bne.n	8004466 <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 80044d0:	f7ff f82c 	bl	800352c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044d4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80044d8:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044da:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80044dc:	0798      	lsls	r0, r3, #30
 80044de:	d5cb      	bpl.n	8004478 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e0:	f7ff f824 	bl	800352c <HAL_GetTick>
 80044e4:	1bc0      	subs	r0, r0, r7
 80044e6:	4540      	cmp	r0, r8
 80044e8:	d9f7      	bls.n	80044da <HAL_RCC_OscConfig+0x26e>
 80044ea:	e70c      	b.n	8004306 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ec:	f7ff f81e 	bl	800352c <HAL_GetTick>
 80044f0:	1bc0      	subs	r0, r0, r7
 80044f2:	4540      	cmp	r0, r8
 80044f4:	d9bd      	bls.n	8004472 <HAL_RCC_OscConfig+0x206>
 80044f6:	e706      	b.n	8004306 <HAL_RCC_OscConfig+0x9a>
 80044f8:	40023800 	.word	0x40023800
 80044fc:	42470000 	.word	0x42470000
 8004500:	42470e80 	.word	0x42470e80
 8004504:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004508:	4d23      	ldr	r5, [pc, #140]	; (8004598 <HAL_RCC_OscConfig+0x32c>)
 800450a:	68ab      	ldr	r3, [r5, #8]
 800450c:	f003 030c 	and.w	r3, r3, #12
 8004510:	2b08      	cmp	r3, #8
 8004512:	f43f aee0 	beq.w	80042d6 <HAL_RCC_OscConfig+0x6a>
 8004516:	4e21      	ldr	r6, [pc, #132]	; (800459c <HAL_RCC_OscConfig+0x330>)
 8004518:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800451a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800451c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800451e:	d12d      	bne.n	800457c <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8004520:	f7ff f804 	bl	800352c <HAL_GetTick>
 8004524:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004526:	682b      	ldr	r3, [r5, #0]
 8004528:	0199      	lsls	r1, r3, #6
 800452a:	d421      	bmi.n	8004570 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800452c:	6a22      	ldr	r2, [r4, #32]
 800452e:	69e3      	ldr	r3, [r4, #28]
 8004530:	4313      	orrs	r3, r2
 8004532:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004534:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004538:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800453a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800453e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004540:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8004544:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004546:	4c14      	ldr	r4, [pc, #80]	; (8004598 <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004548:	0852      	lsrs	r2, r2, #1
 800454a:	3a01      	subs	r2, #1
 800454c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004550:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004552:	2301      	movs	r3, #1
 8004554:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004556:	f7fe ffe9 	bl	800352c <HAL_GetTick>
 800455a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	019a      	lsls	r2, r3, #6
 8004560:	f53f ae99 	bmi.w	8004296 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004564:	f7fe ffe2 	bl	800352c <HAL_GetTick>
 8004568:	1b40      	subs	r0, r0, r5
 800456a:	2802      	cmp	r0, #2
 800456c:	d9f6      	bls.n	800455c <HAL_RCC_OscConfig+0x2f0>
 800456e:	e6ca      	b.n	8004306 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004570:	f7fe ffdc 	bl	800352c <HAL_GetTick>
 8004574:	1bc0      	subs	r0, r0, r7
 8004576:	2802      	cmp	r0, #2
 8004578:	d9d5      	bls.n	8004526 <HAL_RCC_OscConfig+0x2ba>
 800457a:	e6c4      	b.n	8004306 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 800457c:	f7fe ffd6 	bl	800352c <HAL_GetTick>
 8004580:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004582:	682b      	ldr	r3, [r5, #0]
 8004584:	019b      	lsls	r3, r3, #6
 8004586:	f57f ae86 	bpl.w	8004296 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800458a:	f7fe ffcf 	bl	800352c <HAL_GetTick>
 800458e:	1b00      	subs	r0, r0, r4
 8004590:	2802      	cmp	r0, #2
 8004592:	d9f6      	bls.n	8004582 <HAL_RCC_OscConfig+0x316>
 8004594:	e6b7      	b.n	8004306 <HAL_RCC_OscConfig+0x9a>
 8004596:	bf00      	nop
 8004598:	40023800 	.word	0x40023800
 800459c:	42470060 	.word	0x42470060

080045a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a4:	6806      	ldr	r6, [r0, #0]
 80045a6:	68c2      	ldr	r2, [r0, #12]
 80045a8:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045aa:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80045b0:	4313      	orrs	r3, r2
 80045b2:	6133      	str	r3, [r6, #16]
{
 80045b4:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045b6:	6883      	ldr	r3, [r0, #8]
 80045b8:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80045ba:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045bc:	4303      	orrs	r3, r0
 80045be:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80045c0:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045c4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80045c6:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045ca:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045d0:	6973      	ldr	r3, [r6, #20]
 80045d2:	69a2      	ldr	r2, [r4, #24]
 80045d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d8:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045da:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045de:	6173      	str	r3, [r6, #20]
 80045e0:	4b7a      	ldr	r3, [pc, #488]	; (80047cc <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045e2:	d17c      	bne.n	80046de <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045e4:	429e      	cmp	r6, r3
 80045e6:	d003      	beq.n	80045f0 <UART_SetConfig+0x50>
 80045e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045ec:	429e      	cmp	r6, r3
 80045ee:	d144      	bne.n	800467a <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80045f0:	f7ff fde4 	bl	80041bc <HAL_RCC_GetPCLK2Freq>
 80045f4:	2519      	movs	r5, #25
 80045f6:	fb05 f300 	mul.w	r3, r5, r0
 80045fa:	6860      	ldr	r0, [r4, #4]
 80045fc:	f04f 0964 	mov.w	r9, #100	; 0x64
 8004600:	0040      	lsls	r0, r0, #1
 8004602:	fbb3 f3f0 	udiv	r3, r3, r0
 8004606:	fbb3 f3f9 	udiv	r3, r3, r9
 800460a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800460e:	f7ff fdd5 	bl	80041bc <HAL_RCC_GetPCLK2Freq>
 8004612:	6863      	ldr	r3, [r4, #4]
 8004614:	4368      	muls	r0, r5
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	fbb0 f7f3 	udiv	r7, r0, r3
 800461c:	f7ff fdce 	bl	80041bc <HAL_RCC_GetPCLK2Freq>
 8004620:	6863      	ldr	r3, [r4, #4]
 8004622:	4368      	muls	r0, r5
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	fbb0 f3f3 	udiv	r3, r0, r3
 800462a:	fbb3 f3f9 	udiv	r3, r3, r9
 800462e:	fb09 7313 	mls	r3, r9, r3, r7
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	3332      	adds	r3, #50	; 0x32
 8004636:	fbb3 f3f9 	udiv	r3, r3, r9
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8004640:	f7ff fdbc 	bl	80041bc <HAL_RCC_GetPCLK2Freq>
 8004644:	6862      	ldr	r2, [r4, #4]
 8004646:	4368      	muls	r0, r5
 8004648:	0052      	lsls	r2, r2, #1
 800464a:	fbb0 faf2 	udiv	sl, r0, r2
 800464e:	f7ff fdb5 	bl	80041bc <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004652:	6863      	ldr	r3, [r4, #4]
 8004654:	4368      	muls	r0, r5
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	fbb0 f3f3 	udiv	r3, r0, r3
 800465c:	fbb3 f3f9 	udiv	r3, r3, r9
 8004660:	fb09 a313 	mls	r3, r9, r3, sl
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	3332      	adds	r3, #50	; 0x32
 8004668:	fbb3 f3f9 	udiv	r3, r3, r9
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004672:	443b      	add	r3, r7
 8004674:	60b3      	str	r3, [r6, #8]
 8004676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800467a:	f7ff fd8f 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 800467e:	2519      	movs	r5, #25
 8004680:	fb05 f300 	mul.w	r3, r5, r0
 8004684:	6860      	ldr	r0, [r4, #4]
 8004686:	f04f 0964 	mov.w	r9, #100	; 0x64
 800468a:	0040      	lsls	r0, r0, #1
 800468c:	fbb3 f3f0 	udiv	r3, r3, r0
 8004690:	fbb3 f3f9 	udiv	r3, r3, r9
 8004694:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004698:	f7ff fd80 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 800469c:	6863      	ldr	r3, [r4, #4]
 800469e:	4368      	muls	r0, r5
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	fbb0 f7f3 	udiv	r7, r0, r3
 80046a6:	f7ff fd79 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 80046aa:	6863      	ldr	r3, [r4, #4]
 80046ac:	4368      	muls	r0, r5
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80046b4:	fbb3 f3f9 	udiv	r3, r3, r9
 80046b8:	fb09 7313 	mls	r3, r9, r3, r7
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	3332      	adds	r3, #50	; 0x32
 80046c0:	fbb3 f3f9 	udiv	r3, r3, r9
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80046ca:	f7ff fd67 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 80046ce:	6862      	ldr	r2, [r4, #4]
 80046d0:	4368      	muls	r0, r5
 80046d2:	0052      	lsls	r2, r2, #1
 80046d4:	fbb0 faf2 	udiv	sl, r0, r2
 80046d8:	f7ff fd60 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 80046dc:	e7b9      	b.n	8004652 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046de:	429e      	cmp	r6, r3
 80046e0:	d002      	beq.n	80046e8 <UART_SetConfig+0x148>
 80046e2:	4b3b      	ldr	r3, [pc, #236]	; (80047d0 <UART_SetConfig+0x230>)
 80046e4:	429e      	cmp	r6, r3
 80046e6:	d140      	bne.n	800476a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80046e8:	f7ff fd68 	bl	80041bc <HAL_RCC_GetPCLK2Freq>
 80046ec:	6867      	ldr	r7, [r4, #4]
 80046ee:	2519      	movs	r5, #25
 80046f0:	f04f 0964 	mov.w	r9, #100	; 0x64
 80046f4:	fb05 f300 	mul.w	r3, r5, r0
 80046f8:	00bf      	lsls	r7, r7, #2
 80046fa:	fbb3 f3f7 	udiv	r3, r3, r7
 80046fe:	fbb3 f3f9 	udiv	r3, r3, r9
 8004702:	011f      	lsls	r7, r3, #4
 8004704:	f7ff fd5a 	bl	80041bc <HAL_RCC_GetPCLK2Freq>
 8004708:	6863      	ldr	r3, [r4, #4]
 800470a:	4368      	muls	r0, r5
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	fbb0 f8f3 	udiv	r8, r0, r3
 8004712:	f7ff fd53 	bl	80041bc <HAL_RCC_GetPCLK2Freq>
 8004716:	6863      	ldr	r3, [r4, #4]
 8004718:	4368      	muls	r0, r5
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004720:	fbb3 f3f9 	udiv	r3, r3, r9
 8004724:	fb09 8313 	mls	r3, r9, r3, r8
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	3332      	adds	r3, #50	; 0x32
 800472c:	fbb3 f3f9 	udiv	r3, r3, r9
 8004730:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8004734:	f7ff fd42 	bl	80041bc <HAL_RCC_GetPCLK2Freq>
 8004738:	6862      	ldr	r2, [r4, #4]
 800473a:	4368      	muls	r0, r5
 800473c:	0092      	lsls	r2, r2, #2
 800473e:	fbb0 faf2 	udiv	sl, r0, r2
 8004742:	f7ff fd3b 	bl	80041bc <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004746:	6863      	ldr	r3, [r4, #4]
 8004748:	4368      	muls	r0, r5
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004750:	fbb3 f3f9 	udiv	r3, r3, r9
 8004754:	fb09 a313 	mls	r3, r9, r3, sl
 8004758:	011b      	lsls	r3, r3, #4
 800475a:	3332      	adds	r3, #50	; 0x32
 800475c:	fbb3 f3f9 	udiv	r3, r3, r9
 8004760:	f003 030f 	and.w	r3, r3, #15
 8004764:	ea43 0308 	orr.w	r3, r3, r8
 8004768:	e783      	b.n	8004672 <UART_SetConfig+0xd2>
 800476a:	f7ff fd17 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 800476e:	6867      	ldr	r7, [r4, #4]
 8004770:	2519      	movs	r5, #25
 8004772:	f04f 0964 	mov.w	r9, #100	; 0x64
 8004776:	fb05 f300 	mul.w	r3, r5, r0
 800477a:	00bf      	lsls	r7, r7, #2
 800477c:	fbb3 f3f7 	udiv	r3, r3, r7
 8004780:	fbb3 f3f9 	udiv	r3, r3, r9
 8004784:	011f      	lsls	r7, r3, #4
 8004786:	f7ff fd09 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 800478a:	6863      	ldr	r3, [r4, #4]
 800478c:	4368      	muls	r0, r5
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	fbb0 f8f3 	udiv	r8, r0, r3
 8004794:	f7ff fd02 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 8004798:	6863      	ldr	r3, [r4, #4]
 800479a:	4368      	muls	r0, r5
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	fbb0 f3f3 	udiv	r3, r0, r3
 80047a2:	fbb3 f3f9 	udiv	r3, r3, r9
 80047a6:	fb09 8313 	mls	r3, r9, r3, r8
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	3332      	adds	r3, #50	; 0x32
 80047ae:	fbb3 f3f9 	udiv	r3, r3, r9
 80047b2:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80047b6:	f7ff fcf1 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 80047ba:	6862      	ldr	r2, [r4, #4]
 80047bc:	4368      	muls	r0, r5
 80047be:	0092      	lsls	r2, r2, #2
 80047c0:	fbb0 faf2 	udiv	sl, r0, r2
 80047c4:	f7ff fcea 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 80047c8:	e7bd      	b.n	8004746 <UART_SetConfig+0x1a6>
 80047ca:	bf00      	nop
 80047cc:	40011000 	.word	0x40011000
 80047d0:	40011400 	.word	0x40011400

080047d4 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80047d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d6:	4604      	mov	r4, r0
 80047d8:	460e      	mov	r6, r1
 80047da:	4617      	mov	r7, r2
 80047dc:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047de:	6821      	ldr	r1, [r4, #0]
 80047e0:	680b      	ldr	r3, [r1, #0]
 80047e2:	ea36 0303 	bics.w	r3, r6, r3
 80047e6:	d101      	bne.n	80047ec <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80047e8:	2000      	movs	r0, #0
}
 80047ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80047ec:	1c6b      	adds	r3, r5, #1
 80047ee:	d0f7      	beq.n	80047e0 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047f0:	b995      	cbnz	r5, 8004818 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047fa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047fc:	695a      	ldr	r2, [r3, #20]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8004804:	2320      	movs	r3, #32
 8004806:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800480a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800480e:	2300      	movs	r3, #0
 8004810:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8004814:	2003      	movs	r0, #3
 8004816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004818:	f7fe fe88 	bl	800352c <HAL_GetTick>
 800481c:	1bc0      	subs	r0, r0, r7
 800481e:	4285      	cmp	r5, r0
 8004820:	d2dd      	bcs.n	80047de <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8004822:	e7e6      	b.n	80047f2 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08004824 <HAL_UART_Init>:
{
 8004824:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004826:	4604      	mov	r4, r0
 8004828:	b340      	cbz	r0, 800487c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800482a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800482e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004832:	b91b      	cbnz	r3, 800483c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8004834:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8004838:	f000 fdd0 	bl	80053dc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800483c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800483e:	2324      	movs	r3, #36	; 0x24
 8004840:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8004844:	68d3      	ldr	r3, [r2, #12]
 8004846:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800484a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800484c:	4620      	mov	r0, r4
 800484e:	f7ff fea7 	bl	80045a0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004852:	6823      	ldr	r3, [r4, #0]
 8004854:	691a      	ldr	r2, [r3, #16]
 8004856:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800485a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800485c:	695a      	ldr	r2, [r3, #20]
 800485e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004862:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800486a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800486c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800486e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004870:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004872:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004876:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800487a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800487c:	2001      	movs	r0, #1
}
 800487e:	bd10      	pop	{r4, pc}

08004880 <HAL_UART_Transmit>:
{
 8004880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004884:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004886:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800488a:	2b20      	cmp	r3, #32
{
 800488c:	4604      	mov	r4, r0
 800488e:	460d      	mov	r5, r1
 8004890:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004892:	d14f      	bne.n	8004934 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8004894:	2900      	cmp	r1, #0
 8004896:	d04a      	beq.n	800492e <HAL_UART_Transmit+0xae>
 8004898:	2a00      	cmp	r2, #0
 800489a:	d048      	beq.n	800492e <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 800489c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d047      	beq.n	8004934 <HAL_UART_Transmit+0xb4>
 80048a4:	2301      	movs	r3, #1
 80048a6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048aa:	2300      	movs	r3, #0
 80048ac:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048ae:	2321      	movs	r3, #33	; 0x21
 80048b0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80048b4:	f7fe fe3a 	bl	800352c <HAL_GetTick>
    huart->TxXferSize = Size;
 80048b8:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80048bc:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80048be:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048c2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	b96b      	cbnz	r3, 80048e4 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048c8:	463b      	mov	r3, r7
 80048ca:	4632      	mov	r2, r6
 80048cc:	2140      	movs	r1, #64	; 0x40
 80048ce:	4620      	mov	r0, r4
 80048d0:	f7ff ff80 	bl	80047d4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80048d4:	b9b0      	cbnz	r0, 8004904 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 80048d6:	2320      	movs	r3, #32
 80048d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80048dc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80048e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80048e4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80048ec:	68a3      	ldr	r3, [r4, #8]
 80048ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048f2:	4632      	mov	r2, r6
 80048f4:	463b      	mov	r3, r7
 80048f6:	f04f 0180 	mov.w	r1, #128	; 0x80
 80048fa:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80048fc:	d10e      	bne.n	800491c <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048fe:	f7ff ff69 	bl	80047d4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8004902:	b110      	cbz	r0, 800490a <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8004904:	2003      	movs	r0, #3
 8004906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800490a:	882b      	ldrh	r3, [r5, #0]
 800490c:	6822      	ldr	r2, [r4, #0]
 800490e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004912:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004914:	6923      	ldr	r3, [r4, #16]
 8004916:	b943      	cbnz	r3, 800492a <HAL_UART_Transmit+0xaa>
          pData += 2U;
 8004918:	3502      	adds	r5, #2
 800491a:	e7d2      	b.n	80048c2 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800491c:	f7ff ff5a 	bl	80047d4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8004920:	2800      	cmp	r0, #0
 8004922:	d1ef      	bne.n	8004904 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	782a      	ldrb	r2, [r5, #0]
 8004928:	605a      	str	r2, [r3, #4]
 800492a:	3501      	adds	r5, #1
 800492c:	e7c9      	b.n	80048c2 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800492e:	2001      	movs	r0, #1
 8004930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004934:	2002      	movs	r0, #2
}
 8004936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800493c <ai_network_data_weights_get>:
    0x70, 0xbf, 0x06, 0xe6, 0x6e, 0x3d, 0x5f, 0xbc, 0xae,
    0xbe, 0x2a, 0xe0, 0xa4, 0x3e, 0x1c, 0x59, 0x02, 0xbf
  };

  return AI_HANDLE_PTR(s_network_weights);
}
 800493c:	4800      	ldr	r0, [pc, #0]	; (8004940 <ai_network_data_weights_get+0x4>)
 800493e:	4770      	bx	lr
 8004940:	08007598 	.word	0x08007598

08004944 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8004944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004948:	b0a0      	sub	sp, #128	; 0x80
 800494a:	460f      	mov	r7, r1
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 800494c:	f7fb fcf7 	bl	800033e <ai_platform_context_acquire>
 8004950:	4604      	mov	r4, r0

  if ( report && net_ctx )
 8004952:	2f00      	cmp	r7, #0
 8004954:	d06e      	beq.n	8004a34 <ai_network_get_info+0xf0>
 8004956:	2800      	cmp	r0, #0
 8004958:	d06e      	beq.n	8004a38 <ai_network_get_info+0xf4>
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 800495a:	f7fb fc8a 	bl	8000272 <ai_platform_runtime_get_revision>
 800495e:	4680      	mov	r8, r0
    ai_network_report r = {
 8004960:	f7fb fc9f 	bl	80002a2 <ai_platform_runtime_get_version>
 8004964:	9006      	str	r0, [sp, #24]
 8004966:	f7fb fcb6 	bl	80002d6 <ai_platform_api_get_version>
 800496a:	900a      	str	r0, [sp, #40]	; 0x28
 800496c:	f7fb fccd 	bl	800030a <ai_platform_interface_api_get_version>
 8004970:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8004974:	900b      	str	r0, [sp, #44]	; 0x2c
 8004976:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004978:	ae16      	add	r6, sp, #88	; 0x58
 800497a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800497e:	f104 0314 	add.w	r3, r4, #20
 8004982:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004984:	ae1a      	add	r6, sp, #104	; 0x68
 8004986:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
                              4,
                              1, NULL),
      .activations       = net_ctx->activations,
      .weights           = net_ctx->params,
      .n_nodes           = 0,
      .signature         = net_ctx->signature,
 800498a:	6860      	ldr	r0, [r4, #4]
    };

    AI_FOR_EACH_NODE_DO(node, net_ctx->input_node)
 800498c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800498e:	2500      	movs	r5, #0
 8004990:	2a00      	cmp	r2, #0
 8004992:	d148      	bne.n	8004a26 <ai_network_get_info+0xe2>
    {
      r.n_nodes++;
    }

    *report = r;
 8004994:	4b29      	ldr	r3, [pc, #164]	; (8004a3c <ai_network_get_info+0xf8>)
 8004996:	9301      	str	r3, [sp, #4]
 8004998:	4b29      	ldr	r3, [pc, #164]	; (8004a40 <ai_network_get_info+0xfc>)
 800499a:	9302      	str	r3, [sp, #8]
 800499c:	4b29      	ldr	r3, [pc, #164]	; (8004a44 <ai_network_get_info+0x100>)
 800499e:	9303      	str	r3, [sp, #12]
 80049a0:	4b29      	ldr	r3, [pc, #164]	; (8004a48 <ai_network_get_info+0x104>)
 80049a2:	9304      	str	r3, [sp, #16]
 80049a4:	4b29      	ldr	r3, [pc, #164]	; (8004a4c <ai_network_get_info+0x108>)
 80049a6:	9307      	str	r3, [sp, #28]
 80049a8:	2301      	movs	r3, #1
 80049aa:	2103      	movs	r1, #3
 80049ac:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80049b0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 80049b4:	f643 3458 	movw	r4, #15192	; 0x3b58
 80049b8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80049bc:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80049c0:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80049c4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80049c8:	9310      	str	r3, [sp, #64]	; 0x40
 80049ca:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 80049ce:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 80049d2:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 80049d6:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 80049da:	2304      	movs	r3, #4
 80049dc:	f88d 1020 	strb.w	r1, [sp, #32]
 80049e0:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
 80049e4:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
 80049e8:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 80049ec:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
 80049f0:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
 80049f4:	940c      	str	r4, [sp, #48]	; 0x30
 80049f6:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
 80049fa:	9211      	str	r2, [sp, #68]	; 0x44
 80049fc:	9215      	str	r2, [sp, #84]	; 0x54
 80049fe:	901f      	str	r0, [sp, #124]	; 0x7c
 8004a00:	2418      	movs	r4, #24
 8004a02:	227c      	movs	r2, #124	; 0x7c
 8004a04:	eb0d 0103 	add.w	r1, sp, r3
 8004a08:	4638      	mov	r0, r7
 8004a0a:	f8cd 8014 	str.w	r8, [sp, #20]
 8004a0e:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
 8004a12:	9314      	str	r3, [sp, #80]	; 0x50
 8004a14:	951e      	str	r5, [sp, #120]	; 0x78
 8004a16:	f000 ff5e 	bl	80058d6 <memcpy>

    return ( r.n_nodes>0 ) ? true : false;
 8004a1a:	1c28      	adds	r0, r5, #0
 8004a1c:	bf18      	it	ne
 8004a1e:	2001      	movne	r0, #1
  }
  
  return false;
}
 8004a20:	b020      	add	sp, #128	; 0x80
 8004a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    AI_FOR_EACH_NODE_DO(node, net_ctx->input_node)
 8004a26:	6893      	ldr	r3, [r2, #8]
 8004a28:	3501      	adds	r5, #1
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	bf14      	ite	ne
 8004a2e:	461a      	movne	r2, r3
 8004a30:	2200      	moveq	r2, #0
 8004a32:	e7ad      	b.n	8004990 <ai_network_get_info+0x4c>
  return false;
 8004a34:	4638      	mov	r0, r7
 8004a36:	e7f3      	b.n	8004a20 <ai_network_get_info+0xdc>
 8004a38:	e7f2      	b.n	8004a20 <ai_network_get_info+0xdc>
 8004a3a:	bf00      	nop
 8004a3c:	0800b2f8 	.word	0x0800b2f8
 8004a40:	0800b300 	.word	0x0800b300
 8004a44:	0800b321 	.word	0x0800b321
 8004a48:	0800b33a 	.word	0x0800b33a
 8004a4c:	0800b34f 	.word	0x0800b34f

08004a50 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8004a50:	b508      	push	{r3, lr}
  return ai_platform_network_get_error(network);
 8004a52:	f7fb fc99 	bl	8000388 <ai_platform_network_get_error>
}
 8004a56:	bd08      	pop	{r3, pc}

08004a58 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8004a58:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	9301      	str	r3, [sp, #4]
 8004a5e:	2301      	movs	r3, #1
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	4a03      	ldr	r2, [pc, #12]	; (8004a70 <ai_network_create+0x18>)
 8004a64:	f7fb fcb8 	bl	80003d8 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8004a68:	b003      	add	sp, #12
 8004a6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a6e:	bf00      	nop
 8004a70:	200003f0 	.word	0x200003f0

08004a74 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8004a74:	f7fb bcee 	b.w	8000454 <ai_platform_network_destroy>

08004a78 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8004a78:	b510      	push	{r4, lr}
 8004a7a:	460c      	mov	r4, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8004a7c:	f7fb fd09 	bl	8000492 <ai_platform_network_init>
  if ( !net_ctx ) return false;
 8004a80:	2800      	cmp	r0, #0
 8004a82:	d058      	beq.n	8004b36 <ai_network_init+0xbe>
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004a84:	4a2c      	ldr	r2, [pc, #176]	; (8004b38 <ai_network_init+0xc0>)
 8004a86:	68e3      	ldr	r3, [r4, #12]
 8004a88:	6811      	ldr	r1, [r2, #0]
  conv2d_2_weights_array.data = weights + 0;
 8004a8a:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004a8c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8004a90:	6011      	str	r1, [r2, #0]
  conv2d_2_weights_array.data_start = weights + 0;
 8004a92:	60d3      	str	r3, [r2, #12]
  conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004a94:	4a29      	ldr	r2, [pc, #164]	; (8004b3c <ai_network_init+0xc4>)
 8004a96:	6811      	ldr	r1, [r2, #0]
 8004a98:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8004a9c:	6011      	str	r1, [r2, #0]
  conv2d_2_bias_array.data = weights + 1536;
 8004a9e:	f503 61c0 	add.w	r1, r3, #1536	; 0x600
 8004aa2:	6091      	str	r1, [r2, #8]
  conv2d_2_bias_array.data_start = weights + 1536;
 8004aa4:	60d1      	str	r1, [r2, #12]
  dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8004aa6:	4a26      	ldr	r2, [pc, #152]	; (8004b40 <ai_network_init+0xc8>)
 8004aa8:	6811      	ldr	r1, [r2, #0]
 8004aaa:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8004aae:	6011      	str	r1, [r2, #0]
  dense_3_weights_array.data = weights + 1632;
 8004ab0:	f503 61cc 	add.w	r1, r3, #1632	; 0x660
 8004ab4:	6091      	str	r1, [r2, #8]
  dense_3_weights_array.data_start = weights + 1632;
 8004ab6:	60d1      	str	r1, [r2, #12]
  dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ab8:	4a22      	ldr	r2, [pc, #136]	; (8004b44 <ai_network_init+0xcc>)
 8004aba:	6811      	ldr	r1, [r2, #0]
 8004abc:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8004ac0:	6011      	str	r1, [r2, #0]
  dense_3_bias_array.data = weights + 15456;
 8004ac2:	f503 5171 	add.w	r1, r3, #15424	; 0x3c40
 8004ac6:	3120      	adds	r1, #32
 8004ac8:	6091      	str	r1, [r2, #8]
  dense_3_bias_array.data_start = weights + 15456;
 8004aca:	60d1      	str	r1, [r2, #12]
  dense_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8004acc:	4a1e      	ldr	r2, [pc, #120]	; (8004b48 <ai_network_init+0xd0>)
 8004ace:	6811      	ldr	r1, [r2, #0]
 8004ad0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8004ad4:	6011      	str	r1, [r2, #0]
  dense_4_weights_array.data = weights + 15504;
 8004ad6:	f503 5172 	add.w	r1, r3, #15488	; 0x3c80
 8004ada:	3110      	adds	r1, #16
 8004adc:	6091      	str	r1, [r2, #8]
  dense_4_weights_array.data_start = weights + 15504;
 8004ade:	60d1      	str	r1, [r2, #12]
  dense_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8004ae0:	4a1a      	ldr	r2, [pc, #104]	; (8004b4c <ai_network_init+0xd4>)
 8004ae2:	6811      	ldr	r1, [r2, #0]
  dense_4_bias_array.data = weights + 15696;
 8004ae4:	f503 5375 	add.w	r3, r3, #15680	; 0x3d40
 8004ae8:	3310      	adds	r3, #16
  dense_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8004aea:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  dense_4_bias_array.data = weights + 15696;
 8004aee:	6093      	str	r3, [r2, #8]
  dense_4_bias_array.data_start = weights + 15696;
 8004af0:	60d3      	str	r3, [r2, #12]
  dense_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8004af2:	6011      	str	r1, [r2, #0]
  AI_FLAG_SET(net_ctx->flags, AI_NETWORK_FLAG_OUT_COPY);
 8004af4:	6882      	ldr	r2, [r0, #8]
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8004af6:	69e3      	ldr	r3, [r4, #28]
  AI_FLAG_SET(net_ctx->flags, AI_NETWORK_FLAG_OUT_COPY);
 8004af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004afc:	6082      	str	r2, [r0, #8]
    input_0_output_array.data = NULL;
 8004afe:	4a14      	ldr	r2, [pc, #80]	; (8004b50 <ai_network_init+0xd8>)
 8004b00:	2100      	movs	r1, #0
 8004b02:	6091      	str	r1, [r2, #8]
  input_0_output_array.data_start = NULL;
 8004b04:	60d1      	str	r1, [r2, #12]
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8004b06:	3303      	adds	r3, #3
  conv2d_2_output_in_array.data = activations + 0;
 8004b08:	4a12      	ldr	r2, [pc, #72]	; (8004b54 <ai_network_init+0xdc>)
  dense_3_output_array.data = activations + 2304;
 8004b0a:	4913      	ldr	r1, [pc, #76]	; (8004b58 <ai_network_init+0xe0>)
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8004b0c:	f023 0303 	bic.w	r3, r3, #3
  conv2d_2_output_in_array.data = activations + 0;
 8004b10:	6093      	str	r3, [r2, #8]
  conv2d_2_output_in_array.data_start = activations + 0;
 8004b12:	60d3      	str	r3, [r2, #12]
  conv2d_2_output_out_array.data = activations + 0;
 8004b14:	4a11      	ldr	r2, [pc, #68]	; (8004b5c <ai_network_init+0xe4>)
 8004b16:	6093      	str	r3, [r2, #8]
  conv2d_2_output_out_array.data_start = activations + 0;
 8004b18:	60d3      	str	r3, [r2, #12]
  dense_3_output_array.data = activations + 2304;
 8004b1a:	f503 6210 	add.w	r2, r3, #2304	; 0x900
 8004b1e:	608a      	str	r2, [r1, #8]
  dense_3_output_array.data_start = activations + 2304;
 8004b20:	60ca      	str	r2, [r1, #12]
  dense_3_nl_output_array.data = activations + 2304;
 8004b22:	490f      	ldr	r1, [pc, #60]	; (8004b60 <ai_network_init+0xe8>)
 8004b24:	608a      	str	r2, [r1, #8]
  dense_3_nl_output_array.data_start = activations + 2304;
 8004b26:	60ca      	str	r2, [r1, #12]
  dense_4_output_array.data = activations + 0;
 8004b28:	4a0e      	ldr	r2, [pc, #56]	; (8004b64 <ai_network_init+0xec>)
 8004b2a:	6093      	str	r3, [r2, #8]
  dense_4_output_array.data_start = activations + 0;
 8004b2c:	60d3      	str	r3, [r2, #12]
  dense_4_nl_output_array.data = activations + 0;
 8004b2e:	4a0e      	ldr	r2, [pc, #56]	; (8004b68 <ai_network_init+0xf0>)

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, &params->params);
  ok &= network_configure_activations(net_ctx, &params->activations);
  
  return ok;
 8004b30:	2001      	movs	r0, #1
  dense_4_nl_output_array.data = activations + 0;
 8004b32:	6093      	str	r3, [r2, #8]
  dense_4_nl_output_array.data_start = activations + 0;
 8004b34:	60d3      	str	r3, [r2, #12]
}
 8004b36:	bd10      	pop	{r4, pc}
 8004b38:	200001e0 	.word	0x200001e0
 8004b3c:	200000f0 	.word	0x200000f0
 8004b40:	200002e0 	.word	0x200002e0
 8004b44:	20000214 	.word	0x20000214
 8004b48:	200003e0 	.word	0x200003e0
 8004b4c:	20000314 	.word	0x20000314
 8004b50:	2000045c 	.word	0x2000045c
 8004b54:	20000178 	.word	0x20000178
 8004b58:	200002ac 	.word	0x200002ac
 8004b5c:	200001ac 	.word	0x200001ac
 8004b60:	20000278 	.word	0x20000278
 8004b64:	200003ac 	.word	0x200003ac
 8004b68:	20000378 	.word	0x20000378

08004b6c <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8004b6c:	f7fb bcdc 	b.w	8000528 <ai_platform_network_process>

08004b70 <_write>:
#if defined(__GNUC__)

int _write(int fd, const void *buff, int count);

int _write(int fd, const void *buff, int count)
{
 8004b70:	b510      	push	{r4, lr}
    HAL_StatusTypeDef status;

    if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 8004b72:	1e14      	subs	r4, r2, #0
 8004b74:	da0a      	bge.n	8004b8c <_write+0x1c>
 8004b76:	3801      	subs	r0, #1
 8004b78:	2801      	cmp	r0, #1
 8004b7a:	d907      	bls.n	8004b8c <_write+0x1c>
        errno = EBADF;
 8004b7c:	f000 fcf6 	bl	800556c <__errno>
 8004b80:	2309      	movs	r3, #9
 8004b82:	6003      	str	r3, [r0, #0]
        return -1;
 8004b84:	f04f 34ff 	mov.w	r4, #4294967295

    status = HAL_UART_Transmit(&UartHandle, (uint8_t *)buff, count,
            HAL_MAX_DELAY);

    return (status == HAL_OK ? count : 0);
}
 8004b88:	4620      	mov	r0, r4
 8004b8a:	bd10      	pop	{r4, pc}
    status = HAL_UART_Transmit(&UartHandle, (uint8_t *)buff, count,
 8004b8c:	b2a2      	uxth	r2, r4
 8004b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b92:	4803      	ldr	r0, [pc, #12]	; (8004ba0 <_write+0x30>)
 8004b94:	f7ff fe74 	bl	8004880 <HAL_UART_Transmit>
    return (status == HAL_OK ? count : 0);
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	bf18      	it	ne
 8004b9c:	2400      	movne	r4, #0
 8004b9e:	e7f3      	b.n	8004b88 <_write+0x18>
 8004ba0:	200010b0 	.word	0x200010b0

08004ba4 <AccelWrite>:
/* USER CODE END 0 */


/* Write the value into corresponding register address*/
void AccelWrite (uint8_t reg, uint8_t value)
{
 8004ba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t data[2];
    data[0] = reg;
    data[1] = value;
    HAL_I2C_Master_Transmit(&hi2c1, adxl_address, data, 2, 100);
 8004ba6:	2364      	movs	r3, #100	; 0x64
    data[0] = reg;
 8004ba8:	f88d 000c 	strb.w	r0, [sp, #12]
    data[1] = value;
 8004bac:	f88d 100d 	strb.w	r1, [sp, #13]
    HAL_I2C_Master_Transmit(&hi2c1, adxl_address, data, 2, 100);
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	aa03      	add	r2, sp, #12
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	21a6      	movs	r1, #166	; 0xa6
 8004bb8:	4802      	ldr	r0, [pc, #8]	; (8004bc4 <AccelWrite+0x20>)
 8004bba:	f7ff f83f 	bl	8003c3c <HAL_I2C_Master_Transmit>
}
 8004bbe:	b005      	add	sp, #20
 8004bc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8004bc4:	20001054 	.word	0x20001054

08004bc8 <AccelReadValues>:

/* Read the values from corresponding register address*/
void AccelReadValues (uint8_t reg, uint8_t numberofbytes)
{
 8004bc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    HAL_I2C_Mem_Read(&hi2c1, adxl_address, reg, 1, (uint8_t *) AccelData,
 8004bca:	2364      	movs	r3, #100	; 0x64
 8004bcc:	9302      	str	r3, [sp, #8]
 8004bce:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <AccelReadValues+0x20>)
 8004bd0:	9101      	str	r1, [sp, #4]
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	21a6      	movs	r1, #166	; 0xa6
 8004bda:	4804      	ldr	r0, [pc, #16]	; (8004bec <AccelReadValues+0x24>)
 8004bdc:	f7ff f8fc 	bl	8003dd8 <HAL_I2C_Mem_Read>
            numberofbytes, 100);
}
 8004be0:	b005      	add	sp, #20
 8004be2:	f85d fb04 	ldr.w	pc, [sp], #4
 8004be6:	bf00      	nop
 8004be8:	2000104a 	.word	0x2000104a
 8004bec:	20001054 	.word	0x20001054

08004bf0 <AccelInit>:
    HAL_I2C_Mem_Read(&hi2c1, adxl_address, reg, 1, &chipid, 1, 100);

}

void AccelInit(void)
{
 8004bf0:	b508      	push	{r3, lr}
    AccelReadValues(0x00, 1);
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	f7ff ffe7 	bl	8004bc8 <AccelReadValues>
    AccelWrite(0x2d, 0x00);  // reset all bits
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	202d      	movs	r0, #45	; 0x2d
 8004bfe:	f7ff ffd1 	bl	8004ba4 <AccelWrite>
    AccelWrite(0x2d, 0x08);  // power_cntl measure and wake up 8hz*/
 8004c02:	2108      	movs	r1, #8
 8004c04:	202d      	movs	r0, #45	; 0x2d
 8004c06:	f7ff ffcd 	bl	8004ba4 <AccelWrite>
    AccelWrite(0x31, 0x00);  // data_format range= +- 2g
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	2031      	movs	r0, #49	; 0x31

}
 8004c0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    AccelWrite(0x31, 0x00);  // data_format range= +- 2g
 8004c12:	f7ff bfc7 	b.w	8004ba4 <AccelWrite>
	...

08004c18 <MX_X_CUBE_AI_Init>:
/* USER CODE END 0 */
void MX_X_CUBE_AI_Init(void)
{
 8004c18:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 8004c1a:	f000 fb5d 	bl	80052d8 <MX_USART2_UART_Init>
    printf("Print: AR=%s\r\n", "testing");
 8004c1e:	4905      	ldr	r1, [pc, #20]	; (8004c34 <MX_X_CUBE_AI_Init+0x1c>)
 8004c20:	4805      	ldr	r0, [pc, #20]	; (8004c38 <MX_X_CUBE_AI_Init+0x20>)
 8004c22:	f000 ff17 	bl	8005a54 <iprintf>
    AccelInit();
 8004c26:	f7ff ffe3 	bl	8004bf0 <AccelInit>
    DATA_InitProcesser();

}
 8004c2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    DATA_InitProcesser();
 8004c2e:	f000 b8fd 	b.w	8004e2c <DATA_InitProcesser>
 8004c32:	bf00      	nop
 8004c34:	0800b36c 	.word	0x0800b36c
 8004c38:	0800b374 	.word	0x0800b374
 8004c3c:	00000000 	.word	0x00000000

08004c40 <MX_X_CUBE_AI_Process>:

extern UART_HandleTypeDef huart2;

void MX_X_CUBE_AI_Process(void)
{
 8004c40:	b570      	push	{r4, r5, r6, lr}
    AccelReadValues(0x32, 6);
 8004c42:	2106      	movs	r1, #6
 8004c44:	2032      	movs	r0, #50	; 0x32
 8004c46:	f7ff ffbf 	bl	8004bc8 <AccelReadValues>

    x = ((AccelData[1] << 8) | AccelData[0]);
 8004c4a:	4b2f      	ldr	r3, [pc, #188]	; (8004d08 <MX_X_CUBE_AI_Process+0xc8>)
    y = ((AccelData[3] << 8) | AccelData[2]);
    z = ((AccelData[5] << 8) | AccelData[4]);

    ACC_Value_Raw.AccX = (x * .039);
 8004c4c:	4c2f      	ldr	r4, [pc, #188]	; (8004d0c <MX_X_CUBE_AI_Process+0xcc>)
    x = ((AccelData[1] << 8) | AccelData[0]);
 8004c4e:	785a      	ldrb	r2, [r3, #1]
 8004c50:	7818      	ldrb	r0, [r3, #0]
    y = ((AccelData[3] << 8) | AccelData[2]);
 8004c52:	789e      	ldrb	r6, [r3, #2]
    z = ((AccelData[5] << 8) | AccelData[4]);
 8004c54:	791d      	ldrb	r5, [r3, #4]
    x = ((AccelData[1] << 8) | AccelData[0]);
 8004c56:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8004c5a:	4a2d      	ldr	r2, [pc, #180]	; (8004d10 <MX_X_CUBE_AI_Process+0xd0>)
 8004c5c:	b200      	sxth	r0, r0
 8004c5e:	8010      	strh	r0, [r2, #0]
    y = ((AccelData[3] << 8) | AccelData[2]);
 8004c60:	78da      	ldrb	r2, [r3, #3]
 8004c62:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 8004c66:	4a2b      	ldr	r2, [pc, #172]	; (8004d14 <MX_X_CUBE_AI_Process+0xd4>)
 8004c68:	b236      	sxth	r6, r6
 8004c6a:	8016      	strh	r6, [r2, #0]
    z = ((AccelData[5] << 8) | AccelData[4]);
 8004c6c:	795a      	ldrb	r2, [r3, #5]
 8004c6e:	4b2a      	ldr	r3, [pc, #168]	; (8004d18 <MX_X_CUBE_AI_Process+0xd8>)
 8004c70:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8004c74:	b22d      	sxth	r5, r5
 8004c76:	801d      	strh	r5, [r3, #0]
    ACC_Value_Raw.AccX = (x * .039);
 8004c78:	f7fd fefc 	bl	8002a74 <__aeabi_i2d>
 8004c7c:	a320      	add	r3, pc, #128	; (adr r3, 8004d00 <MX_X_CUBE_AI_Process+0xc0>)
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c82:	f7fd ff5d 	bl	8002b40 <__aeabi_dmul>
 8004c86:	f7fe f9f5 	bl	8003074 <__aeabi_d2f>
 8004c8a:	6020      	str	r0, [r4, #0]
    ACC_Value_Raw.AccY = (y * .039);
 8004c8c:	4630      	mov	r0, r6
 8004c8e:	f7fd fef1 	bl	8002a74 <__aeabi_i2d>
 8004c92:	a31b      	add	r3, pc, #108	; (adr r3, 8004d00 <MX_X_CUBE_AI_Process+0xc0>)
 8004c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c98:	f7fd ff52 	bl	8002b40 <__aeabi_dmul>
 8004c9c:	f7fe f9ea 	bl	8003074 <__aeabi_d2f>
 8004ca0:	6060      	str	r0, [r4, #4]
    ACC_Value_Raw.AccZ = (z * .039);
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	f7fd fee6 	bl	8002a74 <__aeabi_i2d>
 8004ca8:	a315      	add	r3, pc, #84	; (adr r3, 8004d00 <MX_X_CUBE_AI_Process+0xc0>)
 8004caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cae:	f7fd ff47 	bl	8002b40 <__aeabi_dmul>
 8004cb2:	f7fe f9df 	bl	8003074 <__aeabi_d2f>
 8004cb6:	60a0      	str	r0, [r4, #8]

    HAL_Delay(50);
 8004cb8:	2032      	movs	r0, #50	; 0x32
 8004cba:	f7fe fc3d 	bl	8003538 <HAL_Delay>

    Output = DATA_Infer(ACC_Value_Raw);
 8004cbe:	ed94 0a00 	vldr	s0, [r4]
 8004cc2:	edd4 0a01 	vldr	s1, [r4, #4]
 8004cc6:	ed94 1a02 	vldr	s2, [r4, #8]
 8004cca:	f000 fa1f 	bl	800510c <DATA_Infer>
   // Output = Output + 48;
    //Printf(%d",Output);
    //HAL_UART_Transmit(&huart2, &Output, 1, 20);

    switch(Output)
 8004cce:	2803      	cmp	r0, #3
 8004cd0:	d811      	bhi.n	8004cf6 <MX_X_CUBE_AI_Process+0xb6>
 8004cd2:	e8df f000 	tbb	[pc, r0]
 8004cd6:	0a02      	.short	0x0a02
 8004cd8:	0e0c      	.short	0x0e0c
    {
    case 0:
    	printf("fault1");
 8004cda:	4810      	ldr	r0, [pc, #64]	; (8004d1c <MX_X_CUBE_AI_Process+0xdc>)
    case 3:
    	printf("Normal");
    	break;

    default:
    	printf("None");
 8004cdc:	f000 feba 	bl	8005a54 <iprintf>
		break;
    }
    printf("\r\n");
 8004ce0:	480f      	ldr	r0, [pc, #60]	; (8004d20 <MX_X_CUBE_AI_Process+0xe0>)

}
 8004ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    printf("\r\n");
 8004ce6:	f000 bf29 	b.w	8005b3c <puts>
    	printf("fault2");
 8004cea:	480e      	ldr	r0, [pc, #56]	; (8004d24 <MX_X_CUBE_AI_Process+0xe4>)
 8004cec:	e7f6      	b.n	8004cdc <MX_X_CUBE_AI_Process+0x9c>
    	printf("fault3");
 8004cee:	480e      	ldr	r0, [pc, #56]	; (8004d28 <MX_X_CUBE_AI_Process+0xe8>)
 8004cf0:	e7f4      	b.n	8004cdc <MX_X_CUBE_AI_Process+0x9c>
    	printf("Normal");
 8004cf2:	480e      	ldr	r0, [pc, #56]	; (8004d2c <MX_X_CUBE_AI_Process+0xec>)
 8004cf4:	e7f2      	b.n	8004cdc <MX_X_CUBE_AI_Process+0x9c>
    	printf("None");
 8004cf6:	480e      	ldr	r0, [pc, #56]	; (8004d30 <MX_X_CUBE_AI_Process+0xf0>)
 8004cf8:	e7f0      	b.n	8004cdc <MX_X_CUBE_AI_Process+0x9c>
 8004cfa:	bf00      	nop
 8004cfc:	f3af 8000 	nop.w
 8004d00:	d916872b 	.word	0xd916872b
 8004d04:	3fa3f7ce 	.word	0x3fa3f7ce
 8004d08:	2000104a 	.word	0x2000104a
 8004d0c:	20000534 	.word	0x20000534
 8004d10:	20001048 	.word	0x20001048
 8004d14:	20001052 	.word	0x20001052
 8004d18:	20001050 	.word	0x20001050
 8004d1c:	0800b383 	.word	0x0800b383
 8004d20:	0800b3ee 	.word	0x0800b3ee
 8004d24:	0800b38a 	.word	0x0800b38a
 8004d28:	0800b391 	.word	0x0800b391
 8004d2c:	0800b398 	.word	0x0800b398
 8004d30:	0800b39f 	.word	0x0800b39f

08004d34 <aiPrintLayoutBuffer>:
        return "UNKNOWN";
}

__STATIC_INLINE void aiPrintLayoutBuffer(const char *msg,
        const ai_buffer* buffer)
{
 8004d34:	b5f0      	push	{r4, r5, r6, r7, lr}
    Printf("%s HWC layout:%d,%d,%ld (s:%ld f:%s)\r\n",
 8004d36:	888a      	ldrh	r2, [r1, #4]
 8004d38:	88cb      	ldrh	r3, [r1, #6]
 8004d3a:	688e      	ldr	r6, [r1, #8]
 8004d3c:	880c      	ldrh	r4, [r1, #0]
    return buffer->height * buffer->width * buffer->channels;
 8004d3e:	fb03 f502 	mul.w	r5, r3, r2
{
 8004d42:	b085      	sub	sp, #20
    return buffer->height * buffer->width * buffer->channels;
 8004d44:	4375      	muls	r5, r6
    if (val == AI_BUFFER_FORMAT_NONE)
 8004d46:	b19c      	cbz	r4, 8004d70 <aiPrintLayoutBuffer+0x3c>
    else if (val == AI_BUFFER_FORMAT_FLOAT)
 8004d48:	2c01      	cmp	r4, #1
 8004d4a:	d013      	beq.n	8004d74 <aiPrintLayoutBuffer+0x40>
    else if (val == AI_BUFFER_FORMAT_U8)
 8004d4c:	2c10      	cmp	r4, #16
 8004d4e:	d013      	beq.n	8004d78 <aiPrintLayoutBuffer+0x44>
    else if (val == AI_BUFFER_FORMAT_Q15)
 8004d50:	2c32      	cmp	r4, #50	; 0x32
 8004d52:	d013      	beq.n	8004d7c <aiPrintLayoutBuffer+0x48>
        return "UNKNOWN";
 8004d54:	4f0a      	ldr	r7, [pc, #40]	; (8004d80 <aiPrintLayoutBuffer+0x4c>)
 8004d56:	490b      	ldr	r1, [pc, #44]	; (8004d84 <aiPrintLayoutBuffer+0x50>)
 8004d58:	2c31      	cmp	r4, #49	; 0x31
 8004d5a:	bf18      	it	ne
 8004d5c:	4639      	movne	r1, r7
    Printf("%s HWC layout:%d,%d,%ld (s:%ld f:%s)\r\n",
 8004d5e:	9102      	str	r1, [sp, #8]
 8004d60:	9501      	str	r5, [sp, #4]
 8004d62:	4601      	mov	r1, r0
 8004d64:	9600      	str	r6, [sp, #0]
 8004d66:	4808      	ldr	r0, [pc, #32]	; (8004d88 <aiPrintLayoutBuffer+0x54>)
 8004d68:	f000 fe74 	bl	8005a54 <iprintf>
      msg, buffer->height, buffer->width, buffer->channels,
      aiBufferSize(buffer),
      aiBufferFormatToStr(buffer->format));
}
 8004d6c:	b005      	add	sp, #20
 8004d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return "AI_BUFFER_FORMAT_NONE";
 8004d70:	4906      	ldr	r1, [pc, #24]	; (8004d8c <aiPrintLayoutBuffer+0x58>)
 8004d72:	e7f4      	b.n	8004d5e <aiPrintLayoutBuffer+0x2a>
        return "AI_BUFFER_FORMAT_FLOAT";
 8004d74:	4906      	ldr	r1, [pc, #24]	; (8004d90 <aiPrintLayoutBuffer+0x5c>)
 8004d76:	e7f2      	b.n	8004d5e <aiPrintLayoutBuffer+0x2a>
        return "AI_BUFFER_FORMAT_U8";
 8004d78:	4906      	ldr	r1, [pc, #24]	; (8004d94 <aiPrintLayoutBuffer+0x60>)
 8004d7a:	e7f0      	b.n	8004d5e <aiPrintLayoutBuffer+0x2a>
        return "AI_BUFFER_FORMAT_Q15";
 8004d7c:	4906      	ldr	r1, [pc, #24]	; (8004d98 <aiPrintLayoutBuffer+0x64>)
 8004d7e:	e7ee      	b.n	8004d5e <aiPrintLayoutBuffer+0x2a>
 8004d80:	0800b806 	.word	0x0800b806
 8004d84:	0800b7f2 	.word	0x0800b7f2
 8004d88:	0800b80e 	.word	0x0800b80e
 8004d8c:	0800b79c 	.word	0x0800b79c
 8004d90:	0800b7b2 	.word	0x0800b7b2
 8004d94:	0800b7c9 	.word	0x0800b7c9
 8004d98:	0800b7dd 	.word	0x0800b7dd

08004d9c <Process_Result>:
    return last_scores;
}

/* Process the final Result*/
uint8_t Process_Result(float * scores)
{
 8004d9c:	4a1f      	ldr	r2, [pc, #124]	; (8004e1c <Process_Result+0x80>)
        last_scores[i] = (1.0f - alpha) * last_scores[i] + alpha * scores[i];
 8004d9e:	ed9f 6a20 	vldr	s12, [pc, #128]	; 8004e20 <Process_Result+0x84>
 8004da2:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8004e24 <Process_Result+0x88>
 8004da6:	f100 0110 	add.w	r1, r0, #16
 8004daa:	4613      	mov	r3, r2
 8004dac:	ecf0 7a01 	vldmia	r0!, {s15}
 8004db0:	edd2 6a00 	vldr	s13, [r2]
 8004db4:	ee67 7a86 	vmul.f32	s15, s15, s12
    for (int i = 0; i < AI_NETWORK_OUT_1_SIZE; ++i)
 8004db8:	4281      	cmp	r1, r0
        last_scores[i] = (1.0f - alpha) * last_scores[i] + alpha * scores[i];
 8004dba:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004dbe:	ece2 7a01 	vstmia	r2!, {s15}
    for (int i = 0; i < AI_NETWORK_OUT_1_SIZE; ++i)
 8004dc2:	d1f3      	bne.n	8004dac <Process_Result+0x10>
        if (array[i] > max)
 8004dc4:	edd3 7a00 	vldr	s15, [r3]
 8004dc8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004e28 <Process_Result+0x8c>
 8004dcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd4:	bfd8      	it	le
 8004dd6:	eef0 7a47 	vmovle.f32	s15, s14
 8004dda:	ed93 7a01 	vldr	s14, [r3, #4]
 8004dde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de6:	bf58      	it	pl
 8004de8:	eeb0 7a67 	vmovpl.f32	s14, s15
 8004dec:	edd3 7a02 	vldr	s15, [r3, #8]
 8004df0:	eeb4 7ae7 	vcmpe.f32	s14, s15
            max_idx = i;
 8004df4:	bf4c      	ite	mi
 8004df6:	2001      	movmi	r0, #1
        if (array[i] > max)
 8004df8:	2000      	movpl	r0, #0
 8004dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dfe:	bf58      	it	pl
 8004e00:	eef0 7a47 	vmovpl.f32	s15, s14
 8004e04:	ed93 7a03 	vldr	s14, [r3, #12]
            max_idx = i;
 8004e08:	eeb4 7a67 	vcmp.f32	s14, s15
 8004e0c:	bf48      	it	mi
 8004e0e:	2002      	movmi	r0, #2
 8004e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    uint8_t result;
    result = MaxValue(exponential_average(scores, EXP_BETA_PARAM), AI_NETWORK_OUT_1_SIZE);
    return result;
}
 8004e14:	bfc8      	it	gt
 8004e16:	2003      	movgt	r0, #3
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	20000f94 	.word	0x20000f94
 8004e20:	3e4ccccd 	.word	0x3e4ccccd
 8004e24:	3f4ccccd 	.word	0x3f4ccccd
 8004e28:	ce6e6b28 	.word	0xce6e6b28

08004e2c <DATA_InitProcesser>:

/* Exported Functions --------------------------------------------------------*/

/* Initialize the AI Network and enable the CRC clock for using AI library on stm32*/
int8_t DATA_InitProcesser(void)
{
 8004e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ai_error err;
    if (network != AI_HANDLE_NULL)
 8004e30:	4d90      	ldr	r5, [pc, #576]	; (8005074 <DATA_InitProcesser+0x248>)
 8004e32:	682c      	ldr	r4, [r5, #0]
{
 8004e34:	b08c      	sub	sp, #48	; 0x30
 8004e36:	462e      	mov	r6, r5
    if (network != AI_HANDLE_NULL)
 8004e38:	b13c      	cbz	r4, 8004e4a <DATA_InitProcesser+0x1e>
    {
        Printf("\r\nAI Network already initialized...\r\n");
 8004e3a:	488f      	ldr	r0, [pc, #572]	; (8005078 <DATA_InitProcesser+0x24c>)
 8004e3c:	f000 fe7e 	bl	8005b3c <puts>
        return -1;
 8004e40:	f04f 30ff 	mov.w	r0, #4294967295
    FinalResultCode = ID_NONE;

    Printf("Initialized NN_IGN_WSDM HAR\r\n");

    return 0;
}
 8004e44:	b00c      	add	sp, #48	; 0x30
 8004e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FinalResultCode = ID_NONE;
 8004e4a:	4f8c      	ldr	r7, [pc, #560]	; (800507c <DATA_InitProcesser+0x250>)
    Printf("\r\nAI Network (AI platform API %d.%d.%d)...\r\n",
 8004e4c:	488c      	ldr	r0, [pc, #560]	; (8005080 <DATA_InitProcesser+0x254>)
    FinalResultCode = ID_NONE;
 8004e4e:	23ff      	movs	r3, #255	; 0xff
    Printf("\r\nAI Network (AI platform API %d.%d.%d)...\r\n",
 8004e50:	2101      	movs	r1, #1
    FinalResultCode = ID_NONE;
 8004e52:	703b      	strb	r3, [r7, #0]
    Printf("\r\nAI Network (AI platform API %d.%d.%d)...\r\n",
 8004e54:	4622      	mov	r2, r4
 8004e56:	4623      	mov	r3, r4
 8004e58:	f000 fdfc 	bl	8005a54 <iprintf>
    __HAL_RCC_CRC_CLK_ENABLE()
 8004e5c:	4b89      	ldr	r3, [pc, #548]	; (8005084 <DATA_InitProcesser+0x258>)
 8004e5e:	9403      	str	r4, [sp, #12]
 8004e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    Printf("Creating the network...\r\n");
 8004e62:	4889      	ldr	r0, [pc, #548]	; (8005088 <DATA_InitProcesser+0x25c>)
    __HAL_RCC_CRC_CLK_ENABLE()
 8004e64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e68:	631a      	str	r2, [r3, #48]	; 0x30
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e70:	9303      	str	r3, [sp, #12]
 8004e72:	9b03      	ldr	r3, [sp, #12]
    Printf("Creating the network...\r\n");
 8004e74:	f000 fe62 	bl	8005b3c <puts>
    err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8004e78:	4621      	mov	r1, r4
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	f7ff fdec 	bl	8004a58 <ai_network_create>
    if (err.type)
 8004e80:	f010 02ff 	ands.w	r2, r0, #255	; 0xff
 8004e84:	d007      	beq.n	8004e96 <DATA_InitProcesser+0x6a>
    Printf ("E: AI error (%s) - type=%d code=%d\r\n", fct,err.type, err.code);
 8004e86:	0a03      	lsrs	r3, r0, #8
 8004e88:	4980      	ldr	r1, [pc, #512]	; (800508c <DATA_InitProcesser+0x260>)
 8004e8a:	4881      	ldr	r0, [pc, #516]	; (8005090 <DATA_InitProcesser+0x264>)
 8004e8c:	f000 fde2 	bl	8005a54 <iprintf>
        return -3;
 8004e90:	f06f 0002 	mvn.w	r0, #2
 8004e94:	e7d6      	b.n	8004e44 <DATA_InitProcesser+0x18>
    if (ai_network_get_info(network, &report))
 8004e96:	4c7f      	ldr	r4, [pc, #508]	; (8005094 <DATA_InitProcesser+0x268>)
 8004e98:	6828      	ldr	r0, [r5, #0]
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	f7ff fd52 	bl	8004944 <ai_network_get_info>
 8004ea0:	4680      	mov	r8, r0
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	f000 8094 	beq.w	8004fd0 <DATA_InitProcesser+0x1a4>

__STATIC_INLINE void aiPrintNetworkInfo(const ai_network_report* report)
{
  Printf("Network configuration...\r\n");
 8004ea8:	487b      	ldr	r0, [pc, #492]	; (8005098 <DATA_InitProcesser+0x26c>)
 8004eaa:	f000 fe47 	bl	8005b3c <puts>
  Printf(" Model name         : %s\r\n", report->model_name);
 8004eae:	6821      	ldr	r1, [r4, #0]
 8004eb0:	487a      	ldr	r0, [pc, #488]	; (800509c <DATA_InitProcesser+0x270>)
 8004eb2:	f000 fdcf 	bl	8005a54 <iprintf>
  Printf(" Model signature    : %s\r\n", report->model_signature);
 8004eb6:	6861      	ldr	r1, [r4, #4]
 8004eb8:	4879      	ldr	r0, [pc, #484]	; (80050a0 <DATA_InitProcesser+0x274>)
 8004eba:	f000 fdcb 	bl	8005a54 <iprintf>
  Printf(" Model datetime     : %s\r\n", report->model_datetime);
 8004ebe:	68a1      	ldr	r1, [r4, #8]
 8004ec0:	4878      	ldr	r0, [pc, #480]	; (80050a4 <DATA_InitProcesser+0x278>)
 8004ec2:	f000 fdc7 	bl	8005a54 <iprintf>
  Printf(" Compile datetime   : %s\r\n", report->compile_datetime);
 8004ec6:	68e1      	ldr	r1, [r4, #12]
 8004ec8:	4877      	ldr	r0, [pc, #476]	; (80050a8 <DATA_InitProcesser+0x27c>)
 8004eca:	f000 fdc3 	bl	8005a54 <iprintf>
  Printf(" Runtime revision   : %s (%d.%d.%d)\r\n", report->runtime_revision,
 8004ece:	7da1      	ldrb	r1, [r4, #22]
 8004ed0:	7d63      	ldrb	r3, [r4, #21]
 8004ed2:	7d22      	ldrb	r2, [r4, #20]
 8004ed4:	9100      	str	r1, [sp, #0]
 8004ed6:	6921      	ldr	r1, [r4, #16]
 8004ed8:	4874      	ldr	r0, [pc, #464]	; (80050ac <DATA_InitProcesser+0x280>)
 8004eda:	f000 fdbb 	bl	8005a54 <iprintf>
    report->runtime_version.major,
    report->runtime_version.minor,
    report->runtime_version.micro);
  Printf(" Tool revision      : %s (%d.%d.%d)\r\n", report->tool_revision,
 8004ede:	7fa1      	ldrb	r1, [r4, #30]
 8004ee0:	7f22      	ldrb	r2, [r4, #28]
 8004ee2:	7f63      	ldrb	r3, [r4, #29]
 8004ee4:	9100      	str	r1, [sp, #0]
 8004ee6:	69a1      	ldr	r1, [r4, #24]
 8004ee8:	4871      	ldr	r0, [pc, #452]	; (80050b0 <DATA_InitProcesser+0x284>)
 8004eea:	f000 fdb3 	bl	8005a54 <iprintf>
    report->tool_version.major,
    report->tool_version.minor,
    report->tool_version.micro);
  Printf("Network info...\r\n");
 8004eee:	4871      	ldr	r0, [pc, #452]	; (80050b4 <DATA_InitProcesser+0x288>)
 8004ef0:	f000 fe24 	bl	8005b3c <puts>
  Printf("  signature         : 0x%lx\r\n", report->signature);
 8004ef4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004ef6:	4870      	ldr	r0, [pc, #448]	; (80050b8 <DATA_InitProcesser+0x28c>)
 8004ef8:	f000 fdac 	bl	8005a54 <iprintf>
  Printf("  nodes             : %ld\r\n", report->n_nodes);
 8004efc:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004efe:	486f      	ldr	r0, [pc, #444]	; (80050bc <DATA_InitProcesser+0x290>)
 8004f00:	f000 fda8 	bl	8005a54 <iprintf>
  Printf("  complexity        : %ld MACC\r\n", report->n_macc);
 8004f04:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004f06:	486e      	ldr	r0, [pc, #440]	; (80050c0 <DATA_InitProcesser+0x294>)
 8004f08:	f000 fda4 	bl	8005a54 <iprintf>
    return buffer->height * buffer->width * buffer->channels;
 8004f0c:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8004f10:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
  Printf("  activation        : %ld bytes\r\n", aiBufferSize(&report->activations));
 8004f14:	486b      	ldr	r0, [pc, #428]	; (80050c4 <DATA_InitProcesser+0x298>)
    return buffer->height * buffer->width * buffer->channels;
 8004f16:	434b      	muls	r3, r1
 8004f18:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  Printf("  activation        : %ld bytes\r\n", aiBufferSize(&report->activations));
 8004f1a:	4359      	muls	r1, r3
 8004f1c:	f000 fd9a 	bl	8005a54 <iprintf>
    return buffer->height * buffer->width * buffer->channels;
 8004f20:	f8b4 1068 	ldrh.w	r1, [r4, #104]	; 0x68
 8004f24:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  Printf("  weights           : %ld bytes\r\n", aiBufferSize(&report->weights));
 8004f28:	4867      	ldr	r0, [pc, #412]	; (80050c8 <DATA_InitProcesser+0x29c>)
    return buffer->height * buffer->width * buffer->channels;
 8004f2a:	434b      	muls	r3, r1
 8004f2c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  Printf("  weights           : %ld bytes\r\n", aiBufferSize(&report->weights));
 8004f2e:	4359      	muls	r1, r3
 8004f30:	f000 fd90 	bl	8005a54 <iprintf>
  Printf("  inputs/outputs    : %u/%u\r\n", report->n_inputs, report->n_outputs);
 8004f34:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8004f36:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8004f38:	4864      	ldr	r0, [pc, #400]	; (80050cc <DATA_InitProcesser+0x2a0>)
 8004f3a:	f000 fd8b 	bl	8005a54 <iprintf>
  aiPrintLayoutBuffer("  IN tensor format  :", &report->inputs);
 8004f3e:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8004f42:	4863      	ldr	r0, [pc, #396]	; (80050d0 <DATA_InitProcesser+0x2a4>)
 8004f44:	f7ff fef6 	bl	8004d34 <aiPrintLayoutBuffer>
  aiPrintLayoutBuffer("  OUT tensor format :", &report->outputs);
 8004f48:	f104 0144 	add.w	r1, r4, #68	; 0x44
 8004f4c:	4861      	ldr	r0, [pc, #388]	; (80050d4 <DATA_InitProcesser+0x2a8>)
 8004f4e:	f7ff fef1 	bl	8004d34 <aiPrintLayoutBuffer>
    return buffer->height * buffer->width * buffer->channels;
 8004f52:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8004f56:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
 8004f5a:	435a      	muls	r2, r3
 8004f5c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    if (aiBufferSize(&report->activations) != AI_NETWORK_DATA_ACTIVATIONS_SIZE)
 8004f5e:	f640 1134 	movw	r1, #2356	; 0x934
 8004f62:	4353      	muls	r3, r2
 8004f64:	428b      	cmp	r3, r1
 8004f66:	d00a      	beq.n	8004f7e <DATA_InitProcesser+0x152>
        Printf(
 8004f68:	485b      	ldr	r0, [pc, #364]	; (80050d8 <DATA_InitProcesser+0x2ac>)
        Printf(
 8004f6a:	f000 fd73 	bl	8005a54 <iprintf>
        ai_network_destroy(&network);
 8004f6e:	4841      	ldr	r0, [pc, #260]	; (8005074 <DATA_InitProcesser+0x248>)
 8004f70:	f7ff fd80 	bl	8004a74 <ai_network_destroy>
        network = AI_HANDLE_NULL;
 8004f74:	2300      	movs	r3, #0
 8004f76:	6033      	str	r3, [r6, #0]
        return -5;
 8004f78:	f06f 0004 	mvn.w	r0, #4
 8004f7c:	e762      	b.n	8004e44 <DATA_InitProcesser+0x18>
 8004f7e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8004f82:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8004f86:	435a      	muls	r2, r3
 8004f88:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    if (aiBufferSize(&report->weights) != AI_NETWORK_DATA_WEIGHTS_SIZE)
 8004f8a:	f643 5160 	movw	r1, #15712	; 0x3d60
 8004f8e:	4353      	muls	r3, r2
 8004f90:	428b      	cmp	r3, r1
 8004f92:	d001      	beq.n	8004f98 <DATA_InitProcesser+0x16c>
        Printf(
 8004f94:	4851      	ldr	r0, [pc, #324]	; (80050dc <DATA_InitProcesser+0x2b0>)
 8004f96:	e7e8      	b.n	8004f6a <DATA_InitProcesser+0x13e>
    if ((AI_NETWORK_IN_NUM != report->n_inputs)
 8004f98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f9a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8004f9e:	d003      	beq.n	8004fa8 <DATA_InitProcesser+0x17c>
        Printf("only one input and one output is supported\r\n");
 8004fa0:	484f      	ldr	r0, [pc, #316]	; (80050e0 <DATA_InitProcesser+0x2b4>)
        Printf("input width unconsistancy\r\n");
 8004fa2:	f000 fdcb 	bl	8005b3c <puts>
 8004fa6:	e7e2      	b.n	8004f6e <DATA_InitProcesser+0x142>
    if ((ai_input[0].format != AI_NETWORK_IN_1_FORMAT)
 8004fa8:	4b4e      	ldr	r3, [pc, #312]	; (80050e4 <DATA_InitProcesser+0x2b8>)
 8004faa:	881a      	ldrh	r2, [r3, #0]
 8004fac:	2a01      	cmp	r2, #1
 8004fae:	d103      	bne.n	8004fb8 <DATA_InitProcesser+0x18c>
            || (ai_output[0].format != AI_NETWORK_OUT_1_FORMAT))
 8004fb0:	4a4d      	ldr	r2, [pc, #308]	; (80050e8 <DATA_InitProcesser+0x2bc>)
 8004fb2:	8812      	ldrh	r2, [r2, #0]
 8004fb4:	2a01      	cmp	r2, #1
 8004fb6:	d001      	beq.n	8004fbc <DATA_InitProcesser+0x190>
        Printf("input or output format unconsistancy\r\n");
 8004fb8:	484c      	ldr	r0, [pc, #304]	; (80050ec <DATA_InitProcesser+0x2c0>)
 8004fba:	e7f2      	b.n	8004fa2 <DATA_InitProcesser+0x176>
    if (AI_NETWORK_IN_1_WIDTH != ai_input[0].width)
 8004fbc:	88da      	ldrh	r2, [r3, #6]
 8004fbe:	2a03      	cmp	r2, #3
 8004fc0:	d001      	beq.n	8004fc6 <DATA_InitProcesser+0x19a>
        Printf("input width unconsistancy\r\n");
 8004fc2:	484b      	ldr	r0, [pc, #300]	; (80050f0 <DATA_InitProcesser+0x2c4>)
 8004fc4:	e7ed      	b.n	8004fa2 <DATA_InitProcesser+0x176>
    if (AI_NETWORK_IN_1_HEIGHT != ai_input[0].height)
 8004fc6:	889b      	ldrh	r3, [r3, #4]
 8004fc8:	2b18      	cmp	r3, #24
 8004fca:	d019      	beq.n	8005000 <DATA_InitProcesser+0x1d4>
        Printf(" input height unconsistancy\r\n");
 8004fcc:	4849      	ldr	r0, [pc, #292]	; (80050f4 <DATA_InitProcesser+0x2c8>)
 8004fce:	e7e8      	b.n	8004fa2 <DATA_InitProcesser+0x176>
        err = ai_network_get_error(network);
 8004fd0:	6828      	ldr	r0, [r5, #0]
 8004fd2:	f7ff fd3d 	bl	8004a50 <ai_network_get_error>
    Printf ("E: AI error (%s) - type=%d code=%d\r\n", fct,err.type, err.code);
 8004fd6:	4948      	ldr	r1, [pc, #288]	; (80050f8 <DATA_InitProcesser+0x2cc>)
 8004fd8:	0a03      	lsrs	r3, r0, #8
 8004fda:	b2c2      	uxtb	r2, r0
 8004fdc:	482c      	ldr	r0, [pc, #176]	; (8005090 <DATA_InitProcesser+0x264>)
 8004fde:	f000 fd39 	bl	8005a54 <iprintf>
        ai_network_destroy(&network);
 8004fe2:	4628      	mov	r0, r5
 8004fe4:	f7ff fd46 	bl	8004a74 <ai_network_destroy>
        network = AI_HANDLE_NULL;
 8004fe8:	f8c5 8000 	str.w	r8, [r5]
        return -4;
 8004fec:	f06f 0003 	mvn.w	r0, #3
 8004ff0:	e728      	b.n	8004e44 <DATA_InitProcesser+0x18>
    FinalResultCode = ID_NONE;
 8004ff2:	23ff      	movs	r3, #255	; 0xff
    Printf("Initialized NN_IGN_WSDM HAR\r\n");
 8004ff4:	4841      	ldr	r0, [pc, #260]	; (80050fc <DATA_InitProcesser+0x2d0>)
    FinalResultCode = ID_NONE;
 8004ff6:	703b      	strb	r3, [r7, #0]
    Printf("Initialized NN_IGN_WSDM HAR\r\n");
 8004ff8:	f000 fda0 	bl	8005b3c <puts>
    return 0;
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	e721      	b.n	8004e44 <DATA_InitProcesser+0x18>
    Printf("Initializing the network...\r\n");
 8005000:	483f      	ldr	r0, [pc, #252]	; (8005100 <DATA_InitProcesser+0x2d4>)
 8005002:	f000 fd9b 	bl	8005b3c <puts>
    const ai_network_params params = {
 8005006:	f248 0310 	movw	r3, #32784	; 0x8010
 800500a:	2401      	movs	r4, #1
 800500c:	f8ad 3010 	strh.w	r3, [sp, #16]
 8005010:	f643 5360 	movw	r3, #15712	; 0x3d60
 8005014:	f8ad 4012 	strh.w	r4, [sp, #18]
 8005018:	f8ad 4014 	strh.w	r4, [sp, #20]
 800501c:	f8ad 4016 	strh.w	r4, [sp, #22]
 8005020:	9306      	str	r3, [sp, #24]
    AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 8005022:	f7ff fc8b 	bl	800493c <ai_network_data_weights_get>
    const ai_network_params params = {
 8005026:	2310      	movs	r3, #16
 8005028:	f8ad 3020 	strh.w	r3, [sp, #32]
 800502c:	f640 1334 	movw	r3, #2356	; 0x934
 8005030:	9007      	str	r0, [sp, #28]
 8005032:	930a      	str	r3, [sp, #40]	; 0x28
    if (!ai_network_init(network, &params))
 8005034:	a904      	add	r1, sp, #16
    const ai_network_params params = {
 8005036:	4b33      	ldr	r3, [pc, #204]	; (8005104 <DATA_InitProcesser+0x2d8>)
    if (!ai_network_init(network, &params))
 8005038:	6828      	ldr	r0, [r5, #0]
    const ai_network_params params = {
 800503a:	f8ad 4022 	strh.w	r4, [sp, #34]	; 0x22
 800503e:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
 8005042:	f8ad 4026 	strh.w	r4, [sp, #38]	; 0x26
 8005046:	930b      	str	r3, [sp, #44]	; 0x2c
    if (!ai_network_init(network, &params))
 8005048:	f7ff fd16 	bl	8004a78 <ai_network_init>
 800504c:	4604      	mov	r4, r0
 800504e:	2800      	cmp	r0, #0
 8005050:	d1cf      	bne.n	8004ff2 <DATA_InitProcesser+0x1c6>
        err = ai_network_get_error(network);
 8005052:	6830      	ldr	r0, [r6, #0]
 8005054:	f7ff fcfc 	bl	8004a50 <ai_network_get_error>
 8005058:	492b      	ldr	r1, [pc, #172]	; (8005108 <DATA_InitProcesser+0x2dc>)
 800505a:	0a03      	lsrs	r3, r0, #8
 800505c:	b2c2      	uxtb	r2, r0
 800505e:	480c      	ldr	r0, [pc, #48]	; (8005090 <DATA_InitProcesser+0x264>)
 8005060:	f000 fcf8 	bl	8005a54 <iprintf>
        ai_network_destroy(&network);
 8005064:	4803      	ldr	r0, [pc, #12]	; (8005074 <DATA_InitProcesser+0x248>)
 8005066:	f7ff fd05 	bl	8004a74 <ai_network_destroy>
        network = AI_HANDLE_NULL;
 800506a:	6034      	str	r4, [r6, #0]
        return -6;
 800506c:	f06f 0005 	mvn.w	r0, #5
 8005070:	e6e8      	b.n	8004e44 <DATA_InitProcesser+0x18>
 8005072:	bf00      	nop
 8005074:	20000fa8 	.word	0x20000fa8
 8005078:	0800b3cb 	.word	0x0800b3cb
 800507c:	2000046c 	.word	0x2000046c
 8005080:	0800b3f0 	.word	0x0800b3f0
 8005084:	40023800 	.word	0x40023800
 8005088:	0800b41d 	.word	0x0800b41d
 800508c:	0800b436 	.word	0x0800b436
 8005090:	0800b448 	.word	0x0800b448
 8005094:	20000fbc 	.word	0x20000fbc
 8005098:	0800b46d 	.word	0x0800b46d
 800509c:	0800b487 	.word	0x0800b487
 80050a0:	0800b4a2 	.word	0x0800b4a2
 80050a4:	0800b4bd 	.word	0x0800b4bd
 80050a8:	0800b4d8 	.word	0x0800b4d8
 80050ac:	0800b4f3 	.word	0x0800b4f3
 80050b0:	0800b519 	.word	0x0800b519
 80050b4:	0800b53f 	.word	0x0800b53f
 80050b8:	0800b550 	.word	0x0800b550
 80050bc:	0800b56e 	.word	0x0800b56e
 80050c0:	0800b58a 	.word	0x0800b58a
 80050c4:	0800b5ab 	.word	0x0800b5ab
 80050c8:	0800b5cd 	.word	0x0800b5cd
 80050cc:	0800b5ef 	.word	0x0800b5ef
 80050d0:	0800b60d 	.word	0x0800b60d
 80050d4:	0800b623 	.word	0x0800b623
 80050d8:	0800b639 	.word	0x0800b639
 80050dc:	0800b678 	.word	0x0800b678
 80050e0:	0800b6b4 	.word	0x0800b6b4
 80050e4:	20000470 	.word	0x20000470
 80050e8:	20000480 	.word	0x20000480
 80050ec:	0800b6e0 	.word	0x0800b6e0
 80050f0:	0800b706 	.word	0x0800b706
 80050f4:	0800b721 	.word	0x0800b721
 80050f8:	0800b73e 	.word	0x0800b73e
 80050fc:	0800b762 	.word	0x0800b762
 8005100:	0800b77f 	.word	0x0800b77f
 8005104:	20000540 	.word	0x20000540
 8005108:	0800b752 	.word	0x0800b752

0800510c <DATA_Infer>:

/* ------------------------Run inference on the data collected -----------------------------------*/
uint8_t DATA_Infer(DATA_input_t ACC_Value)
{
 800510c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    static ai_float out[AI_NETWORK_OUT_1_SIZE];
    ai_i32 batch;

    if (AI_HANDLE_NULL == network)
 800510e:	4e1b      	ldr	r6, [pc, #108]	; (800517c <DATA_Infer+0x70>)
 8005110:	6830      	ldr	r0, [r6, #0]
 8005112:	b928      	cbnz	r0, 8005120 <DATA_Infer+0x14>
    {
        Printf("network handle is NULL\r\n");
 8005114:	481a      	ldr	r0, [pc, #104]	; (8005180 <DATA_Infer+0x74>)
 8005116:	f000 fd11 	bl	8005b3c <puts>
        return ID_NONE ;
 800511a:	20ff      	movs	r0, #255	; 0xff
        n_sample = 0;
    }

    return FinalResultCode;

}
 800511c:	b004      	add	sp, #16
 800511e:	bd70      	pop	{r4, r5, r6, pc}
    data_sample_buffer[n_sample++] = ACC_Value.AccX;
 8005120:	4918      	ldr	r1, [pc, #96]	; (8005184 <DATA_Infer+0x78>)
 8005122:	4a19      	ldr	r2, [pc, #100]	; (8005188 <DATA_Infer+0x7c>)
 8005124:	680b      	ldr	r3, [r1, #0]
 8005126:	4d19      	ldr	r5, [pc, #100]	; (800518c <DATA_Infer+0x80>)
 8005128:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 800512c:	ed84 0a00 	vstr	s0, [r4]
    data_sample_buffer[n_sample++] = ACC_Value.AccY;
 8005130:	edc4 0a01 	vstr	s1, [r4, #4]
    data_sample_buffer[n_sample++] = ACC_Value.AccZ;
 8005134:	1cdc      	adds	r4, r3, #3
    if (n_sample >= AI_NETWORK_IN_1_SIZE)
 8005136:	2c47      	cmp	r4, #71	; 0x47
    data_sample_buffer[n_sample++] = ACC_Value.AccZ;
 8005138:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800513c:	600c      	str	r4, [r1, #0]
 800513e:	ed83 1a02 	vstr	s2, [r3, #8]
 8005142:	460c      	mov	r4, r1
    if (n_sample >= AI_NETWORK_IN_1_SIZE)
 8005144:	d917      	bls.n	8005176 <DATA_Infer+0x6a>
        ai_input[0].data = AI_HANDLE_PTR(&data_sample_buffer);
 8005146:	4912      	ldr	r1, [pc, #72]	; (8005190 <DATA_Infer+0x84>)
        ai_output[0].data = AI_HANDLE_PTR(out);
 8005148:	4b12      	ldr	r3, [pc, #72]	; (8005194 <DATA_Infer+0x88>)
        ai_input[0].data = AI_HANDLE_PTR(&data_sample_buffer);
 800514a:	60ca      	str	r2, [r1, #12]
        ai_output[0].data = AI_HANDLE_PTR(out);
 800514c:	4a12      	ldr	r2, [pc, #72]	; (8005198 <DATA_Infer+0x8c>)
 800514e:	60d3      	str	r3, [r2, #12]
        batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8005150:	f7ff fd0c 	bl	8004b6c <ai_network_run>
        if (batch != 1)
 8005154:	2801      	cmp	r0, #1
 8005156:	d008      	beq.n	800516a <DATA_Infer+0x5e>
            aiLogErr(ai_network_get_error(network), "ai_network_run");
 8005158:	6830      	ldr	r0, [r6, #0]
 800515a:	f7ff fc79 	bl	8004a50 <ai_network_get_error>
 800515e:	490f      	ldr	r1, [pc, #60]	; (800519c <DATA_Infer+0x90>)
 8005160:	0a03      	lsrs	r3, r0, #8
 8005162:	b2c2      	uxtb	r2, r0
 8005164:	480e      	ldr	r0, [pc, #56]	; (80051a0 <DATA_Infer+0x94>)
 8005166:	f000 fc75 	bl	8005a54 <iprintf>
        FinalResultCode = Process_Result(out);
 800516a:	480a      	ldr	r0, [pc, #40]	; (8005194 <DATA_Infer+0x88>)
 800516c:	f7ff fe16 	bl	8004d9c <Process_Result>
        n_sample = 0;
 8005170:	2300      	movs	r3, #0
        FinalResultCode = Process_Result(out);
 8005172:	7028      	strb	r0, [r5, #0]
        n_sample = 0;
 8005174:	6023      	str	r3, [r4, #0]
    return FinalResultCode;
 8005176:	7828      	ldrb	r0, [r5, #0]
 8005178:	e7d0      	b.n	800511c <DATA_Infer+0x10>
 800517a:	bf00      	nop
 800517c:	20000fa8 	.word	0x20000fa8
 8005180:	0800b3a4 	.word	0x0800b3a4
 8005184:	20000fa4 	.word	0x20000fa4
 8005188:	20000e74 	.word	0x20000e74
 800518c:	2000046c 	.word	0x2000046c
 8005190:	20000470 	.word	0x20000470
 8005194:	20000fac 	.word	0x20000fac
 8005198:	20000480 	.word	0x20000480
 800519c:	0800b3bc 	.word	0x0800b3bc
 80051a0:	0800b448 	.word	0x0800b448

080051a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80051a4:	b530      	push	{r4, r5, lr}
 80051a6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80051a8:	2234      	movs	r2, #52	; 0x34
 80051aa:	2100      	movs	r1, #0
 80051ac:	a807      	add	r0, sp, #28
 80051ae:	f000 fb9d 	bl	80058ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80051b2:	2100      	movs	r1, #0
 80051b4:	2214      	movs	r2, #20
 80051b6:	a802      	add	r0, sp, #8
 80051b8:	f000 fb98 	bl	80058ec <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80051bc:	2500      	movs	r5, #0
 80051be:	4b1e      	ldr	r3, [pc, #120]	; (8005238 <SystemClock_Config+0x94>)
 80051c0:	9500      	str	r5, [sp, #0]
 80051c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80051c8:	641a      	str	r2, [r3, #64]	; 0x40
 80051ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80051d4:	4b19      	ldr	r3, [pc, #100]	; (800523c <SystemClock_Config+0x98>)
 80051d6:	9501      	str	r5, [sp, #4]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80051e6:	9301      	str	r3, [sp, #4]
 80051e8:	9b01      	ldr	r3, [sp, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80051ea:	2301      	movs	r3, #1
 80051ec:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80051ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051f2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80051f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80051f8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80051fa:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80051fc:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 80051fe:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005200:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005202:	23b4      	movs	r3, #180	; 0xb4
 8005204:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005206:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005208:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800520a:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800520c:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800520e:	f7ff f82d 	bl	800426c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005212:	f7fe feed 	bl	8003ff0 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005216:	230f      	movs	r3, #15
 8005218:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800521a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800521e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005220:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005226:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005228:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800522a:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800522c:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800522e:	f7fe ff1b 	bl	8004068 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8005232:	b015      	add	sp, #84	; 0x54
 8005234:	bd30      	pop	{r4, r5, pc}
 8005236:	bf00      	nop
 8005238:	40023800 	.word	0x40023800
 800523c:	40007000 	.word	0x40007000

08005240 <main>:
{
 8005240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_Init();
 8005242:	f7fe f94d 	bl	80034e0 <HAL_Init>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005246:	2400      	movs	r4, #0
  SystemClock_Config();
 8005248:	f7ff ffac 	bl	80051a4 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800524c:	4b1c      	ldr	r3, [pc, #112]	; (80052c0 <main+0x80>)
 800524e:	9401      	str	r4, [sp, #4]
 8005250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  hcrc.Instance = CRC;
 8005252:	481c      	ldr	r0, [pc, #112]	; (80052c4 <main+0x84>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005254:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005258:	631a      	str	r2, [r3, #48]	; 0x30
 800525a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800525c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005260:	9201      	str	r2, [sp, #4]
 8005262:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005264:	9402      	str	r4, [sp, #8]
 8005266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005268:	f042 0201 	orr.w	r2, r2, #1
 800526c:	631a      	str	r2, [r3, #48]	; 0x30
 800526e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005270:	f002 0201 	and.w	r2, r2, #1
 8005274:	9202      	str	r2, [sp, #8]
 8005276:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005278:	9403      	str	r4, [sp, #12]
 800527a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800527c:	f042 0202 	orr.w	r2, r2, #2
 8005280:	631a      	str	r2, [r3, #48]	; 0x30
 8005282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	9303      	str	r3, [sp, #12]
 800528a:	9b03      	ldr	r3, [sp, #12]
  hcrc.Instance = CRC;
 800528c:	4b0e      	ldr	r3, [pc, #56]	; (80052c8 <main+0x88>)
 800528e:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8005290:	f7fe f9c2 	bl	8003618 <HAL_CRC_Init>
  hi2c1.Instance = I2C1;
 8005294:	480d      	ldr	r0, [pc, #52]	; (80052cc <main+0x8c>)
  hi2c1.Init.ClockSpeed = 400000;
 8005296:	4a0e      	ldr	r2, [pc, #56]	; (80052d0 <main+0x90>)
 8005298:	4b0e      	ldr	r3, [pc, #56]	; (80052d4 <main+0x94>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800529a:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 400000;
 800529c:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80052a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80052a4:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress1 = 0;
 80052a6:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80052a8:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80052aa:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80052ac:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80052ae:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80052b0:	f7fe fc20 	bl	8003af4 <HAL_I2C_Init>
  MX_X_CUBE_AI_Init();
 80052b4:	f7ff fcb0 	bl	8004c18 <MX_X_CUBE_AI_Init>
  MX_X_CUBE_AI_Process();
 80052b8:	f7ff fcc2 	bl	8004c40 <MX_X_CUBE_AI_Process>
 80052bc:	e7fc      	b.n	80052b8 <main+0x78>
 80052be:	bf00      	nop
 80052c0:	40023800 	.word	0x40023800
 80052c4:	200010a8 	.word	0x200010a8
 80052c8:	40023000 	.word	0x40023000
 80052cc:	20001054 	.word	0x20001054
 80052d0:	40005400 	.word	0x40005400
 80052d4:	00061a80 	.word	0x00061a80

080052d8 <MX_USART2_UART_Init>:
  huart2.Instance = USART2;
 80052d8:	4807      	ldr	r0, [pc, #28]	; (80052f8 <MX_USART2_UART_Init+0x20>)
  huart2.Init.BaudRate = 9600;
 80052da:	4b08      	ldr	r3, [pc, #32]	; (80052fc <MX_USART2_UART_Init+0x24>)
 80052dc:	f44f 5c16 	mov.w	ip, #9600	; 0x2580
 80052e0:	e880 1008 	stmia.w	r0, {r3, ip}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80052e4:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80052e6:	2300      	movs	r3, #0
 80052e8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80052ea:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80052ec:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80052ee:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052f0:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80052f2:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80052f4:	f7ff ba96 	b.w	8004824 <HAL_UART_Init>
 80052f8:	200010b0 	.word	0x200010b0
 80052fc:	40004400 	.word	0x40004400

08005300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005300:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005302:	4b0c      	ldr	r3, [pc, #48]	; (8005334 <HAL_MspInit+0x34>)
 8005304:	2100      	movs	r1, #0
 8005306:	9100      	str	r1, [sp, #0]
 8005308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800530a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800530e:	645a      	str	r2, [r3, #68]	; 0x44
 8005310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005312:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005316:	9200      	str	r2, [sp, #0]
 8005318:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800531a:	9101      	str	r1, [sp, #4]
 800531c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800531e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005322:	641a      	str	r2, [r3, #64]	; 0x40
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800532a:	9301      	str	r3, [sp, #4]
 800532c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800532e:	b002      	add	sp, #8
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	40023800 	.word	0x40023800

08005338 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8005338:	6802      	ldr	r2, [r0, #0]
 800533a:	4b09      	ldr	r3, [pc, #36]	; (8005360 <HAL_CRC_MspInit+0x28>)
 800533c:	429a      	cmp	r2, r3
{
 800533e:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8005340:	d10b      	bne.n	800535a <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8005342:	2300      	movs	r3, #0
 8005344:	9301      	str	r3, [sp, #4]
 8005346:	4b07      	ldr	r3, [pc, #28]	; (8005364 <HAL_CRC_MspInit+0x2c>)
 8005348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800534a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800534e:	631a      	str	r2, [r3, #48]	; 0x30
 8005350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005352:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005356:	9301      	str	r3, [sp, #4]
 8005358:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800535a:	b002      	add	sp, #8
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	40023000 	.word	0x40023000
 8005364:	40023800 	.word	0x40023800

08005368 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005368:	b530      	push	{r4, r5, lr}
 800536a:	4604      	mov	r4, r0
 800536c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800536e:	2214      	movs	r2, #20
 8005370:	2100      	movs	r1, #0
 8005372:	a803      	add	r0, sp, #12
 8005374:	f000 faba 	bl	80058ec <memset>
  if(hi2c->Instance==I2C1)
 8005378:	6822      	ldr	r2, [r4, #0]
 800537a:	4b15      	ldr	r3, [pc, #84]	; (80053d0 <HAL_I2C_MspInit+0x68>)
 800537c:	429a      	cmp	r2, r3
 800537e:	d124      	bne.n	80053ca <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005380:	4c14      	ldr	r4, [pc, #80]	; (80053d4 <HAL_I2C_MspInit+0x6c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005382:	4815      	ldr	r0, [pc, #84]	; (80053d8 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005384:	2500      	movs	r5, #0
 8005386:	9501      	str	r5, [sp, #4]
 8005388:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800538a:	f043 0302 	orr.w	r3, r3, #2
 800538e:	6323      	str	r3, [r4, #48]	; 0x30
 8005390:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	9301      	str	r3, [sp, #4]
 8005398:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800539a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800539e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80053a0:	2312      	movs	r3, #18
 80053a2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80053a4:	2301      	movs	r3, #1
 80053a6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053a8:	2303      	movs	r3, #3
 80053aa:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053ac:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80053ae:	2304      	movs	r3, #4
 80053b0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053b2:	f7fe f943 	bl	800363c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80053b6:	9502      	str	r5, [sp, #8]
 80053b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053be:	6423      	str	r3, [r4, #64]	; 0x40
 80053c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053c6:	9302      	str	r3, [sp, #8]
 80053c8:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80053ca:	b009      	add	sp, #36	; 0x24
 80053cc:	bd30      	pop	{r4, r5, pc}
 80053ce:	bf00      	nop
 80053d0:	40005400 	.word	0x40005400
 80053d4:	40023800 	.word	0x40023800
 80053d8:	40020400 	.word	0x40020400

080053dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80053dc:	b510      	push	{r4, lr}
 80053de:	4604      	mov	r4, r0
 80053e0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053e2:	2214      	movs	r2, #20
 80053e4:	2100      	movs	r1, #0
 80053e6:	a803      	add	r0, sp, #12
 80053e8:	f000 fa80 	bl	80058ec <memset>
  if(huart->Instance==USART2)
 80053ec:	6822      	ldr	r2, [r4, #0]
 80053ee:	4b15      	ldr	r3, [pc, #84]	; (8005444 <HAL_UART_MspInit+0x68>)
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d124      	bne.n	800543e <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80053f4:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80053f8:	2100      	movs	r1, #0
 80053fa:	9101      	str	r1, [sp, #4]
 80053fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053fe:	4812      	ldr	r0, [pc, #72]	; (8005448 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8005400:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005404:	641a      	str	r2, [r3, #64]	; 0x40
 8005406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005408:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800540c:	9201      	str	r2, [sp, #4]
 800540e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005410:	9102      	str	r1, [sp, #8]
 8005412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005414:	f042 0201 	orr.w	r2, r2, #1
 8005418:	631a      	str	r2, [r3, #48]	; 0x30
 800541a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	9302      	str	r3, [sp, #8]
 8005422:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005424:	230c      	movs	r3, #12
 8005426:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005428:	2302      	movs	r3, #2
 800542a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800542c:	2301      	movs	r3, #1
 800542e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005430:	2303      	movs	r3, #3
 8005432:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005434:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005436:	2307      	movs	r3, #7
 8005438:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800543a:	f7fe f8ff 	bl	800363c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800543e:	b008      	add	sp, #32
 8005440:	bd10      	pop	{r4, pc}
 8005442:	bf00      	nop
 8005444:	40004400 	.word	0x40004400
 8005448:	40020000 	.word	0x40020000

0800544c <NMI_Handler>:
 800544c:	4770      	bx	lr

0800544e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800544e:	e7fe      	b.n	800544e <HardFault_Handler>

08005450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005450:	e7fe      	b.n	8005450 <MemManage_Handler>

08005452 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005452:	e7fe      	b.n	8005452 <BusFault_Handler>

08005454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005454:	e7fe      	b.n	8005454 <UsageFault_Handler>

08005456 <SVC_Handler>:
 8005456:	4770      	bx	lr

08005458 <DebugMon_Handler>:
 8005458:	4770      	bx	lr

0800545a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800545a:	4770      	bx	lr

0800545c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800545c:	f7fe b85a 	b.w	8003514 <HAL_IncTick>

08005460 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005460:	b570      	push	{r4, r5, r6, lr}
 8005462:	460e      	mov	r6, r1
 8005464:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005466:	460c      	mov	r4, r1
 8005468:	1ba3      	subs	r3, r4, r6
 800546a:	429d      	cmp	r5, r3
 800546c:	dc01      	bgt.n	8005472 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800546e:	4628      	mov	r0, r5
 8005470:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8005472:	f3af 8000 	nop.w
 8005476:	f804 0b01 	strb.w	r0, [r4], #1
 800547a:	e7f5      	b.n	8005468 <_read+0x8>

0800547c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800547c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800547e:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <_sbrk+0x2c>)
 8005480:	6819      	ldr	r1, [r3, #0]
{
 8005482:	4602      	mov	r2, r0
	if (heap_end == 0)
 8005484:	b909      	cbnz	r1, 800548a <_sbrk+0xe>
		heap_end = &end;
 8005486:	4909      	ldr	r1, [pc, #36]	; (80054ac <_sbrk+0x30>)
 8005488:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800548a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800548c:	4669      	mov	r1, sp
 800548e:	4402      	add	r2, r0
 8005490:	428a      	cmp	r2, r1
 8005492:	d906      	bls.n	80054a2 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005494:	f000 f86a 	bl	800556c <__errno>
 8005498:	230c      	movs	r3, #12
 800549a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800549c:	f04f 30ff 	mov.w	r0, #4294967295
 80054a0:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80054a2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80054a4:	bd08      	pop	{r3, pc}
 80054a6:	bf00      	nop
 80054a8:	20001038 	.word	0x20001038
 80054ac:	200010f4 	.word	0x200010f4

080054b0 <_close>:

int _close(int file)
{
	return -1;
}
 80054b0:	f04f 30ff 	mov.w	r0, #4294967295
 80054b4:	4770      	bx	lr

080054b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80054b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054ba:	604b      	str	r3, [r1, #4]
	return 0;
}
 80054bc:	2000      	movs	r0, #0
 80054be:	4770      	bx	lr

080054c0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80054c0:	2001      	movs	r0, #1
 80054c2:	4770      	bx	lr

080054c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80054c4:	2000      	movs	r0, #0
 80054c6:	4770      	bx	lr

080054c8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80054c8:	490f      	ldr	r1, [pc, #60]	; (8005508 <SystemInit+0x40>)
 80054ca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80054ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80054d6:	4b0d      	ldr	r3, [pc, #52]	; (800550c <SystemInit+0x44>)
 80054d8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80054da:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80054dc:	f042 0201 	orr.w	r2, r2, #1
 80054e0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80054e2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80054ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80054ee:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80054f0:	4a07      	ldr	r2, [pc, #28]	; (8005510 <SystemInit+0x48>)
 80054f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054fa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80054fc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80054fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005502:	608b      	str	r3, [r1, #8]
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	e000ed00 	.word	0xe000ed00
 800550c:	40023800 	.word	0x40023800
 8005510:	24003010 	.word	0x24003010

08005514 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005514:	f8df d034 	ldr.w	sp, [pc, #52]	; 800554c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005518:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800551a:	e003      	b.n	8005524 <LoopCopyDataInit>

0800551c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800551c:	4b0c      	ldr	r3, [pc, #48]	; (8005550 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800551e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005520:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005522:	3104      	adds	r1, #4

08005524 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005524:	480b      	ldr	r0, [pc, #44]	; (8005554 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005526:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005528:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800552a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800552c:	d3f6      	bcc.n	800551c <CopyDataInit>
  ldr  r2, =_sbss
 800552e:	4a0b      	ldr	r2, [pc, #44]	; (800555c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005530:	e002      	b.n	8005538 <LoopFillZerobss>

08005532 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005532:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005534:	f842 3b04 	str.w	r3, [r2], #4

08005538 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005538:	4b09      	ldr	r3, [pc, #36]	; (8005560 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800553a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800553c:	d3f9      	bcc.n	8005532 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800553e:	f7ff ffc3 	bl	80054c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005542:	f000 f995 	bl	8005870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005546:	f7ff fe7b 	bl	8005240 <main>
  bx  lr    
 800554a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800554c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005550:	0800b948 	.word	0x0800b948
  ldr  r0, =_sdata
 8005554:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005558:	200004fc 	.word	0x200004fc
  ldr  r2, =_sbss
 800555c:	200004fc 	.word	0x200004fc
  ldr  r3, = _ebss
 8005560:	200010f4 	.word	0x200010f4

08005564 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005564:	e7fe      	b.n	8005564 <ADC_IRQHandler>

08005566 <__aeabi_memcpy>:
 8005566:	f000 b9b6 	b.w	80058d6 <memcpy>
	...

0800556c <__errno>:
 800556c:	4b01      	ldr	r3, [pc, #4]	; (8005574 <__errno+0x8>)
 800556e:	6818      	ldr	r0, [r3, #0]
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	20000494 	.word	0x20000494

08005578 <__sflush_r>:
 8005578:	898a      	ldrh	r2, [r1, #12]
 800557a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800557e:	4605      	mov	r5, r0
 8005580:	0710      	lsls	r0, r2, #28
 8005582:	460c      	mov	r4, r1
 8005584:	d45a      	bmi.n	800563c <__sflush_r+0xc4>
 8005586:	684b      	ldr	r3, [r1, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	dc05      	bgt.n	8005598 <__sflush_r+0x20>
 800558c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800558e:	2b00      	cmp	r3, #0
 8005590:	dc02      	bgt.n	8005598 <__sflush_r+0x20>
 8005592:	2000      	movs	r0, #0
 8005594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005598:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800559a:	2e00      	cmp	r6, #0
 800559c:	d0f9      	beq.n	8005592 <__sflush_r+0x1a>
 800559e:	2300      	movs	r3, #0
 80055a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80055a4:	682f      	ldr	r7, [r5, #0]
 80055a6:	602b      	str	r3, [r5, #0]
 80055a8:	d033      	beq.n	8005612 <__sflush_r+0x9a>
 80055aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055ac:	89a3      	ldrh	r3, [r4, #12]
 80055ae:	075a      	lsls	r2, r3, #29
 80055b0:	d505      	bpl.n	80055be <__sflush_r+0x46>
 80055b2:	6863      	ldr	r3, [r4, #4]
 80055b4:	1ac0      	subs	r0, r0, r3
 80055b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80055b8:	b10b      	cbz	r3, 80055be <__sflush_r+0x46>
 80055ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055bc:	1ac0      	subs	r0, r0, r3
 80055be:	2300      	movs	r3, #0
 80055c0:	4602      	mov	r2, r0
 80055c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055c4:	6a21      	ldr	r1, [r4, #32]
 80055c6:	4628      	mov	r0, r5
 80055c8:	47b0      	blx	r6
 80055ca:	1c43      	adds	r3, r0, #1
 80055cc:	89a3      	ldrh	r3, [r4, #12]
 80055ce:	d106      	bne.n	80055de <__sflush_r+0x66>
 80055d0:	6829      	ldr	r1, [r5, #0]
 80055d2:	291d      	cmp	r1, #29
 80055d4:	d84b      	bhi.n	800566e <__sflush_r+0xf6>
 80055d6:	4a2b      	ldr	r2, [pc, #172]	; (8005684 <__sflush_r+0x10c>)
 80055d8:	40ca      	lsrs	r2, r1
 80055da:	07d6      	lsls	r6, r2, #31
 80055dc:	d547      	bpl.n	800566e <__sflush_r+0xf6>
 80055de:	2200      	movs	r2, #0
 80055e0:	6062      	str	r2, [r4, #4]
 80055e2:	04d9      	lsls	r1, r3, #19
 80055e4:	6922      	ldr	r2, [r4, #16]
 80055e6:	6022      	str	r2, [r4, #0]
 80055e8:	d504      	bpl.n	80055f4 <__sflush_r+0x7c>
 80055ea:	1c42      	adds	r2, r0, #1
 80055ec:	d101      	bne.n	80055f2 <__sflush_r+0x7a>
 80055ee:	682b      	ldr	r3, [r5, #0]
 80055f0:	b903      	cbnz	r3, 80055f4 <__sflush_r+0x7c>
 80055f2:	6560      	str	r0, [r4, #84]	; 0x54
 80055f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055f6:	602f      	str	r7, [r5, #0]
 80055f8:	2900      	cmp	r1, #0
 80055fa:	d0ca      	beq.n	8005592 <__sflush_r+0x1a>
 80055fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005600:	4299      	cmp	r1, r3
 8005602:	d002      	beq.n	800560a <__sflush_r+0x92>
 8005604:	4628      	mov	r0, r5
 8005606:	f000 f979 	bl	80058fc <_free_r>
 800560a:	2000      	movs	r0, #0
 800560c:	6360      	str	r0, [r4, #52]	; 0x34
 800560e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005612:	6a21      	ldr	r1, [r4, #32]
 8005614:	2301      	movs	r3, #1
 8005616:	4628      	mov	r0, r5
 8005618:	47b0      	blx	r6
 800561a:	1c41      	adds	r1, r0, #1
 800561c:	d1c6      	bne.n	80055ac <__sflush_r+0x34>
 800561e:	682b      	ldr	r3, [r5, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0c3      	beq.n	80055ac <__sflush_r+0x34>
 8005624:	2b1d      	cmp	r3, #29
 8005626:	d001      	beq.n	800562c <__sflush_r+0xb4>
 8005628:	2b16      	cmp	r3, #22
 800562a:	d101      	bne.n	8005630 <__sflush_r+0xb8>
 800562c:	602f      	str	r7, [r5, #0]
 800562e:	e7b0      	b.n	8005592 <__sflush_r+0x1a>
 8005630:	89a3      	ldrh	r3, [r4, #12]
 8005632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005636:	81a3      	strh	r3, [r4, #12]
 8005638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800563c:	690f      	ldr	r7, [r1, #16]
 800563e:	2f00      	cmp	r7, #0
 8005640:	d0a7      	beq.n	8005592 <__sflush_r+0x1a>
 8005642:	0793      	lsls	r3, r2, #30
 8005644:	680e      	ldr	r6, [r1, #0]
 8005646:	bf08      	it	eq
 8005648:	694b      	ldreq	r3, [r1, #20]
 800564a:	600f      	str	r7, [r1, #0]
 800564c:	bf18      	it	ne
 800564e:	2300      	movne	r3, #0
 8005650:	eba6 0807 	sub.w	r8, r6, r7
 8005654:	608b      	str	r3, [r1, #8]
 8005656:	f1b8 0f00 	cmp.w	r8, #0
 800565a:	dd9a      	ble.n	8005592 <__sflush_r+0x1a>
 800565c:	4643      	mov	r3, r8
 800565e:	463a      	mov	r2, r7
 8005660:	6a21      	ldr	r1, [r4, #32]
 8005662:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005664:	4628      	mov	r0, r5
 8005666:	47b0      	blx	r6
 8005668:	2800      	cmp	r0, #0
 800566a:	dc07      	bgt.n	800567c <__sflush_r+0x104>
 800566c:	89a3      	ldrh	r3, [r4, #12]
 800566e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005672:	81a3      	strh	r3, [r4, #12]
 8005674:	f04f 30ff 	mov.w	r0, #4294967295
 8005678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800567c:	4407      	add	r7, r0
 800567e:	eba8 0800 	sub.w	r8, r8, r0
 8005682:	e7e8      	b.n	8005656 <__sflush_r+0xde>
 8005684:	20400001 	.word	0x20400001

08005688 <_fflush_r>:
 8005688:	b538      	push	{r3, r4, r5, lr}
 800568a:	690b      	ldr	r3, [r1, #16]
 800568c:	4605      	mov	r5, r0
 800568e:	460c      	mov	r4, r1
 8005690:	b1db      	cbz	r3, 80056ca <_fflush_r+0x42>
 8005692:	b118      	cbz	r0, 800569c <_fflush_r+0x14>
 8005694:	6983      	ldr	r3, [r0, #24]
 8005696:	b90b      	cbnz	r3, 800569c <_fflush_r+0x14>
 8005698:	f000 f860 	bl	800575c <__sinit>
 800569c:	4b0c      	ldr	r3, [pc, #48]	; (80056d0 <_fflush_r+0x48>)
 800569e:	429c      	cmp	r4, r3
 80056a0:	d109      	bne.n	80056b6 <_fflush_r+0x2e>
 80056a2:	686c      	ldr	r4, [r5, #4]
 80056a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056a8:	b17b      	cbz	r3, 80056ca <_fflush_r+0x42>
 80056aa:	4621      	mov	r1, r4
 80056ac:	4628      	mov	r0, r5
 80056ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056b2:	f7ff bf61 	b.w	8005578 <__sflush_r>
 80056b6:	4b07      	ldr	r3, [pc, #28]	; (80056d4 <_fflush_r+0x4c>)
 80056b8:	429c      	cmp	r4, r3
 80056ba:	d101      	bne.n	80056c0 <_fflush_r+0x38>
 80056bc:	68ac      	ldr	r4, [r5, #8]
 80056be:	e7f1      	b.n	80056a4 <_fflush_r+0x1c>
 80056c0:	4b05      	ldr	r3, [pc, #20]	; (80056d8 <_fflush_r+0x50>)
 80056c2:	429c      	cmp	r4, r3
 80056c4:	bf08      	it	eq
 80056c6:	68ec      	ldreq	r4, [r5, #12]
 80056c8:	e7ec      	b.n	80056a4 <_fflush_r+0x1c>
 80056ca:	2000      	movs	r0, #0
 80056cc:	bd38      	pop	{r3, r4, r5, pc}
 80056ce:	bf00      	nop
 80056d0:	0800b870 	.word	0x0800b870
 80056d4:	0800b890 	.word	0x0800b890
 80056d8:	0800b850 	.word	0x0800b850

080056dc <_cleanup_r>:
 80056dc:	4901      	ldr	r1, [pc, #4]	; (80056e4 <_cleanup_r+0x8>)
 80056de:	f000 b8a9 	b.w	8005834 <_fwalk_reent>
 80056e2:	bf00      	nop
 80056e4:	08005689 	.word	0x08005689

080056e8 <std.isra.0>:
 80056e8:	2300      	movs	r3, #0
 80056ea:	b510      	push	{r4, lr}
 80056ec:	4604      	mov	r4, r0
 80056ee:	6003      	str	r3, [r0, #0]
 80056f0:	6043      	str	r3, [r0, #4]
 80056f2:	6083      	str	r3, [r0, #8]
 80056f4:	8181      	strh	r1, [r0, #12]
 80056f6:	6643      	str	r3, [r0, #100]	; 0x64
 80056f8:	81c2      	strh	r2, [r0, #14]
 80056fa:	6103      	str	r3, [r0, #16]
 80056fc:	6143      	str	r3, [r0, #20]
 80056fe:	6183      	str	r3, [r0, #24]
 8005700:	4619      	mov	r1, r3
 8005702:	2208      	movs	r2, #8
 8005704:	305c      	adds	r0, #92	; 0x5c
 8005706:	f000 f8f1 	bl	80058ec <memset>
 800570a:	4b05      	ldr	r3, [pc, #20]	; (8005720 <std.isra.0+0x38>)
 800570c:	6263      	str	r3, [r4, #36]	; 0x24
 800570e:	4b05      	ldr	r3, [pc, #20]	; (8005724 <std.isra.0+0x3c>)
 8005710:	62a3      	str	r3, [r4, #40]	; 0x28
 8005712:	4b05      	ldr	r3, [pc, #20]	; (8005728 <std.isra.0+0x40>)
 8005714:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005716:	4b05      	ldr	r3, [pc, #20]	; (800572c <std.isra.0+0x44>)
 8005718:	6224      	str	r4, [r4, #32]
 800571a:	6323      	str	r3, [r4, #48]	; 0x30
 800571c:	bd10      	pop	{r4, pc}
 800571e:	bf00      	nop
 8005720:	08005b6d 	.word	0x08005b6d
 8005724:	08005b8f 	.word	0x08005b8f
 8005728:	08005bc7 	.word	0x08005bc7
 800572c:	08005beb 	.word	0x08005beb

08005730 <__sfmoreglue>:
 8005730:	b570      	push	{r4, r5, r6, lr}
 8005732:	1e4a      	subs	r2, r1, #1
 8005734:	2568      	movs	r5, #104	; 0x68
 8005736:	4355      	muls	r5, r2
 8005738:	460e      	mov	r6, r1
 800573a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800573e:	f000 f92b 	bl	8005998 <_malloc_r>
 8005742:	4604      	mov	r4, r0
 8005744:	b140      	cbz	r0, 8005758 <__sfmoreglue+0x28>
 8005746:	2100      	movs	r1, #0
 8005748:	e880 0042 	stmia.w	r0, {r1, r6}
 800574c:	300c      	adds	r0, #12
 800574e:	60a0      	str	r0, [r4, #8]
 8005750:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005754:	f000 f8ca 	bl	80058ec <memset>
 8005758:	4620      	mov	r0, r4
 800575a:	bd70      	pop	{r4, r5, r6, pc}

0800575c <__sinit>:
 800575c:	6983      	ldr	r3, [r0, #24]
 800575e:	b510      	push	{r4, lr}
 8005760:	4604      	mov	r4, r0
 8005762:	bb33      	cbnz	r3, 80057b2 <__sinit+0x56>
 8005764:	6483      	str	r3, [r0, #72]	; 0x48
 8005766:	64c3      	str	r3, [r0, #76]	; 0x4c
 8005768:	6503      	str	r3, [r0, #80]	; 0x50
 800576a:	4b12      	ldr	r3, [pc, #72]	; (80057b4 <__sinit+0x58>)
 800576c:	4a12      	ldr	r2, [pc, #72]	; (80057b8 <__sinit+0x5c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6282      	str	r2, [r0, #40]	; 0x28
 8005772:	4298      	cmp	r0, r3
 8005774:	bf04      	itt	eq
 8005776:	2301      	moveq	r3, #1
 8005778:	6183      	streq	r3, [r0, #24]
 800577a:	f000 f81f 	bl	80057bc <__sfp>
 800577e:	6060      	str	r0, [r4, #4]
 8005780:	4620      	mov	r0, r4
 8005782:	f000 f81b 	bl	80057bc <__sfp>
 8005786:	60a0      	str	r0, [r4, #8]
 8005788:	4620      	mov	r0, r4
 800578a:	f000 f817 	bl	80057bc <__sfp>
 800578e:	2200      	movs	r2, #0
 8005790:	60e0      	str	r0, [r4, #12]
 8005792:	2104      	movs	r1, #4
 8005794:	6860      	ldr	r0, [r4, #4]
 8005796:	f7ff ffa7 	bl	80056e8 <std.isra.0>
 800579a:	2201      	movs	r2, #1
 800579c:	2109      	movs	r1, #9
 800579e:	68a0      	ldr	r0, [r4, #8]
 80057a0:	f7ff ffa2 	bl	80056e8 <std.isra.0>
 80057a4:	2202      	movs	r2, #2
 80057a6:	2112      	movs	r1, #18
 80057a8:	68e0      	ldr	r0, [r4, #12]
 80057aa:	f7ff ff9d 	bl	80056e8 <std.isra.0>
 80057ae:	2301      	movs	r3, #1
 80057b0:	61a3      	str	r3, [r4, #24]
 80057b2:	bd10      	pop	{r4, pc}
 80057b4:	0800b8b0 	.word	0x0800b8b0
 80057b8:	080056dd 	.word	0x080056dd

080057bc <__sfp>:
 80057bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057be:	4b1c      	ldr	r3, [pc, #112]	; (8005830 <__sfp+0x74>)
 80057c0:	681e      	ldr	r6, [r3, #0]
 80057c2:	69b3      	ldr	r3, [r6, #24]
 80057c4:	4607      	mov	r7, r0
 80057c6:	b913      	cbnz	r3, 80057ce <__sfp+0x12>
 80057c8:	4630      	mov	r0, r6
 80057ca:	f7ff ffc7 	bl	800575c <__sinit>
 80057ce:	3648      	adds	r6, #72	; 0x48
 80057d0:	68b4      	ldr	r4, [r6, #8]
 80057d2:	6873      	ldr	r3, [r6, #4]
 80057d4:	3b01      	subs	r3, #1
 80057d6:	d503      	bpl.n	80057e0 <__sfp+0x24>
 80057d8:	6833      	ldr	r3, [r6, #0]
 80057da:	b133      	cbz	r3, 80057ea <__sfp+0x2e>
 80057dc:	6836      	ldr	r6, [r6, #0]
 80057de:	e7f7      	b.n	80057d0 <__sfp+0x14>
 80057e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80057e4:	b16d      	cbz	r5, 8005802 <__sfp+0x46>
 80057e6:	3468      	adds	r4, #104	; 0x68
 80057e8:	e7f4      	b.n	80057d4 <__sfp+0x18>
 80057ea:	2104      	movs	r1, #4
 80057ec:	4638      	mov	r0, r7
 80057ee:	f7ff ff9f 	bl	8005730 <__sfmoreglue>
 80057f2:	6030      	str	r0, [r6, #0]
 80057f4:	2800      	cmp	r0, #0
 80057f6:	d1f1      	bne.n	80057dc <__sfp+0x20>
 80057f8:	230c      	movs	r3, #12
 80057fa:	603b      	str	r3, [r7, #0]
 80057fc:	4604      	mov	r4, r0
 80057fe:	4620      	mov	r0, r4
 8005800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005802:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005806:	81e3      	strh	r3, [r4, #14]
 8005808:	2301      	movs	r3, #1
 800580a:	81a3      	strh	r3, [r4, #12]
 800580c:	6665      	str	r5, [r4, #100]	; 0x64
 800580e:	6025      	str	r5, [r4, #0]
 8005810:	60a5      	str	r5, [r4, #8]
 8005812:	6065      	str	r5, [r4, #4]
 8005814:	6125      	str	r5, [r4, #16]
 8005816:	6165      	str	r5, [r4, #20]
 8005818:	61a5      	str	r5, [r4, #24]
 800581a:	2208      	movs	r2, #8
 800581c:	4629      	mov	r1, r5
 800581e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005822:	f000 f863 	bl	80058ec <memset>
 8005826:	6365      	str	r5, [r4, #52]	; 0x34
 8005828:	63a5      	str	r5, [r4, #56]	; 0x38
 800582a:	64a5      	str	r5, [r4, #72]	; 0x48
 800582c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800582e:	e7e6      	b.n	80057fe <__sfp+0x42>
 8005830:	0800b8b0 	.word	0x0800b8b0

08005834 <_fwalk_reent>:
 8005834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005838:	4680      	mov	r8, r0
 800583a:	4689      	mov	r9, r1
 800583c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005840:	2600      	movs	r6, #0
 8005842:	b914      	cbnz	r4, 800584a <_fwalk_reent+0x16>
 8005844:	4630      	mov	r0, r6
 8005846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800584a:	68a5      	ldr	r5, [r4, #8]
 800584c:	6867      	ldr	r7, [r4, #4]
 800584e:	3f01      	subs	r7, #1
 8005850:	d501      	bpl.n	8005856 <_fwalk_reent+0x22>
 8005852:	6824      	ldr	r4, [r4, #0]
 8005854:	e7f5      	b.n	8005842 <_fwalk_reent+0xe>
 8005856:	89ab      	ldrh	r3, [r5, #12]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d907      	bls.n	800586c <_fwalk_reent+0x38>
 800585c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005860:	3301      	adds	r3, #1
 8005862:	d003      	beq.n	800586c <_fwalk_reent+0x38>
 8005864:	4629      	mov	r1, r5
 8005866:	4640      	mov	r0, r8
 8005868:	47c8      	blx	r9
 800586a:	4306      	orrs	r6, r0
 800586c:	3568      	adds	r5, #104	; 0x68
 800586e:	e7ee      	b.n	800584e <_fwalk_reent+0x1a>

08005870 <__libc_init_array>:
 8005870:	b570      	push	{r4, r5, r6, lr}
 8005872:	4e0d      	ldr	r6, [pc, #52]	; (80058a8 <__libc_init_array+0x38>)
 8005874:	4c0d      	ldr	r4, [pc, #52]	; (80058ac <__libc_init_array+0x3c>)
 8005876:	1ba4      	subs	r4, r4, r6
 8005878:	10a4      	asrs	r4, r4, #2
 800587a:	2500      	movs	r5, #0
 800587c:	42a5      	cmp	r5, r4
 800587e:	d109      	bne.n	8005894 <__libc_init_array+0x24>
 8005880:	4e0b      	ldr	r6, [pc, #44]	; (80058b0 <__libc_init_array+0x40>)
 8005882:	4c0c      	ldr	r4, [pc, #48]	; (80058b4 <__libc_init_array+0x44>)
 8005884:	f001 fe7a 	bl	800757c <_init>
 8005888:	1ba4      	subs	r4, r4, r6
 800588a:	10a4      	asrs	r4, r4, #2
 800588c:	2500      	movs	r5, #0
 800588e:	42a5      	cmp	r5, r4
 8005890:	d105      	bne.n	800589e <__libc_init_array+0x2e>
 8005892:	bd70      	pop	{r4, r5, r6, pc}
 8005894:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005898:	4798      	blx	r3
 800589a:	3501      	adds	r5, #1
 800589c:	e7ee      	b.n	800587c <__libc_init_array+0xc>
 800589e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058a2:	4798      	blx	r3
 80058a4:	3501      	adds	r5, #1
 80058a6:	e7f2      	b.n	800588e <__libc_init_array+0x1e>
 80058a8:	0800b940 	.word	0x0800b940
 80058ac:	0800b940 	.word	0x0800b940
 80058b0:	0800b940 	.word	0x0800b940
 80058b4:	0800b944 	.word	0x0800b944

080058b8 <memcmp>:
 80058b8:	b510      	push	{r4, lr}
 80058ba:	3901      	subs	r1, #1
 80058bc:	4402      	add	r2, r0
 80058be:	4290      	cmp	r0, r2
 80058c0:	d101      	bne.n	80058c6 <memcmp+0xe>
 80058c2:	2000      	movs	r0, #0
 80058c4:	bd10      	pop	{r4, pc}
 80058c6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80058ca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80058ce:	42a3      	cmp	r3, r4
 80058d0:	d0f5      	beq.n	80058be <memcmp+0x6>
 80058d2:	1b18      	subs	r0, r3, r4
 80058d4:	bd10      	pop	{r4, pc}

080058d6 <memcpy>:
 80058d6:	b510      	push	{r4, lr}
 80058d8:	1e43      	subs	r3, r0, #1
 80058da:	440a      	add	r2, r1
 80058dc:	4291      	cmp	r1, r2
 80058de:	d100      	bne.n	80058e2 <memcpy+0xc>
 80058e0:	bd10      	pop	{r4, pc}
 80058e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058ea:	e7f7      	b.n	80058dc <memcpy+0x6>

080058ec <memset>:
 80058ec:	4402      	add	r2, r0
 80058ee:	4603      	mov	r3, r0
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d100      	bne.n	80058f6 <memset+0xa>
 80058f4:	4770      	bx	lr
 80058f6:	f803 1b01 	strb.w	r1, [r3], #1
 80058fa:	e7f9      	b.n	80058f0 <memset+0x4>

080058fc <_free_r>:
 80058fc:	b538      	push	{r3, r4, r5, lr}
 80058fe:	4605      	mov	r5, r0
 8005900:	2900      	cmp	r1, #0
 8005902:	d045      	beq.n	8005990 <_free_r+0x94>
 8005904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005908:	1f0c      	subs	r4, r1, #4
 800590a:	2b00      	cmp	r3, #0
 800590c:	bfb8      	it	lt
 800590e:	18e4      	addlt	r4, r4, r3
 8005910:	f000 fac8 	bl	8005ea4 <__malloc_lock>
 8005914:	4a1f      	ldr	r2, [pc, #124]	; (8005994 <_free_r+0x98>)
 8005916:	6813      	ldr	r3, [r2, #0]
 8005918:	4610      	mov	r0, r2
 800591a:	b933      	cbnz	r3, 800592a <_free_r+0x2e>
 800591c:	6063      	str	r3, [r4, #4]
 800591e:	6014      	str	r4, [r2, #0]
 8005920:	4628      	mov	r0, r5
 8005922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005926:	f000 babe 	b.w	8005ea6 <__malloc_unlock>
 800592a:	42a3      	cmp	r3, r4
 800592c:	d90c      	bls.n	8005948 <_free_r+0x4c>
 800592e:	6821      	ldr	r1, [r4, #0]
 8005930:	1862      	adds	r2, r4, r1
 8005932:	4293      	cmp	r3, r2
 8005934:	bf04      	itt	eq
 8005936:	681a      	ldreq	r2, [r3, #0]
 8005938:	685b      	ldreq	r3, [r3, #4]
 800593a:	6063      	str	r3, [r4, #4]
 800593c:	bf04      	itt	eq
 800593e:	1852      	addeq	r2, r2, r1
 8005940:	6022      	streq	r2, [r4, #0]
 8005942:	6004      	str	r4, [r0, #0]
 8005944:	e7ec      	b.n	8005920 <_free_r+0x24>
 8005946:	4613      	mov	r3, r2
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	b10a      	cbz	r2, 8005950 <_free_r+0x54>
 800594c:	42a2      	cmp	r2, r4
 800594e:	d9fa      	bls.n	8005946 <_free_r+0x4a>
 8005950:	6819      	ldr	r1, [r3, #0]
 8005952:	1858      	adds	r0, r3, r1
 8005954:	42a0      	cmp	r0, r4
 8005956:	d10b      	bne.n	8005970 <_free_r+0x74>
 8005958:	6820      	ldr	r0, [r4, #0]
 800595a:	4401      	add	r1, r0
 800595c:	1858      	adds	r0, r3, r1
 800595e:	4282      	cmp	r2, r0
 8005960:	6019      	str	r1, [r3, #0]
 8005962:	d1dd      	bne.n	8005920 <_free_r+0x24>
 8005964:	6810      	ldr	r0, [r2, #0]
 8005966:	6852      	ldr	r2, [r2, #4]
 8005968:	605a      	str	r2, [r3, #4]
 800596a:	4401      	add	r1, r0
 800596c:	6019      	str	r1, [r3, #0]
 800596e:	e7d7      	b.n	8005920 <_free_r+0x24>
 8005970:	d902      	bls.n	8005978 <_free_r+0x7c>
 8005972:	230c      	movs	r3, #12
 8005974:	602b      	str	r3, [r5, #0]
 8005976:	e7d3      	b.n	8005920 <_free_r+0x24>
 8005978:	6820      	ldr	r0, [r4, #0]
 800597a:	1821      	adds	r1, r4, r0
 800597c:	428a      	cmp	r2, r1
 800597e:	bf04      	itt	eq
 8005980:	6811      	ldreq	r1, [r2, #0]
 8005982:	6852      	ldreq	r2, [r2, #4]
 8005984:	6062      	str	r2, [r4, #4]
 8005986:	bf04      	itt	eq
 8005988:	1809      	addeq	r1, r1, r0
 800598a:	6021      	streq	r1, [r4, #0]
 800598c:	605c      	str	r4, [r3, #4]
 800598e:	e7c7      	b.n	8005920 <_free_r+0x24>
 8005990:	bd38      	pop	{r3, r4, r5, pc}
 8005992:	bf00      	nop
 8005994:	2000103c 	.word	0x2000103c

08005998 <_malloc_r>:
 8005998:	b570      	push	{r4, r5, r6, lr}
 800599a:	1ccd      	adds	r5, r1, #3
 800599c:	f025 0503 	bic.w	r5, r5, #3
 80059a0:	3508      	adds	r5, #8
 80059a2:	2d0c      	cmp	r5, #12
 80059a4:	bf38      	it	cc
 80059a6:	250c      	movcc	r5, #12
 80059a8:	2d00      	cmp	r5, #0
 80059aa:	4606      	mov	r6, r0
 80059ac:	db01      	blt.n	80059b2 <_malloc_r+0x1a>
 80059ae:	42a9      	cmp	r1, r5
 80059b0:	d903      	bls.n	80059ba <_malloc_r+0x22>
 80059b2:	230c      	movs	r3, #12
 80059b4:	6033      	str	r3, [r6, #0]
 80059b6:	2000      	movs	r0, #0
 80059b8:	bd70      	pop	{r4, r5, r6, pc}
 80059ba:	f000 fa73 	bl	8005ea4 <__malloc_lock>
 80059be:	4a23      	ldr	r2, [pc, #140]	; (8005a4c <_malloc_r+0xb4>)
 80059c0:	6814      	ldr	r4, [r2, #0]
 80059c2:	4621      	mov	r1, r4
 80059c4:	b991      	cbnz	r1, 80059ec <_malloc_r+0x54>
 80059c6:	4c22      	ldr	r4, [pc, #136]	; (8005a50 <_malloc_r+0xb8>)
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	b91b      	cbnz	r3, 80059d4 <_malloc_r+0x3c>
 80059cc:	4630      	mov	r0, r6
 80059ce:	f000 f8bd 	bl	8005b4c <_sbrk_r>
 80059d2:	6020      	str	r0, [r4, #0]
 80059d4:	4629      	mov	r1, r5
 80059d6:	4630      	mov	r0, r6
 80059d8:	f000 f8b8 	bl	8005b4c <_sbrk_r>
 80059dc:	1c43      	adds	r3, r0, #1
 80059de:	d126      	bne.n	8005a2e <_malloc_r+0x96>
 80059e0:	230c      	movs	r3, #12
 80059e2:	6033      	str	r3, [r6, #0]
 80059e4:	4630      	mov	r0, r6
 80059e6:	f000 fa5e 	bl	8005ea6 <__malloc_unlock>
 80059ea:	e7e4      	b.n	80059b6 <_malloc_r+0x1e>
 80059ec:	680b      	ldr	r3, [r1, #0]
 80059ee:	1b5b      	subs	r3, r3, r5
 80059f0:	d41a      	bmi.n	8005a28 <_malloc_r+0x90>
 80059f2:	2b0b      	cmp	r3, #11
 80059f4:	d90f      	bls.n	8005a16 <_malloc_r+0x7e>
 80059f6:	600b      	str	r3, [r1, #0]
 80059f8:	50cd      	str	r5, [r1, r3]
 80059fa:	18cc      	adds	r4, r1, r3
 80059fc:	4630      	mov	r0, r6
 80059fe:	f000 fa52 	bl	8005ea6 <__malloc_unlock>
 8005a02:	f104 000b 	add.w	r0, r4, #11
 8005a06:	1d23      	adds	r3, r4, #4
 8005a08:	f020 0007 	bic.w	r0, r0, #7
 8005a0c:	1ac3      	subs	r3, r0, r3
 8005a0e:	d01b      	beq.n	8005a48 <_malloc_r+0xb0>
 8005a10:	425a      	negs	r2, r3
 8005a12:	50e2      	str	r2, [r4, r3]
 8005a14:	bd70      	pop	{r4, r5, r6, pc}
 8005a16:	428c      	cmp	r4, r1
 8005a18:	bf0d      	iteet	eq
 8005a1a:	6863      	ldreq	r3, [r4, #4]
 8005a1c:	684b      	ldrne	r3, [r1, #4]
 8005a1e:	6063      	strne	r3, [r4, #4]
 8005a20:	6013      	streq	r3, [r2, #0]
 8005a22:	bf18      	it	ne
 8005a24:	460c      	movne	r4, r1
 8005a26:	e7e9      	b.n	80059fc <_malloc_r+0x64>
 8005a28:	460c      	mov	r4, r1
 8005a2a:	6849      	ldr	r1, [r1, #4]
 8005a2c:	e7ca      	b.n	80059c4 <_malloc_r+0x2c>
 8005a2e:	1cc4      	adds	r4, r0, #3
 8005a30:	f024 0403 	bic.w	r4, r4, #3
 8005a34:	42a0      	cmp	r0, r4
 8005a36:	d005      	beq.n	8005a44 <_malloc_r+0xac>
 8005a38:	1a21      	subs	r1, r4, r0
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	f000 f886 	bl	8005b4c <_sbrk_r>
 8005a40:	3001      	adds	r0, #1
 8005a42:	d0cd      	beq.n	80059e0 <_malloc_r+0x48>
 8005a44:	6025      	str	r5, [r4, #0]
 8005a46:	e7d9      	b.n	80059fc <_malloc_r+0x64>
 8005a48:	bd70      	pop	{r4, r5, r6, pc}
 8005a4a:	bf00      	nop
 8005a4c:	2000103c 	.word	0x2000103c
 8005a50:	20001040 	.word	0x20001040

08005a54 <iprintf>:
 8005a54:	b40f      	push	{r0, r1, r2, r3}
 8005a56:	4b0a      	ldr	r3, [pc, #40]	; (8005a80 <iprintf+0x2c>)
 8005a58:	b513      	push	{r0, r1, r4, lr}
 8005a5a:	681c      	ldr	r4, [r3, #0]
 8005a5c:	b124      	cbz	r4, 8005a68 <iprintf+0x14>
 8005a5e:	69a3      	ldr	r3, [r4, #24]
 8005a60:	b913      	cbnz	r3, 8005a68 <iprintf+0x14>
 8005a62:	4620      	mov	r0, r4
 8005a64:	f7ff fe7a 	bl	800575c <__sinit>
 8005a68:	ab05      	add	r3, sp, #20
 8005a6a:	9a04      	ldr	r2, [sp, #16]
 8005a6c:	68a1      	ldr	r1, [r4, #8]
 8005a6e:	9301      	str	r3, [sp, #4]
 8005a70:	4620      	mov	r0, r4
 8005a72:	f000 fa43 	bl	8005efc <_vfiprintf_r>
 8005a76:	b002      	add	sp, #8
 8005a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a7c:	b004      	add	sp, #16
 8005a7e:	4770      	bx	lr
 8005a80:	20000494 	.word	0x20000494

08005a84 <_puts_r>:
 8005a84:	b570      	push	{r4, r5, r6, lr}
 8005a86:	460e      	mov	r6, r1
 8005a88:	4605      	mov	r5, r0
 8005a8a:	b118      	cbz	r0, 8005a94 <_puts_r+0x10>
 8005a8c:	6983      	ldr	r3, [r0, #24]
 8005a8e:	b90b      	cbnz	r3, 8005a94 <_puts_r+0x10>
 8005a90:	f7ff fe64 	bl	800575c <__sinit>
 8005a94:	69ab      	ldr	r3, [r5, #24]
 8005a96:	68ac      	ldr	r4, [r5, #8]
 8005a98:	b913      	cbnz	r3, 8005aa0 <_puts_r+0x1c>
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	f7ff fe5e 	bl	800575c <__sinit>
 8005aa0:	4b23      	ldr	r3, [pc, #140]	; (8005b30 <_puts_r+0xac>)
 8005aa2:	429c      	cmp	r4, r3
 8005aa4:	d117      	bne.n	8005ad6 <_puts_r+0x52>
 8005aa6:	686c      	ldr	r4, [r5, #4]
 8005aa8:	89a3      	ldrh	r3, [r4, #12]
 8005aaa:	071b      	lsls	r3, r3, #28
 8005aac:	d51d      	bpl.n	8005aea <_puts_r+0x66>
 8005aae:	6923      	ldr	r3, [r4, #16]
 8005ab0:	b1db      	cbz	r3, 8005aea <_puts_r+0x66>
 8005ab2:	3e01      	subs	r6, #1
 8005ab4:	68a3      	ldr	r3, [r4, #8]
 8005ab6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005aba:	3b01      	subs	r3, #1
 8005abc:	60a3      	str	r3, [r4, #8]
 8005abe:	b9e9      	cbnz	r1, 8005afc <_puts_r+0x78>
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	da2e      	bge.n	8005b22 <_puts_r+0x9e>
 8005ac4:	4622      	mov	r2, r4
 8005ac6:	210a      	movs	r1, #10
 8005ac8:	4628      	mov	r0, r5
 8005aca:	f000 f893 	bl	8005bf4 <__swbuf_r>
 8005ace:	3001      	adds	r0, #1
 8005ad0:	d011      	beq.n	8005af6 <_puts_r+0x72>
 8005ad2:	200a      	movs	r0, #10
 8005ad4:	bd70      	pop	{r4, r5, r6, pc}
 8005ad6:	4b17      	ldr	r3, [pc, #92]	; (8005b34 <_puts_r+0xb0>)
 8005ad8:	429c      	cmp	r4, r3
 8005ada:	d101      	bne.n	8005ae0 <_puts_r+0x5c>
 8005adc:	68ac      	ldr	r4, [r5, #8]
 8005ade:	e7e3      	b.n	8005aa8 <_puts_r+0x24>
 8005ae0:	4b15      	ldr	r3, [pc, #84]	; (8005b38 <_puts_r+0xb4>)
 8005ae2:	429c      	cmp	r4, r3
 8005ae4:	bf08      	it	eq
 8005ae6:	68ec      	ldreq	r4, [r5, #12]
 8005ae8:	e7de      	b.n	8005aa8 <_puts_r+0x24>
 8005aea:	4621      	mov	r1, r4
 8005aec:	4628      	mov	r0, r5
 8005aee:	f000 f8e5 	bl	8005cbc <__swsetup_r>
 8005af2:	2800      	cmp	r0, #0
 8005af4:	d0dd      	beq.n	8005ab2 <_puts_r+0x2e>
 8005af6:	f04f 30ff 	mov.w	r0, #4294967295
 8005afa:	bd70      	pop	{r4, r5, r6, pc}
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	da04      	bge.n	8005b0a <_puts_r+0x86>
 8005b00:	69a2      	ldr	r2, [r4, #24]
 8005b02:	4293      	cmp	r3, r2
 8005b04:	db06      	blt.n	8005b14 <_puts_r+0x90>
 8005b06:	290a      	cmp	r1, #10
 8005b08:	d004      	beq.n	8005b14 <_puts_r+0x90>
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	6022      	str	r2, [r4, #0]
 8005b10:	7019      	strb	r1, [r3, #0]
 8005b12:	e7cf      	b.n	8005ab4 <_puts_r+0x30>
 8005b14:	4622      	mov	r2, r4
 8005b16:	4628      	mov	r0, r5
 8005b18:	f000 f86c 	bl	8005bf4 <__swbuf_r>
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	d1c9      	bne.n	8005ab4 <_puts_r+0x30>
 8005b20:	e7e9      	b.n	8005af6 <_puts_r+0x72>
 8005b22:	6823      	ldr	r3, [r4, #0]
 8005b24:	200a      	movs	r0, #10
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	6022      	str	r2, [r4, #0]
 8005b2a:	7018      	strb	r0, [r3, #0]
 8005b2c:	bd70      	pop	{r4, r5, r6, pc}
 8005b2e:	bf00      	nop
 8005b30:	0800b870 	.word	0x0800b870
 8005b34:	0800b890 	.word	0x0800b890
 8005b38:	0800b850 	.word	0x0800b850

08005b3c <puts>:
 8005b3c:	4b02      	ldr	r3, [pc, #8]	; (8005b48 <puts+0xc>)
 8005b3e:	4601      	mov	r1, r0
 8005b40:	6818      	ldr	r0, [r3, #0]
 8005b42:	f7ff bf9f 	b.w	8005a84 <_puts_r>
 8005b46:	bf00      	nop
 8005b48:	20000494 	.word	0x20000494

08005b4c <_sbrk_r>:
 8005b4c:	b538      	push	{r3, r4, r5, lr}
 8005b4e:	4c06      	ldr	r4, [pc, #24]	; (8005b68 <_sbrk_r+0x1c>)
 8005b50:	2300      	movs	r3, #0
 8005b52:	4605      	mov	r5, r0
 8005b54:	4608      	mov	r0, r1
 8005b56:	6023      	str	r3, [r4, #0]
 8005b58:	f7ff fc90 	bl	800547c <_sbrk>
 8005b5c:	1c43      	adds	r3, r0, #1
 8005b5e:	d102      	bne.n	8005b66 <_sbrk_r+0x1a>
 8005b60:	6823      	ldr	r3, [r4, #0]
 8005b62:	b103      	cbz	r3, 8005b66 <_sbrk_r+0x1a>
 8005b64:	602b      	str	r3, [r5, #0]
 8005b66:	bd38      	pop	{r3, r4, r5, pc}
 8005b68:	200010f0 	.word	0x200010f0

08005b6c <__sread>:
 8005b6c:	b510      	push	{r4, lr}
 8005b6e:	460c      	mov	r4, r1
 8005b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b74:	f000 fc6e 	bl	8006454 <_read_r>
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	bfab      	itete	ge
 8005b7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b7e:	89a3      	ldrhlt	r3, [r4, #12]
 8005b80:	181b      	addge	r3, r3, r0
 8005b82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b86:	bfac      	ite	ge
 8005b88:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b8a:	81a3      	strhlt	r3, [r4, #12]
 8005b8c:	bd10      	pop	{r4, pc}

08005b8e <__swrite>:
 8005b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b92:	461f      	mov	r7, r3
 8005b94:	898b      	ldrh	r3, [r1, #12]
 8005b96:	05db      	lsls	r3, r3, #23
 8005b98:	4605      	mov	r5, r0
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	4616      	mov	r6, r2
 8005b9e:	d505      	bpl.n	8005bac <__swrite+0x1e>
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ba8:	f000 f906 	bl	8005db8 <_lseek_r>
 8005bac:	89a3      	ldrh	r3, [r4, #12]
 8005bae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bb6:	81a3      	strh	r3, [r4, #12]
 8005bb8:	4632      	mov	r2, r6
 8005bba:	463b      	mov	r3, r7
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc2:	f000 b869 	b.w	8005c98 <_write_r>

08005bc6 <__sseek>:
 8005bc6:	b510      	push	{r4, lr}
 8005bc8:	460c      	mov	r4, r1
 8005bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bce:	f000 f8f3 	bl	8005db8 <_lseek_r>
 8005bd2:	1c43      	adds	r3, r0, #1
 8005bd4:	89a3      	ldrh	r3, [r4, #12]
 8005bd6:	bf15      	itete	ne
 8005bd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005bda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005be2:	81a3      	strheq	r3, [r4, #12]
 8005be4:	bf18      	it	ne
 8005be6:	81a3      	strhne	r3, [r4, #12]
 8005be8:	bd10      	pop	{r4, pc}

08005bea <__sclose>:
 8005bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bee:	f000 b8d3 	b.w	8005d98 <_close_r>
	...

08005bf4 <__swbuf_r>:
 8005bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf6:	460e      	mov	r6, r1
 8005bf8:	4614      	mov	r4, r2
 8005bfa:	4605      	mov	r5, r0
 8005bfc:	b118      	cbz	r0, 8005c06 <__swbuf_r+0x12>
 8005bfe:	6983      	ldr	r3, [r0, #24]
 8005c00:	b90b      	cbnz	r3, 8005c06 <__swbuf_r+0x12>
 8005c02:	f7ff fdab 	bl	800575c <__sinit>
 8005c06:	4b21      	ldr	r3, [pc, #132]	; (8005c8c <__swbuf_r+0x98>)
 8005c08:	429c      	cmp	r4, r3
 8005c0a:	d12a      	bne.n	8005c62 <__swbuf_r+0x6e>
 8005c0c:	686c      	ldr	r4, [r5, #4]
 8005c0e:	69a3      	ldr	r3, [r4, #24]
 8005c10:	60a3      	str	r3, [r4, #8]
 8005c12:	89a3      	ldrh	r3, [r4, #12]
 8005c14:	071a      	lsls	r2, r3, #28
 8005c16:	d52e      	bpl.n	8005c76 <__swbuf_r+0x82>
 8005c18:	6923      	ldr	r3, [r4, #16]
 8005c1a:	b363      	cbz	r3, 8005c76 <__swbuf_r+0x82>
 8005c1c:	6923      	ldr	r3, [r4, #16]
 8005c1e:	6820      	ldr	r0, [r4, #0]
 8005c20:	1ac0      	subs	r0, r0, r3
 8005c22:	6963      	ldr	r3, [r4, #20]
 8005c24:	b2f6      	uxtb	r6, r6
 8005c26:	4298      	cmp	r0, r3
 8005c28:	4637      	mov	r7, r6
 8005c2a:	db04      	blt.n	8005c36 <__swbuf_r+0x42>
 8005c2c:	4621      	mov	r1, r4
 8005c2e:	4628      	mov	r0, r5
 8005c30:	f7ff fd2a 	bl	8005688 <_fflush_r>
 8005c34:	bb28      	cbnz	r0, 8005c82 <__swbuf_r+0x8e>
 8005c36:	68a3      	ldr	r3, [r4, #8]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	60a3      	str	r3, [r4, #8]
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	1c5a      	adds	r2, r3, #1
 8005c40:	6022      	str	r2, [r4, #0]
 8005c42:	701e      	strb	r6, [r3, #0]
 8005c44:	6963      	ldr	r3, [r4, #20]
 8005c46:	3001      	adds	r0, #1
 8005c48:	4298      	cmp	r0, r3
 8005c4a:	d004      	beq.n	8005c56 <__swbuf_r+0x62>
 8005c4c:	89a3      	ldrh	r3, [r4, #12]
 8005c4e:	07db      	lsls	r3, r3, #31
 8005c50:	d519      	bpl.n	8005c86 <__swbuf_r+0x92>
 8005c52:	2e0a      	cmp	r6, #10
 8005c54:	d117      	bne.n	8005c86 <__swbuf_r+0x92>
 8005c56:	4621      	mov	r1, r4
 8005c58:	4628      	mov	r0, r5
 8005c5a:	f7ff fd15 	bl	8005688 <_fflush_r>
 8005c5e:	b190      	cbz	r0, 8005c86 <__swbuf_r+0x92>
 8005c60:	e00f      	b.n	8005c82 <__swbuf_r+0x8e>
 8005c62:	4b0b      	ldr	r3, [pc, #44]	; (8005c90 <__swbuf_r+0x9c>)
 8005c64:	429c      	cmp	r4, r3
 8005c66:	d101      	bne.n	8005c6c <__swbuf_r+0x78>
 8005c68:	68ac      	ldr	r4, [r5, #8]
 8005c6a:	e7d0      	b.n	8005c0e <__swbuf_r+0x1a>
 8005c6c:	4b09      	ldr	r3, [pc, #36]	; (8005c94 <__swbuf_r+0xa0>)
 8005c6e:	429c      	cmp	r4, r3
 8005c70:	bf08      	it	eq
 8005c72:	68ec      	ldreq	r4, [r5, #12]
 8005c74:	e7cb      	b.n	8005c0e <__swbuf_r+0x1a>
 8005c76:	4621      	mov	r1, r4
 8005c78:	4628      	mov	r0, r5
 8005c7a:	f000 f81f 	bl	8005cbc <__swsetup_r>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	d0cc      	beq.n	8005c1c <__swbuf_r+0x28>
 8005c82:	f04f 37ff 	mov.w	r7, #4294967295
 8005c86:	4638      	mov	r0, r7
 8005c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	0800b870 	.word	0x0800b870
 8005c90:	0800b890 	.word	0x0800b890
 8005c94:	0800b850 	.word	0x0800b850

08005c98 <_write_r>:
 8005c98:	b538      	push	{r3, r4, r5, lr}
 8005c9a:	4c07      	ldr	r4, [pc, #28]	; (8005cb8 <_write_r+0x20>)
 8005c9c:	4605      	mov	r5, r0
 8005c9e:	4608      	mov	r0, r1
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	6022      	str	r2, [r4, #0]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f7fe ff62 	bl	8004b70 <_write>
 8005cac:	1c43      	adds	r3, r0, #1
 8005cae:	d102      	bne.n	8005cb6 <_write_r+0x1e>
 8005cb0:	6823      	ldr	r3, [r4, #0]
 8005cb2:	b103      	cbz	r3, 8005cb6 <_write_r+0x1e>
 8005cb4:	602b      	str	r3, [r5, #0]
 8005cb6:	bd38      	pop	{r3, r4, r5, pc}
 8005cb8:	200010f0 	.word	0x200010f0

08005cbc <__swsetup_r>:
 8005cbc:	4b32      	ldr	r3, [pc, #200]	; (8005d88 <__swsetup_r+0xcc>)
 8005cbe:	b570      	push	{r4, r5, r6, lr}
 8005cc0:	681d      	ldr	r5, [r3, #0]
 8005cc2:	4606      	mov	r6, r0
 8005cc4:	460c      	mov	r4, r1
 8005cc6:	b125      	cbz	r5, 8005cd2 <__swsetup_r+0x16>
 8005cc8:	69ab      	ldr	r3, [r5, #24]
 8005cca:	b913      	cbnz	r3, 8005cd2 <__swsetup_r+0x16>
 8005ccc:	4628      	mov	r0, r5
 8005cce:	f7ff fd45 	bl	800575c <__sinit>
 8005cd2:	4b2e      	ldr	r3, [pc, #184]	; (8005d8c <__swsetup_r+0xd0>)
 8005cd4:	429c      	cmp	r4, r3
 8005cd6:	d10f      	bne.n	8005cf8 <__swsetup_r+0x3c>
 8005cd8:	686c      	ldr	r4, [r5, #4]
 8005cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	0715      	lsls	r5, r2, #28
 8005ce2:	d42c      	bmi.n	8005d3e <__swsetup_r+0x82>
 8005ce4:	06d0      	lsls	r0, r2, #27
 8005ce6:	d411      	bmi.n	8005d0c <__swsetup_r+0x50>
 8005ce8:	2209      	movs	r2, #9
 8005cea:	6032      	str	r2, [r6, #0]
 8005cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cf0:	81a3      	strh	r3, [r4, #12]
 8005cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf6:	bd70      	pop	{r4, r5, r6, pc}
 8005cf8:	4b25      	ldr	r3, [pc, #148]	; (8005d90 <__swsetup_r+0xd4>)
 8005cfa:	429c      	cmp	r4, r3
 8005cfc:	d101      	bne.n	8005d02 <__swsetup_r+0x46>
 8005cfe:	68ac      	ldr	r4, [r5, #8]
 8005d00:	e7eb      	b.n	8005cda <__swsetup_r+0x1e>
 8005d02:	4b24      	ldr	r3, [pc, #144]	; (8005d94 <__swsetup_r+0xd8>)
 8005d04:	429c      	cmp	r4, r3
 8005d06:	bf08      	it	eq
 8005d08:	68ec      	ldreq	r4, [r5, #12]
 8005d0a:	e7e6      	b.n	8005cda <__swsetup_r+0x1e>
 8005d0c:	0751      	lsls	r1, r2, #29
 8005d0e:	d512      	bpl.n	8005d36 <__swsetup_r+0x7a>
 8005d10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d12:	b141      	cbz	r1, 8005d26 <__swsetup_r+0x6a>
 8005d14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d18:	4299      	cmp	r1, r3
 8005d1a:	d002      	beq.n	8005d22 <__swsetup_r+0x66>
 8005d1c:	4630      	mov	r0, r6
 8005d1e:	f7ff fded 	bl	80058fc <_free_r>
 8005d22:	2300      	movs	r3, #0
 8005d24:	6363      	str	r3, [r4, #52]	; 0x34
 8005d26:	89a3      	ldrh	r3, [r4, #12]
 8005d28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d2c:	81a3      	strh	r3, [r4, #12]
 8005d2e:	2300      	movs	r3, #0
 8005d30:	6063      	str	r3, [r4, #4]
 8005d32:	6923      	ldr	r3, [r4, #16]
 8005d34:	6023      	str	r3, [r4, #0]
 8005d36:	89a3      	ldrh	r3, [r4, #12]
 8005d38:	f043 0308 	orr.w	r3, r3, #8
 8005d3c:	81a3      	strh	r3, [r4, #12]
 8005d3e:	6923      	ldr	r3, [r4, #16]
 8005d40:	b94b      	cbnz	r3, 8005d56 <__swsetup_r+0x9a>
 8005d42:	89a3      	ldrh	r3, [r4, #12]
 8005d44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d4c:	d003      	beq.n	8005d56 <__swsetup_r+0x9a>
 8005d4e:	4621      	mov	r1, r4
 8005d50:	4630      	mov	r0, r6
 8005d52:	f000 f867 	bl	8005e24 <__smakebuf_r>
 8005d56:	89a2      	ldrh	r2, [r4, #12]
 8005d58:	f012 0301 	ands.w	r3, r2, #1
 8005d5c:	d00c      	beq.n	8005d78 <__swsetup_r+0xbc>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	60a3      	str	r3, [r4, #8]
 8005d62:	6963      	ldr	r3, [r4, #20]
 8005d64:	425b      	negs	r3, r3
 8005d66:	61a3      	str	r3, [r4, #24]
 8005d68:	6923      	ldr	r3, [r4, #16]
 8005d6a:	b953      	cbnz	r3, 8005d82 <__swsetup_r+0xc6>
 8005d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d70:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005d74:	d1ba      	bne.n	8005cec <__swsetup_r+0x30>
 8005d76:	bd70      	pop	{r4, r5, r6, pc}
 8005d78:	0792      	lsls	r2, r2, #30
 8005d7a:	bf58      	it	pl
 8005d7c:	6963      	ldrpl	r3, [r4, #20]
 8005d7e:	60a3      	str	r3, [r4, #8]
 8005d80:	e7f2      	b.n	8005d68 <__swsetup_r+0xac>
 8005d82:	2000      	movs	r0, #0
 8005d84:	e7f7      	b.n	8005d76 <__swsetup_r+0xba>
 8005d86:	bf00      	nop
 8005d88:	20000494 	.word	0x20000494
 8005d8c:	0800b870 	.word	0x0800b870
 8005d90:	0800b890 	.word	0x0800b890
 8005d94:	0800b850 	.word	0x0800b850

08005d98 <_close_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	4c06      	ldr	r4, [pc, #24]	; (8005db4 <_close_r+0x1c>)
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	4605      	mov	r5, r0
 8005da0:	4608      	mov	r0, r1
 8005da2:	6023      	str	r3, [r4, #0]
 8005da4:	f7ff fb84 	bl	80054b0 <_close>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d102      	bne.n	8005db2 <_close_r+0x1a>
 8005dac:	6823      	ldr	r3, [r4, #0]
 8005dae:	b103      	cbz	r3, 8005db2 <_close_r+0x1a>
 8005db0:	602b      	str	r3, [r5, #0]
 8005db2:	bd38      	pop	{r3, r4, r5, pc}
 8005db4:	200010f0 	.word	0x200010f0

08005db8 <_lseek_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	4c07      	ldr	r4, [pc, #28]	; (8005dd8 <_lseek_r+0x20>)
 8005dbc:	4605      	mov	r5, r0
 8005dbe:	4608      	mov	r0, r1
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	6022      	str	r2, [r4, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f7ff fb7c 	bl	80054c4 <_lseek>
 8005dcc:	1c43      	adds	r3, r0, #1
 8005dce:	d102      	bne.n	8005dd6 <_lseek_r+0x1e>
 8005dd0:	6823      	ldr	r3, [r4, #0]
 8005dd2:	b103      	cbz	r3, 8005dd6 <_lseek_r+0x1e>
 8005dd4:	602b      	str	r3, [r5, #0]
 8005dd6:	bd38      	pop	{r3, r4, r5, pc}
 8005dd8:	200010f0 	.word	0x200010f0

08005ddc <__swhatbuf_r>:
 8005ddc:	b570      	push	{r4, r5, r6, lr}
 8005dde:	460e      	mov	r6, r1
 8005de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005de4:	2900      	cmp	r1, #0
 8005de6:	b090      	sub	sp, #64	; 0x40
 8005de8:	4614      	mov	r4, r2
 8005dea:	461d      	mov	r5, r3
 8005dec:	da07      	bge.n	8005dfe <__swhatbuf_r+0x22>
 8005dee:	2300      	movs	r3, #0
 8005df0:	602b      	str	r3, [r5, #0]
 8005df2:	89b3      	ldrh	r3, [r6, #12]
 8005df4:	061a      	lsls	r2, r3, #24
 8005df6:	d410      	bmi.n	8005e1a <__swhatbuf_r+0x3e>
 8005df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dfc:	e00e      	b.n	8005e1c <__swhatbuf_r+0x40>
 8005dfe:	aa01      	add	r2, sp, #4
 8005e00:	f000 fb3a 	bl	8006478 <_fstat_r>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	dbf2      	blt.n	8005dee <__swhatbuf_r+0x12>
 8005e08:	9a02      	ldr	r2, [sp, #8]
 8005e0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e12:	425a      	negs	r2, r3
 8005e14:	415a      	adcs	r2, r3
 8005e16:	602a      	str	r2, [r5, #0]
 8005e18:	e7ee      	b.n	8005df8 <__swhatbuf_r+0x1c>
 8005e1a:	2340      	movs	r3, #64	; 0x40
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	6023      	str	r3, [r4, #0]
 8005e20:	b010      	add	sp, #64	; 0x40
 8005e22:	bd70      	pop	{r4, r5, r6, pc}

08005e24 <__smakebuf_r>:
 8005e24:	898b      	ldrh	r3, [r1, #12]
 8005e26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e28:	079d      	lsls	r5, r3, #30
 8005e2a:	4606      	mov	r6, r0
 8005e2c:	460c      	mov	r4, r1
 8005e2e:	d507      	bpl.n	8005e40 <__smakebuf_r+0x1c>
 8005e30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e34:	6023      	str	r3, [r4, #0]
 8005e36:	6123      	str	r3, [r4, #16]
 8005e38:	2301      	movs	r3, #1
 8005e3a:	6163      	str	r3, [r4, #20]
 8005e3c:	b002      	add	sp, #8
 8005e3e:	bd70      	pop	{r4, r5, r6, pc}
 8005e40:	ab01      	add	r3, sp, #4
 8005e42:	466a      	mov	r2, sp
 8005e44:	f7ff ffca 	bl	8005ddc <__swhatbuf_r>
 8005e48:	9900      	ldr	r1, [sp, #0]
 8005e4a:	4605      	mov	r5, r0
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	f7ff fda3 	bl	8005998 <_malloc_r>
 8005e52:	b948      	cbnz	r0, 8005e68 <__smakebuf_r+0x44>
 8005e54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e58:	059a      	lsls	r2, r3, #22
 8005e5a:	d4ef      	bmi.n	8005e3c <__smakebuf_r+0x18>
 8005e5c:	f023 0303 	bic.w	r3, r3, #3
 8005e60:	f043 0302 	orr.w	r3, r3, #2
 8005e64:	81a3      	strh	r3, [r4, #12]
 8005e66:	e7e3      	b.n	8005e30 <__smakebuf_r+0xc>
 8005e68:	4b0d      	ldr	r3, [pc, #52]	; (8005ea0 <__smakebuf_r+0x7c>)
 8005e6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e6c:	89a3      	ldrh	r3, [r4, #12]
 8005e6e:	6020      	str	r0, [r4, #0]
 8005e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e74:	81a3      	strh	r3, [r4, #12]
 8005e76:	9b00      	ldr	r3, [sp, #0]
 8005e78:	6163      	str	r3, [r4, #20]
 8005e7a:	9b01      	ldr	r3, [sp, #4]
 8005e7c:	6120      	str	r0, [r4, #16]
 8005e7e:	b15b      	cbz	r3, 8005e98 <__smakebuf_r+0x74>
 8005e80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e84:	4630      	mov	r0, r6
 8005e86:	f000 fb09 	bl	800649c <_isatty_r>
 8005e8a:	b128      	cbz	r0, 8005e98 <__smakebuf_r+0x74>
 8005e8c:	89a3      	ldrh	r3, [r4, #12]
 8005e8e:	f023 0303 	bic.w	r3, r3, #3
 8005e92:	f043 0301 	orr.w	r3, r3, #1
 8005e96:	81a3      	strh	r3, [r4, #12]
 8005e98:	89a3      	ldrh	r3, [r4, #12]
 8005e9a:	431d      	orrs	r5, r3
 8005e9c:	81a5      	strh	r5, [r4, #12]
 8005e9e:	e7cd      	b.n	8005e3c <__smakebuf_r+0x18>
 8005ea0:	080056dd 	.word	0x080056dd

08005ea4 <__malloc_lock>:
 8005ea4:	4770      	bx	lr

08005ea6 <__malloc_unlock>:
 8005ea6:	4770      	bx	lr

08005ea8 <__sfputc_r>:
 8005ea8:	6893      	ldr	r3, [r2, #8]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	b410      	push	{r4}
 8005eb0:	6093      	str	r3, [r2, #8]
 8005eb2:	da09      	bge.n	8005ec8 <__sfputc_r+0x20>
 8005eb4:	6994      	ldr	r4, [r2, #24]
 8005eb6:	42a3      	cmp	r3, r4
 8005eb8:	db02      	blt.n	8005ec0 <__sfputc_r+0x18>
 8005eba:	b2cb      	uxtb	r3, r1
 8005ebc:	2b0a      	cmp	r3, #10
 8005ebe:	d103      	bne.n	8005ec8 <__sfputc_r+0x20>
 8005ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ec4:	f7ff be96 	b.w	8005bf4 <__swbuf_r>
 8005ec8:	6813      	ldr	r3, [r2, #0]
 8005eca:	1c58      	adds	r0, r3, #1
 8005ecc:	6010      	str	r0, [r2, #0]
 8005ece:	7019      	strb	r1, [r3, #0]
 8005ed0:	b2c8      	uxtb	r0, r1
 8005ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <__sfputs_r>:
 8005ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eda:	4606      	mov	r6, r0
 8005edc:	460f      	mov	r7, r1
 8005ede:	4614      	mov	r4, r2
 8005ee0:	18d5      	adds	r5, r2, r3
 8005ee2:	42ac      	cmp	r4, r5
 8005ee4:	d101      	bne.n	8005eea <__sfputs_r+0x12>
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	e007      	b.n	8005efa <__sfputs_r+0x22>
 8005eea:	463a      	mov	r2, r7
 8005eec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	f7ff ffd9 	bl	8005ea8 <__sfputc_r>
 8005ef6:	1c43      	adds	r3, r0, #1
 8005ef8:	d1f3      	bne.n	8005ee2 <__sfputs_r+0xa>
 8005efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005efc <_vfiprintf_r>:
 8005efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f00:	b09d      	sub	sp, #116	; 0x74
 8005f02:	460c      	mov	r4, r1
 8005f04:	4617      	mov	r7, r2
 8005f06:	9303      	str	r3, [sp, #12]
 8005f08:	4606      	mov	r6, r0
 8005f0a:	b118      	cbz	r0, 8005f14 <_vfiprintf_r+0x18>
 8005f0c:	6983      	ldr	r3, [r0, #24]
 8005f0e:	b90b      	cbnz	r3, 8005f14 <_vfiprintf_r+0x18>
 8005f10:	f7ff fc24 	bl	800575c <__sinit>
 8005f14:	4b7c      	ldr	r3, [pc, #496]	; (8006108 <_vfiprintf_r+0x20c>)
 8005f16:	429c      	cmp	r4, r3
 8005f18:	d157      	bne.n	8005fca <_vfiprintf_r+0xce>
 8005f1a:	6874      	ldr	r4, [r6, #4]
 8005f1c:	89a3      	ldrh	r3, [r4, #12]
 8005f1e:	0718      	lsls	r0, r3, #28
 8005f20:	d55d      	bpl.n	8005fde <_vfiprintf_r+0xe2>
 8005f22:	6923      	ldr	r3, [r4, #16]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d05a      	beq.n	8005fde <_vfiprintf_r+0xe2>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f2c:	2320      	movs	r3, #32
 8005f2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f32:	2330      	movs	r3, #48	; 0x30
 8005f34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f38:	f04f 0b01 	mov.w	fp, #1
 8005f3c:	46b8      	mov	r8, r7
 8005f3e:	4645      	mov	r5, r8
 8005f40:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d155      	bne.n	8005ff4 <_vfiprintf_r+0xf8>
 8005f48:	ebb8 0a07 	subs.w	sl, r8, r7
 8005f4c:	d00b      	beq.n	8005f66 <_vfiprintf_r+0x6a>
 8005f4e:	4653      	mov	r3, sl
 8005f50:	463a      	mov	r2, r7
 8005f52:	4621      	mov	r1, r4
 8005f54:	4630      	mov	r0, r6
 8005f56:	f7ff ffbf 	bl	8005ed8 <__sfputs_r>
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	f000 80c4 	beq.w	80060e8 <_vfiprintf_r+0x1ec>
 8005f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f62:	4453      	add	r3, sl
 8005f64:	9309      	str	r3, [sp, #36]	; 0x24
 8005f66:	f898 3000 	ldrb.w	r3, [r8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f000 80bc 	beq.w	80060e8 <_vfiprintf_r+0x1ec>
 8005f70:	2300      	movs	r3, #0
 8005f72:	f04f 32ff 	mov.w	r2, #4294967295
 8005f76:	9304      	str	r3, [sp, #16]
 8005f78:	9307      	str	r3, [sp, #28]
 8005f7a:	9205      	str	r2, [sp, #20]
 8005f7c:	9306      	str	r3, [sp, #24]
 8005f7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f82:	931a      	str	r3, [sp, #104]	; 0x68
 8005f84:	2205      	movs	r2, #5
 8005f86:	7829      	ldrb	r1, [r5, #0]
 8005f88:	4860      	ldr	r0, [pc, #384]	; (800610c <_vfiprintf_r+0x210>)
 8005f8a:	f7fc fbd1 	bl	8002730 <memchr>
 8005f8e:	f105 0801 	add.w	r8, r5, #1
 8005f92:	9b04      	ldr	r3, [sp, #16]
 8005f94:	2800      	cmp	r0, #0
 8005f96:	d131      	bne.n	8005ffc <_vfiprintf_r+0x100>
 8005f98:	06d9      	lsls	r1, r3, #27
 8005f9a:	bf44      	itt	mi
 8005f9c:	2220      	movmi	r2, #32
 8005f9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005fa2:	071a      	lsls	r2, r3, #28
 8005fa4:	bf44      	itt	mi
 8005fa6:	222b      	movmi	r2, #43	; 0x2b
 8005fa8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005fac:	782a      	ldrb	r2, [r5, #0]
 8005fae:	2a2a      	cmp	r2, #42	; 0x2a
 8005fb0:	d02c      	beq.n	800600c <_vfiprintf_r+0x110>
 8005fb2:	9a07      	ldr	r2, [sp, #28]
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	200a      	movs	r0, #10
 8005fb8:	46a8      	mov	r8, r5
 8005fba:	3501      	adds	r5, #1
 8005fbc:	f898 3000 	ldrb.w	r3, [r8]
 8005fc0:	3b30      	subs	r3, #48	; 0x30
 8005fc2:	2b09      	cmp	r3, #9
 8005fc4:	d96d      	bls.n	80060a2 <_vfiprintf_r+0x1a6>
 8005fc6:	b371      	cbz	r1, 8006026 <_vfiprintf_r+0x12a>
 8005fc8:	e026      	b.n	8006018 <_vfiprintf_r+0x11c>
 8005fca:	4b51      	ldr	r3, [pc, #324]	; (8006110 <_vfiprintf_r+0x214>)
 8005fcc:	429c      	cmp	r4, r3
 8005fce:	d101      	bne.n	8005fd4 <_vfiprintf_r+0xd8>
 8005fd0:	68b4      	ldr	r4, [r6, #8]
 8005fd2:	e7a3      	b.n	8005f1c <_vfiprintf_r+0x20>
 8005fd4:	4b4f      	ldr	r3, [pc, #316]	; (8006114 <_vfiprintf_r+0x218>)
 8005fd6:	429c      	cmp	r4, r3
 8005fd8:	bf08      	it	eq
 8005fda:	68f4      	ldreq	r4, [r6, #12]
 8005fdc:	e79e      	b.n	8005f1c <_vfiprintf_r+0x20>
 8005fde:	4621      	mov	r1, r4
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	f7ff fe6b 	bl	8005cbc <__swsetup_r>
 8005fe6:	2800      	cmp	r0, #0
 8005fe8:	d09e      	beq.n	8005f28 <_vfiprintf_r+0x2c>
 8005fea:	f04f 30ff 	mov.w	r0, #4294967295
 8005fee:	b01d      	add	sp, #116	; 0x74
 8005ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff4:	2b25      	cmp	r3, #37	; 0x25
 8005ff6:	d0a7      	beq.n	8005f48 <_vfiprintf_r+0x4c>
 8005ff8:	46a8      	mov	r8, r5
 8005ffa:	e7a0      	b.n	8005f3e <_vfiprintf_r+0x42>
 8005ffc:	4a43      	ldr	r2, [pc, #268]	; (800610c <_vfiprintf_r+0x210>)
 8005ffe:	1a80      	subs	r0, r0, r2
 8006000:	fa0b f000 	lsl.w	r0, fp, r0
 8006004:	4318      	orrs	r0, r3
 8006006:	9004      	str	r0, [sp, #16]
 8006008:	4645      	mov	r5, r8
 800600a:	e7bb      	b.n	8005f84 <_vfiprintf_r+0x88>
 800600c:	9a03      	ldr	r2, [sp, #12]
 800600e:	1d11      	adds	r1, r2, #4
 8006010:	6812      	ldr	r2, [r2, #0]
 8006012:	9103      	str	r1, [sp, #12]
 8006014:	2a00      	cmp	r2, #0
 8006016:	db01      	blt.n	800601c <_vfiprintf_r+0x120>
 8006018:	9207      	str	r2, [sp, #28]
 800601a:	e004      	b.n	8006026 <_vfiprintf_r+0x12a>
 800601c:	4252      	negs	r2, r2
 800601e:	f043 0302 	orr.w	r3, r3, #2
 8006022:	9207      	str	r2, [sp, #28]
 8006024:	9304      	str	r3, [sp, #16]
 8006026:	f898 3000 	ldrb.w	r3, [r8]
 800602a:	2b2e      	cmp	r3, #46	; 0x2e
 800602c:	d110      	bne.n	8006050 <_vfiprintf_r+0x154>
 800602e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006032:	2b2a      	cmp	r3, #42	; 0x2a
 8006034:	f108 0101 	add.w	r1, r8, #1
 8006038:	d137      	bne.n	80060aa <_vfiprintf_r+0x1ae>
 800603a:	9b03      	ldr	r3, [sp, #12]
 800603c:	1d1a      	adds	r2, r3, #4
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	9203      	str	r2, [sp, #12]
 8006042:	2b00      	cmp	r3, #0
 8006044:	bfb8      	it	lt
 8006046:	f04f 33ff 	movlt.w	r3, #4294967295
 800604a:	f108 0802 	add.w	r8, r8, #2
 800604e:	9305      	str	r3, [sp, #20]
 8006050:	4d31      	ldr	r5, [pc, #196]	; (8006118 <_vfiprintf_r+0x21c>)
 8006052:	f898 1000 	ldrb.w	r1, [r8]
 8006056:	2203      	movs	r2, #3
 8006058:	4628      	mov	r0, r5
 800605a:	f7fc fb69 	bl	8002730 <memchr>
 800605e:	b140      	cbz	r0, 8006072 <_vfiprintf_r+0x176>
 8006060:	2340      	movs	r3, #64	; 0x40
 8006062:	1b40      	subs	r0, r0, r5
 8006064:	fa03 f000 	lsl.w	r0, r3, r0
 8006068:	9b04      	ldr	r3, [sp, #16]
 800606a:	4303      	orrs	r3, r0
 800606c:	9304      	str	r3, [sp, #16]
 800606e:	f108 0801 	add.w	r8, r8, #1
 8006072:	f898 1000 	ldrb.w	r1, [r8]
 8006076:	4829      	ldr	r0, [pc, #164]	; (800611c <_vfiprintf_r+0x220>)
 8006078:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800607c:	2206      	movs	r2, #6
 800607e:	f108 0701 	add.w	r7, r8, #1
 8006082:	f7fc fb55 	bl	8002730 <memchr>
 8006086:	2800      	cmp	r0, #0
 8006088:	d034      	beq.n	80060f4 <_vfiprintf_r+0x1f8>
 800608a:	4b25      	ldr	r3, [pc, #148]	; (8006120 <_vfiprintf_r+0x224>)
 800608c:	bb03      	cbnz	r3, 80060d0 <_vfiprintf_r+0x1d4>
 800608e:	9b03      	ldr	r3, [sp, #12]
 8006090:	3307      	adds	r3, #7
 8006092:	f023 0307 	bic.w	r3, r3, #7
 8006096:	3308      	adds	r3, #8
 8006098:	9303      	str	r3, [sp, #12]
 800609a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800609c:	444b      	add	r3, r9
 800609e:	9309      	str	r3, [sp, #36]	; 0x24
 80060a0:	e74c      	b.n	8005f3c <_vfiprintf_r+0x40>
 80060a2:	fb00 3202 	mla	r2, r0, r2, r3
 80060a6:	2101      	movs	r1, #1
 80060a8:	e786      	b.n	8005fb8 <_vfiprintf_r+0xbc>
 80060aa:	2300      	movs	r3, #0
 80060ac:	9305      	str	r3, [sp, #20]
 80060ae:	4618      	mov	r0, r3
 80060b0:	250a      	movs	r5, #10
 80060b2:	4688      	mov	r8, r1
 80060b4:	3101      	adds	r1, #1
 80060b6:	f898 2000 	ldrb.w	r2, [r8]
 80060ba:	3a30      	subs	r2, #48	; 0x30
 80060bc:	2a09      	cmp	r2, #9
 80060be:	d903      	bls.n	80060c8 <_vfiprintf_r+0x1cc>
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d0c5      	beq.n	8006050 <_vfiprintf_r+0x154>
 80060c4:	9005      	str	r0, [sp, #20]
 80060c6:	e7c3      	b.n	8006050 <_vfiprintf_r+0x154>
 80060c8:	fb05 2000 	mla	r0, r5, r0, r2
 80060cc:	2301      	movs	r3, #1
 80060ce:	e7f0      	b.n	80060b2 <_vfiprintf_r+0x1b6>
 80060d0:	ab03      	add	r3, sp, #12
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	4622      	mov	r2, r4
 80060d6:	4b13      	ldr	r3, [pc, #76]	; (8006124 <_vfiprintf_r+0x228>)
 80060d8:	a904      	add	r1, sp, #16
 80060da:	4630      	mov	r0, r6
 80060dc:	f3af 8000 	nop.w
 80060e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80060e4:	4681      	mov	r9, r0
 80060e6:	d1d8      	bne.n	800609a <_vfiprintf_r+0x19e>
 80060e8:	89a3      	ldrh	r3, [r4, #12]
 80060ea:	065b      	lsls	r3, r3, #25
 80060ec:	f53f af7d 	bmi.w	8005fea <_vfiprintf_r+0xee>
 80060f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060f2:	e77c      	b.n	8005fee <_vfiprintf_r+0xf2>
 80060f4:	ab03      	add	r3, sp, #12
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	4622      	mov	r2, r4
 80060fa:	4b0a      	ldr	r3, [pc, #40]	; (8006124 <_vfiprintf_r+0x228>)
 80060fc:	a904      	add	r1, sp, #16
 80060fe:	4630      	mov	r0, r6
 8006100:	f000 f888 	bl	8006214 <_printf_i>
 8006104:	e7ec      	b.n	80060e0 <_vfiprintf_r+0x1e4>
 8006106:	bf00      	nop
 8006108:	0800b870 	.word	0x0800b870
 800610c:	0800b8b4 	.word	0x0800b8b4
 8006110:	0800b890 	.word	0x0800b890
 8006114:	0800b850 	.word	0x0800b850
 8006118:	0800b8ba 	.word	0x0800b8ba
 800611c:	0800b8be 	.word	0x0800b8be
 8006120:	00000000 	.word	0x00000000
 8006124:	08005ed9 	.word	0x08005ed9

08006128 <_printf_common>:
 8006128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800612c:	4691      	mov	r9, r2
 800612e:	461f      	mov	r7, r3
 8006130:	688a      	ldr	r2, [r1, #8]
 8006132:	690b      	ldr	r3, [r1, #16]
 8006134:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006138:	4293      	cmp	r3, r2
 800613a:	bfb8      	it	lt
 800613c:	4613      	movlt	r3, r2
 800613e:	f8c9 3000 	str.w	r3, [r9]
 8006142:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006146:	4606      	mov	r6, r0
 8006148:	460c      	mov	r4, r1
 800614a:	b112      	cbz	r2, 8006152 <_printf_common+0x2a>
 800614c:	3301      	adds	r3, #1
 800614e:	f8c9 3000 	str.w	r3, [r9]
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	0699      	lsls	r1, r3, #26
 8006156:	bf42      	ittt	mi
 8006158:	f8d9 3000 	ldrmi.w	r3, [r9]
 800615c:	3302      	addmi	r3, #2
 800615e:	f8c9 3000 	strmi.w	r3, [r9]
 8006162:	6825      	ldr	r5, [r4, #0]
 8006164:	f015 0506 	ands.w	r5, r5, #6
 8006168:	d107      	bne.n	800617a <_printf_common+0x52>
 800616a:	f104 0a19 	add.w	sl, r4, #25
 800616e:	68e3      	ldr	r3, [r4, #12]
 8006170:	f8d9 2000 	ldr.w	r2, [r9]
 8006174:	1a9b      	subs	r3, r3, r2
 8006176:	429d      	cmp	r5, r3
 8006178:	db29      	blt.n	80061ce <_printf_common+0xa6>
 800617a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800617e:	6822      	ldr	r2, [r4, #0]
 8006180:	3300      	adds	r3, #0
 8006182:	bf18      	it	ne
 8006184:	2301      	movne	r3, #1
 8006186:	0692      	lsls	r2, r2, #26
 8006188:	d42e      	bmi.n	80061e8 <_printf_common+0xc0>
 800618a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800618e:	4639      	mov	r1, r7
 8006190:	4630      	mov	r0, r6
 8006192:	47c0      	blx	r8
 8006194:	3001      	adds	r0, #1
 8006196:	d021      	beq.n	80061dc <_printf_common+0xb4>
 8006198:	6823      	ldr	r3, [r4, #0]
 800619a:	68e5      	ldr	r5, [r4, #12]
 800619c:	f8d9 2000 	ldr.w	r2, [r9]
 80061a0:	f003 0306 	and.w	r3, r3, #6
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	bf08      	it	eq
 80061a8:	1aad      	subeq	r5, r5, r2
 80061aa:	68a3      	ldr	r3, [r4, #8]
 80061ac:	6922      	ldr	r2, [r4, #16]
 80061ae:	bf0c      	ite	eq
 80061b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061b4:	2500      	movne	r5, #0
 80061b6:	4293      	cmp	r3, r2
 80061b8:	bfc4      	itt	gt
 80061ba:	1a9b      	subgt	r3, r3, r2
 80061bc:	18ed      	addgt	r5, r5, r3
 80061be:	f04f 0900 	mov.w	r9, #0
 80061c2:	341a      	adds	r4, #26
 80061c4:	454d      	cmp	r5, r9
 80061c6:	d11b      	bne.n	8006200 <_printf_common+0xd8>
 80061c8:	2000      	movs	r0, #0
 80061ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ce:	2301      	movs	r3, #1
 80061d0:	4652      	mov	r2, sl
 80061d2:	4639      	mov	r1, r7
 80061d4:	4630      	mov	r0, r6
 80061d6:	47c0      	blx	r8
 80061d8:	3001      	adds	r0, #1
 80061da:	d103      	bne.n	80061e4 <_printf_common+0xbc>
 80061dc:	f04f 30ff 	mov.w	r0, #4294967295
 80061e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061e4:	3501      	adds	r5, #1
 80061e6:	e7c2      	b.n	800616e <_printf_common+0x46>
 80061e8:	18e1      	adds	r1, r4, r3
 80061ea:	1c5a      	adds	r2, r3, #1
 80061ec:	2030      	movs	r0, #48	; 0x30
 80061ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061f2:	4422      	add	r2, r4
 80061f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061fc:	3302      	adds	r3, #2
 80061fe:	e7c4      	b.n	800618a <_printf_common+0x62>
 8006200:	2301      	movs	r3, #1
 8006202:	4622      	mov	r2, r4
 8006204:	4639      	mov	r1, r7
 8006206:	4630      	mov	r0, r6
 8006208:	47c0      	blx	r8
 800620a:	3001      	adds	r0, #1
 800620c:	d0e6      	beq.n	80061dc <_printf_common+0xb4>
 800620e:	f109 0901 	add.w	r9, r9, #1
 8006212:	e7d7      	b.n	80061c4 <_printf_common+0x9c>

08006214 <_printf_i>:
 8006214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006218:	4617      	mov	r7, r2
 800621a:	7e0a      	ldrb	r2, [r1, #24]
 800621c:	b085      	sub	sp, #20
 800621e:	2a6e      	cmp	r2, #110	; 0x6e
 8006220:	4698      	mov	r8, r3
 8006222:	4606      	mov	r6, r0
 8006224:	460c      	mov	r4, r1
 8006226:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006228:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800622c:	f000 80bc 	beq.w	80063a8 <_printf_i+0x194>
 8006230:	d81a      	bhi.n	8006268 <_printf_i+0x54>
 8006232:	2a63      	cmp	r2, #99	; 0x63
 8006234:	d02e      	beq.n	8006294 <_printf_i+0x80>
 8006236:	d80a      	bhi.n	800624e <_printf_i+0x3a>
 8006238:	2a00      	cmp	r2, #0
 800623a:	f000 80c8 	beq.w	80063ce <_printf_i+0x1ba>
 800623e:	2a58      	cmp	r2, #88	; 0x58
 8006240:	f000 808a 	beq.w	8006358 <_printf_i+0x144>
 8006244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006248:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800624c:	e02a      	b.n	80062a4 <_printf_i+0x90>
 800624e:	2a64      	cmp	r2, #100	; 0x64
 8006250:	d001      	beq.n	8006256 <_printf_i+0x42>
 8006252:	2a69      	cmp	r2, #105	; 0x69
 8006254:	d1f6      	bne.n	8006244 <_printf_i+0x30>
 8006256:	6821      	ldr	r1, [r4, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800625e:	d023      	beq.n	80062a8 <_printf_i+0x94>
 8006260:	1d11      	adds	r1, r2, #4
 8006262:	6019      	str	r1, [r3, #0]
 8006264:	6813      	ldr	r3, [r2, #0]
 8006266:	e027      	b.n	80062b8 <_printf_i+0xa4>
 8006268:	2a73      	cmp	r2, #115	; 0x73
 800626a:	f000 80b4 	beq.w	80063d6 <_printf_i+0x1c2>
 800626e:	d808      	bhi.n	8006282 <_printf_i+0x6e>
 8006270:	2a6f      	cmp	r2, #111	; 0x6f
 8006272:	d02a      	beq.n	80062ca <_printf_i+0xb6>
 8006274:	2a70      	cmp	r2, #112	; 0x70
 8006276:	d1e5      	bne.n	8006244 <_printf_i+0x30>
 8006278:	680a      	ldr	r2, [r1, #0]
 800627a:	f042 0220 	orr.w	r2, r2, #32
 800627e:	600a      	str	r2, [r1, #0]
 8006280:	e003      	b.n	800628a <_printf_i+0x76>
 8006282:	2a75      	cmp	r2, #117	; 0x75
 8006284:	d021      	beq.n	80062ca <_printf_i+0xb6>
 8006286:	2a78      	cmp	r2, #120	; 0x78
 8006288:	d1dc      	bne.n	8006244 <_printf_i+0x30>
 800628a:	2278      	movs	r2, #120	; 0x78
 800628c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006290:	496e      	ldr	r1, [pc, #440]	; (800644c <_printf_i+0x238>)
 8006292:	e064      	b.n	800635e <_printf_i+0x14a>
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800629a:	1d11      	adds	r1, r2, #4
 800629c:	6019      	str	r1, [r3, #0]
 800629e:	6813      	ldr	r3, [r2, #0]
 80062a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062a4:	2301      	movs	r3, #1
 80062a6:	e0a3      	b.n	80063f0 <_printf_i+0x1dc>
 80062a8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80062ac:	f102 0104 	add.w	r1, r2, #4
 80062b0:	6019      	str	r1, [r3, #0]
 80062b2:	d0d7      	beq.n	8006264 <_printf_i+0x50>
 80062b4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	da03      	bge.n	80062c4 <_printf_i+0xb0>
 80062bc:	222d      	movs	r2, #45	; 0x2d
 80062be:	425b      	negs	r3, r3
 80062c0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80062c4:	4962      	ldr	r1, [pc, #392]	; (8006450 <_printf_i+0x23c>)
 80062c6:	220a      	movs	r2, #10
 80062c8:	e017      	b.n	80062fa <_printf_i+0xe6>
 80062ca:	6820      	ldr	r0, [r4, #0]
 80062cc:	6819      	ldr	r1, [r3, #0]
 80062ce:	f010 0f80 	tst.w	r0, #128	; 0x80
 80062d2:	d003      	beq.n	80062dc <_printf_i+0xc8>
 80062d4:	1d08      	adds	r0, r1, #4
 80062d6:	6018      	str	r0, [r3, #0]
 80062d8:	680b      	ldr	r3, [r1, #0]
 80062da:	e006      	b.n	80062ea <_printf_i+0xd6>
 80062dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062e0:	f101 0004 	add.w	r0, r1, #4
 80062e4:	6018      	str	r0, [r3, #0]
 80062e6:	d0f7      	beq.n	80062d8 <_printf_i+0xc4>
 80062e8:	880b      	ldrh	r3, [r1, #0]
 80062ea:	4959      	ldr	r1, [pc, #356]	; (8006450 <_printf_i+0x23c>)
 80062ec:	2a6f      	cmp	r2, #111	; 0x6f
 80062ee:	bf14      	ite	ne
 80062f0:	220a      	movne	r2, #10
 80062f2:	2208      	moveq	r2, #8
 80062f4:	2000      	movs	r0, #0
 80062f6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80062fa:	6865      	ldr	r5, [r4, #4]
 80062fc:	60a5      	str	r5, [r4, #8]
 80062fe:	2d00      	cmp	r5, #0
 8006300:	f2c0 809c 	blt.w	800643c <_printf_i+0x228>
 8006304:	6820      	ldr	r0, [r4, #0]
 8006306:	f020 0004 	bic.w	r0, r0, #4
 800630a:	6020      	str	r0, [r4, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d13f      	bne.n	8006390 <_printf_i+0x17c>
 8006310:	2d00      	cmp	r5, #0
 8006312:	f040 8095 	bne.w	8006440 <_printf_i+0x22c>
 8006316:	4675      	mov	r5, lr
 8006318:	2a08      	cmp	r2, #8
 800631a:	d10b      	bne.n	8006334 <_printf_i+0x120>
 800631c:	6823      	ldr	r3, [r4, #0]
 800631e:	07da      	lsls	r2, r3, #31
 8006320:	d508      	bpl.n	8006334 <_printf_i+0x120>
 8006322:	6923      	ldr	r3, [r4, #16]
 8006324:	6862      	ldr	r2, [r4, #4]
 8006326:	429a      	cmp	r2, r3
 8006328:	bfde      	ittt	le
 800632a:	2330      	movle	r3, #48	; 0x30
 800632c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006330:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006334:	ebae 0305 	sub.w	r3, lr, r5
 8006338:	6123      	str	r3, [r4, #16]
 800633a:	f8cd 8000 	str.w	r8, [sp]
 800633e:	463b      	mov	r3, r7
 8006340:	aa03      	add	r2, sp, #12
 8006342:	4621      	mov	r1, r4
 8006344:	4630      	mov	r0, r6
 8006346:	f7ff feef 	bl	8006128 <_printf_common>
 800634a:	3001      	adds	r0, #1
 800634c:	d155      	bne.n	80063fa <_printf_i+0x1e6>
 800634e:	f04f 30ff 	mov.w	r0, #4294967295
 8006352:	b005      	add	sp, #20
 8006354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006358:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800635c:	493c      	ldr	r1, [pc, #240]	; (8006450 <_printf_i+0x23c>)
 800635e:	6822      	ldr	r2, [r4, #0]
 8006360:	6818      	ldr	r0, [r3, #0]
 8006362:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006366:	f100 0504 	add.w	r5, r0, #4
 800636a:	601d      	str	r5, [r3, #0]
 800636c:	d001      	beq.n	8006372 <_printf_i+0x15e>
 800636e:	6803      	ldr	r3, [r0, #0]
 8006370:	e002      	b.n	8006378 <_printf_i+0x164>
 8006372:	0655      	lsls	r5, r2, #25
 8006374:	d5fb      	bpl.n	800636e <_printf_i+0x15a>
 8006376:	8803      	ldrh	r3, [r0, #0]
 8006378:	07d0      	lsls	r0, r2, #31
 800637a:	bf44      	itt	mi
 800637c:	f042 0220 	orrmi.w	r2, r2, #32
 8006380:	6022      	strmi	r2, [r4, #0]
 8006382:	b91b      	cbnz	r3, 800638c <_printf_i+0x178>
 8006384:	6822      	ldr	r2, [r4, #0]
 8006386:	f022 0220 	bic.w	r2, r2, #32
 800638a:	6022      	str	r2, [r4, #0]
 800638c:	2210      	movs	r2, #16
 800638e:	e7b1      	b.n	80062f4 <_printf_i+0xe0>
 8006390:	4675      	mov	r5, lr
 8006392:	fbb3 f0f2 	udiv	r0, r3, r2
 8006396:	fb02 3310 	mls	r3, r2, r0, r3
 800639a:	5ccb      	ldrb	r3, [r1, r3]
 800639c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80063a0:	4603      	mov	r3, r0
 80063a2:	2800      	cmp	r0, #0
 80063a4:	d1f5      	bne.n	8006392 <_printf_i+0x17e>
 80063a6:	e7b7      	b.n	8006318 <_printf_i+0x104>
 80063a8:	6808      	ldr	r0, [r1, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	6949      	ldr	r1, [r1, #20]
 80063ae:	f010 0f80 	tst.w	r0, #128	; 0x80
 80063b2:	d004      	beq.n	80063be <_printf_i+0x1aa>
 80063b4:	1d10      	adds	r0, r2, #4
 80063b6:	6018      	str	r0, [r3, #0]
 80063b8:	6813      	ldr	r3, [r2, #0]
 80063ba:	6019      	str	r1, [r3, #0]
 80063bc:	e007      	b.n	80063ce <_printf_i+0x1ba>
 80063be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80063c2:	f102 0004 	add.w	r0, r2, #4
 80063c6:	6018      	str	r0, [r3, #0]
 80063c8:	6813      	ldr	r3, [r2, #0]
 80063ca:	d0f6      	beq.n	80063ba <_printf_i+0x1a6>
 80063cc:	8019      	strh	r1, [r3, #0]
 80063ce:	2300      	movs	r3, #0
 80063d0:	6123      	str	r3, [r4, #16]
 80063d2:	4675      	mov	r5, lr
 80063d4:	e7b1      	b.n	800633a <_printf_i+0x126>
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	1d11      	adds	r1, r2, #4
 80063da:	6019      	str	r1, [r3, #0]
 80063dc:	6815      	ldr	r5, [r2, #0]
 80063de:	6862      	ldr	r2, [r4, #4]
 80063e0:	2100      	movs	r1, #0
 80063e2:	4628      	mov	r0, r5
 80063e4:	f7fc f9a4 	bl	8002730 <memchr>
 80063e8:	b108      	cbz	r0, 80063ee <_printf_i+0x1da>
 80063ea:	1b40      	subs	r0, r0, r5
 80063ec:	6060      	str	r0, [r4, #4]
 80063ee:	6863      	ldr	r3, [r4, #4]
 80063f0:	6123      	str	r3, [r4, #16]
 80063f2:	2300      	movs	r3, #0
 80063f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063f8:	e79f      	b.n	800633a <_printf_i+0x126>
 80063fa:	6923      	ldr	r3, [r4, #16]
 80063fc:	462a      	mov	r2, r5
 80063fe:	4639      	mov	r1, r7
 8006400:	4630      	mov	r0, r6
 8006402:	47c0      	blx	r8
 8006404:	3001      	adds	r0, #1
 8006406:	d0a2      	beq.n	800634e <_printf_i+0x13a>
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	079b      	lsls	r3, r3, #30
 800640c:	d507      	bpl.n	800641e <_printf_i+0x20a>
 800640e:	2500      	movs	r5, #0
 8006410:	f104 0919 	add.w	r9, r4, #25
 8006414:	68e3      	ldr	r3, [r4, #12]
 8006416:	9a03      	ldr	r2, [sp, #12]
 8006418:	1a9b      	subs	r3, r3, r2
 800641a:	429d      	cmp	r5, r3
 800641c:	db05      	blt.n	800642a <_printf_i+0x216>
 800641e:	68e0      	ldr	r0, [r4, #12]
 8006420:	9b03      	ldr	r3, [sp, #12]
 8006422:	4298      	cmp	r0, r3
 8006424:	bfb8      	it	lt
 8006426:	4618      	movlt	r0, r3
 8006428:	e793      	b.n	8006352 <_printf_i+0x13e>
 800642a:	2301      	movs	r3, #1
 800642c:	464a      	mov	r2, r9
 800642e:	4639      	mov	r1, r7
 8006430:	4630      	mov	r0, r6
 8006432:	47c0      	blx	r8
 8006434:	3001      	adds	r0, #1
 8006436:	d08a      	beq.n	800634e <_printf_i+0x13a>
 8006438:	3501      	adds	r5, #1
 800643a:	e7eb      	b.n	8006414 <_printf_i+0x200>
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1a7      	bne.n	8006390 <_printf_i+0x17c>
 8006440:	780b      	ldrb	r3, [r1, #0]
 8006442:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006446:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800644a:	e765      	b.n	8006318 <_printf_i+0x104>
 800644c:	0800b8d6 	.word	0x0800b8d6
 8006450:	0800b8c5 	.word	0x0800b8c5

08006454 <_read_r>:
 8006454:	b538      	push	{r3, r4, r5, lr}
 8006456:	4c07      	ldr	r4, [pc, #28]	; (8006474 <_read_r+0x20>)
 8006458:	4605      	mov	r5, r0
 800645a:	4608      	mov	r0, r1
 800645c:	4611      	mov	r1, r2
 800645e:	2200      	movs	r2, #0
 8006460:	6022      	str	r2, [r4, #0]
 8006462:	461a      	mov	r2, r3
 8006464:	f7fe fffc 	bl	8005460 <_read>
 8006468:	1c43      	adds	r3, r0, #1
 800646a:	d102      	bne.n	8006472 <_read_r+0x1e>
 800646c:	6823      	ldr	r3, [r4, #0]
 800646e:	b103      	cbz	r3, 8006472 <_read_r+0x1e>
 8006470:	602b      	str	r3, [r5, #0]
 8006472:	bd38      	pop	{r3, r4, r5, pc}
 8006474:	200010f0 	.word	0x200010f0

08006478 <_fstat_r>:
 8006478:	b538      	push	{r3, r4, r5, lr}
 800647a:	4c07      	ldr	r4, [pc, #28]	; (8006498 <_fstat_r+0x20>)
 800647c:	2300      	movs	r3, #0
 800647e:	4605      	mov	r5, r0
 8006480:	4608      	mov	r0, r1
 8006482:	4611      	mov	r1, r2
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	f7ff f816 	bl	80054b6 <_fstat>
 800648a:	1c43      	adds	r3, r0, #1
 800648c:	d102      	bne.n	8006494 <_fstat_r+0x1c>
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	b103      	cbz	r3, 8006494 <_fstat_r+0x1c>
 8006492:	602b      	str	r3, [r5, #0]
 8006494:	bd38      	pop	{r3, r4, r5, pc}
 8006496:	bf00      	nop
 8006498:	200010f0 	.word	0x200010f0

0800649c <_isatty_r>:
 800649c:	b538      	push	{r3, r4, r5, lr}
 800649e:	4c06      	ldr	r4, [pc, #24]	; (80064b8 <_isatty_r+0x1c>)
 80064a0:	2300      	movs	r3, #0
 80064a2:	4605      	mov	r5, r0
 80064a4:	4608      	mov	r0, r1
 80064a6:	6023      	str	r3, [r4, #0]
 80064a8:	f7ff f80a 	bl	80054c0 <_isatty>
 80064ac:	1c43      	adds	r3, r0, #1
 80064ae:	d102      	bne.n	80064b6 <_isatty_r+0x1a>
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	b103      	cbz	r3, 80064b6 <_isatty_r+0x1a>
 80064b4:	602b      	str	r3, [r5, #0]
 80064b6:	bd38      	pop	{r3, r4, r5, pc}
 80064b8:	200010f0 	.word	0x200010f0

080064bc <tanhf>:
 80064bc:	b510      	push	{r4, lr}
 80064be:	ee10 4a10 	vmov	r4, s0
 80064c2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80064c6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80064ca:	ed2d 8b02 	vpush	{d8}
 80064ce:	eef0 7a40 	vmov.f32	s15, s0
 80064d2:	db0c      	blt.n	80064ee <tanhf+0x32>
 80064d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80064d8:	ee80 7a27 	vdiv.f32	s14, s0, s15
 80064dc:	2c00      	cmp	r4, #0
 80064de:	bfac      	ite	ge
 80064e0:	ee37 0a00 	vaddge.f32	s0, s14, s0
 80064e4:	ee37 0a40 	vsublt.f32	s0, s14, s0
 80064e8:	ecbd 8b02 	vpop	{d8}
 80064ec:	bd10      	pop	{r4, pc}
 80064ee:	4a1b      	ldr	r2, [pc, #108]	; (800655c <tanhf+0xa0>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	dc30      	bgt.n	8006556 <tanhf+0x9a>
 80064f4:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 80064f8:	da06      	bge.n	8006508 <tanhf+0x4c>
 80064fa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80064fe:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006502:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006506:	e7ef      	b.n	80064e8 <tanhf+0x2c>
 8006508:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800650c:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8006510:	db12      	blt.n	8006538 <tanhf+0x7c>
 8006512:	f000 ffaf 	bl	8007474 <fabsf>
 8006516:	ee30 0a00 	vadd.f32	s0, s0, s0
 800651a:	f000 fe7f 	bl	800721c <expm1f>
 800651e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8006522:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8006526:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800652a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800652e:	2c00      	cmp	r4, #0
 8006530:	bfb8      	it	lt
 8006532:	eeb1 0a40 	vneglt.f32	s0, s0
 8006536:	e7d7      	b.n	80064e8 <tanhf+0x2c>
 8006538:	f000 ff9c 	bl	8007474 <fabsf>
 800653c:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8006540:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006544:	f000 fe6a 	bl	800721c <expm1f>
 8006548:	ee70 7a08 	vadd.f32	s15, s0, s16
 800654c:	eeb1 7a40 	vneg.f32	s14, s0
 8006550:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8006554:	e7eb      	b.n	800652e <tanhf+0x72>
 8006556:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800655a:	e7e8      	b.n	800652e <tanhf+0x72>
 800655c:	41afffff 	.word	0x41afffff

08006560 <expf>:
 8006560:	b530      	push	{r4, r5, lr}
 8006562:	ed2d 8b02 	vpush	{d8}
 8006566:	4d35      	ldr	r5, [pc, #212]	; (800663c <expf+0xdc>)
 8006568:	b08b      	sub	sp, #44	; 0x2c
 800656a:	eeb0 8a40 	vmov.f32	s16, s0
 800656e:	f000 f9ed 	bl	800694c <__ieee754_expf>
 8006572:	f995 3000 	ldrsb.w	r3, [r5]
 8006576:	3301      	adds	r3, #1
 8006578:	ee10 4a10 	vmov	r4, s0
 800657c:	d030      	beq.n	80065e0 <expf+0x80>
 800657e:	eeb0 0a48 	vmov.f32	s0, s16
 8006582:	f000 ff7e 	bl	8007482 <finitef>
 8006586:	b358      	cbz	r0, 80065e0 <expf+0x80>
 8006588:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8006640 <expf+0xe0>
 800658c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006594:	dd35      	ble.n	8006602 <expf+0xa2>
 8006596:	2303      	movs	r3, #3
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	4b2a      	ldr	r3, [pc, #168]	; (8006644 <expf+0xe4>)
 800659c:	9301      	str	r3, [sp, #4]
 800659e:	ee18 0a10 	vmov	r0, s16
 80065a2:	2300      	movs	r3, #0
 80065a4:	9308      	str	r3, [sp, #32]
 80065a6:	f7fc fa77 	bl	8002a98 <__aeabi_f2d>
 80065aa:	f995 3000 	ldrsb.w	r3, [r5]
 80065ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065b6:	b9cb      	cbnz	r3, 80065ec <expf+0x8c>
 80065b8:	4b23      	ldr	r3, [pc, #140]	; (8006648 <expf+0xe8>)
 80065ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80065be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80065c2:	4668      	mov	r0, sp
 80065c4:	f000 fd9f 	bl	8007106 <matherr>
 80065c8:	b1b0      	cbz	r0, 80065f8 <expf+0x98>
 80065ca:	9b08      	ldr	r3, [sp, #32]
 80065cc:	b11b      	cbz	r3, 80065d6 <expf+0x76>
 80065ce:	f7fe ffcd 	bl	800556c <__errno>
 80065d2:	9b08      	ldr	r3, [sp, #32]
 80065d4:	6003      	str	r3, [r0, #0]
 80065d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065da:	f7fc fd4b 	bl	8003074 <__aeabi_d2f>
 80065de:	4604      	mov	r4, r0
 80065e0:	ee00 4a10 	vmov	s0, r4
 80065e4:	b00b      	add	sp, #44	; 0x2c
 80065e6:	ecbd 8b02 	vpop	{d8}
 80065ea:	bd30      	pop	{r4, r5, pc}
 80065ec:	4917      	ldr	r1, [pc, #92]	; (800664c <expf+0xec>)
 80065ee:	2000      	movs	r0, #0
 80065f0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d1e4      	bne.n	80065c2 <expf+0x62>
 80065f8:	f7fe ffb8 	bl	800556c <__errno>
 80065fc:	2322      	movs	r3, #34	; 0x22
 80065fe:	6003      	str	r3, [r0, #0]
 8006600:	e7e3      	b.n	80065ca <expf+0x6a>
 8006602:	eddf 7a13 	vldr	s15, [pc, #76]	; 8006650 <expf+0xf0>
 8006606:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800660a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800660e:	d5e7      	bpl.n	80065e0 <expf+0x80>
 8006610:	2304      	movs	r3, #4
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	4b0b      	ldr	r3, [pc, #44]	; (8006644 <expf+0xe4>)
 8006616:	9301      	str	r3, [sp, #4]
 8006618:	ee18 0a10 	vmov	r0, s16
 800661c:	2300      	movs	r3, #0
 800661e:	9308      	str	r3, [sp, #32]
 8006620:	f7fc fa3a 	bl	8002a98 <__aeabi_f2d>
 8006624:	2300      	movs	r3, #0
 8006626:	2200      	movs	r2, #0
 8006628:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800662c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006630:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006634:	f995 3000 	ldrsb.w	r3, [r5]
 8006638:	e7dc      	b.n	80065f4 <expf+0x94>
 800663a:	bf00      	nop
 800663c:	200004f8 	.word	0x200004f8
 8006640:	42b17180 	.word	0x42b17180
 8006644:	0800b8e7 	.word	0x0800b8e7
 8006648:	47efffff 	.word	0x47efffff
 800664c:	7ff00000 	.word	0x7ff00000
 8006650:	c2cff1b5 	.word	0xc2cff1b5

08006654 <powf>:
 8006654:	b570      	push	{r4, r5, r6, lr}
 8006656:	ed2d 8b04 	vpush	{d8-d9}
 800665a:	4cb5      	ldr	r4, [pc, #724]	; (8006930 <powf+0x2dc>)
 800665c:	b08a      	sub	sp, #40	; 0x28
 800665e:	eef0 8a40 	vmov.f32	s17, s0
 8006662:	eeb0 8a60 	vmov.f32	s16, s1
 8006666:	f000 fa45 	bl	8006af4 <__ieee754_powf>
 800666a:	f994 5000 	ldrsb.w	r5, [r4]
 800666e:	1c6b      	adds	r3, r5, #1
 8006670:	eeb0 9a40 	vmov.f32	s18, s0
 8006674:	4626      	mov	r6, r4
 8006676:	d05d      	beq.n	8006734 <powf+0xe0>
 8006678:	eeb4 8a48 	vcmp.f32	s16, s16
 800667c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006680:	d658      	bvs.n	8006734 <powf+0xe0>
 8006682:	eef4 8a68 	vcmp.f32	s17, s17
 8006686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800668a:	d721      	bvc.n	80066d0 <powf+0x7c>
 800668c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006694:	d14e      	bne.n	8006734 <powf+0xe0>
 8006696:	2301      	movs	r3, #1
 8006698:	9300      	str	r3, [sp, #0]
 800669a:	4ba6      	ldr	r3, [pc, #664]	; (8006934 <powf+0x2e0>)
 800669c:	9301      	str	r3, [sp, #4]
 800669e:	ee18 0a90 	vmov	r0, s17
 80066a2:	2300      	movs	r3, #0
 80066a4:	9308      	str	r3, [sp, #32]
 80066a6:	f7fc f9f7 	bl	8002a98 <__aeabi_f2d>
 80066aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066ae:	ee18 0a10 	vmov	r0, s16
 80066b2:	f7fc f9f1 	bl	8002a98 <__aeabi_f2d>
 80066b6:	4ba0      	ldr	r3, [pc, #640]	; (8006938 <powf+0x2e4>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	2d02      	cmp	r5, #2
 80066bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80066c4:	d030      	beq.n	8006728 <powf+0xd4>
 80066c6:	4668      	mov	r0, sp
 80066c8:	f000 fd1d 	bl	8007106 <matherr>
 80066cc:	bb30      	cbnz	r0, 800671c <powf+0xc8>
 80066ce:	e062      	b.n	8006796 <powf+0x142>
 80066d0:	eef5 8a40 	vcmp.f32	s17, #0.0
 80066d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066d8:	d162      	bne.n	80067a0 <powf+0x14c>
 80066da:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80066de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066e2:	d12d      	bne.n	8006740 <powf+0xec>
 80066e4:	2301      	movs	r3, #1
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	4b92      	ldr	r3, [pc, #584]	; (8006934 <powf+0x2e0>)
 80066ea:	9301      	str	r3, [sp, #4]
 80066ec:	ee18 0a90 	vmov	r0, s17
 80066f0:	2300      	movs	r3, #0
 80066f2:	9308      	str	r3, [sp, #32]
 80066f4:	f7fc f9d0 	bl	8002a98 <__aeabi_f2d>
 80066f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066fc:	ee18 0a10 	vmov	r0, s16
 8006700:	f7fc f9ca 	bl	8002a98 <__aeabi_f2d>
 8006704:	2200      	movs	r2, #0
 8006706:	2300      	movs	r3, #0
 8006708:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800670c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006710:	2d00      	cmp	r5, #0
 8006712:	d0d8      	beq.n	80066c6 <powf+0x72>
 8006714:	4b88      	ldr	r3, [pc, #544]	; (8006938 <powf+0x2e4>)
 8006716:	2200      	movs	r2, #0
 8006718:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800671c:	9b08      	ldr	r3, [sp, #32]
 800671e:	b11b      	cbz	r3, 8006728 <powf+0xd4>
 8006720:	f7fe ff24 	bl	800556c <__errno>
 8006724:	9b08      	ldr	r3, [sp, #32]
 8006726:	6003      	str	r3, [r0, #0]
 8006728:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800672c:	f7fc fca2 	bl	8003074 <__aeabi_d2f>
 8006730:	ee09 0a10 	vmov	s18, r0
 8006734:	eeb0 0a49 	vmov.f32	s0, s18
 8006738:	b00a      	add	sp, #40	; 0x28
 800673a:	ecbd 8b04 	vpop	{d8-d9}
 800673e:	bd70      	pop	{r4, r5, r6, pc}
 8006740:	eeb0 0a48 	vmov.f32	s0, s16
 8006744:	f000 fe9d 	bl	8007482 <finitef>
 8006748:	2800      	cmp	r0, #0
 800674a:	d0f3      	beq.n	8006734 <powf+0xe0>
 800674c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006754:	d5ee      	bpl.n	8006734 <powf+0xe0>
 8006756:	2301      	movs	r3, #1
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	4b76      	ldr	r3, [pc, #472]	; (8006934 <powf+0x2e0>)
 800675c:	9301      	str	r3, [sp, #4]
 800675e:	ee18 0a90 	vmov	r0, s17
 8006762:	2300      	movs	r3, #0
 8006764:	9308      	str	r3, [sp, #32]
 8006766:	f7fc f997 	bl	8002a98 <__aeabi_f2d>
 800676a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800676e:	ee18 0a10 	vmov	r0, s16
 8006772:	f7fc f991 	bl	8002a98 <__aeabi_f2d>
 8006776:	f994 3000 	ldrsb.w	r3, [r4]
 800677a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800677e:	b923      	cbnz	r3, 800678a <powf+0x136>
 8006780:	2200      	movs	r2, #0
 8006782:	2300      	movs	r3, #0
 8006784:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006788:	e79d      	b.n	80066c6 <powf+0x72>
 800678a:	496c      	ldr	r1, [pc, #432]	; (800693c <powf+0x2e8>)
 800678c:	2000      	movs	r0, #0
 800678e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006792:	2b02      	cmp	r3, #2
 8006794:	d197      	bne.n	80066c6 <powf+0x72>
 8006796:	f7fe fee9 	bl	800556c <__errno>
 800679a:	2321      	movs	r3, #33	; 0x21
 800679c:	6003      	str	r3, [r0, #0]
 800679e:	e7bd      	b.n	800671c <powf+0xc8>
 80067a0:	f000 fe6f 	bl	8007482 <finitef>
 80067a4:	4605      	mov	r5, r0
 80067a6:	2800      	cmp	r0, #0
 80067a8:	f040 8091 	bne.w	80068ce <powf+0x27a>
 80067ac:	eeb0 0a68 	vmov.f32	s0, s17
 80067b0:	f000 fe67 	bl	8007482 <finitef>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	f000 808a 	beq.w	80068ce <powf+0x27a>
 80067ba:	eeb0 0a48 	vmov.f32	s0, s16
 80067be:	f000 fe60 	bl	8007482 <finitef>
 80067c2:	2800      	cmp	r0, #0
 80067c4:	f000 8083 	beq.w	80068ce <powf+0x27a>
 80067c8:	eeb4 9a49 	vcmp.f32	s18, s18
 80067cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067d0:	f994 4000 	ldrsb.w	r4, [r4]
 80067d4:	4b57      	ldr	r3, [pc, #348]	; (8006934 <powf+0x2e0>)
 80067d6:	d71b      	bvc.n	8006810 <powf+0x1bc>
 80067d8:	2201      	movs	r2, #1
 80067da:	ee18 0a90 	vmov	r0, s17
 80067de:	e88d 000c 	stmia.w	sp, {r2, r3}
 80067e2:	9508      	str	r5, [sp, #32]
 80067e4:	f7fc f958 	bl	8002a98 <__aeabi_f2d>
 80067e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067ec:	ee18 0a10 	vmov	r0, s16
 80067f0:	f7fc f952 	bl	8002a98 <__aeabi_f2d>
 80067f4:	2200      	movs	r2, #0
 80067f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067fa:	2300      	movs	r3, #0
 80067fc:	2c00      	cmp	r4, #0
 80067fe:	d0c1      	beq.n	8006784 <powf+0x130>
 8006800:	4610      	mov	r0, r2
 8006802:	4619      	mov	r1, r3
 8006804:	f7fc fac6 	bl	8002d94 <__aeabi_ddiv>
 8006808:	2c02      	cmp	r4, #2
 800680a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800680e:	e7c1      	b.n	8006794 <powf+0x140>
 8006810:	2203      	movs	r2, #3
 8006812:	ee18 0a90 	vmov	r0, s17
 8006816:	e88d 000c 	stmia.w	sp, {r2, r3}
 800681a:	9508      	str	r5, [sp, #32]
 800681c:	f7fc f93c 	bl	8002a98 <__aeabi_f2d>
 8006820:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006824:	ee18 0a10 	vmov	r0, s16
 8006828:	f7fc f936 	bl	8002a98 <__aeabi_f2d>
 800682c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006830:	bb5c      	cbnz	r4, 800688a <powf+0x236>
 8006832:	4b43      	ldr	r3, [pc, #268]	; (8006940 <powf+0x2ec>)
 8006834:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8006838:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800683c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006840:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006844:	d56c      	bpl.n	8006920 <powf+0x2cc>
 8006846:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800684a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800684e:	ee17 0a90 	vmov	r0, s15
 8006852:	f7fc f921 	bl	8002a98 <__aeabi_f2d>
 8006856:	4604      	mov	r4, r0
 8006858:	460d      	mov	r5, r1
 800685a:	ec45 4b10 	vmov	d0, r4, r5
 800685e:	f000 fc55 	bl	800710c <rint>
 8006862:	4620      	mov	r0, r4
 8006864:	ec53 2b10 	vmov	r2, r3, d0
 8006868:	4629      	mov	r1, r5
 800686a:	f7fc fbd1 	bl	8003010 <__aeabi_dcmpeq>
 800686e:	b920      	cbnz	r0, 800687a <powf+0x226>
 8006870:	4b34      	ldr	r3, [pc, #208]	; (8006944 <powf+0x2f0>)
 8006872:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006876:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800687a:	f996 3000 	ldrsb.w	r3, [r6]
 800687e:	2b02      	cmp	r3, #2
 8006880:	d14e      	bne.n	8006920 <powf+0x2cc>
 8006882:	f7fe fe73 	bl	800556c <__errno>
 8006886:	2322      	movs	r3, #34	; 0x22
 8006888:	e788      	b.n	800679c <powf+0x148>
 800688a:	4b2f      	ldr	r3, [pc, #188]	; (8006948 <powf+0x2f4>)
 800688c:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8006890:	2200      	movs	r2, #0
 8006892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006896:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800689a:	d5ee      	bpl.n	800687a <powf+0x226>
 800689c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80068a0:	ee68 7a27 	vmul.f32	s15, s16, s15
 80068a4:	ee17 0a90 	vmov	r0, s15
 80068a8:	f7fc f8f6 	bl	8002a98 <__aeabi_f2d>
 80068ac:	4604      	mov	r4, r0
 80068ae:	460d      	mov	r5, r1
 80068b0:	ec45 4b10 	vmov	d0, r4, r5
 80068b4:	f000 fc2a 	bl	800710c <rint>
 80068b8:	4620      	mov	r0, r4
 80068ba:	ec53 2b10 	vmov	r2, r3, d0
 80068be:	4629      	mov	r1, r5
 80068c0:	f7fc fba6 	bl	8003010 <__aeabi_dcmpeq>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d1d8      	bne.n	800687a <powf+0x226>
 80068c8:	2200      	movs	r2, #0
 80068ca:	4b1c      	ldr	r3, [pc, #112]	; (800693c <powf+0x2e8>)
 80068cc:	e7d3      	b.n	8006876 <powf+0x222>
 80068ce:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80068d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068d6:	f47f af2d 	bne.w	8006734 <powf+0xe0>
 80068da:	eeb0 0a68 	vmov.f32	s0, s17
 80068de:	f000 fdd0 	bl	8007482 <finitef>
 80068e2:	2800      	cmp	r0, #0
 80068e4:	f43f af26 	beq.w	8006734 <powf+0xe0>
 80068e8:	eeb0 0a48 	vmov.f32	s0, s16
 80068ec:	f000 fdc9 	bl	8007482 <finitef>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	f43f af1f 	beq.w	8006734 <powf+0xe0>
 80068f6:	2304      	movs	r3, #4
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	4b0e      	ldr	r3, [pc, #56]	; (8006934 <powf+0x2e0>)
 80068fc:	9301      	str	r3, [sp, #4]
 80068fe:	ee18 0a90 	vmov	r0, s17
 8006902:	2300      	movs	r3, #0
 8006904:	9308      	str	r3, [sp, #32]
 8006906:	f7fc f8c7 	bl	8002a98 <__aeabi_f2d>
 800690a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800690e:	ee18 0a10 	vmov	r0, s16
 8006912:	f7fc f8c1 	bl	8002a98 <__aeabi_f2d>
 8006916:	2200      	movs	r2, #0
 8006918:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800691c:	2300      	movs	r3, #0
 800691e:	e7aa      	b.n	8006876 <powf+0x222>
 8006920:	4668      	mov	r0, sp
 8006922:	f000 fbf0 	bl	8007106 <matherr>
 8006926:	2800      	cmp	r0, #0
 8006928:	f47f aef8 	bne.w	800671c <powf+0xc8>
 800692c:	e7a9      	b.n	8006882 <powf+0x22e>
 800692e:	bf00      	nop
 8006930:	200004f8 	.word	0x200004f8
 8006934:	0800b8ec 	.word	0x0800b8ec
 8006938:	3ff00000 	.word	0x3ff00000
 800693c:	fff00000 	.word	0xfff00000
 8006940:	47efffff 	.word	0x47efffff
 8006944:	c7efffff 	.word	0xc7efffff
 8006948:	7ff00000 	.word	0x7ff00000

0800694c <__ieee754_expf>:
 800694c:	ee10 2a10 	vmov	r2, s0
 8006950:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8006954:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006958:	d902      	bls.n	8006960 <__ieee754_expf+0x14>
 800695a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800695e:	4770      	bx	lr
 8006960:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8006964:	d106      	bne.n	8006974 <__ieee754_expf+0x28>
 8006966:	eddf 7a51 	vldr	s15, [pc, #324]	; 8006aac <__ieee754_expf+0x160>
 800696a:	2b00      	cmp	r3, #0
 800696c:	bf18      	it	ne
 800696e:	eeb0 0a67 	vmovne.f32	s0, s15
 8006972:	4770      	bx	lr
 8006974:	484e      	ldr	r0, [pc, #312]	; (8006ab0 <__ieee754_expf+0x164>)
 8006976:	4282      	cmp	r2, r0
 8006978:	dd04      	ble.n	8006984 <__ieee754_expf+0x38>
 800697a:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8006ab4 <__ieee754_expf+0x168>
 800697e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006982:	4770      	bx	lr
 8006984:	2a00      	cmp	r2, #0
 8006986:	da03      	bge.n	8006990 <__ieee754_expf+0x44>
 8006988:	4a4b      	ldr	r2, [pc, #300]	; (8006ab8 <__ieee754_expf+0x16c>)
 800698a:	4291      	cmp	r1, r2
 800698c:	f200 808a 	bhi.w	8006aa4 <__ieee754_expf+0x158>
 8006990:	4a4a      	ldr	r2, [pc, #296]	; (8006abc <__ieee754_expf+0x170>)
 8006992:	4291      	cmp	r1, r2
 8006994:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006998:	d954      	bls.n	8006a44 <__ieee754_expf+0xf8>
 800699a:	4a49      	ldr	r2, [pc, #292]	; (8006ac0 <__ieee754_expf+0x174>)
 800699c:	4291      	cmp	r1, r2
 800699e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80069a2:	d836      	bhi.n	8006a12 <__ieee754_expf+0xc6>
 80069a4:	4947      	ldr	r1, [pc, #284]	; (8006ac4 <__ieee754_expf+0x178>)
 80069a6:	4411      	add	r1, r2
 80069a8:	ed91 7a00 	vldr	s14, [r1]
 80069ac:	4946      	ldr	r1, [pc, #280]	; (8006ac8 <__ieee754_expf+0x17c>)
 80069ae:	440a      	add	r2, r1
 80069b0:	edd2 7a00 	vldr	s15, [r2]
 80069b4:	ee30 7a47 	vsub.f32	s14, s0, s14
 80069b8:	f1c3 0201 	rsb	r2, r3, #1
 80069bc:	1ad2      	subs	r2, r2, r3
 80069be:	ee37 0a67 	vsub.f32	s0, s14, s15
 80069c2:	ee60 6a00 	vmul.f32	s13, s0, s0
 80069c6:	eddf 5a41 	vldr	s11, [pc, #260]	; 8006acc <__ieee754_expf+0x180>
 80069ca:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8006ad0 <__ieee754_expf+0x184>
 80069ce:	eea6 5aa5 	vfma.f32	s10, s13, s11
 80069d2:	eddf 5a40 	vldr	s11, [pc, #256]	; 8006ad4 <__ieee754_expf+0x188>
 80069d6:	eee6 5a85 	vfma.f32	s11, s13, s10
 80069da:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8006ad8 <__ieee754_expf+0x18c>
 80069de:	eea6 5aa5 	vfma.f32	s10, s13, s11
 80069e2:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006adc <__ieee754_expf+0x190>
 80069e6:	eee6 5a85 	vfma.f32	s11, s13, s10
 80069ea:	eeb0 5a40 	vmov.f32	s10, s0
 80069ee:	eea6 5ae5 	vfms.f32	s10, s13, s11
 80069f2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80069f6:	eef0 6a45 	vmov.f32	s13, s10
 80069fa:	ee20 5a05 	vmul.f32	s10, s0, s10
 80069fe:	bb92      	cbnz	r2, 8006a66 <__ieee754_expf+0x11a>
 8006a00:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8006a04:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8006a08:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006a0c:	ee36 0a40 	vsub.f32	s0, s12, s0
 8006a10:	4770      	bx	lr
 8006a12:	4b33      	ldr	r3, [pc, #204]	; (8006ae0 <__ieee754_expf+0x194>)
 8006a14:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8006ae4 <__ieee754_expf+0x198>
 8006a18:	4413      	add	r3, r2
 8006a1a:	edd3 7a00 	vldr	s15, [r3]
 8006a1e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006a22:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8006ae8 <__ieee754_expf+0x19c>
 8006a26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a2a:	ee17 2a90 	vmov	r2, s15
 8006a2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a32:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8006a36:	eeb0 7a40 	vmov.f32	s14, s0
 8006a3a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8006aec <__ieee754_expf+0x1a0>
 8006a3e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006a42:	e7bc      	b.n	80069be <__ieee754_expf+0x72>
 8006a44:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8006a48:	d20b      	bcs.n	8006a62 <__ieee754_expf+0x116>
 8006a4a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8006ab4 <__ieee754_expf+0x168>
 8006a4e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8006a52:	eef4 6ac6 	vcmpe.f32	s13, s12
 8006a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a5a:	dd02      	ble.n	8006a62 <__ieee754_expf+0x116>
 8006a5c:	ee30 0a06 	vadd.f32	s0, s0, s12
 8006a60:	4770      	bx	lr
 8006a62:	2200      	movs	r2, #0
 8006a64:	e7ad      	b.n	80069c2 <__ieee754_expf+0x76>
 8006a66:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8006a6a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8006a6e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8006a72:	bfb8      	it	lt
 8006a74:	3264      	addlt	r2, #100	; 0x64
 8006a76:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006a7a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8006a7e:	ee76 7a40 	vsub.f32	s15, s12, s0
 8006a82:	ee17 3a90 	vmov	r3, s15
 8006a86:	bfab      	itete	ge
 8006a88:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8006a8c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8006a90:	ee00 3a10 	vmovge	s0, r3
 8006a94:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8006af0 <__ieee754_expf+0x1a4>
 8006a98:	bfbc      	itt	lt
 8006a9a:	ee00 3a10 	vmovlt	s0, r3
 8006a9e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8006aa2:	4770      	bx	lr
 8006aa4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006aac <__ieee754_expf+0x160>
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	00000000 	.word	0x00000000
 8006ab0:	42b17217 	.word	0x42b17217
 8006ab4:	7149f2ca 	.word	0x7149f2ca
 8006ab8:	42cff1b5 	.word	0x42cff1b5
 8006abc:	3eb17218 	.word	0x3eb17218
 8006ac0:	3f851591 	.word	0x3f851591
 8006ac4:	0800b8fc 	.word	0x0800b8fc
 8006ac8:	0800b904 	.word	0x0800b904
 8006acc:	3331bb4c 	.word	0x3331bb4c
 8006ad0:	b5ddea0e 	.word	0xb5ddea0e
 8006ad4:	388ab355 	.word	0x388ab355
 8006ad8:	bb360b61 	.word	0xbb360b61
 8006adc:	3e2aaaab 	.word	0x3e2aaaab
 8006ae0:	0800b8f4 	.word	0x0800b8f4
 8006ae4:	3fb8aa3b 	.word	0x3fb8aa3b
 8006ae8:	3f317180 	.word	0x3f317180
 8006aec:	3717f7d1 	.word	0x3717f7d1
 8006af0:	0d800000 	.word	0x0d800000

08006af4 <__ieee754_powf>:
 8006af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006af8:	ee10 5a90 	vmov	r5, s1
 8006afc:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8006b00:	ed2d 8b02 	vpush	{d8}
 8006b04:	eeb0 8a40 	vmov.f32	s16, s0
 8006b08:	eef0 8a60 	vmov.f32	s17, s1
 8006b0c:	f000 8295 	beq.w	800703a <__ieee754_powf+0x546>
 8006b10:	ee10 8a10 	vmov	r8, s0
 8006b14:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8006b18:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8006b1c:	dc06      	bgt.n	8006b2c <__ieee754_powf+0x38>
 8006b1e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006b22:	dd0a      	ble.n	8006b3a <__ieee754_powf+0x46>
 8006b24:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8006b28:	f000 8287 	beq.w	800703a <__ieee754_powf+0x546>
 8006b2c:	ecbd 8b02 	vpop	{d8}
 8006b30:	48d9      	ldr	r0, [pc, #868]	; (8006e98 <__ieee754_powf+0x3a4>)
 8006b32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b36:	f000 bcaf 	b.w	8007498 <nanf>
 8006b3a:	f1b8 0f00 	cmp.w	r8, #0
 8006b3e:	da1d      	bge.n	8006b7c <__ieee754_powf+0x88>
 8006b40:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8006b44:	da2c      	bge.n	8006ba0 <__ieee754_powf+0xac>
 8006b46:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006b4a:	db30      	blt.n	8006bae <__ieee754_powf+0xba>
 8006b4c:	15fb      	asrs	r3, r7, #23
 8006b4e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006b52:	fa47 f603 	asr.w	r6, r7, r3
 8006b56:	fa06 f303 	lsl.w	r3, r6, r3
 8006b5a:	429f      	cmp	r7, r3
 8006b5c:	d127      	bne.n	8006bae <__ieee754_powf+0xba>
 8006b5e:	f006 0601 	and.w	r6, r6, #1
 8006b62:	f1c6 0602 	rsb	r6, r6, #2
 8006b66:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006b6a:	d122      	bne.n	8006bb2 <__ieee754_powf+0xbe>
 8006b6c:	2d00      	cmp	r5, #0
 8006b6e:	f280 826a 	bge.w	8007046 <__ieee754_powf+0x552>
 8006b72:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006b76:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8006b7a:	e00d      	b.n	8006b98 <__ieee754_powf+0xa4>
 8006b7c:	2600      	movs	r6, #0
 8006b7e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006b82:	d1f0      	bne.n	8006b66 <__ieee754_powf+0x72>
 8006b84:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8006b88:	f000 8257 	beq.w	800703a <__ieee754_powf+0x546>
 8006b8c:	dd0a      	ble.n	8006ba4 <__ieee754_powf+0xb0>
 8006b8e:	2d00      	cmp	r5, #0
 8006b90:	f280 8256 	bge.w	8007040 <__ieee754_powf+0x54c>
 8006b94:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8006e9c <__ieee754_powf+0x3a8>
 8006b98:	ecbd 8b02 	vpop	{d8}
 8006b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ba0:	2602      	movs	r6, #2
 8006ba2:	e7ec      	b.n	8006b7e <__ieee754_powf+0x8a>
 8006ba4:	2d00      	cmp	r5, #0
 8006ba6:	daf5      	bge.n	8006b94 <__ieee754_powf+0xa0>
 8006ba8:	eeb1 0a68 	vneg.f32	s0, s17
 8006bac:	e7f4      	b.n	8006b98 <__ieee754_powf+0xa4>
 8006bae:	2600      	movs	r6, #0
 8006bb0:	e7d9      	b.n	8006b66 <__ieee754_powf+0x72>
 8006bb2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8006bb6:	d102      	bne.n	8006bbe <__ieee754_powf+0xca>
 8006bb8:	ee28 0a08 	vmul.f32	s0, s16, s16
 8006bbc:	e7ec      	b.n	8006b98 <__ieee754_powf+0xa4>
 8006bbe:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8006bc2:	eeb0 0a48 	vmov.f32	s0, s16
 8006bc6:	d108      	bne.n	8006bda <__ieee754_powf+0xe6>
 8006bc8:	f1b8 0f00 	cmp.w	r8, #0
 8006bcc:	db05      	blt.n	8006bda <__ieee754_powf+0xe6>
 8006bce:	ecbd 8b02 	vpop	{d8}
 8006bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd6:	f000 ba4f 	b.w	8007078 <__ieee754_sqrtf>
 8006bda:	f000 fc4b 	bl	8007474 <fabsf>
 8006bde:	b124      	cbz	r4, 8006bea <__ieee754_powf+0xf6>
 8006be0:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8006be4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8006be8:	d117      	bne.n	8006c1a <__ieee754_powf+0x126>
 8006bea:	2d00      	cmp	r5, #0
 8006bec:	bfbc      	itt	lt
 8006bee:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8006bf2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8006bf6:	f1b8 0f00 	cmp.w	r8, #0
 8006bfa:	dacd      	bge.n	8006b98 <__ieee754_powf+0xa4>
 8006bfc:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8006c00:	ea54 0306 	orrs.w	r3, r4, r6
 8006c04:	d104      	bne.n	8006c10 <__ieee754_powf+0x11c>
 8006c06:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006c0a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8006c0e:	e7c3      	b.n	8006b98 <__ieee754_powf+0xa4>
 8006c10:	2e01      	cmp	r6, #1
 8006c12:	d1c1      	bne.n	8006b98 <__ieee754_powf+0xa4>
 8006c14:	eeb1 0a40 	vneg.f32	s0, s0
 8006c18:	e7be      	b.n	8006b98 <__ieee754_powf+0xa4>
 8006c1a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8006c1e:	3801      	subs	r0, #1
 8006c20:	ea56 0300 	orrs.w	r3, r6, r0
 8006c24:	d104      	bne.n	8006c30 <__ieee754_powf+0x13c>
 8006c26:	ee38 8a48 	vsub.f32	s16, s16, s16
 8006c2a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8006c2e:	e7b3      	b.n	8006b98 <__ieee754_powf+0xa4>
 8006c30:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8006c34:	dd6d      	ble.n	8006d12 <__ieee754_powf+0x21e>
 8006c36:	4b9a      	ldr	r3, [pc, #616]	; (8006ea0 <__ieee754_powf+0x3ac>)
 8006c38:	429c      	cmp	r4, r3
 8006c3a:	dc06      	bgt.n	8006c4a <__ieee754_powf+0x156>
 8006c3c:	2d00      	cmp	r5, #0
 8006c3e:	daa9      	bge.n	8006b94 <__ieee754_powf+0xa0>
 8006c40:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8006ea4 <__ieee754_powf+0x3b0>
 8006c44:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006c48:	e7a6      	b.n	8006b98 <__ieee754_powf+0xa4>
 8006c4a:	4b97      	ldr	r3, [pc, #604]	; (8006ea8 <__ieee754_powf+0x3b4>)
 8006c4c:	429c      	cmp	r4, r3
 8006c4e:	dd02      	ble.n	8006c56 <__ieee754_powf+0x162>
 8006c50:	2d00      	cmp	r5, #0
 8006c52:	dcf5      	bgt.n	8006c40 <__ieee754_powf+0x14c>
 8006c54:	e79e      	b.n	8006b94 <__ieee754_powf+0xa0>
 8006c56:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006c5a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006c5e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8006eac <__ieee754_powf+0x3b8>
 8006c62:	ed9f 6a93 	vldr	s12, [pc, #588]	; 8006eb0 <__ieee754_powf+0x3bc>
 8006c66:	eef1 6a40 	vneg.f32	s13, s0
 8006c6a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8006c6e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006c72:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006c76:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006c7a:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006c7e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006c82:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8006eb4 <__ieee754_powf+0x3c0>
 8006c86:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8006c8a:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8006eb8 <__ieee754_powf+0x3c4>
 8006c8e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006c92:	eeb0 7a67 	vmov.f32	s14, s15
 8006c96:	eea0 7a06 	vfma.f32	s14, s0, s12
 8006c9a:	ee17 3a10 	vmov	r3, s14
 8006c9e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006ca2:	f023 030f 	bic.w	r3, r3, #15
 8006ca6:	ee07 3a10 	vmov	s14, r3
 8006caa:	eea6 7a86 	vfma.f32	s14, s13, s12
 8006cae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006cb2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8006cb6:	f025 050f 	bic.w	r5, r5, #15
 8006cba:	ee07 5a10 	vmov	s14, r5
 8006cbe:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8006cc2:	ee78 8ac7 	vsub.f32	s17, s17, s14
 8006cc6:	ee07 3a10 	vmov	s14, r3
 8006cca:	ee06 5a90 	vmov	s13, r5
 8006cce:	eee7 7a28 	vfma.f32	s15, s14, s17
 8006cd2:	3e01      	subs	r6, #1
 8006cd4:	ea56 0200 	orrs.w	r2, r6, r0
 8006cd8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006cdc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8006ce0:	ee77 6a87 	vadd.f32	s13, s15, s14
 8006ce4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8006ce8:	ee16 4a90 	vmov	r4, s13
 8006cec:	bf08      	it	eq
 8006cee:	eeb0 8a40 	vmoveq.f32	s16, s0
 8006cf2:	2c00      	cmp	r4, #0
 8006cf4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006cf8:	f340 8186 	ble.w	8007008 <__ieee754_powf+0x514>
 8006cfc:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8006d00:	f340 80fc 	ble.w	8006efc <__ieee754_powf+0x408>
 8006d04:	eddf 7a67 	vldr	s15, [pc, #412]	; 8006ea4 <__ieee754_powf+0x3b0>
 8006d08:	ee28 0a27 	vmul.f32	s0, s16, s15
 8006d0c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006d10:	e742      	b.n	8006b98 <__ieee754_powf+0xa4>
 8006d12:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8006d16:	bfbf      	itttt	lt
 8006d18:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8006ebc <__ieee754_powf+0x3c8>
 8006d1c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8006d20:	f06f 0217 	mvnlt.w	r2, #23
 8006d24:	ee17 4a90 	vmovlt	r4, s15
 8006d28:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8006d2c:	bfa8      	it	ge
 8006d2e:	2200      	movge	r2, #0
 8006d30:	3b7f      	subs	r3, #127	; 0x7f
 8006d32:	4413      	add	r3, r2
 8006d34:	4a62      	ldr	r2, [pc, #392]	; (8006ec0 <__ieee754_powf+0x3cc>)
 8006d36:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8006d3a:	4294      	cmp	r4, r2
 8006d3c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8006d40:	dd06      	ble.n	8006d50 <__ieee754_powf+0x25c>
 8006d42:	4a60      	ldr	r2, [pc, #384]	; (8006ec4 <__ieee754_powf+0x3d0>)
 8006d44:	4294      	cmp	r4, r2
 8006d46:	f340 80a5 	ble.w	8006e94 <__ieee754_powf+0x3a0>
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8006d50:	2400      	movs	r4, #0
 8006d52:	4a5d      	ldr	r2, [pc, #372]	; (8006ec8 <__ieee754_powf+0x3d4>)
 8006d54:	00a7      	lsls	r7, r4, #2
 8006d56:	443a      	add	r2, r7
 8006d58:	ee07 1a90 	vmov	s15, r1
 8006d5c:	ed92 7a00 	vldr	s14, [r2]
 8006d60:	4a5a      	ldr	r2, [pc, #360]	; (8006ecc <__ieee754_powf+0x3d8>)
 8006d62:	ee77 6a87 	vadd.f32	s13, s15, s14
 8006d66:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006d6a:	ee85 5aa6 	vdiv.f32	s10, s11, s13
 8006d6e:	1049      	asrs	r1, r1, #1
 8006d70:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8006d74:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8006d78:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8006d7c:	ee37 6ac7 	vsub.f32	s12, s15, s14
 8006d80:	ee06 1a90 	vmov	s13, r1
 8006d84:	ee66 4a05 	vmul.f32	s9, s12, s10
 8006d88:	ee14 ea90 	vmov	lr, s9
 8006d8c:	ea02 0e0e 	and.w	lr, r2, lr
 8006d90:	ee05 ea90 	vmov	s11, lr
 8006d94:	eeb1 4a65 	vneg.f32	s8, s11
 8006d98:	eea4 6a26 	vfma.f32	s12, s8, s13
 8006d9c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8006da0:	ee35 7aa4 	vadd.f32	s14, s11, s9
 8006da4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8006da8:	eddf 7a49 	vldr	s15, [pc, #292]	; 8006ed0 <__ieee754_powf+0x3dc>
 8006dac:	eea4 6a26 	vfma.f32	s12, s8, s13
 8006db0:	ee66 6a05 	vmul.f32	s13, s12, s10
 8006db4:	ee24 6aa4 	vmul.f32	s12, s9, s9
 8006db8:	ed9f 5a46 	vldr	s10, [pc, #280]	; 8006ed4 <__ieee754_powf+0x3e0>
 8006dbc:	eee6 7a05 	vfma.f32	s15, s12, s10
 8006dc0:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8006ed8 <__ieee754_powf+0x3e4>
 8006dc4:	eea6 5a27 	vfma.f32	s10, s12, s15
 8006dc8:	eddf 7a38 	vldr	s15, [pc, #224]	; 8006eac <__ieee754_powf+0x3b8>
 8006dcc:	eee6 7a05 	vfma.f32	s15, s12, s10
 8006dd0:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8006edc <__ieee754_powf+0x3e8>
 8006dd4:	eea6 5a27 	vfma.f32	s10, s12, s15
 8006dd8:	eddf 7a41 	vldr	s15, [pc, #260]	; 8006ee0 <__ieee754_powf+0x3ec>
 8006ddc:	eee6 7a05 	vfma.f32	s15, s12, s10
 8006de0:	ee66 3a06 	vmul.f32	s7, s12, s12
 8006de4:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8006de8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006dec:	eeb0 6a45 	vmov.f32	s12, s10
 8006df0:	eea3 7aa7 	vfma.f32	s14, s7, s15
 8006df4:	eea5 6aa5 	vfma.f32	s12, s11, s11
 8006df8:	ee36 6a07 	vadd.f32	s12, s12, s14
 8006dfc:	ee16 1a10 	vmov	r1, s12
 8006e00:	4011      	ands	r1, r2
 8006e02:	ee06 1a10 	vmov	s12, r1
 8006e06:	ee76 7a45 	vsub.f32	s15, s12, s10
 8006e0a:	ed9f 5a36 	vldr	s10, [pc, #216]	; 8006ee4 <__ieee754_powf+0x3f0>
 8006e0e:	eee4 7a25 	vfma.f32	s15, s8, s11
 8006e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e16:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8006e1a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006e1e:	eeb0 7a67 	vmov.f32	s14, s15
 8006e22:	eea5 7a86 	vfma.f32	s14, s11, s12
 8006e26:	ee17 1a10 	vmov	r1, s14
 8006e2a:	4011      	ands	r1, r2
 8006e2c:	ee07 1a10 	vmov	s14, r1
 8006e30:	eea4 7a06 	vfma.f32	s14, s8, s12
 8006e34:	ee05 1a90 	vmov	s11, r1
 8006e38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e3c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006ee8 <__ieee754_powf+0x3f4>
 8006e40:	492a      	ldr	r1, [pc, #168]	; (8006eec <__ieee754_powf+0x3f8>)
 8006e42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e46:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006ef0 <__ieee754_powf+0x3fc>
 8006e4a:	eee5 7a87 	vfma.f32	s15, s11, s14
 8006e4e:	4439      	add	r1, r7
 8006e50:	ed91 7a00 	vldr	s14, [r1]
 8006e54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e58:	ee07 3a90 	vmov	s15, r3
 8006e5c:	eeb0 6a47 	vmov.f32	s12, s14
 8006e60:	4b24      	ldr	r3, [pc, #144]	; (8006ef4 <__ieee754_powf+0x400>)
 8006e62:	eea5 6a85 	vfma.f32	s12, s11, s10
 8006e66:	443b      	add	r3, r7
 8006e68:	edd3 4a00 	vldr	s9, [r3]
 8006e6c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006e70:	ee36 6a24 	vadd.f32	s12, s12, s9
 8006e74:	ee76 7a26 	vadd.f32	s15, s12, s13
 8006e78:	ee17 3a90 	vmov	r3, s15
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e86:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8006e8a:	eee5 7ac5 	vfms.f32	s15, s11, s10
 8006e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e92:	e70e      	b.n	8006cb2 <__ieee754_powf+0x1be>
 8006e94:	2401      	movs	r4, #1
 8006e96:	e75c      	b.n	8006d52 <__ieee754_powf+0x25e>
 8006e98:	0800b53e 	.word	0x0800b53e
 8006e9c:	00000000 	.word	0x00000000
 8006ea0:	3f7ffff7 	.word	0x3f7ffff7
 8006ea4:	7149f2ca 	.word	0x7149f2ca
 8006ea8:	3f800007 	.word	0x3f800007
 8006eac:	3eaaaaab 	.word	0x3eaaaaab
 8006eb0:	3fb8aa00 	.word	0x3fb8aa00
 8006eb4:	3fb8aa3b 	.word	0x3fb8aa3b
 8006eb8:	36eca570 	.word	0x36eca570
 8006ebc:	4b800000 	.word	0x4b800000
 8006ec0:	001cc471 	.word	0x001cc471
 8006ec4:	005db3d6 	.word	0x005db3d6
 8006ec8:	0800b90c 	.word	0x0800b90c
 8006ecc:	fffff000 	.word	0xfffff000
 8006ed0:	3e6c3255 	.word	0x3e6c3255
 8006ed4:	3e53f142 	.word	0x3e53f142
 8006ed8:	3e8ba305 	.word	0x3e8ba305
 8006edc:	3edb6db7 	.word	0x3edb6db7
 8006ee0:	3f19999a 	.word	0x3f19999a
 8006ee4:	3f763800 	.word	0x3f763800
 8006ee8:	3f76384f 	.word	0x3f76384f
 8006eec:	0800b91c 	.word	0x0800b91c
 8006ef0:	369dc3a0 	.word	0x369dc3a0
 8006ef4:	0800b914 	.word	0x0800b914
 8006ef8:	3338aa3c 	.word	0x3338aa3c
 8006efc:	f040 8094 	bne.w	8007028 <__ieee754_powf+0x534>
 8006f00:	ed1f 6a03 	vldr	s12, [pc, #-12]	; 8006ef8 <__ieee754_powf+0x404>
 8006f04:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8006f08:	ee37 6a86 	vadd.f32	s12, s15, s12
 8006f0c:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8006f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f14:	f73f aef6 	bgt.w	8006d04 <__ieee754_powf+0x210>
 8006f18:	15db      	asrs	r3, r3, #23
 8006f1a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8006f1e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006f22:	4103      	asrs	r3, r0
 8006f24:	4423      	add	r3, r4
 8006f26:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006f2a:	4948      	ldr	r1, [pc, #288]	; (800704c <__ieee754_powf+0x558>)
 8006f2c:	3a7f      	subs	r2, #127	; 0x7f
 8006f2e:	4111      	asrs	r1, r2
 8006f30:	ea23 0101 	bic.w	r1, r3, r1
 8006f34:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8006f38:	ee06 1a90 	vmov	s13, r1
 8006f3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006f40:	f1c2 0217 	rsb	r2, r2, #23
 8006f44:	4110      	asrs	r0, r2
 8006f46:	2c00      	cmp	r4, #0
 8006f48:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006f4c:	bfb8      	it	lt
 8006f4e:	4240      	neglt	r0, r0
 8006f50:	ee77 6a27 	vadd.f32	s13, s14, s15
 8006f54:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8007050 <__ieee754_powf+0x55c>
 8006f58:	ee16 3a90 	vmov	r3, s13
 8006f5c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006f60:	f023 030f 	bic.w	r3, r3, #15
 8006f64:	ee06 3a90 	vmov	s13, r3
 8006f68:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006f6c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006f70:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007054 <__ieee754_powf+0x560>
 8006f74:	ee26 7a87 	vmul.f32	s14, s13, s14
 8006f78:	eea7 7a86 	vfma.f32	s14, s15, s12
 8006f7c:	eef0 7a47 	vmov.f32	s15, s14
 8006f80:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8007058 <__ieee754_powf+0x564>
 8006f84:	eeb0 0a67 	vmov.f32	s0, s15
 8006f88:	eea6 0a87 	vfma.f32	s0, s13, s14
 8006f8c:	eeb0 6a40 	vmov.f32	s12, s0
 8006f90:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8006f94:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006f98:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006f9c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800705c <__ieee754_powf+0x568>
 8006fa0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8007060 <__ieee754_powf+0x56c>
 8006fa4:	eea7 6a26 	vfma.f32	s12, s14, s13
 8006fa8:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8007064 <__ieee754_powf+0x570>
 8006fac:	eee7 6a06 	vfma.f32	s13, s14, s12
 8006fb0:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8007068 <__ieee754_powf+0x574>
 8006fb4:	eea7 6a26 	vfma.f32	s12, s14, s13
 8006fb8:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800706c <__ieee754_powf+0x578>
 8006fbc:	eee7 6a06 	vfma.f32	s13, s14, s12
 8006fc0:	eeb0 6a40 	vmov.f32	s12, s0
 8006fc4:	eea7 6a66 	vfms.f32	s12, s14, s13
 8006fc8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006fcc:	eeb0 7a46 	vmov.f32	s14, s12
 8006fd0:	ee77 6a66 	vsub.f32	s13, s14, s13
 8006fd4:	ee20 6a06 	vmul.f32	s12, s0, s12
 8006fd8:	eee0 7a27 	vfma.f32	s15, s0, s15
 8006fdc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006fe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006fe4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006fe8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006fec:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006ff0:	ee10 3a10 	vmov	r3, s0
 8006ff4:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8006ff8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ffc:	da1a      	bge.n	8007034 <__ieee754_powf+0x540>
 8006ffe:	f000 fa51 	bl	80074a4 <scalbnf>
 8007002:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007006:	e5c7      	b.n	8006b98 <__ieee754_powf+0xa4>
 8007008:	4a19      	ldr	r2, [pc, #100]	; (8007070 <__ieee754_powf+0x57c>)
 800700a:	4293      	cmp	r3, r2
 800700c:	dd02      	ble.n	8007014 <__ieee754_powf+0x520>
 800700e:	eddf 7a19 	vldr	s15, [pc, #100]	; 8007074 <__ieee754_powf+0x580>
 8007012:	e679      	b.n	8006d08 <__ieee754_powf+0x214>
 8007014:	d108      	bne.n	8007028 <__ieee754_powf+0x534>
 8007016:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800701a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800701e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007022:	f63f af79 	bhi.w	8006f18 <__ieee754_powf+0x424>
 8007026:	e7f2      	b.n	800700e <__ieee754_powf+0x51a>
 8007028:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800702c:	f73f af74 	bgt.w	8006f18 <__ieee754_powf+0x424>
 8007030:	2000      	movs	r0, #0
 8007032:	e78d      	b.n	8006f50 <__ieee754_powf+0x45c>
 8007034:	ee00 3a10 	vmov	s0, r3
 8007038:	e7e3      	b.n	8007002 <__ieee754_powf+0x50e>
 800703a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800703e:	e5ab      	b.n	8006b98 <__ieee754_powf+0xa4>
 8007040:	eeb0 0a68 	vmov.f32	s0, s17
 8007044:	e5a8      	b.n	8006b98 <__ieee754_powf+0xa4>
 8007046:	eeb0 0a48 	vmov.f32	s0, s16
 800704a:	e5a5      	b.n	8006b98 <__ieee754_powf+0xa4>
 800704c:	007fffff 	.word	0x007fffff
 8007050:	3f317218 	.word	0x3f317218
 8007054:	35bfbe8c 	.word	0x35bfbe8c
 8007058:	3f317200 	.word	0x3f317200
 800705c:	3331bb4c 	.word	0x3331bb4c
 8007060:	b5ddea0e 	.word	0xb5ddea0e
 8007064:	388ab355 	.word	0x388ab355
 8007068:	bb360b61 	.word	0xbb360b61
 800706c:	3e2aaaab 	.word	0x3e2aaaab
 8007070:	43160000 	.word	0x43160000
 8007074:	0da24260 	.word	0x0da24260

08007078 <__ieee754_sqrtf>:
 8007078:	ee10 2a10 	vmov	r2, s0
 800707c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8007080:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007084:	b570      	push	{r4, r5, r6, lr}
 8007086:	d302      	bcc.n	800708e <__ieee754_sqrtf+0x16>
 8007088:	eea0 0a00 	vfma.f32	s0, s0, s0
 800708c:	bd70      	pop	{r4, r5, r6, pc}
 800708e:	b3b1      	cbz	r1, 80070fe <__ieee754_sqrtf+0x86>
 8007090:	2a00      	cmp	r2, #0
 8007092:	da04      	bge.n	800709e <__ieee754_sqrtf+0x26>
 8007094:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007098:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800709c:	bd70      	pop	{r4, r5, r6, pc}
 800709e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80070a2:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80070a6:	d204      	bcs.n	80070b2 <__ieee754_sqrtf+0x3a>
 80070a8:	2100      	movs	r1, #0
 80070aa:	0210      	lsls	r0, r2, #8
 80070ac:	d528      	bpl.n	8007100 <__ieee754_sqrtf+0x88>
 80070ae:	3901      	subs	r1, #1
 80070b0:	1a5b      	subs	r3, r3, r1
 80070b2:	3b7f      	subs	r3, #127	; 0x7f
 80070b4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80070b8:	07d9      	lsls	r1, r3, #31
 80070ba:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80070be:	bf48      	it	mi
 80070c0:	0052      	lslmi	r2, r2, #1
 80070c2:	1059      	asrs	r1, r3, #1
 80070c4:	2300      	movs	r3, #0
 80070c6:	0052      	lsls	r2, r2, #1
 80070c8:	2419      	movs	r4, #25
 80070ca:	461e      	mov	r6, r3
 80070cc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80070d0:	1835      	adds	r5, r6, r0
 80070d2:	4295      	cmp	r5, r2
 80070d4:	bfde      	ittt	le
 80070d6:	182e      	addle	r6, r5, r0
 80070d8:	1b52      	suble	r2, r2, r5
 80070da:	181b      	addle	r3, r3, r0
 80070dc:	3c01      	subs	r4, #1
 80070de:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80070e2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80070e6:	d1f3      	bne.n	80070d0 <__ieee754_sqrtf+0x58>
 80070e8:	b112      	cbz	r2, 80070f0 <__ieee754_sqrtf+0x78>
 80070ea:	3301      	adds	r3, #1
 80070ec:	f023 0301 	bic.w	r3, r3, #1
 80070f0:	105b      	asrs	r3, r3, #1
 80070f2:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 80070f6:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 80070fa:	ee00 3a10 	vmov	s0, r3
 80070fe:	bd70      	pop	{r4, r5, r6, pc}
 8007100:	0052      	lsls	r2, r2, #1
 8007102:	3101      	adds	r1, #1
 8007104:	e7d1      	b.n	80070aa <__ieee754_sqrtf+0x32>

08007106 <matherr>:
 8007106:	2000      	movs	r0, #0
 8007108:	4770      	bx	lr
	...

0800710c <rint>:
 800710c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800710e:	ec51 0b10 	vmov	r0, r1, d0
 8007112:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8007116:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 800711a:	2e13      	cmp	r6, #19
 800711c:	ee10 7a10 	vmov	r7, s0
 8007120:	460b      	mov	r3, r1
 8007122:	4602      	mov	r2, r0
 8007124:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007128:	dc58      	bgt.n	80071dc <rint+0xd0>
 800712a:	2e00      	cmp	r6, #0
 800712c:	da2b      	bge.n	8007186 <rint+0x7a>
 800712e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007132:	4302      	orrs	r2, r0
 8007134:	d023      	beq.n	800717e <rint+0x72>
 8007136:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800713a:	4302      	orrs	r2, r0
 800713c:	4251      	negs	r1, r2
 800713e:	4311      	orrs	r1, r2
 8007140:	0b09      	lsrs	r1, r1, #12
 8007142:	0c5b      	lsrs	r3, r3, #17
 8007144:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 8007148:	045b      	lsls	r3, r3, #17
 800714a:	ea41 0703 	orr.w	r7, r1, r3
 800714e:	4b31      	ldr	r3, [pc, #196]	; (8007214 <rint+0x108>)
 8007150:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007154:	4639      	mov	r1, r7
 8007156:	e9d3 6700 	ldrd	r6, r7, [r3]
 800715a:	ee10 0a10 	vmov	r0, s0
 800715e:	4632      	mov	r2, r6
 8007160:	463b      	mov	r3, r7
 8007162:	f7fb fb3b 	bl	80027dc <__adddf3>
 8007166:	e9cd 0100 	strd	r0, r1, [sp]
 800716a:	463b      	mov	r3, r7
 800716c:	4632      	mov	r2, r6
 800716e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007172:	f7fb fb31 	bl	80027d8 <__aeabi_dsub>
 8007176:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800717a:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 800717e:	ec41 0b10 	vmov	d0, r0, r1
 8007182:	b003      	add	sp, #12
 8007184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007186:	4c24      	ldr	r4, [pc, #144]	; (8007218 <rint+0x10c>)
 8007188:	4134      	asrs	r4, r6
 800718a:	ea01 0704 	and.w	r7, r1, r4
 800718e:	4307      	orrs	r7, r0
 8007190:	d0f5      	beq.n	800717e <rint+0x72>
 8007192:	0861      	lsrs	r1, r4, #1
 8007194:	ea03 0001 	and.w	r0, r3, r1
 8007198:	4302      	orrs	r2, r0
 800719a:	d00b      	beq.n	80071b4 <rint+0xa8>
 800719c:	ea23 0101 	bic.w	r1, r3, r1
 80071a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80071a4:	2e13      	cmp	r6, #19
 80071a6:	fa43 f306 	asr.w	r3, r3, r6
 80071aa:	bf0c      	ite	eq
 80071ac:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 80071b0:	2200      	movne	r2, #0
 80071b2:	430b      	orrs	r3, r1
 80071b4:	4619      	mov	r1, r3
 80071b6:	4b17      	ldr	r3, [pc, #92]	; (8007214 <rint+0x108>)
 80071b8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80071bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80071c0:	4610      	mov	r0, r2
 80071c2:	462b      	mov	r3, r5
 80071c4:	4622      	mov	r2, r4
 80071c6:	f7fb fb09 	bl	80027dc <__adddf3>
 80071ca:	e9cd 0100 	strd	r0, r1, [sp]
 80071ce:	4622      	mov	r2, r4
 80071d0:	462b      	mov	r3, r5
 80071d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071d6:	f7fb faff 	bl	80027d8 <__aeabi_dsub>
 80071da:	e7d0      	b.n	800717e <rint+0x72>
 80071dc:	2e33      	cmp	r6, #51	; 0x33
 80071de:	dd08      	ble.n	80071f2 <rint+0xe6>
 80071e0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80071e4:	d1cb      	bne.n	800717e <rint+0x72>
 80071e6:	ee10 2a10 	vmov	r2, s0
 80071ea:	460b      	mov	r3, r1
 80071ec:	f7fb faf6 	bl	80027dc <__adddf3>
 80071f0:	e7c5      	b.n	800717e <rint+0x72>
 80071f2:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 80071f6:	f04f 34ff 	mov.w	r4, #4294967295
 80071fa:	40f4      	lsrs	r4, r6
 80071fc:	4220      	tst	r0, r4
 80071fe:	d0be      	beq.n	800717e <rint+0x72>
 8007200:	0861      	lsrs	r1, r4, #1
 8007202:	420f      	tst	r7, r1
 8007204:	bf1f      	itttt	ne
 8007206:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800720a:	ea27 0101 	bicne.w	r1, r7, r1
 800720e:	4132      	asrne	r2, r6
 8007210:	430a      	orrne	r2, r1
 8007212:	e7cf      	b.n	80071b4 <rint+0xa8>
 8007214:	0800b928 	.word	0x0800b928
 8007218:	000fffff 	.word	0x000fffff

0800721c <expm1f>:
 800721c:	ee10 2a10 	vmov	r2, s0
 8007220:	4985      	ldr	r1, [pc, #532]	; (8007438 <expm1f+0x21c>)
 8007222:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8007226:	428b      	cmp	r3, r1
 8007228:	d924      	bls.n	8007274 <expm1f+0x58>
 800722a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800722e:	d902      	bls.n	8007236 <expm1f+0x1a>
 8007230:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007234:	4770      	bx	lr
 8007236:	d106      	bne.n	8007246 <expm1f+0x2a>
 8007238:	2a00      	cmp	r2, #0
 800723a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800723e:	bfb8      	it	lt
 8007240:	eeb0 0a67 	vmovlt.f32	s0, s15
 8007244:	4770      	bx	lr
 8007246:	2a00      	cmp	r2, #0
 8007248:	db07      	blt.n	800725a <expm1f+0x3e>
 800724a:	497c      	ldr	r1, [pc, #496]	; (800743c <expm1f+0x220>)
 800724c:	428b      	cmp	r3, r1
 800724e:	d963      	bls.n	8007318 <expm1f+0xfc>
 8007250:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 8007440 <expm1f+0x224>
 8007254:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007258:	4770      	bx	lr
 800725a:	eddf 7a7a 	vldr	s15, [pc, #488]	; 8007444 <expm1f+0x228>
 800725e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8007262:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800726a:	f140 80dd 	bpl.w	8007428 <expm1f+0x20c>
 800726e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007272:	4770      	bx	lr
 8007274:	4974      	ldr	r1, [pc, #464]	; (8007448 <expm1f+0x22c>)
 8007276:	428b      	cmp	r3, r1
 8007278:	d96d      	bls.n	8007356 <expm1f+0x13a>
 800727a:	4974      	ldr	r1, [pc, #464]	; (800744c <expm1f+0x230>)
 800727c:	428b      	cmp	r3, r1
 800727e:	d84b      	bhi.n	8007318 <expm1f+0xfc>
 8007280:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8007450 <expm1f+0x234>
 8007284:	2a00      	cmp	r2, #0
 8007286:	bfa7      	ittee	ge
 8007288:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800728c:	eddf 7a71 	vldrge	s15, [pc, #452]	; 8007454 <expm1f+0x238>
 8007290:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 8007458 <expm1f+0x23c>
 8007294:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8007298:	bfac      	ite	ge
 800729a:	2301      	movge	r3, #1
 800729c:	f04f 33ff 	movlt.w	r3, #4294967295
 80072a0:	ee37 0a67 	vsub.f32	s0, s14, s15
 80072a4:	ee37 7a40 	vsub.f32	s14, s14, s0
 80072a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072ac:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80072b0:	ee20 5a25 	vmul.f32	s10, s0, s11
 80072b4:	eddf 6a69 	vldr	s13, [pc, #420]	; 800745c <expm1f+0x240>
 80072b8:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8007460 <expm1f+0x244>
 80072bc:	ee20 7a05 	vmul.f32	s14, s0, s10
 80072c0:	eea7 6a26 	vfma.f32	s12, s14, s13
 80072c4:	eddf 6a67 	vldr	s13, [pc, #412]	; 8007464 <expm1f+0x248>
 80072c8:	eee7 6a06 	vfma.f32	s13, s14, s12
 80072cc:	ed9f 6a66 	vldr	s12, [pc, #408]	; 8007468 <expm1f+0x24c>
 80072d0:	eea7 6a26 	vfma.f32	s12, s14, s13
 80072d4:	eddf 6a65 	vldr	s13, [pc, #404]	; 800746c <expm1f+0x250>
 80072d8:	eee7 6a06 	vfma.f32	s13, s14, s12
 80072dc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80072e0:	eef0 4a46 	vmov.f32	s9, s12
 80072e4:	eee7 4a26 	vfma.f32	s9, s14, s13
 80072e8:	eef0 6a64 	vmov.f32	s13, s9
 80072ec:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 80072f0:	eee5 4a66 	vfms.f32	s9, s10, s13
 80072f4:	ee36 5ae4 	vsub.f32	s10, s13, s9
 80072f8:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80072fc:	eee0 6a64 	vfms.f32	s13, s0, s9
 8007300:	eef0 4a66 	vmov.f32	s9, s13
 8007304:	eec5 6a24 	vdiv.f32	s13, s10, s9
 8007308:	ee66 6a87 	vmul.f32	s13, s13, s14
 800730c:	bb8b      	cbnz	r3, 8007372 <expm1f+0x156>
 800730e:	eef0 7a47 	vmov.f32	s15, s14
 8007312:	eed0 7a26 	vfnms.f32	s15, s0, s13
 8007316:	e027      	b.n	8007368 <expm1f+0x14c>
 8007318:	eddf 7a55 	vldr	s15, [pc, #340]	; 8007470 <expm1f+0x254>
 800731c:	2a00      	cmp	r2, #0
 800731e:	ee20 7a27 	vmul.f32	s14, s0, s15
 8007322:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8007326:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800732a:	bfb8      	it	lt
 800732c:	eef0 7a66 	vmovlt.f32	s15, s13
 8007330:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007334:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8007450 <expm1f+0x234>
 8007338:	eddf 6a46 	vldr	s13, [pc, #280]	; 8007454 <expm1f+0x238>
 800733c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007340:	ee17 3a90 	vmov	r3, s15
 8007344:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007348:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800734c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007350:	eeb0 7a40 	vmov.f32	s14, s0
 8007354:	e7a4      	b.n	80072a0 <expm1f+0x84>
 8007356:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800735a:	d208      	bcs.n	800736e <expm1f+0x152>
 800735c:	eddf 7a38 	vldr	s15, [pc, #224]	; 8007440 <expm1f+0x224>
 8007360:	ee70 7a27 	vadd.f32	s15, s0, s15
 8007364:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8007368:	ee30 0a67 	vsub.f32	s0, s0, s15
 800736c:	4770      	bx	lr
 800736e:	2300      	movs	r3, #0
 8007370:	e79c      	b.n	80072ac <expm1f+0x90>
 8007372:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007376:	1c5a      	adds	r2, r3, #1
 8007378:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800737c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007380:	d106      	bne.n	8007390 <expm1f+0x174>
 8007382:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007386:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800738a:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800738e:	4770      	bx	lr
 8007390:	2b01      	cmp	r3, #1
 8007392:	d118      	bne.n	80073c6 <expm1f+0x1aa>
 8007394:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8007398:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800739c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a0:	bf41      	itttt	mi
 80073a2:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 80073a6:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 80073aa:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 80073ae:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 80073b2:	bf5f      	itttt	pl
 80073b4:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 80073b8:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 80073bc:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 80073c0:	eeb0 0a46 	vmovpl.f32	s0, s12
 80073c4:	4770      	bx	lr
 80073c6:	1c5a      	adds	r2, r3, #1
 80073c8:	2a39      	cmp	r2, #57	; 0x39
 80073ca:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 80073ce:	d90b      	bls.n	80073e8 <expm1f+0x1cc>
 80073d0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80073d4:	ee36 0a40 	vsub.f32	s0, s12, s0
 80073d8:	ee10 3a10 	vmov	r3, s0
 80073dc:	440b      	add	r3, r1
 80073de:	ee00 3a10 	vmov	s0, r3
 80073e2:	ee30 0a46 	vsub.f32	s0, s0, s12
 80073e6:	4770      	bx	lr
 80073e8:	2b16      	cmp	r3, #22
 80073ea:	dc11      	bgt.n	8007410 <expm1f+0x1f4>
 80073ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80073f0:	fa42 f303 	asr.w	r3, r2, r3
 80073f4:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 80073f8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80073fc:	ee07 3a90 	vmov	s15, r3
 8007400:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007404:	ee10 3a10 	vmov	r3, s0
 8007408:	440b      	add	r3, r1
 800740a:	ee00 3a10 	vmov	s0, r3
 800740e:	4770      	bx	lr
 8007410:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8007414:	05db      	lsls	r3, r3, #23
 8007416:	ee07 3a10 	vmov	s14, r3
 800741a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800741e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007422:	ee30 0a06 	vadd.f32	s0, s0, s12
 8007426:	e7ed      	b.n	8007404 <expm1f+0x1e8>
 8007428:	eddf 7a11 	vldr	s15, [pc, #68]	; 8007470 <expm1f+0x254>
 800742c:	ee20 7a27 	vmul.f32	s14, s0, s15
 8007430:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8007434:	e77c      	b.n	8007330 <expm1f+0x114>
 8007436:	bf00      	nop
 8007438:	4195b843 	.word	0x4195b843
 800743c:	42b17217 	.word	0x42b17217
 8007440:	7149f2ca 	.word	0x7149f2ca
 8007444:	0da24260 	.word	0x0da24260
 8007448:	3eb17218 	.word	0x3eb17218
 800744c:	3f851591 	.word	0x3f851591
 8007450:	3f317180 	.word	0x3f317180
 8007454:	3717f7d1 	.word	0x3717f7d1
 8007458:	b717f7d1 	.word	0xb717f7d1
 800745c:	b457edbb 	.word	0xb457edbb
 8007460:	36867e54 	.word	0x36867e54
 8007464:	b8a670cd 	.word	0xb8a670cd
 8007468:	3ad00d01 	.word	0x3ad00d01
 800746c:	bd088889 	.word	0xbd088889
 8007470:	3fb8aa3b 	.word	0x3fb8aa3b

08007474 <fabsf>:
 8007474:	ee10 3a10 	vmov	r3, s0
 8007478:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800747c:	ee00 3a10 	vmov	s0, r3
 8007480:	4770      	bx	lr

08007482 <finitef>:
 8007482:	ee10 3a10 	vmov	r3, s0
 8007486:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800748a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800748e:	bfac      	ite	ge
 8007490:	2000      	movge	r0, #0
 8007492:	2001      	movlt	r0, #1
 8007494:	4770      	bx	lr
	...

08007498 <nanf>:
 8007498:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80074a0 <nanf+0x8>
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	7fc00000 	.word	0x7fc00000

080074a4 <scalbnf>:
 80074a4:	b508      	push	{r3, lr}
 80074a6:	ee10 2a10 	vmov	r2, s0
 80074aa:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80074ae:	ed2d 8b02 	vpush	{d8}
 80074b2:	eef0 0a40 	vmov.f32	s1, s0
 80074b6:	d004      	beq.n	80074c2 <scalbnf+0x1e>
 80074b8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80074bc:	d306      	bcc.n	80074cc <scalbnf+0x28>
 80074be:	ee70 0a00 	vadd.f32	s1, s0, s0
 80074c2:	ecbd 8b02 	vpop	{d8}
 80074c6:	eeb0 0a60 	vmov.f32	s0, s1
 80074ca:	bd08      	pop	{r3, pc}
 80074cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074d0:	d21c      	bcs.n	800750c <scalbnf+0x68>
 80074d2:	4b1f      	ldr	r3, [pc, #124]	; (8007550 <scalbnf+0xac>)
 80074d4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007554 <scalbnf+0xb0>
 80074d8:	4298      	cmp	r0, r3
 80074da:	ee60 0a27 	vmul.f32	s1, s0, s15
 80074de:	db10      	blt.n	8007502 <scalbnf+0x5e>
 80074e0:	ee10 2a90 	vmov	r2, s1
 80074e4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80074e8:	3b19      	subs	r3, #25
 80074ea:	4403      	add	r3, r0
 80074ec:	2bfe      	cmp	r3, #254	; 0xfe
 80074ee:	dd0f      	ble.n	8007510 <scalbnf+0x6c>
 80074f0:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8007558 <scalbnf+0xb4>
 80074f4:	eeb0 0a48 	vmov.f32	s0, s16
 80074f8:	f000 f834 	bl	8007564 <copysignf>
 80074fc:	ee60 0a08 	vmul.f32	s1, s0, s16
 8007500:	e7df      	b.n	80074c2 <scalbnf+0x1e>
 8007502:	eddf 7a16 	vldr	s15, [pc, #88]	; 800755c <scalbnf+0xb8>
 8007506:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800750a:	e7da      	b.n	80074c2 <scalbnf+0x1e>
 800750c:	0ddb      	lsrs	r3, r3, #23
 800750e:	e7ec      	b.n	80074ea <scalbnf+0x46>
 8007510:	2b00      	cmp	r3, #0
 8007512:	dd06      	ble.n	8007522 <scalbnf+0x7e>
 8007514:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8007518:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800751c:	ee00 3a90 	vmov	s1, r3
 8007520:	e7cf      	b.n	80074c2 <scalbnf+0x1e>
 8007522:	f113 0f16 	cmn.w	r3, #22
 8007526:	da06      	bge.n	8007536 <scalbnf+0x92>
 8007528:	f24c 3350 	movw	r3, #50000	; 0xc350
 800752c:	4298      	cmp	r0, r3
 800752e:	dcdf      	bgt.n	80074f0 <scalbnf+0x4c>
 8007530:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800755c <scalbnf+0xb8>
 8007534:	e7de      	b.n	80074f4 <scalbnf+0x50>
 8007536:	3319      	adds	r3, #25
 8007538:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800753c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007540:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007560 <scalbnf+0xbc>
 8007544:	ee07 3a10 	vmov	s14, r3
 8007548:	ee67 0a27 	vmul.f32	s1, s14, s15
 800754c:	e7b9      	b.n	80074c2 <scalbnf+0x1e>
 800754e:	bf00      	nop
 8007550:	ffff3cb0 	.word	0xffff3cb0
 8007554:	4c000000 	.word	0x4c000000
 8007558:	7149f2ca 	.word	0x7149f2ca
 800755c:	0da24260 	.word	0x0da24260
 8007560:	33000000 	.word	0x33000000

08007564 <copysignf>:
 8007564:	ee10 3a10 	vmov	r3, s0
 8007568:	ee10 2a90 	vmov	r2, s1
 800756c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007570:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007574:	4313      	orrs	r3, r2
 8007576:	ee00 3a10 	vmov	s0, r3
 800757a:	4770      	bx	lr

0800757c <_init>:
 800757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757e:	bf00      	nop
 8007580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007582:	bc08      	pop	{r3}
 8007584:	469e      	mov	lr, r3
 8007586:	4770      	bx	lr

08007588 <_fini>:
 8007588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758a:	bf00      	nop
 800758c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800758e:	bc08      	pop	{r3}
 8007590:	469e      	mov	lr, r3
 8007592:	4770      	bx	lr
