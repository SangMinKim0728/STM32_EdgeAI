
Fan_N_EdgeAI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003e48  0800a640  0800a640  0001a640  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e488  0800e488  000208f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e488  0800e488  0001e488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e490  0800e490  000208f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e490  0800e490  0001e490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e494  0800e494  0001e494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008f4  20000000  0800e498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001184  20000900  0800ed8c  00020900  2**5
                  ALLOC
 10 ._user_heap_stack 00002804  20001a84  0800ed8c  00021a84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000208f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bad3  00000000  00000000  00020924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ced  00000000  00000000  0003c3f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000e102  00000000  00000000  000400e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d40  00000000  00000000  0004e1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013d8  00000000  00000000  0004ef28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a339  00000000  00000000  00050300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019969  00000000  00000000  0007a639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f91f5  00000000  00000000  00093fa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000cb  00000000  00000000  0018d197  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003948  00000000  00000000  0018d264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000b4  00000000  00000000  00190bac  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      00000183  00000000  00000000  00190c60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000900 	.word	0x20000900
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a61c 	.word	0x0800a61c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000904 	.word	0x20000904
 80001cc:	0800a61c 	.word	0x0800a61c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <AccelWrite>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Write the value into corresponding register address*/
void AccelWrite (uint8_t reg, uint8_t value)
{
 8000f4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t data[2];
    data[0] = reg;
    data[1] = value;
    HAL_I2C_Master_Transmit(&hi2c1, adxl_address, data, 2, 100);
 8000f4e:	2364      	movs	r3, #100	; 0x64
    data[0] = reg;
 8000f50:	f88d 000c 	strb.w	r0, [sp, #12]
    data[1] = value;
 8000f54:	f88d 100d 	strb.w	r1, [sp, #13]
    HAL_I2C_Master_Transmit(&hi2c1, adxl_address, data, 2, 100);
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	aa03      	add	r2, sp, #12
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	21a6      	movs	r1, #166	; 0xa6
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <AccelWrite+0x20>)
 8000f62:	f000 feb1 	bl	8001cc8 <HAL_I2C_Master_Transmit>
}
 8000f66:	b005      	add	sp, #20
 8000f68:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f6c:	20001144 	.word	0x20001144

08000f70 <AccelReadValues>:

/* Read the values from corresponding register address*/
void AccelReadValues (uint8_t reg, uint8_t numberofbytes)
{
 8000f70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    HAL_I2C_Mem_Read(&hi2c1, adxl_address, reg, 1, (uint8_t *) AccelData,
 8000f72:	2364      	movs	r3, #100	; 0x64
 8000f74:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <AccelReadValues+0x20>)
 8000f7a:	9300      	str	r3, [sp, #0]
{
 8000f7c:	4602      	mov	r2, r0
    HAL_I2C_Mem_Read(&hi2c1, adxl_address, reg, 1, (uint8_t *) AccelData,
 8000f7e:	2301      	movs	r3, #1
 8000f80:	21a6      	movs	r1, #166	; 0xa6
 8000f82:	4804      	ldr	r0, [pc, #16]	; (8000f94 <AccelReadValues+0x24>)
 8000f84:	f000 ff36 	bl	8001df4 <HAL_I2C_Mem_Read>
            numberofbytes, 100);
}
 8000f88:	b005      	add	sp, #20
 8000f8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f8e:	bf00      	nop
 8000f90:	20000928 	.word	0x20000928
 8000f94:	20001144 	.word	0x20001144

08000f98 <AccelInit>:
    HAL_I2C_Mem_Read(&hi2c1, adxl_address, reg, 1, &chipid, 1, 100);

}

void AccelInit(void)
{
 8000f98:	b508      	push	{r3, lr}
    AccelReadValues(0x00, 1);
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f7ff ffe7 	bl	8000f70 <AccelReadValues>
    AccelWrite(0x2d, 0x00);  // reset all bits
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	202d      	movs	r0, #45	; 0x2d
 8000fa6:	f7ff ffd1 	bl	8000f4c <AccelWrite>
    AccelWrite(0x2d, 0x08);  // power_cntl measure and wake up 8hz*/
 8000faa:	2108      	movs	r1, #8
 8000fac:	202d      	movs	r0, #45	; 0x2d
 8000fae:	f7ff ffcd 	bl	8000f4c <AccelWrite>
    AccelWrite(0x31, 0x00);  // data_format range= +- 2g

}
 8000fb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    AccelWrite(0x31, 0x00);  // data_format range= +- 2g
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2031      	movs	r0, #49	; 0x31
 8000fba:	f7ff bfc7 	b.w	8000f4c <AccelWrite>

08000fbe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fbe:	b500      	push	{lr}
 8000fc0:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc2:	2244      	movs	r2, #68	; 0x44
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	a805      	add	r0, sp, #20
 8000fc8:	f006 fd9c 	bl	8007b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fcc:	2214      	movs	r2, #20
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4668      	mov	r0, sp
 8000fd2:	f006 fd97 	bl	8007b04 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fd6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fda:	f001 f83d 	bl	8002058 <HAL_PWREx_ControlVoltageScaling>
 8000fde:	b108      	cbz	r0, 8000fe4 <SystemClock_Config+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <SystemClock_Config+0x24>
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe4:	2210      	movs	r2, #16
 8000fe6:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000fea:	2001      	movs	r0, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fec:	e9cd 1208 	strd	r1, r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ff0:	220a      	movs	r2, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff2:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ff4:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ff8:	2207      	movs	r2, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffa:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ffc:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001000:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001004:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001006:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001008:	f001 f8ec 	bl	80021e4 <HAL_RCC_OscConfig>
 800100c:	b108      	cbz	r0, 8001012 <SystemClock_Config+0x54>
 800100e:	b672      	cpsid	i
  while (1)
 8001010:	e7fe      	b.n	8001010 <SystemClock_Config+0x52>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001012:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001016:	220f      	movs	r2, #15
 8001018:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800101a:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800101c:	2104      	movs	r1, #4
 800101e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001020:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001024:	f001 fb5e 	bl	80026e4 <HAL_RCC_ClockConfig>
 8001028:	b108      	cbz	r0, 800102e <SystemClock_Config+0x70>
 800102a:	b672      	cpsid	i
  while (1)
 800102c:	e7fe      	b.n	800102c <SystemClock_Config+0x6e>
}
 800102e:	b017      	add	sp, #92	; 0x5c
 8001030:	f85d fb04 	ldr.w	pc, [sp], #4
 8001034:	0000      	movs	r0, r0
	...

08001038 <main>:
{
 8001038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800103c:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 800103e:	f000 fae5 	bl	800160c <HAL_Init>
  SystemClock_Config();
 8001042:	f7ff ffbc 	bl	8000fbe <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	2214      	movs	r2, #20
 8001048:	2100      	movs	r1, #0
 800104a:	a804      	add	r0, sp, #16
 800104c:	f006 fd5a 	bl	8007b04 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001050:	4ba7      	ldr	r3, [pc, #668]	; (80012f0 <main+0x2b8>)
 8001052:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001054:	f042 0204 	orr.w	r2, r2, #4
 8001058:	64da      	str	r2, [r3, #76]	; 0x4c
 800105a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800105c:	f002 0204 	and.w	r2, r2, #4
 8001060:	9200      	str	r2, [sp, #0]
 8001062:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001064:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001066:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800106a:	64da      	str	r2, [r3, #76]	; 0x4c
 800106c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800106e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001072:	9201      	str	r2, [sp, #4]
 8001074:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001078:	f042 0201 	orr.w	r2, r2, #1
 800107c:	64da      	str	r2, [r3, #76]	; 0x4c
 800107e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001080:	f002 0201 	and.w	r2, r2, #1
 8001084:	9202      	str	r2, [sp, #8]
 8001086:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001088:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800108a:	f042 0202 	orr.w	r2, r2, #2
 800108e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001098:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800109a:	2120      	movs	r1, #32
 800109c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a0:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010a2:	f000 fc95 	bl	80019d0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010a6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010aa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010b0:	e9cd 0304 	strd	r0, r3, [sp, #16]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010b4:	a904      	add	r1, sp, #16
 80010b6:	488f      	ldr	r0, [pc, #572]	; (80012f4 <main+0x2bc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	2501      	movs	r5, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f000 fbaa 	bl	8001814 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c0:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c6:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c8:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	e9cd 4406 	strd	r4, r4, [sp, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f000 fba0 	bl	8001814 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 80010d4:	4888      	ldr	r0, [pc, #544]	; (80012f8 <main+0x2c0>)
 80010d6:	4b89      	ldr	r3, [pc, #548]	; (80012fc <main+0x2c4>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80010d8:	8084      	strh	r4, [r0, #4]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80010da:	e9c0 4405 	strd	r4, r4, [r0, #20]
  hcrc.Instance = CRC;
 80010de:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80010e0:	6205      	str	r5, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010e2:	f000 fb39 	bl	8001758 <HAL_CRC_Init>
 80010e6:	b108      	cbz	r0, 80010ec <main+0xb4>
 80010e8:	b672      	cpsid	i
  while (1)
 80010ea:	e7fe      	b.n	80010ea <main+0xb2>
  hi2c1.Instance = I2C1;
 80010ec:	4c84      	ldr	r4, [pc, #528]	; (8001300 <main+0x2c8>)
  hi2c1.Init.Timing = 0x00702991;
 80010ee:	4985      	ldr	r1, [pc, #532]	; (8001304 <main+0x2cc>)
 80010f0:	4b85      	ldr	r3, [pc, #532]	; (8001308 <main+0x2d0>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f2:	6220      	str	r0, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f4:	e9c4 0502 	strd	r0, r5, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 80010f8:	e9c4 0004 	strd	r0, r0, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010fc:	e9c4 0006 	strd	r0, r0, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001100:	4620      	mov	r0, r4
  hi2c1.Init.Timing = 0x00702991;
 8001102:	e9c4 1300 	strd	r1, r3, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001106:	f000 fd8e 	bl	8001c26 <HAL_I2C_Init>
 800110a:	4601      	mov	r1, r0
 800110c:	b108      	cbz	r0, 8001112 <main+0xda>
 800110e:	b672      	cpsid	i
  while (1)
 8001110:	e7fe      	b.n	8001110 <main+0xd8>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001112:	4620      	mov	r0, r4
 8001114:	f000 ff4c 	bl	8001fb0 <HAL_I2CEx_ConfigAnalogFilter>
 8001118:	4601      	mov	r1, r0
 800111a:	b108      	cbz	r0, 8001120 <main+0xe8>
 800111c:	b672      	cpsid	i
  while (1)
 800111e:	e7fe      	b.n	800111e <main+0xe6>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001120:	4620      	mov	r0, r4
 8001122:	f000 ff6b 	bl	8001ffc <HAL_I2CEx_ConfigDigitalFilter>
 8001126:	4604      	mov	r4, r0
 8001128:	b108      	cbz	r0, 800112e <main+0xf6>
 800112a:	b672      	cpsid	i
  while (1)
 800112c:	e7fe      	b.n	800112c <main+0xf4>
  MX_X_CUBE_AI_Init();
 800112e:	f002 fcf1 	bl	8003b14 <MX_X_CUBE_AI_Init>
  printf("Hello World \n");
 8001132:	4876      	ldr	r0, [pc, #472]	; (800130c <main+0x2d4>)
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8001134:	4f76      	ldr	r7, [pc, #472]	; (8001310 <main+0x2d8>)
  printf("Hello World \n");
 8001136:	f007 fabd 	bl	80086b4 <puts>
  AccelInit();
 800113a:	f7ff ff2d 	bl	8000f98 <AccelInit>
  AI_Init(ai_network_data_weights_get(), activations);
 800113e:	f002 fe95 	bl	8003e6c <ai_network_data_weights_get>
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8001142:	4621      	mov	r1, r4
  AI_Init(ai_network_data_weights_get(), activations);
 8001144:	4606      	mov	r6, r0
  err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 8001146:	4638      	mov	r0, r7
 8001148:	f002 fdea 	bl	8003d20 <ai_network_create>
  if (err.type != AI_ERROR_NONE) {
 800114c:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
 8001150:	d005      	beq.n	800115e <main+0x126>
    printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 8001152:	0a02      	lsrs	r2, r0, #8
 8001154:	486f      	ldr	r0, [pc, #444]	; (8001314 <main+0x2dc>)
 8001156:	f007 fa27 	bl	80085a8 <iprintf>
 800115a:	b672      	cpsid	i
  while (1)
 800115c:	e7fe      	b.n	800115c <main+0x124>
  const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 800115e:	4a6e      	ldr	r2, [pc, #440]	; (8001318 <main+0x2e0>)
 8001160:	9109      	str	r1, [sp, #36]	; 0x24
 8001162:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001166:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800116a:	f642 72e0 	movw	r2, #12256	; 0x2fe0
 800116e:	e9cd 2607 	strd	r2, r6, [sp, #28]
 8001172:	4a6a      	ldr	r2, [pc, #424]	; (800131c <main+0x2e4>)
  if (!ai_network_init(network, &params)) {
 8001174:	6838      	ldr	r0, [r7, #0]
  const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 8001176:	f8ad 5018 	strh.w	r5, [sp, #24]
 800117a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800117e:	f44f 63d8 	mov.w	r3, #1728	; 0x6c0
 8001182:	930d      	str	r3, [sp, #52]	; 0x34
 8001184:	4b66      	ldr	r3, [pc, #408]	; (8001320 <main+0x2e8>)
 8001186:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
 800118a:	e9cd 310e 	strd	r3, r1, [sp, #56]	; 0x38
  if (!ai_network_init(network, &params)) {
 800118e:	a904      	add	r1, sp, #16
 8001190:	f002 fdd6 	bl	8003d40 <ai_network_init>
 8001194:	b948      	cbnz	r0, 80011aa <main+0x172>
    err = ai_network_get_error(network);
 8001196:	6838      	ldr	r0, [r7, #0]
 8001198:	f002 fdc0 	bl	8003d1c <ai_network_get_error>
    printf("ai_network_init error - type=%d code=%d\r\n", err.type, err.code);
 800119c:	0a02      	lsrs	r2, r0, #8
 800119e:	b2c1      	uxtb	r1, r0
 80011a0:	4860      	ldr	r0, [pc, #384]	; (8001324 <main+0x2ec>)
 80011a2:	f007 fa01 	bl	80085a8 <iprintf>
 80011a6:	b672      	cpsid	i
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <main+0x170>
  ai_output[0].data = AI_HANDLE_PTR(pOut);
 80011aa:	4e5f      	ldr	r6, [pc, #380]	; (8001328 <main+0x2f0>)
 80011ac:	4c5f      	ldr	r4, [pc, #380]	; (800132c <main+0x2f4>)
	x = ((AccelData[1] << 8) | AccelData[0]);
 80011ae:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800135c <main+0x324>
{
 80011b2:	f04f 0800 	mov.w	r8, #0
	AccelReadValues(0x32, 6);
 80011b6:	2106      	movs	r1, #6
 80011b8:	2032      	movs	r0, #50	; 0x32
 80011ba:	f7ff fed9 	bl	8000f70 <AccelReadValues>
	x = ((AccelData[1] << 8) | AccelData[0]);
 80011be:	4b5c      	ldr	r3, [pc, #368]	; (8001330 <main+0x2f8>)
 80011c0:	f9b9 0000 	ldrsh.w	r0, [r9]
 80011c4:	8018      	strh	r0, [r3, #0]
	y = ((AccelData[3] << 8) | AccelData[2]);
 80011c6:	4b5b      	ldr	r3, [pc, #364]	; (8001334 <main+0x2fc>)
 80011c8:	f9b9 b002 	ldrsh.w	fp, [r9, #2]
 80011cc:	f8a3 b000 	strh.w	fp, [r3]
	z = ((AccelData[5] << 8) | AccelData[4]);
 80011d0:	4b59      	ldr	r3, [pc, #356]	; (8001338 <main+0x300>)
 80011d2:	f9b9 a004 	ldrsh.w	sl, [r9, #4]
 80011d6:	f8a3 a000 	strh.w	sl, [r3]
	ACC_Value_Raw.AccX = (x * .039);
 80011da:	f7ff f9a3 	bl	8000524 <__aeabi_i2d>
 80011de:	a342      	add	r3, pc, #264	; (adr r3, 80012e8 <main+0x2b0>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	f7ff fa08 	bl	80005f8 <__aeabi_dmul>
 80011e8:	f7ff fcde 	bl	8000ba8 <__aeabi_d2f>
 80011ec:	4d53      	ldr	r5, [pc, #332]	; (800133c <main+0x304>)
 80011ee:	6028      	str	r0, [r5, #0]
	ACC_Value_Raw.AccY = (y * .039);
 80011f0:	4658      	mov	r0, fp
 80011f2:	f7ff f997 	bl	8000524 <__aeabi_i2d>
 80011f6:	a33c      	add	r3, pc, #240	; (adr r3, 80012e8 <main+0x2b0>)
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	f7ff f9fc 	bl	80005f8 <__aeabi_dmul>
 8001200:	f7ff fcd2 	bl	8000ba8 <__aeabi_d2f>
 8001204:	6068      	str	r0, [r5, #4]
	ACC_Value_Raw.AccZ = (z * .039);
 8001206:	4650      	mov	r0, sl
 8001208:	f7ff f98c 	bl	8000524 <__aeabi_i2d>
 800120c:	a336      	add	r3, pc, #216	; (adr r3, 80012e8 <main+0x2b0>)
 800120e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001212:	f7ff f9f1 	bl	80005f8 <__aeabi_dmul>
 8001216:	f7ff fcc7 	bl	8000ba8 <__aeabi_d2f>
 800121a:	60a8      	str	r0, [r5, #8]
	HAL_Delay(50);
 800121c:	2032      	movs	r0, #50	; 0x32
 800121e:	f000 fa1d 	bl	800165c <HAL_Delay>
	aiInData[write_index++] = ACC_Value_Raw.AccX;
 8001222:	682b      	ldr	r3, [r5, #0]
 8001224:	6023      	str	r3, [r4, #0]
	aiInData[write_index++] = ACC_Value_Raw.AccZ;
 8001226:	f108 0803 	add.w	r8, r8, #3
	aiInData[write_index++] = ACC_Value_Raw.AccY;
 800122a:	686b      	ldr	r3, [r5, #4]
 800122c:	6063      	str	r3, [r4, #4]
	if (write_index >= AI_NETWORK_IN_1_SIZE)
 800122e:	f1b8 0f48 	cmp.w	r8, #72	; 0x48
	aiInData[write_index++] = ACC_Value_Raw.AccZ;
 8001232:	68ab      	ldr	r3, [r5, #8]
 8001234:	60a3      	str	r3, [r4, #8]
	if (write_index >= AI_NETWORK_IN_1_SIZE)
 8001236:	f104 040c 	add.w	r4, r4, #12
 800123a:	d1bc      	bne.n	80011b6 <main+0x17e>
	    printf("Running inference\r\n");
 800123c:	4840      	ldr	r0, [pc, #256]	; (8001340 <main+0x308>)
 800123e:	f007 fa39 	bl	80086b4 <puts>
  ai_input[0].n_batches = 1;
 8001242:	4940      	ldr	r1, [pc, #256]	; (8001344 <main+0x30c>)
  ai_input[0].data = AI_HANDLE_PTR(pIn);
 8001244:	4a39      	ldr	r2, [pc, #228]	; (800132c <main+0x2f4>)
 8001246:	610a      	str	r2, [r1, #16]
  ai_output[0].n_batches = 1;
 8001248:	4a3f      	ldr	r2, [pc, #252]	; (8001348 <main+0x310>)
  batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 800124a:	6838      	ldr	r0, [r7, #0]
  ai_output[0].data = AI_HANDLE_PTR(pOut);
 800124c:	6116      	str	r6, [r2, #16]
  ai_input[0].n_batches = 1;
 800124e:	2301      	movs	r3, #1
 8001250:	808b      	strh	r3, [r1, #4]
  ai_output[0].n_batches = 1;
 8001252:	8093      	strh	r3, [r2, #4]
  batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8001254:	f002 fe04 	bl	8003e60 <ai_network_run>
  if (batch != 1) {
 8001258:	2801      	cmp	r0, #1
 800125a:	d009      	beq.n	8001270 <main+0x238>
    err = ai_network_get_error(network);
 800125c:	6838      	ldr	r0, [r7, #0]
 800125e:	f002 fd5d 	bl	8003d1c <ai_network_get_error>
    printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 8001262:	0a02      	lsrs	r2, r0, #8
 8001264:	b2c1      	uxtb	r1, r0
 8001266:	4839      	ldr	r0, [pc, #228]	; (800134c <main+0x314>)
 8001268:	f007 f99e 	bl	80085a8 <iprintf>
 800126c:	b672      	cpsid	i
  while (1)
 800126e:	e7fe      	b.n	800126e <main+0x236>
	    printf("AF-R\r\n");
 8001270:	4837      	ldr	r0, [pc, #220]	; (8001350 <main+0x318>)
 8001272:	4d2d      	ldr	r5, [pc, #180]	; (8001328 <main+0x2f0>)
	    	printf("%8.6f ", aiOutData[i]);
 8001274:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8001360 <main+0x328>
	    printf("AF-R\r\n");
 8001278:	f007 fa1c 	bl	80086b4 <puts>
 800127c:	2404      	movs	r4, #4
	    	printf("%8.6f ", aiOutData[i]);
 800127e:	f855 0b04 	ldr.w	r0, [r5], #4
 8001282:	f7ff f961 	bl	8000548 <__aeabi_f2d>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4640      	mov	r0, r8
 800128c:	f007 f98c 	bl	80085a8 <iprintf>
	    for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++)
 8001290:	3c01      	subs	r4, #1
 8001292:	d1f4      	bne.n	800127e <main+0x246>
  float max_value = values[0];
 8001294:	edd6 7a00 	vldr	s15, [r6]
    if (values[i] > max_value) {
 8001298:	ed96 7a01 	vldr	s14, [r6, #4]
	    printf(": %d - %s\r\n", (int) class, activities[class]);
 800129c:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <main+0x31c>)
 800129e:	482e      	ldr	r0, [pc, #184]	; (8001358 <main+0x320>)
    if (values[i] > max_value) {
 80012a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a8:	bfc8      	it	gt
 80012aa:	eef0 7a47 	vmovgt.f32	s15, s14
 80012ae:	ed96 7a02 	vldr	s14, [r6, #8]
 80012b2:	eef4 7ac7 	vcmpe.f32	s15, s14
  for (uint32_t i = 1; i < len; i++) {
 80012b6:	bfc8      	it	gt
 80012b8:	2401      	movgt	r4, #1
    if (values[i] > max_value) {
 80012ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012be:	bf48      	it	mi
 80012c0:	eef0 7a47 	vmovmi.f32	s15, s14
 80012c4:	ed96 7a03 	vldr	s14, [r6, #12]
  for (uint32_t i = 1; i < len; i++) {
 80012c8:	eef4 7a47 	vcmp.f32	s15, s14
 80012cc:	bf48      	it	mi
 80012ce:	2402      	movmi	r4, #2
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	bf48      	it	mi
 80012d6:	2403      	movmi	r4, #3
	    printf(": %d - %s\r\n", (int) class, activities[class]);
 80012d8:	4621      	mov	r1, r4
 80012da:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 80012de:	f007 f963 	bl	80085a8 <iprintf>
	    write_index = 0;
 80012e2:	e763      	b.n	80011ac <main+0x174>
 80012e4:	f3af 8000 	nop.w
 80012e8:	d916872b 	.word	0xd916872b
 80012ec:	3fa3f7ce 	.word	0x3fa3f7ce
 80012f0:	40021000 	.word	0x40021000
 80012f4:	48000800 	.word	0x48000800
 80012f8:	20001120 	.word	0x20001120
 80012fc:	40023000 	.word	0x40023000
 8001300:	20001144 	.word	0x20001144
 8001304:	40005400 	.word	0x40005400
 8001308:	00702991 	.word	0x00702991
 800130c:	0800a644 	.word	0x0800a644
 8001310:	2000121c 	.word	0x2000121c
 8001314:	0800a651 	.word	0x0800a651
 8001318:	40040440 	.word	0x40040440
 800131c:	00040440 	.word	0x00040440
 8001320:	2000092e 	.word	0x2000092e
 8001324:	0800a67d 	.word	0x0800a67d
 8001328:	20001110 	.word	0x20001110
 800132c:	20000ff0 	.word	0x20000ff0
 8001330:	20001220 	.word	0x20001220
 8001334:	20001222 	.word	0x20001222
 8001338:	20001224 	.word	0x20001224
 800133c:	2000091c 	.word	0x2000091c
 8001340:	0800a6a7 	.word	0x0800a6a7
 8001344:	20000010 	.word	0x20000010
 8001348:	20000028 	.word	0x20000028
 800134c:	0800a6ba 	.word	0x0800a6ba
 8001350:	0800a6e6 	.word	0x0800a6e6
 8001354:	20000000 	.word	0x20000000
 8001358:	0800a6f3 	.word	0x0800a6f3
 800135c:	20000928 	.word	0x20000928
 8001360:	0800a6ec 	.word	0x0800a6ec

08001364 <MX_USART2_UART_Init>:
  huart2.Instance = USART2;
 8001364:	480b      	ldr	r0, [pc, #44]	; (8001394 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 9600;
 8001366:	4a0c      	ldr	r2, [pc, #48]	; (8001398 <MX_USART2_UART_Init+0x34>)
{
 8001368:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 9600;
 800136a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800136e:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001372:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001374:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001376:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137a:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800137e:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001382:	6103      	str	r3, [r0, #16]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001384:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001386:	f001 fff4 	bl	8003372 <HAL_UART_Init>
 800138a:	b108      	cbz	r0, 8001390 <MX_USART2_UART_Init+0x2c>
 800138c:	b672      	cpsid	i
  while (1)
 800138e:	e7fe      	b.n	800138e <MX_USART2_UART_Init+0x2a>
}
 8001390:	bd08      	pop	{r3, pc}
 8001392:	bf00      	nop
 8001394:	20001198 	.word	0x20001198
 8001398:	40004400 	.word	0x40004400

0800139c <Error_Handler>:
 800139c:	b672      	cpsid	i
  while (1)
 800139e:	e7fe      	b.n	800139e <Error_Handler+0x2>

080013a0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_MspInit+0x2c>)
 80013a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013a4:	f042 0201 	orr.w	r2, r2, #1
 80013a8:	661a      	str	r2, [r3, #96]	; 0x60
 80013aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80013ac:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	f002 0201 	and.w	r2, r2, #1
 80013b2:	9200      	str	r2, [sp, #0]
 80013b4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013bc:	659a      	str	r2, [r3, #88]	; 0x58
 80013be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c4:	9301      	str	r3, [sp, #4]
 80013c6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c8:	b002      	add	sp, #8
 80013ca:	4770      	bx	lr
 80013cc:	40021000 	.word	0x40021000

080013d0 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80013d0:	6802      	ldr	r2, [r0, #0]
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_CRC_MspInit+0x24>)
 80013d4:	429a      	cmp	r2, r3
{
 80013d6:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80013d8:	d10a      	bne.n	80013f0 <HAL_CRC_MspInit+0x20>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013da:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80013de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80013e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80013e4:	649a      	str	r2, [r3, #72]	; 0x48
 80013e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ec:	9301      	str	r3, [sp, #4]
 80013ee:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80013f0:	b002      	add	sp, #8
 80013f2:	4770      	bx	lr
 80013f4:	40023000 	.word	0x40023000

080013f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013f8:	b510      	push	{r4, lr}
 80013fa:	b0aa      	sub	sp, #168	; 0xa8
 80013fc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fe:	2214      	movs	r2, #20
 8001400:	2100      	movs	r1, #0
 8001402:	a803      	add	r0, sp, #12
 8001404:	f006 fb7e 	bl	8007b04 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001408:	2288      	movs	r2, #136	; 0x88
 800140a:	2100      	movs	r1, #0
 800140c:	a808      	add	r0, sp, #32
 800140e:	f006 fb79 	bl	8007b04 <memset>
  if(hi2c->Instance==I2C1)
 8001412:	6822      	ldr	r2, [r4, #0]
 8001414:	4b17      	ldr	r3, [pc, #92]	; (8001474 <HAL_I2C_MspInit+0x7c>)
 8001416:	429a      	cmp	r2, r3
 8001418:	d129      	bne.n	800146e <HAL_I2C_MspInit+0x76>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800141a:	2340      	movs	r3, #64	; 0x40
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800141c:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800141e:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001420:	f001 fb3a 	bl	8002a98 <HAL_RCCEx_PeriphCLKConfig>
 8001424:	b108      	cbz	r0, 800142a <HAL_I2C_MspInit+0x32>
    {
      Error_Handler();
 8001426:	f7ff ffb9 	bl	800139c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	4c13      	ldr	r4, [pc, #76]	; (8001478 <HAL_I2C_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142c:	4813      	ldr	r0, [pc, #76]	; (800147c <HAL_I2C_MspInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001436:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001440:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001444:	2312      	movs	r3, #18
 8001446:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2100      	movs	r1, #0
 800144c:	2303      	movs	r3, #3
 800144e:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001452:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001454:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001456:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001458:	f000 f9dc 	bl	8001814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800145c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800145e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001462:	65a3      	str	r3, [r4, #88]	; 0x58
 8001464:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001466:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800146a:	9302      	str	r3, [sp, #8]
 800146c:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800146e:	b02a      	add	sp, #168	; 0xa8
 8001470:	bd10      	pop	{r4, pc}
 8001472:	bf00      	nop
 8001474:	40005400 	.word	0x40005400
 8001478:	40021000 	.word	0x40021000
 800147c:	48000400 	.word	0x48000400

08001480 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001480:	b510      	push	{r4, lr}
 8001482:	b0aa      	sub	sp, #168	; 0xa8
 8001484:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	2214      	movs	r2, #20
 8001488:	2100      	movs	r1, #0
 800148a:	a803      	add	r0, sp, #12
 800148c:	f006 fb3a 	bl	8007b04 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001490:	2288      	movs	r2, #136	; 0x88
 8001492:	2100      	movs	r1, #0
 8001494:	a808      	add	r0, sp, #32
 8001496:	f006 fb35 	bl	8007b04 <memset>
  if(huart->Instance==USART2)
 800149a:	6822      	ldr	r2, [r4, #0]
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <HAL_UART_MspInit+0x7c>)
 800149e:	429a      	cmp	r2, r3
 80014a0:	d129      	bne.n	80014f6 <HAL_UART_MspInit+0x76>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014a2:	2302      	movs	r3, #2
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a4:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014a6:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a8:	f001 faf6 	bl	8002a98 <HAL_RCCEx_PeriphCLKConfig>
 80014ac:	b108      	cbz	r0, 80014b2 <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 80014ae:	f7ff ff75 	bl	800139c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014b2:	4b13      	ldr	r3, [pc, #76]	; (8001500 <HAL_UART_MspInit+0x80>)
 80014b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014b6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80014ba:	659a      	str	r2, [r3, #88]	; 0x58
 80014bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014be:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80014c2:	9201      	str	r2, [sp, #4]
 80014c4:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014c8:	f042 0201 	orr.w	r2, r2, #1
 80014cc:	64da      	str	r2, [r3, #76]	; 0x4c
 80014ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	9302      	str	r3, [sp, #8]
 80014d6:	9b02      	ldr	r3, [sp, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	220c      	movs	r2, #12
 80014da:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014dc:	2100      	movs	r1, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014de:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ec:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ee:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014f0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f2:	f000 f98f 	bl	8001814 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014f6:	b02a      	add	sp, #168	; 0xa8
 80014f8:	bd10      	pop	{r4, pc}
 80014fa:	bf00      	nop
 80014fc:	40004400 	.word	0x40004400
 8001500:	40021000 	.word	0x40021000

08001504 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <NMI_Handler>

08001506 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <HardFault_Handler>

08001508 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <MemManage_Handler>

0800150a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <BusFault_Handler>

0800150c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <UsageFault_Handler>

0800150e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800150e:	4770      	bx	lr

08001510 <DebugMon_Handler>:
 8001510:	4770      	bx	lr

08001512 <PendSV_Handler>:
 8001512:	4770      	bx	lr

08001514 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001514:	f000 b890 	b.w	8001638 <HAL_IncTick>

08001518 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001518:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <_sbrk+0x30>)
 800151a:	6811      	ldr	r1, [r2, #0]
{
 800151c:	b510      	push	{r4, lr}
 800151e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001520:	b909      	cbnz	r1, 8001526 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001522:	490a      	ldr	r1, [pc, #40]	; (800154c <_sbrk+0x34>)
 8001524:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001526:	6810      	ldr	r0, [r2, #0]
 8001528:	4909      	ldr	r1, [pc, #36]	; (8001550 <_sbrk+0x38>)
 800152a:	4c0a      	ldr	r4, [pc, #40]	; (8001554 <_sbrk+0x3c>)
 800152c:	4403      	add	r3, r0
 800152e:	1b09      	subs	r1, r1, r4
 8001530:	428b      	cmp	r3, r1
 8001532:	d906      	bls.n	8001542 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001534:	f006 f8ea 	bl	800770c <__errno>
 8001538:	230c      	movs	r3, #12
 800153a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800153c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001540:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001542:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001544:	e7fc      	b.n	8001540 <_sbrk+0x28>
 8001546:	bf00      	nop
 8001548:	20001228 	.word	0x20001228
 800154c:	20001a88 	.word	0x20001a88
 8001550:	20018000 	.word	0x20018000
 8001554:	00000800 	.word	0x00000800

08001558 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001558:	4a03      	ldr	r2, [pc, #12]	; (8001568 <SystemInit+0x10>)
 800155a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800155e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001562:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800156c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001570:	f7ff fff2 	bl	8001558 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001574:	480c      	ldr	r0, [pc, #48]	; (80015a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001576:	490d      	ldr	r1, [pc, #52]	; (80015ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001578:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <LoopForever+0xe>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800157c:	e002      	b.n	8001584 <LoopCopyDataInit>

0800157e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001582:	3304      	adds	r3, #4

08001584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001588:	d3f9      	bcc.n	800157e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800158c:	4c0a      	ldr	r4, [pc, #40]	; (80015b8 <LoopForever+0x16>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001590:	e001      	b.n	8001596 <LoopFillZerobss>

08001592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001594:	3204      	adds	r2, #4

08001596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001598:	d3fb      	bcc.n	8001592 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800159a:	f006 fa75 	bl	8007a88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800159e:	f7ff fd4b 	bl	8001038 <main>

080015a2 <LoopForever>:

LoopForever:
    b LoopForever
 80015a2:	e7fe      	b.n	80015a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015ac:	200008f4 	.word	0x200008f4
  ldr r2, =_sidata
 80015b0:	0800e498 	.word	0x0800e498
  ldr r2, =_sbss
 80015b4:	20000900 	.word	0x20000900
  ldr r4, =_ebss
 80015b8:	20001a84 	.word	0x20001a84

080015bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015bc:	e7fe      	b.n	80015bc <ADC1_2_IRQHandler>
	...

080015c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <HAL_InitTick+0x40>)
{
 80015c4:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 80015c6:	7818      	ldrb	r0, [r3, #0]
 80015c8:	b908      	cbnz	r0, 80015ce <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80015ca:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80015cc:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015ce:	4a0d      	ldr	r2, [pc, #52]	; (8001604 <HAL_InitTick+0x44>)
 80015d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d4:	fbb3 f3f0 	udiv	r3, r3, r0
 80015d8:	6810      	ldr	r0, [r2, #0]
 80015da:	fbb0 f0f3 	udiv	r0, r0, r3
 80015de:	f000 f8a7 	bl	8001730 <HAL_SYSTICK_Config>
 80015e2:	4604      	mov	r4, r0
 80015e4:	2800      	cmp	r0, #0
 80015e6:	d1f0      	bne.n	80015ca <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e8:	2d0f      	cmp	r5, #15
 80015ea:	d8ee      	bhi.n	80015ca <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ec:	4602      	mov	r2, r0
 80015ee:	4629      	mov	r1, r5
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295
 80015f4:	f000 f86a 	bl	80016cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <HAL_InitTick+0x48>)
 80015fa:	4620      	mov	r0, r4
 80015fc:	601d      	str	r5, [r3, #0]
  return status;
 80015fe:	e7e5      	b.n	80015cc <HAL_InitTick+0xc>
 8001600:	20000044 	.word	0x20000044
 8001604:	20000040 	.word	0x20000040
 8001608:	20000048 	.word	0x20000048

0800160c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800160c:	4a09      	ldr	r2, [pc, #36]	; (8001634 <HAL_Init+0x28>)
 800160e:	6813      	ldr	r3, [r2, #0]
 8001610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001614:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001616:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001618:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800161a:	f000 f845 	bl	80016a8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800161e:	2000      	movs	r0, #0
 8001620:	f7ff ffce 	bl	80015c0 <HAL_InitTick>
 8001624:	4604      	mov	r4, r0
 8001626:	b918      	cbnz	r0, 8001630 <HAL_Init+0x24>
    HAL_MspInit();
 8001628:	f7ff feba 	bl	80013a0 <HAL_MspInit>
}
 800162c:	4620      	mov	r0, r4
 800162e:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001630:	2401      	movs	r4, #1
 8001632:	e7fb      	b.n	800162c <HAL_Init+0x20>
 8001634:	40022000 	.word	0x40022000

08001638 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001638:	4a03      	ldr	r2, [pc, #12]	; (8001648 <HAL_IncTick+0x10>)
 800163a:	4b04      	ldr	r3, [pc, #16]	; (800164c <HAL_IncTick+0x14>)
 800163c:	6811      	ldr	r1, [r2, #0]
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	440b      	add	r3, r1
 8001642:	6013      	str	r3, [r2, #0]
}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	2000122c 	.word	0x2000122c
 800164c:	20000044 	.word	0x20000044

08001650 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001650:	4b01      	ldr	r3, [pc, #4]	; (8001658 <HAL_GetTick+0x8>)
 8001652:	6818      	ldr	r0, [r3, #0]
}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	2000122c 	.word	0x2000122c

0800165c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800165c:	b538      	push	{r3, r4, r5, lr}
 800165e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001660:	f7ff fff6 	bl	8001650 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001664:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8001666:	bf1c      	itt	ne
 8001668:	4b05      	ldrne	r3, [pc, #20]	; (8001680 <HAL_Delay+0x24>)
 800166a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800166c:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 800166e:	bf18      	it	ne
 8001670:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001672:	f7ff ffed 	bl	8001650 <HAL_GetTick>
 8001676:	1b43      	subs	r3, r0, r5
 8001678:	42a3      	cmp	r3, r4
 800167a:	d3fa      	bcc.n	8001672 <HAL_Delay+0x16>
  {
  }
}
 800167c:	bd38      	pop	{r3, r4, r5, pc}
 800167e:	bf00      	nop
 8001680:	20000044 	.word	0x20000044

08001684 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return STM32L4XX_HAL_VERSION;
}
 8001684:	4800      	ldr	r0, [pc, #0]	; (8001688 <HAL_GetHalVersion+0x4>)
 8001686:	4770      	bx	lr
 8001688:	010d0300 	.word	0x010d0300

0800168c <HAL_GetREVID>:
  * @brief  Return the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 800168c:	4b01      	ldr	r3, [pc, #4]	; (8001694 <HAL_GetREVID+0x8>)
 800168e:	6818      	ldr	r0, [r3, #0]
}
 8001690:	0c00      	lsrs	r0, r0, #16
 8001692:	4770      	bx	lr
 8001694:	e0042000 	.word	0xe0042000

08001698 <HAL_GetDEVID>:
  * @brief  Return the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
  return(DBGMCU->IDCODE & DBGMCU_IDCODE_DEV_ID);
 8001698:	4b02      	ldr	r3, [pc, #8]	; (80016a4 <HAL_GetDEVID+0xc>)
 800169a:	6818      	ldr	r0, [r3, #0]
}
 800169c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e0042000 	.word	0xe0042000

080016a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a8:	4907      	ldr	r1, [pc, #28]	; (80016c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016aa:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b2:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80016c4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016cc:	4b16      	ldr	r3, [pc, #88]	; (8001728 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ce:	b530      	push	{r4, r5, lr}
 80016d0:	68dc      	ldr	r4, [r3, #12]
 80016d2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d6:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016da:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016dc:	2d04      	cmp	r5, #4
 80016de:	bf28      	it	cs
 80016e0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e2:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e8:	bf8c      	ite	hi
 80016ea:	3c03      	subhi	r4, #3
 80016ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ee:	fa03 f505 	lsl.w	r5, r3, r5
 80016f2:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f6:	40a3      	lsls	r3, r4
 80016f8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016fc:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80016fe:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001704:	bfac      	ite	ge
 8001706:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170a:	4a08      	ldrlt	r2, [pc, #32]	; (800172c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001710:	bfb8      	it	lt
 8001712:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001716:	b2db      	uxtb	r3, r3
 8001718:	bfaa      	itet	ge
 800171a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001720:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001724:	bd30      	pop	{r4, r5, pc}
 8001726:	bf00      	nop
 8001728:	e000ed00 	.word	0xe000ed00
 800172c:	e000ed14 	.word	0xe000ed14

08001730 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001730:	3801      	subs	r0, #1
 8001732:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001736:	d20b      	bcs.n	8001750 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001738:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173c:	4a05      	ldr	r2, [pc, #20]	; (8001754 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173e:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001740:	21f0      	movs	r1, #240	; 0xf0
 8001742:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001746:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001748:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800174a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800174e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001750:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001752:	4770      	bx	lr
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001758:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800175a:	4604      	mov	r4, r0
 800175c:	b908      	cbnz	r0, 8001762 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800175e:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001760:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001762:	7f43      	ldrb	r3, [r0, #29]
 8001764:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001768:	b913      	cbnz	r3, 8001770 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800176a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800176c:	f7ff fe30 	bl	80013d0 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001770:	2302      	movs	r3, #2
 8001772:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001774:	7923      	ldrb	r3, [r4, #4]
 8001776:	b9e3      	cbnz	r3, 80017b2 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001778:	6823      	ldr	r3, [r4, #0]
 800177a:	4a13      	ldr	r2, [pc, #76]	; (80017c8 <HAL_CRC_Init+0x70>)
 800177c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	f022 0218 	bic.w	r2, r2, #24
 8001784:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001786:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001788:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800178a:	b9d2      	cbnz	r2, 80017c2 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800178c:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001790:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	6961      	ldr	r1, [r4, #20]
 8001796:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800179a:	430a      	orrs	r2, r1
 800179c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	69a1      	ldr	r1, [r4, #24]
 80017a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017a6:	430a      	orrs	r2, r1
 80017a8:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80017aa:	2301      	movs	r3, #1
 80017ac:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80017ae:	2000      	movs	r0, #0
 80017b0:	e7d6      	b.n	8001760 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80017b2:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80017b6:	4620      	mov	r0, r4
 80017b8:	f000 f808 	bl	80017cc <HAL_CRCEx_Polynomial_Set>
 80017bc:	2800      	cmp	r0, #0
 80017be:	d0e2      	beq.n	8001786 <HAL_CRC_Init+0x2e>
 80017c0:	e7cd      	b.n	800175e <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80017c2:	6922      	ldr	r2, [r4, #16]
 80017c4:	e7e4      	b.n	8001790 <HAL_CRC_Init+0x38>
 80017c6:	bf00      	nop
 80017c8:	04c11db7 	.word	0x04c11db7

080017cc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80017cc:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80017ce:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80017d0:	3b01      	subs	r3, #1
 80017d2:	d31c      	bcc.n	800180e <HAL_CRCEx_Polynomial_Set+0x42>
 80017d4:	fa21 f403 	lsr.w	r4, r1, r3
 80017d8:	07e4      	lsls	r4, r4, #31
 80017da:	d5f9      	bpl.n	80017d0 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80017dc:	2a10      	cmp	r2, #16
 80017de:	d012      	beq.n	8001806 <HAL_CRCEx_Polynomial_Set+0x3a>
 80017e0:	d804      	bhi.n	80017ec <HAL_CRCEx_Polynomial_Set+0x20>
 80017e2:	b13a      	cbz	r2, 80017f4 <HAL_CRCEx_Polynomial_Set+0x28>
 80017e4:	2a08      	cmp	r2, #8
 80017e6:	d010      	beq.n	800180a <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 80017e8:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80017ea:	e00b      	b.n	8001804 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 80017ec:	2a18      	cmp	r2, #24
 80017ee:	d1fb      	bne.n	80017e8 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 80017f0:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 80017f2:	d8f9      	bhi.n	80017e8 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80017f4:	6800      	ldr	r0, [r0, #0]
 80017f6:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80017f8:	6883      	ldr	r3, [r0, #8]
 80017fa:	f023 0318 	bic.w	r3, r3, #24
 80017fe:	431a      	orrs	r2, r3
 8001800:	6082      	str	r2, [r0, #8]
 8001802:	2000      	movs	r0, #0
}
 8001804:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8001806:	2b07      	cmp	r3, #7
 8001808:	e7f3      	b.n	80017f2 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 800180a:	2b0f      	cmp	r3, #15
 800180c:	e7f1      	b.n	80017f2 <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 800180e:	2a00      	cmp	r2, #0
 8001810:	d1ea      	bne.n	80017e8 <HAL_CRCEx_Polynomial_Set+0x1c>
 8001812:	e7ef      	b.n	80017f4 <HAL_CRCEx_Polynomial_Set+0x28>

08001814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001818:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 80019cc <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800181c:	4c69      	ldr	r4, [pc, #420]	; (80019c4 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 800181e:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001820:	680a      	ldr	r2, [r1, #0]
 8001822:	fa32 f503 	lsrs.w	r5, r2, r3
 8001826:	d102      	bne.n	800182e <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8001828:	b003      	add	sp, #12
 800182a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800182e:	f04f 0e01 	mov.w	lr, #1
 8001832:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 8001836:	ea1e 0202 	ands.w	r2, lr, r2
 800183a:	f000 8090 	beq.w	800195e <HAL_GPIO_Init+0x14a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800183e:	684d      	ldr	r5, [r1, #4]
 8001840:	f005 0603 	and.w	r6, r5, #3
 8001844:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001848:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800184c:	1e77      	subs	r7, r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800184e:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001852:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001854:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001858:	f200 8083 	bhi.w	8001962 <HAL_GPIO_Init+0x14e>
        temp = GPIOx->OSPEEDR;
 800185c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800185e:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001862:	68cf      	ldr	r7, [r1, #12]
 8001864:	fa07 f708 	lsl.w	r7, r7, r8
 8001868:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800186c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800186e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001870:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001874:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001878:	409f      	lsls	r7, r3
 800187a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800187e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001880:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001882:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001886:	688f      	ldr	r7, [r1, #8]
 8001888:	fa07 f708 	lsl.w	r7, r7, r8
 800188c:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001890:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 8001892:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001894:	d071      	beq.n	800197a <HAL_GPIO_Init+0x166>
      temp = GPIOx->MODER;
 8001896:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001898:	fa06 f608 	lsl.w	r6, r6, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800189c:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018a0:	4337      	orrs	r7, r6
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018a2:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80018a6:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018a8:	d059      	beq.n	800195e <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80018ae:	f046 0601 	orr.w	r6, r6, #1
 80018b2:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 80018b6:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 80018ba:	f023 0703 	bic.w	r7, r3, #3
 80018be:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80018c2:	f006 0601 	and.w	r6, r6, #1
 80018c6:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80018ca:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018cc:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d0:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80018d2:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018d4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80018d8:	f04f 0c0f 	mov.w	ip, #15
 80018dc:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018e0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018e4:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018e8:	d05f      	beq.n	80019aa <HAL_GPIO_Init+0x196>
 80018ea:	4e37      	ldr	r6, [pc, #220]	; (80019c8 <HAL_GPIO_Init+0x1b4>)
 80018ec:	42b0      	cmp	r0, r6
 80018ee:	d05e      	beq.n	80019ae <HAL_GPIO_Init+0x19a>
 80018f0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80018f4:	42b0      	cmp	r0, r6
 80018f6:	d05c      	beq.n	80019b2 <HAL_GPIO_Init+0x19e>
 80018f8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80018fc:	42b0      	cmp	r0, r6
 80018fe:	d05a      	beq.n	80019b6 <HAL_GPIO_Init+0x1a2>
 8001900:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001904:	42b0      	cmp	r0, r6
 8001906:	d058      	beq.n	80019ba <HAL_GPIO_Init+0x1a6>
 8001908:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800190c:	42b0      	cmp	r0, r6
 800190e:	d056      	beq.n	80019be <HAL_GPIO_Init+0x1aa>
 8001910:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001914:	42b0      	cmp	r0, r6
 8001916:	bf0c      	ite	eq
 8001918:	2606      	moveq	r6, #6
 800191a:	2607      	movne	r6, #7
 800191c:	fa06 f60e 	lsl.w	r6, r6, lr
 8001920:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001924:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 8001926:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 8001928:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800192a:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800192e:	bf0c      	ite	eq
 8001930:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001932:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8001934:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 8001936:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001938:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~(iocurrent);
 800193c:	bf0c      	ite	eq
 800193e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001940:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 8001942:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 8001944:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001946:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 800194a:	bf0c      	ite	eq
 800194c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800194e:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8001950:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 8001952:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001954:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 8001956:	bf54      	ite	pl
 8001958:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800195a:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 800195c:	6026      	str	r6, [r4, #0]
    position++;
 800195e:	3301      	adds	r3, #1
 8001960:	e75e      	b.n	8001820 <HAL_GPIO_Init+0xc>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001962:	2e03      	cmp	r6, #3
 8001964:	d18c      	bne.n	8001880 <HAL_GPIO_Init+0x6c>
        temp = GPIOx->ASCR;
 8001966:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001968:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800196c:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 8001970:	409f      	lsls	r7, r3
 8001972:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->ASCR = temp;
 8001976:	62c7      	str	r7, [r0, #44]	; 0x2c
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001978:	e78d      	b.n	8001896 <HAL_GPIO_Init+0x82>
        temp = GPIOx->AFR[position >> 3u];
 800197a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800197e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001982:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001986:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800198a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800198e:	f04f 0e0f 	mov.w	lr, #15
 8001992:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001996:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800199a:	690f      	ldr	r7, [r1, #16]
 800199c:	fa07 f70b 	lsl.w	r7, r7, fp
 80019a0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 80019a4:	f8ca 7020 	str.w	r7, [sl, #32]
 80019a8:	e775      	b.n	8001896 <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019aa:	2600      	movs	r6, #0
 80019ac:	e7b6      	b.n	800191c <HAL_GPIO_Init+0x108>
 80019ae:	2601      	movs	r6, #1
 80019b0:	e7b4      	b.n	800191c <HAL_GPIO_Init+0x108>
 80019b2:	2602      	movs	r6, #2
 80019b4:	e7b2      	b.n	800191c <HAL_GPIO_Init+0x108>
 80019b6:	2603      	movs	r6, #3
 80019b8:	e7b0      	b.n	800191c <HAL_GPIO_Init+0x108>
 80019ba:	2604      	movs	r6, #4
 80019bc:	e7ae      	b.n	800191c <HAL_GPIO_Init+0x108>
 80019be:	2605      	movs	r6, #5
 80019c0:	e7ac      	b.n	800191c <HAL_GPIO_Init+0x108>
 80019c2:	bf00      	nop
 80019c4:	40010400 	.word	0x40010400
 80019c8:	48000400 	.word	0x48000400
 80019cc:	40021000 	.word	0x40021000

080019d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019d0:	b10a      	cbz	r2, 80019d6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019d2:	6181      	str	r1, [r0, #24]
 80019d4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019d6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80019d8:	4770      	bx	lr

080019da <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019da:	6803      	ldr	r3, [r0, #0]
 80019dc:	699a      	ldr	r2, [r3, #24]
 80019de:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 80019e0:	bf44      	itt	mi
 80019e2:	2200      	movmi	r2, #0
 80019e4:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019e6:	699a      	ldr	r2, [r3, #24]
 80019e8:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019ea:	bf5e      	ittt	pl
 80019ec:	699a      	ldrpl	r2, [r3, #24]
 80019ee:	f042 0201 	orrpl.w	r2, r2, #1
 80019f2:	619a      	strpl	r2, [r3, #24]
  }
}
 80019f4:	4770      	bx	lr
	...

080019f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80019f8:	b530      	push	{r4, r5, lr}
 80019fa:	9d03      	ldr	r5, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80019fc:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019fe:	432b      	orrs	r3, r5
 8001a00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8001a04:	4a06      	ldr	r2, [pc, #24]	; (8001a20 <I2C_TransferConfig+0x28>)
 8001a06:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a08:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001a0c:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001a0e:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8001a16:	ea20 0002 	bic.w	r0, r0, r2
 8001a1a:	4303      	orrs	r3, r0
 8001a1c:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001a1e:	bd30      	pop	{r4, r5, pc}
 8001a20:	03ff63ff 	.word	0x03ff63ff

08001a24 <I2C_IsErrorOccurred>:
{
 8001a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a28:	6803      	ldr	r3, [r0, #0]
 8001a2a:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a2c:	f014 0410 	ands.w	r4, r4, #16
{
 8001a30:	4605      	mov	r5, r0
 8001a32:	4688      	mov	r8, r1
 8001a34:	4617      	mov	r7, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a36:	d079      	beq.n	8001b2c <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a38:	2210      	movs	r2, #16
 8001a3a:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001a3c:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8001a3e:	f04f 0920 	mov.w	r9, #32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a42:	682b      	ldr	r3, [r5, #0]
 8001a44:	699a      	ldr	r2, [r3, #24]
 8001a46:	0694      	lsls	r4, r2, #26
 8001a48:	d436      	bmi.n	8001ab8 <I2C_IsErrorOccurred+0x94>
 8001a4a:	b10e      	cbz	r6, 8001a50 <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8001a4c:	2404      	movs	r4, #4
 8001a4e:	e039      	b.n	8001ac4 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8001a50:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001a54:	d0f6      	beq.n	8001a44 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a56:	f7ff fdfb 	bl	8001650 <HAL_GetTick>
 8001a5a:	1bc0      	subs	r0, r0, r7
 8001a5c:	4540      	cmp	r0, r8
 8001a5e:	d802      	bhi.n	8001a66 <I2C_IsErrorOccurred+0x42>
 8001a60:	f1b8 0f00 	cmp.w	r8, #0
 8001a64:	d1ed      	bne.n	8001a42 <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001a66:	682b      	ldr	r3, [r5, #0]
 8001a68:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8001a6a:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001a6e:	6998      	ldr	r0, [r3, #24]
 8001a70:	0400      	lsls	r0, r0, #16
          tmp2 = hi2c->Mode;
 8001a72:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001a74:	d50a      	bpl.n	8001a8c <I2C_IsErrorOccurred+0x68>
 8001a76:	0449      	lsls	r1, r1, #17
 8001a78:	d408      	bmi.n	8001a8c <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 8001a7a:	2a20      	cmp	r2, #32
 8001a7c:	d006      	beq.n	8001a8c <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a84:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8001a86:	f7ff fde3 	bl	8001650 <HAL_GetTick>
 8001a8a:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a8c:	682b      	ldr	r3, [r5, #0]
 8001a8e:	699c      	ldr	r4, [r3, #24]
 8001a90:	f014 0420 	ands.w	r4, r4, #32
 8001a94:	d1d5      	bne.n	8001a42 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001a96:	f7ff fddb 	bl	8001650 <HAL_GetTick>
 8001a9a:	1bc0      	subs	r0, r0, r7
 8001a9c:	2819      	cmp	r0, #25
 8001a9e:	d9f5      	bls.n	8001a8c <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001aa0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              __HAL_UNLOCK(hi2c);
 8001aa2:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001aa6:	f043 0320 	orr.w	r3, r3, #32
 8001aaa:	646b      	str	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 8001aac:	2601      	movs	r6, #1
              hi2c->State = HAL_I2C_STATE_READY;
 8001aae:	f885 9041 	strb.w	r9, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab2:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 8001ab6:	e7e9      	b.n	8001a8c <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8001ab8:	2e00      	cmp	r6, #0
 8001aba:	d1c7      	bne.n	8001a4c <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001abc:	2220      	movs	r2, #32
 8001abe:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8001ac0:	2404      	movs	r4, #4
    status = HAL_ERROR;
 8001ac2:	2601      	movs	r6, #1
  itflag = hi2c->Instance->ISR;
 8001ac4:	682b      	ldr	r3, [r5, #0]
 8001ac6:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001ac8:	05d0      	lsls	r0, r2, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001aca:	bf41      	itttt	mi
 8001acc:	f44f 7180 	movmi.w	r1, #256	; 0x100
 8001ad0:	61d9      	strmi	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8001ad2:	f044 0401 	orrmi.w	r4, r4, #1
    status = HAL_ERROR;
 8001ad6:	2601      	movmi	r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ad8:	0551      	lsls	r1, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ada:	bf41      	itttt	mi
 8001adc:	f44f 6180 	movmi.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8001ae0:	f044 0408 	orrmi.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ae4:	61d9      	strmi	r1, [r3, #28]
    status = HAL_ERROR;
 8001ae6:	2601      	movmi	r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ae8:	0592      	lsls	r2, r2, #22
 8001aea:	d521      	bpl.n	8001b30 <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001aec:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8001af0:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001af4:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001af6:	4628      	mov	r0, r5
 8001af8:	f7ff ff6f 	bl	80019da <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001afc:	682a      	ldr	r2, [r5, #0]
 8001afe:	6853      	ldr	r3, [r2, #4]
 8001b00:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001b04:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001b08:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001b0c:	f023 0301 	bic.w	r3, r3, #1
 8001b10:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8001b12:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001b14:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8001b16:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8001b18:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b1a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001b24:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8001b28:	2601      	movs	r6, #1
 8001b2a:	e003      	b.n	8001b34 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8001b2c:	4626      	mov	r6, r4
 8001b2e:	e7c9      	b.n	8001ac4 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 8001b30:	2e00      	cmp	r6, #0
 8001b32:	d1e0      	bne.n	8001af6 <I2C_IsErrorOccurred+0xd2>
}
 8001b34:	4630      	mov	r0, r6
 8001b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001b3a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001b3a:	b570      	push	{r4, r5, r6, lr}
 8001b3c:	4604      	mov	r4, r0
 8001b3e:	460d      	mov	r5, r1
 8001b40:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b42:	6823      	ldr	r3, [r4, #0]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	079b      	lsls	r3, r3, #30
 8001b48:	d501      	bpl.n	8001b4e <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8001b4a:	2000      	movs	r0, #0
}
 8001b4c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b4e:	4632      	mov	r2, r6
 8001b50:	4629      	mov	r1, r5
 8001b52:	4620      	mov	r0, r4
 8001b54:	f7ff ff66 	bl	8001a24 <I2C_IsErrorOccurred>
 8001b58:	b9a0      	cbnz	r0, 8001b84 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8001b5a:	1c6a      	adds	r2, r5, #1
 8001b5c:	d0f1      	beq.n	8001b42 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b5e:	f7ff fd77 	bl	8001650 <HAL_GetTick>
 8001b62:	1b80      	subs	r0, r0, r6
 8001b64:	42a8      	cmp	r0, r5
 8001b66:	d801      	bhi.n	8001b6c <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001b68:	2d00      	cmp	r5, #0
 8001b6a:	d1ea      	bne.n	8001b42 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b6e:	f043 0320 	orr.w	r3, r3, #32
 8001b72:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b74:	2320      	movs	r3, #32
 8001b76:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001b80:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001b84:	2001      	movs	r0, #1
 8001b86:	e7e1      	b.n	8001b4c <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08001b88 <I2C_WaitOnFlagUntilTimeout>:
{
 8001b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b8c:	9f06      	ldr	r7, [sp, #24]
 8001b8e:	4604      	mov	r4, r0
 8001b90:	4688      	mov	r8, r1
 8001b92:	4616      	mov	r6, r2
 8001b94:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b96:	6822      	ldr	r2, [r4, #0]
 8001b98:	6993      	ldr	r3, [r2, #24]
 8001b9a:	ea38 0303 	bics.w	r3, r8, r3
 8001b9e:	bf0c      	ite	eq
 8001ba0:	2301      	moveq	r3, #1
 8001ba2:	2300      	movne	r3, #0
 8001ba4:	42b3      	cmp	r3, r6
 8001ba6:	d001      	beq.n	8001bac <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8001ba8:	2000      	movs	r0, #0
 8001baa:	e015      	b.n	8001bd8 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001bac:	1c6b      	adds	r3, r5, #1
 8001bae:	d0f3      	beq.n	8001b98 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bb0:	f7ff fd4e 	bl	8001650 <HAL_GetTick>
 8001bb4:	1bc0      	subs	r0, r0, r7
 8001bb6:	42a8      	cmp	r0, r5
 8001bb8:	d801      	bhi.n	8001bbe <I2C_WaitOnFlagUntilTimeout+0x36>
 8001bba:	2d00      	cmp	r5, #0
 8001bbc:	d1eb      	bne.n	8001b96 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001bc0:	f043 0320 	orr.w	r3, r3, #32
 8001bc4:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bc6:	2320      	movs	r3, #32
 8001bc8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001bd2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001bd6:	2001      	movs	r0, #1
}
 8001bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001bdc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001bdc:	b570      	push	{r4, r5, r6, lr}
 8001bde:	4604      	mov	r4, r0
 8001be0:	460d      	mov	r5, r1
 8001be2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001be4:	6823      	ldr	r3, [r4, #0]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	069b      	lsls	r3, r3, #26
 8001bea:	d501      	bpl.n	8001bf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8001bec:	2000      	movs	r0, #0
}
 8001bee:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bf0:	4632      	mov	r2, r6
 8001bf2:	4629      	mov	r1, r5
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	f7ff ff15 	bl	8001a24 <I2C_IsErrorOccurred>
 8001bfa:	b990      	cbnz	r0, 8001c22 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bfc:	f7ff fd28 	bl	8001650 <HAL_GetTick>
 8001c00:	1b80      	subs	r0, r0, r6
 8001c02:	42a8      	cmp	r0, r5
 8001c04:	d801      	bhi.n	8001c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8001c06:	2d00      	cmp	r5, #0
 8001c08:	d1ec      	bne.n	8001be4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c0c:	f043 0320 	orr.w	r3, r3, #32
 8001c10:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c12:	2320      	movs	r3, #32
 8001c14:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001c1e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001c22:	2001      	movs	r0, #1
 8001c24:	e7e3      	b.n	8001bee <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08001c26 <HAL_I2C_Init>:
{
 8001c26:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001c28:	4604      	mov	r4, r0
 8001c2a:	2800      	cmp	r0, #0
 8001c2c:	d04a      	beq.n	8001cc4 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c2e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001c32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c36:	b91b      	cbnz	r3, 8001c40 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001c38:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001c3c:	f7ff fbdc 	bl	80013f8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c40:	2324      	movs	r3, #36	; 0x24
 8001c42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001c46:	6823      	ldr	r3, [r4, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	f022 0201 	bic.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c50:	6862      	ldr	r2, [r4, #4]
 8001c52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c56:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c5e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c60:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c64:	2901      	cmp	r1, #1
 8001c66:	d124      	bne.n	8001cb2 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c6c:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001c74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c78:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c80:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c82:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8001c86:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c88:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c8a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001c8e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c90:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca0:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001ca2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ca6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001caa:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cac:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8001cb0:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cb2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cb6:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cb8:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001cba:	bf04      	itt	eq
 8001cbc:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001cc0:	605a      	streq	r2, [r3, #4]
 8001cc2:	e7d4      	b.n	8001c6e <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	e7f3      	b.n	8001cb0 <HAL_I2C_Init+0x8a>

08001cc8 <HAL_I2C_Master_Transmit>:
{
 8001cc8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ccc:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cce:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001cd2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cd4:	2b20      	cmp	r3, #32
{
 8001cd6:	4604      	mov	r4, r0
 8001cd8:	460e      	mov	r6, r1
 8001cda:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cdc:	f040 8086 	bne.w	8001dec <HAL_I2C_Master_Transmit+0x124>
    __HAL_LOCK(hi2c);
 8001ce0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	f000 8081 	beq.w	8001dec <HAL_I2C_Master_Transmit+0x124>
 8001cea:	f04f 0a01 	mov.w	sl, #1
 8001cee:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001cf2:	f7ff fcad 	bl	8001650 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cf6:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8001cf8:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cfa:	9000      	str	r0, [sp, #0]
 8001cfc:	4652      	mov	r2, sl
 8001cfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d02:	4620      	mov	r0, r4
 8001d04:	f7ff ff40 	bl	8001b88 <I2C_WaitOnFlagUntilTimeout>
 8001d08:	b118      	cbz	r0, 8001d12 <HAL_I2C_Master_Transmit+0x4a>
      return HAL_ERROR;
 8001d0a:	2001      	movs	r0, #1
}
 8001d0c:	b002      	add	sp, #8
 8001d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d12:	2321      	movs	r3, #33	; 0x21
 8001d14:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d18:	2310      	movs	r3, #16
 8001d1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d1e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8001d20:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8001d26:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8001d2e:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d30:	4b2f      	ldr	r3, [pc, #188]	; (8001df0 <HAL_I2C_Master_Transmit+0x128>)
 8001d32:	d926      	bls.n	8001d82 <HAL_I2C_Master_Transmit+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d34:	22ff      	movs	r2, #255	; 0xff
 8001d36:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d38:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d3e:	4631      	mov	r1, r6
 8001d40:	4620      	mov	r0, r4
 8001d42:	f7ff fe59 	bl	80019f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d46:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001d48:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d4a:	462a      	mov	r2, r5
 8001d4c:	4639      	mov	r1, r7
 8001d4e:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8001d50:	b9fb      	cbnz	r3, 8001d92 <HAL_I2C_Master_Transmit+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d52:	f7ff ff43 	bl	8001bdc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d56:	2800      	cmp	r0, #0
 8001d58:	d1d7      	bne.n	8001d0a <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d5a:	6823      	ldr	r3, [r4, #0]
 8001d5c:	2120      	movs	r1, #32
 8001d5e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001d66:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001d6a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001d6e:	f022 0201 	bic.w	r2, r2, #1
 8001d72:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001d74:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001d78:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d7c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001d80:	e7c4      	b.n	8001d0c <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8001d82:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d84:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001d86:	b292      	uxth	r2, r2
 8001d88:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	e7d5      	b.n	8001d3e <HAL_I2C_Master_Transmit+0x76>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d92:	f7ff fed2 	bl	8001b3a <I2C_WaitOnTXISFlagUntilTimeout>
 8001d96:	2800      	cmp	r0, #0
 8001d98:	d1b7      	bne.n	8001d0a <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d9c:	6822      	ldr	r2, [r4, #0]
 8001d9e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8001da2:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001da4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001da6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001da8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001daa:	3b01      	subs	r3, #1
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001db0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001db2:	3a01      	subs	r2, #1
 8001db4:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001db6:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001db8:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0c3      	beq.n	8001d46 <HAL_I2C_Master_Transmit+0x7e>
 8001dbe:	2a00      	cmp	r2, #0
 8001dc0:	d1c1      	bne.n	8001d46 <HAL_I2C_Master_Transmit+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001dc2:	9500      	str	r5, [sp, #0]
 8001dc4:	463b      	mov	r3, r7
 8001dc6:	2180      	movs	r1, #128	; 0x80
 8001dc8:	4620      	mov	r0, r4
 8001dca:	f7ff fedd 	bl	8001b88 <I2C_WaitOnFlagUntilTimeout>
 8001dce:	2800      	cmp	r0, #0
 8001dd0:	d19b      	bne.n	8001d0a <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dd2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	2bff      	cmp	r3, #255	; 0xff
 8001dd8:	d903      	bls.n	8001de2 <HAL_I2C_Master_Transmit+0x11a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dda:	22ff      	movs	r2, #255	; 0xff
 8001ddc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dde:	9000      	str	r0, [sp, #0]
 8001de0:	e7ab      	b.n	8001d3a <HAL_I2C_Master_Transmit+0x72>
          hi2c->XferSize = hi2c->XferCount;
 8001de2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001de4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001de6:	b292      	uxth	r2, r2
 8001de8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dea:	e7ce      	b.n	8001d8a <HAL_I2C_Master_Transmit+0xc2>
    return HAL_BUSY;
 8001dec:	2002      	movs	r0, #2
 8001dee:	e78d      	b.n	8001d0c <HAL_I2C_Master_Transmit+0x44>
 8001df0:	80002000 	.word	0x80002000

08001df4 <HAL_I2C_Mem_Read>:
{
 8001df4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001df8:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dfa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001dfe:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8001e02:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e06:	2b20      	cmp	r3, #32
{
 8001e08:	4604      	mov	r4, r0
 8001e0a:	460f      	mov	r7, r1
 8001e0c:	4616      	mov	r6, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e0e:	f040 80c9 	bne.w	8001fa4 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8001e12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001e14:	b113      	cbz	r3, 8001e1c <HAL_I2C_Mem_Read+0x28>
 8001e16:	f1ba 0f00 	cmp.w	sl, #0
 8001e1a:	d106      	bne.n	8001e2a <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e20:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001e22:	2001      	movs	r0, #1
}
 8001e24:	b003      	add	sp, #12
 8001e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8001e2a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	f000 80b8 	beq.w	8001fa4 <HAL_I2C_Mem_Read+0x1b0>
 8001e34:	f04f 0b01 	mov.w	fp, #1
 8001e38:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001e3c:	f7ff fc08 	bl	8001650 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e40:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8001e42:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e44:	9000      	str	r0, [sp, #0]
 8001e46:	465a      	mov	r2, fp
 8001e48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	f7ff fe9b 	bl	8001b88 <I2C_WaitOnFlagUntilTimeout>
 8001e52:	2800      	cmp	r0, #0
 8001e54:	d1e5      	bne.n	8001e22 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e56:	2322      	movs	r3, #34	; 0x22
 8001e58:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e5c:	2340      	movs	r3, #64	; 0x40
 8001e5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001e62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001e64:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001e66:	4b50      	ldr	r3, [pc, #320]	; (8001fa8 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e68:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 8001e6a:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	fa5f f289 	uxtb.w	r2, r9
 8001e72:	4603      	mov	r3, r0
 8001e74:	4639      	mov	r1, r7
 8001e76:	4620      	mov	r0, r4
    hi2c->XferCount = Size;
 8001e78:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001e7c:	f7ff fdbc 	bl	80019f8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e80:	462a      	mov	r2, r5
 8001e82:	4641      	mov	r1, r8
 8001e84:	4620      	mov	r0, r4
 8001e86:	f7ff fe58 	bl	8001b3a <I2C_WaitOnTXISFlagUntilTimeout>
 8001e8a:	bb20      	cbnz	r0, 8001ed6 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e8c:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e90:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e92:	d116      	bne.n	8001ec2 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e94:	b2f6      	uxtb	r6, r6
 8001e96:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	9500      	str	r5, [sp, #0]
 8001e9c:	4643      	mov	r3, r8
 8001e9e:	2140      	movs	r1, #64	; 0x40
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	f7ff fe71 	bl	8001b88 <I2C_WaitOnFlagUntilTimeout>
 8001ea6:	b9b0      	cbnz	r0, 8001ed6 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ea8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	2bff      	cmp	r3, #255	; 0xff
 8001eae:	4b3f      	ldr	r3, [pc, #252]	; (8001fac <HAL_I2C_Mem_Read+0x1b8>)
 8001eb0:	d815      	bhi.n	8001ede <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8001eb2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001eb4:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8001eb6:	b292      	uxth	r2, r2
 8001eb8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001eba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	e012      	b.n	8001ee8 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001ec2:	0a32      	lsrs	r2, r6, #8
 8001ec4:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ec6:	4641      	mov	r1, r8
 8001ec8:	462a      	mov	r2, r5
 8001eca:	4620      	mov	r0, r4
 8001ecc:	f7ff fe35 	bl	8001b3a <I2C_WaitOnTXISFlagUntilTimeout>
 8001ed0:	b908      	cbnz	r0, 8001ed6 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ed2:	6823      	ldr	r3, [r4, #0]
 8001ed4:	e7de      	b.n	8001e94 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001edc:	e7a1      	b.n	8001e22 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ede:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ee0:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ee2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ee4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ee8:	4639      	mov	r1, r7
 8001eea:	4620      	mov	r0, r4
 8001eec:	f7ff fd84 	bl	80019f8 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001ef0:	9500      	str	r5, [sp, #0]
 8001ef2:	4643      	mov	r3, r8
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2104      	movs	r1, #4
 8001ef8:	4620      	mov	r0, r4
 8001efa:	f7ff fe45 	bl	8001b88 <I2C_WaitOnFlagUntilTimeout>
 8001efe:	2800      	cmp	r0, #0
 8001f00:	d18f      	bne.n	8001e22 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f02:	6823      	ldr	r3, [r4, #0]
 8001f04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f08:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001f0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001f0c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001f0e:	3301      	adds	r3, #1
 8001f10:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001f12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f1a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001f1c:	3a01      	subs	r2, #1
 8001f1e:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f20:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001f22:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f24:	b1b3      	cbz	r3, 8001f54 <HAL_I2C_Mem_Read+0x160>
 8001f26:	b9aa      	cbnz	r2, 8001f54 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f28:	9500      	str	r5, [sp, #0]
 8001f2a:	4643      	mov	r3, r8
 8001f2c:	2180      	movs	r1, #128	; 0x80
 8001f2e:	4620      	mov	r0, r4
 8001f30:	f7ff fe2a 	bl	8001b88 <I2C_WaitOnFlagUntilTimeout>
 8001f34:	2800      	cmp	r0, #0
 8001f36:	f47f af74 	bne.w	8001e22 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	2bff      	cmp	r3, #255	; 0xff
 8001f40:	d928      	bls.n	8001f94 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f42:	22ff      	movs	r2, #255	; 0xff
 8001f44:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001f46:	9000      	str	r0, [sp, #0]
 8001f48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f4c:	4639      	mov	r1, r7
 8001f4e:	4620      	mov	r0, r4
 8001f50:	f7ff fd52 	bl	80019f8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8001f54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1c9      	bne.n	8001ef0 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f5c:	462a      	mov	r2, r5
 8001f5e:	4641      	mov	r1, r8
 8001f60:	4620      	mov	r0, r4
 8001f62:	f7ff fe3b 	bl	8001bdc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f66:	2800      	cmp	r0, #0
 8001f68:	f47f af5b 	bne.w	8001e22 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f6c:	6823      	ldr	r3, [r4, #0]
 8001f6e:	2120      	movs	r1, #32
 8001f70:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001f78:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001f7c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001f80:	f022 0201 	bic.w	r2, r2, #1
 8001f84:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f86:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001f8a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f8e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001f92:	e747      	b.n	8001e24 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8001f94:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f96:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8001f98:	b292      	uxth	r2, r2
 8001f9a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	e7d3      	b.n	8001f4c <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 8001fa4:	2002      	movs	r0, #2
 8001fa6:	e73d      	b.n	8001e24 <HAL_I2C_Mem_Read+0x30>
 8001fa8:	80002000 	.word	0x80002000
 8001fac:	80002400 	.word	0x80002400

08001fb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fb0:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001fb6:	2b20      	cmp	r3, #32
 8001fb8:	b2dc      	uxtb	r4, r3
 8001fba:	d11d      	bne.n	8001ff8 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fbc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d019      	beq.n	8001ff8 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fc4:	2324      	movs	r3, #36	; 0x24
 8001fc6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fca:	6803      	ldr	r3, [r0, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	f022 0201 	bic.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	4311      	orrs	r1, r2
 8001fe0:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	f042 0201 	orr.w	r2, r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fea:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001fec:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001ff0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001ff4:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001ff6:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8001ff8:	2002      	movs	r0, #2
 8001ffa:	e7fc      	b.n	8001ff6 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08001ffc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ffc:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ffe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002002:	2b20      	cmp	r3, #32
 8002004:	b2dc      	uxtb	r4, r3
 8002006:	d11c      	bne.n	8002042 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002008:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800200c:	2b01      	cmp	r3, #1
 800200e:	d018      	beq.n	8002042 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002010:	2324      	movs	r3, #36	; 0x24
 8002012:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002016:	6803      	ldr	r3, [r0, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	f022 0201 	bic.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002020:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002022:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002026:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800202a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	f042 0201 	orr.w	r2, r2, #1
 8002032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002034:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002036:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800203a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800203e:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002040:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8002042:	2002      	movs	r0, #2
 8002044:	e7fc      	b.n	8002040 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

08002048 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002048:	4b02      	ldr	r3, [pc, #8]	; (8002054 <HAL_PWREx_GetVoltageRange+0xc>)
 800204a:	6818      	ldr	r0, [r3, #0]
#endif
}
 800204c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40007000 	.word	0x40007000

08002058 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002058:	4a17      	ldr	r2, [pc, #92]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800205a:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800205c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002060:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002064:	d11d      	bne.n	80020a2 <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800206a:	d101      	bne.n	8002070 <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800206c:	2000      	movs	r0, #0
 800206e:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002070:	6813      	ldr	r3, [r2, #0]
 8002072:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002076:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800207a:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800207c:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0x64>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2132      	movs	r1, #50	; 0x32
 8002082:	434b      	muls	r3, r1
 8002084:	490e      	ldr	r1, [pc, #56]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8002086:	fbb3 f3f1 	udiv	r3, r3, r1
 800208a:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800208c:	6951      	ldr	r1, [r2, #20]
 800208e:	0549      	lsls	r1, r1, #21
 8002090:	d500      	bpl.n	8002094 <HAL_PWREx_ControlVoltageScaling+0x3c>
 8002092:	b923      	cbnz	r3, 800209e <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002094:	6953      	ldr	r3, [r2, #20]
 8002096:	055b      	lsls	r3, r3, #21
 8002098:	d5e8      	bpl.n	800206c <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 800209a:	2003      	movs	r0, #3
}
 800209c:	4770      	bx	lr
        wait_loop_index--;
 800209e:	3b01      	subs	r3, #1
 80020a0:	e7f4      	b.n	800208c <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020a6:	bf1f      	itttt	ne
 80020a8:	6813      	ldrne	r3, [r2, #0]
 80020aa:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 80020ae:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 80020b2:	6013      	strne	r3, [r2, #0]
 80020b4:	e7da      	b.n	800206c <HAL_PWREx_ControlVoltageScaling+0x14>
 80020b6:	bf00      	nop
 80020b8:	40007000 	.word	0x40007000
 80020bc:	20000040 	.word	0x20000040
 80020c0:	000f4240 	.word	0x000f4240

080020c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020c6:	4d1e      	ldr	r5, [pc, #120]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80020c8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80020ca:	00da      	lsls	r2, r3, #3
{
 80020cc:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020ce:	d518      	bpl.n	8002102 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020d0:	f7ff ffba 	bl	8002048 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020d4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80020d8:	d123      	bne.n	8002122 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020da:	2c80      	cmp	r4, #128	; 0x80
 80020dc:	d929      	bls.n	8002132 <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020de:	2ca0      	cmp	r4, #160	; 0xa0
 80020e0:	bf8c      	ite	hi
 80020e2:	2002      	movhi	r0, #2
 80020e4:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020e6:	4a17      	ldr	r2, [pc, #92]	; (8002144 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80020e8:	6813      	ldr	r3, [r2, #0]
 80020ea:	f023 0307 	bic.w	r3, r3, #7
 80020ee:	4303      	orrs	r3, r0
 80020f0:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020f2:	6813      	ldr	r3, [r2, #0]
 80020f4:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80020f8:	1a18      	subs	r0, r3, r0
 80020fa:	bf18      	it	ne
 80020fc:	2001      	movne	r0, #1
 80020fe:	b003      	add	sp, #12
 8002100:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002108:	65ab      	str	r3, [r5, #88]	; 0x58
 800210a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800210c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002110:	9301      	str	r3, [sp, #4]
 8002112:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002114:	f7ff ff98 	bl	8002048 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002118:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800211a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800211e:	65ab      	str	r3, [r5, #88]	; 0x58
 8002120:	e7d8      	b.n	80020d4 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8002122:	2c80      	cmp	r4, #128	; 0x80
 8002124:	d807      	bhi.n	8002136 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8002126:	d008      	beq.n	800213a <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8002128:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 800212c:	4258      	negs	r0, r3
 800212e:	4158      	adcs	r0, r3
 8002130:	e7d9      	b.n	80020e6 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002132:	2000      	movs	r0, #0
 8002134:	e7d7      	b.n	80020e6 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002136:	2003      	movs	r0, #3
 8002138:	e7d5      	b.n	80020e6 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800213a:	2002      	movs	r0, #2
 800213c:	e7d3      	b.n	80020e6 <RCC_SetFlashLatencyFromMSIRange+0x22>
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000
 8002144:	40022000 	.word	0x40022000

08002148 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002148:	4b22      	ldr	r3, [pc, #136]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x8c>)
 800214a:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800214c:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800214e:	f012 020c 	ands.w	r2, r2, #12
 8002152:	d005      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0x18>
 8002154:	2a0c      	cmp	r2, #12
 8002156:	d115      	bne.n	8002184 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002158:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800215c:	2901      	cmp	r1, #1
 800215e:	d118      	bne.n	8002192 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002160:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8002162:	481d      	ldr	r0, [pc, #116]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002164:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002166:	bf55      	itete	pl
 8002168:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800216c:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800216e:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002172:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8002176:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800217a:	b34a      	cbz	r2, 80021d0 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800217c:	2a0c      	cmp	r2, #12
 800217e:	d009      	beq.n	8002194 <HAL_RCC_GetSysClockFreq+0x4c>
 8002180:	2000      	movs	r0, #0
  return sysclockfreq;
 8002182:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002184:	2a04      	cmp	r2, #4
 8002186:	d022      	beq.n	80021ce <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002188:	2a08      	cmp	r2, #8
 800218a:	4814      	ldr	r0, [pc, #80]	; (80021dc <HAL_RCC_GetSysClockFreq+0x94>)
 800218c:	bf18      	it	ne
 800218e:	2000      	movne	r0, #0
 8002190:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002192:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 800219a:	2a02      	cmp	r2, #2
 800219c:	d015      	beq.n	80021ca <HAL_RCC_GetSysClockFreq+0x82>
 800219e:	490f      	ldr	r1, [pc, #60]	; (80021dc <HAL_RCC_GetSysClockFreq+0x94>)
 80021a0:	2a03      	cmp	r2, #3
 80021a2:	bf08      	it	eq
 80021a4:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021a6:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80021ae:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021b0:	68d8      	ldr	r0, [r3, #12]
 80021b2:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021b6:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021ba:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021bc:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021be:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021c0:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 80021c4:	fbb2 f0f0 	udiv	r0, r2, r0
 80021c8:	4770      	bx	lr
      pllvco = HSI_VALUE;
 80021ca:	4805      	ldr	r0, [pc, #20]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80021cc:	e7eb      	b.n	80021a6 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 80021ce:	4804      	ldr	r0, [pc, #16]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x98>)
}
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000
 80021d8:	0800a724 	.word	0x0800a724
 80021dc:	007a1200 	.word	0x007a1200
 80021e0:	00f42400 	.word	0x00f42400

080021e4 <HAL_RCC_OscConfig>:
{
 80021e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 80021e8:	4605      	mov	r5, r0
 80021ea:	b918      	cbnz	r0, 80021f4 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80021ec:	2001      	movs	r0, #1
}
 80021ee:	b003      	add	sp, #12
 80021f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021f4:	4c92      	ldr	r4, [pc, #584]	; (8002440 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021f6:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021f8:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021fa:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021fc:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021fe:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002202:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002206:	d53d      	bpl.n	8002284 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002208:	b11e      	cbz	r6, 8002212 <HAL_RCC_OscConfig+0x2e>
 800220a:	2e0c      	cmp	r6, #12
 800220c:	d166      	bne.n	80022dc <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800220e:	2f01      	cmp	r7, #1
 8002210:	d164      	bne.n	80022dc <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002212:	6823      	ldr	r3, [r4, #0]
 8002214:	0798      	lsls	r0, r3, #30
 8002216:	d502      	bpl.n	800221e <HAL_RCC_OscConfig+0x3a>
 8002218:	69ab      	ldr	r3, [r5, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0e6      	beq.n	80021ec <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800221e:	6823      	ldr	r3, [r4, #0]
 8002220:	6a28      	ldr	r0, [r5, #32]
 8002222:	0719      	lsls	r1, r3, #28
 8002224:	bf56      	itet	pl
 8002226:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 800222a:	6823      	ldrmi	r3, [r4, #0]
 800222c:	091b      	lsrpl	r3, r3, #4
 800222e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002232:	4298      	cmp	r0, r3
 8002234:	d93b      	bls.n	80022ae <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002236:	f7ff ff45 	bl	80020c4 <RCC_SetFlashLatencyFromMSIRange>
 800223a:	2800      	cmp	r0, #0
 800223c:	d1d6      	bne.n	80021ec <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	f043 0308 	orr.w	r3, r3, #8
 8002244:	6023      	str	r3, [r4, #0]
 8002246:	6823      	ldr	r3, [r4, #0]
 8002248:	6a2a      	ldr	r2, [r5, #32]
 800224a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800224e:	4313      	orrs	r3, r2
 8002250:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002252:	6863      	ldr	r3, [r4, #4]
 8002254:	69ea      	ldr	r2, [r5, #28]
 8002256:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800225a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800225e:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002260:	f7ff ff72 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8002264:	68a3      	ldr	r3, [r4, #8]
 8002266:	4a77      	ldr	r2, [pc, #476]	; (8002444 <HAL_RCC_OscConfig+0x260>)
 8002268:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800226c:	5cd3      	ldrb	r3, [r2, r3]
 800226e:	f003 031f 	and.w	r3, r3, #31
 8002272:	40d8      	lsrs	r0, r3
 8002274:	4b74      	ldr	r3, [pc, #464]	; (8002448 <HAL_RCC_OscConfig+0x264>)
 8002276:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002278:	4b74      	ldr	r3, [pc, #464]	; (800244c <HAL_RCC_OscConfig+0x268>)
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	f7ff f9a0 	bl	80015c0 <HAL_InitTick>
        if(status != HAL_OK)
 8002280:	2800      	cmp	r0, #0
 8002282:	d1b4      	bne.n	80021ee <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002284:	682b      	ldr	r3, [r5, #0]
 8002286:	07d8      	lsls	r0, r3, #31
 8002288:	d45f      	bmi.n	800234a <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228a:	682b      	ldr	r3, [r5, #0]
 800228c:	0799      	lsls	r1, r3, #30
 800228e:	f100 809e 	bmi.w	80023ce <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002292:	682b      	ldr	r3, [r5, #0]
 8002294:	0718      	lsls	r0, r3, #28
 8002296:	f100 80db 	bmi.w	8002450 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800229a:	682b      	ldr	r3, [r5, #0]
 800229c:	0759      	lsls	r1, r3, #29
 800229e:	f100 8101 	bmi.w	80024a4 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022a2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f040 816a 	bne.w	800257e <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 80022aa:	2000      	movs	r0, #0
 80022ac:	e79f      	b.n	80021ee <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ae:	6823      	ldr	r3, [r4, #0]
 80022b0:	f043 0308 	orr.w	r3, r3, #8
 80022b4:	6023      	str	r3, [r4, #0]
 80022b6:	6823      	ldr	r3, [r4, #0]
 80022b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022bc:	4303      	orrs	r3, r0
 80022be:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022c0:	6863      	ldr	r3, [r4, #4]
 80022c2:	69ea      	ldr	r2, [r5, #28]
 80022c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80022cc:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022ce:	2e00      	cmp	r6, #0
 80022d0:	d1c6      	bne.n	8002260 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022d2:	f7ff fef7 	bl	80020c4 <RCC_SetFlashLatencyFromMSIRange>
 80022d6:	2800      	cmp	r0, #0
 80022d8:	d0c2      	beq.n	8002260 <HAL_RCC_OscConfig+0x7c>
 80022da:	e787      	b.n	80021ec <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022dc:	69ab      	ldr	r3, [r5, #24]
 80022de:	b31b      	cbz	r3, 8002328 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 80022e0:	6823      	ldr	r3, [r4, #0]
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80022e8:	f7ff f9b2 	bl	8001650 <HAL_GetTick>
 80022ec:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022ee:	6823      	ldr	r3, [r4, #0]
 80022f0:	079a      	lsls	r2, r3, #30
 80022f2:	d511      	bpl.n	8002318 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022f4:	6823      	ldr	r3, [r4, #0]
 80022f6:	f043 0308 	orr.w	r3, r3, #8
 80022fa:	6023      	str	r3, [r4, #0]
 80022fc:	6823      	ldr	r3, [r4, #0]
 80022fe:	6a2a      	ldr	r2, [r5, #32]
 8002300:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002304:	4313      	orrs	r3, r2
 8002306:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002308:	6863      	ldr	r3, [r4, #4]
 800230a:	69ea      	ldr	r2, [r5, #28]
 800230c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002310:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002314:	6063      	str	r3, [r4, #4]
 8002316:	e7b5      	b.n	8002284 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002318:	f7ff f99a 	bl	8001650 <HAL_GetTick>
 800231c:	eba0 0008 	sub.w	r0, r0, r8
 8002320:	2802      	cmp	r0, #2
 8002322:	d9e4      	bls.n	80022ee <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8002324:	2003      	movs	r0, #3
 8002326:	e762      	b.n	80021ee <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8002328:	6823      	ldr	r3, [r4, #0]
 800232a:	f023 0301 	bic.w	r3, r3, #1
 800232e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002330:	f7ff f98e 	bl	8001650 <HAL_GetTick>
 8002334:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002336:	6823      	ldr	r3, [r4, #0]
 8002338:	079b      	lsls	r3, r3, #30
 800233a:	d5a3      	bpl.n	8002284 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800233c:	f7ff f988 	bl	8001650 <HAL_GetTick>
 8002340:	eba0 0008 	sub.w	r0, r0, r8
 8002344:	2802      	cmp	r0, #2
 8002346:	d9f6      	bls.n	8002336 <HAL_RCC_OscConfig+0x152>
 8002348:	e7ec      	b.n	8002324 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800234a:	2e08      	cmp	r6, #8
 800234c:	d003      	beq.n	8002356 <HAL_RCC_OscConfig+0x172>
 800234e:	2e0c      	cmp	r6, #12
 8002350:	d108      	bne.n	8002364 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002352:	2f03      	cmp	r7, #3
 8002354:	d106      	bne.n	8002364 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002356:	6823      	ldr	r3, [r4, #0]
 8002358:	039a      	lsls	r2, r3, #14
 800235a:	d596      	bpl.n	800228a <HAL_RCC_OscConfig+0xa6>
 800235c:	686b      	ldr	r3, [r5, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d193      	bne.n	800228a <HAL_RCC_OscConfig+0xa6>
 8002362:	e743      	b.n	80021ec <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002364:	686b      	ldr	r3, [r5, #4]
 8002366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800236a:	d110      	bne.n	800238e <HAL_RCC_OscConfig+0x1aa>
 800236c:	6823      	ldr	r3, [r4, #0]
 800236e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002372:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002374:	f7ff f96c 	bl	8001650 <HAL_GetTick>
 8002378:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800237a:	6823      	ldr	r3, [r4, #0]
 800237c:	039b      	lsls	r3, r3, #14
 800237e:	d484      	bmi.n	800228a <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002380:	f7ff f966 	bl	8001650 <HAL_GetTick>
 8002384:	eba0 0008 	sub.w	r0, r0, r8
 8002388:	2864      	cmp	r0, #100	; 0x64
 800238a:	d9f6      	bls.n	800237a <HAL_RCC_OscConfig+0x196>
 800238c:	e7ca      	b.n	8002324 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800238e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002392:	d104      	bne.n	800239e <HAL_RCC_OscConfig+0x1ba>
 8002394:	6823      	ldr	r3, [r4, #0]
 8002396:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800239a:	6023      	str	r3, [r4, #0]
 800239c:	e7e6      	b.n	800236c <HAL_RCC_OscConfig+0x188>
 800239e:	6822      	ldr	r2, [r4, #0]
 80023a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023a4:	6022      	str	r2, [r4, #0]
 80023a6:	6822      	ldr	r2, [r4, #0]
 80023a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023ac:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1e0      	bne.n	8002374 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 80023b2:	f7ff f94d 	bl	8001650 <HAL_GetTick>
 80023b6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023b8:	6823      	ldr	r3, [r4, #0]
 80023ba:	0398      	lsls	r0, r3, #14
 80023bc:	f57f af65 	bpl.w	800228a <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c0:	f7ff f946 	bl	8001650 <HAL_GetTick>
 80023c4:	eba0 0008 	sub.w	r0, r0, r8
 80023c8:	2864      	cmp	r0, #100	; 0x64
 80023ca:	d9f5      	bls.n	80023b8 <HAL_RCC_OscConfig+0x1d4>
 80023cc:	e7aa      	b.n	8002324 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023ce:	2e04      	cmp	r6, #4
 80023d0:	d003      	beq.n	80023da <HAL_RCC_OscConfig+0x1f6>
 80023d2:	2e0c      	cmp	r6, #12
 80023d4:	d110      	bne.n	80023f8 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023d6:	2f02      	cmp	r7, #2
 80023d8:	d10e      	bne.n	80023f8 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023da:	6823      	ldr	r3, [r4, #0]
 80023dc:	0559      	lsls	r1, r3, #21
 80023de:	d503      	bpl.n	80023e8 <HAL_RCC_OscConfig+0x204>
 80023e0:	68eb      	ldr	r3, [r5, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f43f af02 	beq.w	80021ec <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e8:	6863      	ldr	r3, [r4, #4]
 80023ea:	692a      	ldr	r2, [r5, #16]
 80023ec:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80023f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80023f4:	6063      	str	r3, [r4, #4]
 80023f6:	e74c      	b.n	8002292 <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023f8:	68eb      	ldr	r3, [r5, #12]
 80023fa:	b17b      	cbz	r3, 800241c <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002402:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002404:	f7ff f924 	bl	8001650 <HAL_GetTick>
 8002408:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800240a:	6823      	ldr	r3, [r4, #0]
 800240c:	055a      	lsls	r2, r3, #21
 800240e:	d4eb      	bmi.n	80023e8 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002410:	f7ff f91e 	bl	8001650 <HAL_GetTick>
 8002414:	1bc0      	subs	r0, r0, r7
 8002416:	2802      	cmp	r0, #2
 8002418:	d9f7      	bls.n	800240a <HAL_RCC_OscConfig+0x226>
 800241a:	e783      	b.n	8002324 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 800241c:	6823      	ldr	r3, [r4, #0]
 800241e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002422:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002424:	f7ff f914 	bl	8001650 <HAL_GetTick>
 8002428:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800242a:	6823      	ldr	r3, [r4, #0]
 800242c:	055b      	lsls	r3, r3, #21
 800242e:	f57f af30 	bpl.w	8002292 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002432:	f7ff f90d 	bl	8001650 <HAL_GetTick>
 8002436:	1bc0      	subs	r0, r0, r7
 8002438:	2802      	cmp	r0, #2
 800243a:	d9f6      	bls.n	800242a <HAL_RCC_OscConfig+0x246>
 800243c:	e772      	b.n	8002324 <HAL_RCC_OscConfig+0x140>
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000
 8002444:	0800a70b 	.word	0x0800a70b
 8002448:	20000040 	.word	0x20000040
 800244c:	20000048 	.word	0x20000048
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002450:	696b      	ldr	r3, [r5, #20]
 8002452:	b19b      	cbz	r3, 800247c <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8002454:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002460:	f7ff f8f6 	bl	8001650 <HAL_GetTick>
 8002464:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002466:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800246a:	079a      	lsls	r2, r3, #30
 800246c:	f53f af15 	bmi.w	800229a <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002470:	f7ff f8ee 	bl	8001650 <HAL_GetTick>
 8002474:	1bc0      	subs	r0, r0, r7
 8002476:	2802      	cmp	r0, #2
 8002478:	d9f5      	bls.n	8002466 <HAL_RCC_OscConfig+0x282>
 800247a:	e753      	b.n	8002324 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 800247c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002480:	f023 0301 	bic.w	r3, r3, #1
 8002484:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002488:	f7ff f8e2 	bl	8001650 <HAL_GetTick>
 800248c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800248e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002492:	079b      	lsls	r3, r3, #30
 8002494:	f57f af01 	bpl.w	800229a <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002498:	f7ff f8da 	bl	8001650 <HAL_GetTick>
 800249c:	1bc0      	subs	r0, r0, r7
 800249e:	2802      	cmp	r0, #2
 80024a0:	d9f5      	bls.n	800248e <HAL_RCC_OscConfig+0x2aa>
 80024a2:	e73f      	b.n	8002324 <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80024a6:	00df      	lsls	r7, r3, #3
 80024a8:	d429      	bmi.n	80024fe <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80024aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80024ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b0:	65a3      	str	r3, [r4, #88]	; 0x58
 80024b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b8:	9301      	str	r3, [sp, #4]
 80024ba:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80024bc:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c0:	4f85      	ldr	r7, [pc, #532]	; (80026d8 <HAL_RCC_OscConfig+0x4f4>)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	05d8      	lsls	r0, r3, #23
 80024c6:	d51d      	bpl.n	8002504 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c8:	68ab      	ldr	r3, [r5, #8]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d12b      	bne.n	8002526 <HAL_RCC_OscConfig+0x342>
 80024ce:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80024da:	f7ff f8b9 	bl	8001650 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024de:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80024e2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024e4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80024e8:	079a      	lsls	r2, r3, #30
 80024ea:	d542      	bpl.n	8002572 <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 80024ec:	f1b8 0f00 	cmp.w	r8, #0
 80024f0:	f43f aed7 	beq.w	80022a2 <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80024f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024fa:	65a3      	str	r3, [r4, #88]	; 0x58
 80024fc:	e6d1      	b.n	80022a2 <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 80024fe:	f04f 0800 	mov.w	r8, #0
 8002502:	e7dd      	b.n	80024c0 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800250c:	f7ff f8a0 	bl	8001650 <HAL_GetTick>
 8002510:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	05d9      	lsls	r1, r3, #23
 8002516:	d4d7      	bmi.n	80024c8 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002518:	f7ff f89a 	bl	8001650 <HAL_GetTick>
 800251c:	eba0 0009 	sub.w	r0, r0, r9
 8002520:	2802      	cmp	r0, #2
 8002522:	d9f6      	bls.n	8002512 <HAL_RCC_OscConfig+0x32e>
 8002524:	e6fe      	b.n	8002324 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002526:	2b05      	cmp	r3, #5
 8002528:	d106      	bne.n	8002538 <HAL_RCC_OscConfig+0x354>
 800252a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800252e:	f043 0304 	orr.w	r3, r3, #4
 8002532:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8002536:	e7ca      	b.n	80024ce <HAL_RCC_OscConfig+0x2ea>
 8002538:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800253c:	f022 0201 	bic.w	r2, r2, #1
 8002540:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002544:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002548:	f022 0204 	bic.w	r2, r2, #4
 800254c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1c2      	bne.n	80024da <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8002554:	f7ff f87c 	bl	8001650 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002558:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800255c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800255e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002562:	079b      	lsls	r3, r3, #30
 8002564:	d5c2      	bpl.n	80024ec <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7ff f873 	bl	8001650 <HAL_GetTick>
 800256a:	1bc0      	subs	r0, r0, r7
 800256c:	4548      	cmp	r0, r9
 800256e:	d9f6      	bls.n	800255e <HAL_RCC_OscConfig+0x37a>
 8002570:	e6d8      	b.n	8002324 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002572:	f7ff f86d 	bl	8001650 <HAL_GetTick>
 8002576:	1bc0      	subs	r0, r0, r7
 8002578:	4548      	cmp	r0, r9
 800257a:	d9b3      	bls.n	80024e4 <HAL_RCC_OscConfig+0x300>
 800257c:	e6d2      	b.n	8002324 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800257e:	2b02      	cmp	r3, #2
 8002580:	f040 808f 	bne.w	80026a2 <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8002584:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002586:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002588:	f003 0103 	and.w	r1, r3, #3
 800258c:	4291      	cmp	r1, r2
 800258e:	d124      	bne.n	80025da <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002590:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002592:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002596:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002598:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800259c:	d11d      	bne.n	80025da <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800259e:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80025a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025a4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80025a8:	d117      	bne.n	80025da <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025aa:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80025ac:	3a07      	subs	r2, #7
 80025ae:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 80025b2:	bf18      	it	ne
 80025b4:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025b6:	4291      	cmp	r1, r2
 80025b8:	d10f      	bne.n	80025da <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ba:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80025bc:	0852      	lsrs	r2, r2, #1
 80025be:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80025c2:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025c4:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80025c8:	d107      	bne.n	80025da <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025ca:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80025cc:	0852      	lsrs	r2, r2, #1
 80025ce:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80025d2:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025d4:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80025d8:	d04a      	beq.n	8002670 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025da:	2e0c      	cmp	r6, #12
 80025dc:	f43f ae06 	beq.w	80021ec <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025e0:	6823      	ldr	r3, [r4, #0]
 80025e2:	015f      	lsls	r7, r3, #5
 80025e4:	f53f ae02 	bmi.w	80021ec <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80025e8:	6823      	ldr	r3, [r4, #0]
 80025ea:	00de      	lsls	r6, r3, #3
 80025ec:	f53f adfe 	bmi.w	80021ec <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 80025f0:	6823      	ldr	r3, [r4, #0]
 80025f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025f6:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 80025f8:	f7ff f82a 	bl	8001650 <HAL_GetTick>
 80025fc:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	0198      	lsls	r0, r3, #6
 8002602:	d42f      	bmi.n	8002664 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002604:	68e2      	ldr	r2, [r4, #12]
 8002606:	4b35      	ldr	r3, [pc, #212]	; (80026dc <HAL_RCC_OscConfig+0x4f8>)
 8002608:	4013      	ands	r3, r2
 800260a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800260c:	4313      	orrs	r3, r2
 800260e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002610:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002614:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002616:	3a01      	subs	r2, #1
 8002618:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800261c:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800261e:	0912      	lsrs	r2, r2, #4
 8002620:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002624:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002626:	0852      	lsrs	r2, r2, #1
 8002628:	3a01      	subs	r2, #1
 800262a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800262e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002630:	0852      	lsrs	r2, r2, #1
 8002632:	3a01      	subs	r2, #1
 8002634:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002638:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002640:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002642:	68e3      	ldr	r3, [r4, #12]
 8002644:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002648:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 800264a:	f7ff f801 	bl	8001650 <HAL_GetTick>
 800264e:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002650:	6823      	ldr	r3, [r4, #0]
 8002652:	0199      	lsls	r1, r3, #6
 8002654:	f53f ae29 	bmi.w	80022aa <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002658:	f7fe fffa 	bl	8001650 <HAL_GetTick>
 800265c:	1b40      	subs	r0, r0, r5
 800265e:	2802      	cmp	r0, #2
 8002660:	d9f6      	bls.n	8002650 <HAL_RCC_OscConfig+0x46c>
 8002662:	e65f      	b.n	8002324 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002664:	f7fe fff4 	bl	8001650 <HAL_GetTick>
 8002668:	1b80      	subs	r0, r0, r6
 800266a:	2802      	cmp	r0, #2
 800266c:	d9c7      	bls.n	80025fe <HAL_RCC_OscConfig+0x41a>
 800266e:	e659      	b.n	8002324 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002670:	6823      	ldr	r3, [r4, #0]
 8002672:	019a      	lsls	r2, r3, #6
 8002674:	f53f ae19 	bmi.w	80022aa <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8002678:	6823      	ldr	r3, [r4, #0]
 800267a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800267e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002680:	68e3      	ldr	r3, [r4, #12]
 8002682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002686:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8002688:	f7fe ffe2 	bl	8001650 <HAL_GetTick>
 800268c:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800268e:	6823      	ldr	r3, [r4, #0]
 8002690:	019b      	lsls	r3, r3, #6
 8002692:	f53f ae0a 	bmi.w	80022aa <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002696:	f7fe ffdb 	bl	8001650 <HAL_GetTick>
 800269a:	1b40      	subs	r0, r0, r5
 800269c:	2802      	cmp	r0, #2
 800269e:	d9f6      	bls.n	800268e <HAL_RCC_OscConfig+0x4aa>
 80026a0:	e640      	b.n	8002324 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026a2:	2e0c      	cmp	r6, #12
 80026a4:	f43f ada2 	beq.w	80021ec <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80026a8:	6823      	ldr	r3, [r4, #0]
 80026aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026ae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80026b0:	f7fe ffce 	bl	8001650 <HAL_GetTick>
 80026b4:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b6:	6823      	ldr	r3, [r4, #0]
 80026b8:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 80026bc:	d105      	bne.n	80026ca <HAL_RCC_OscConfig+0x4e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026be:	68e1      	ldr	r1, [r4, #12]
 80026c0:	4a07      	ldr	r2, [pc, #28]	; (80026e0 <HAL_RCC_OscConfig+0x4fc>)
 80026c2:	400a      	ands	r2, r1
 80026c4:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 80026c6:	4618      	mov	r0, r3
 80026c8:	e591      	b.n	80021ee <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ca:	f7fe ffc1 	bl	8001650 <HAL_GetTick>
 80026ce:	1b40      	subs	r0, r0, r5
 80026d0:	2802      	cmp	r0, #2
 80026d2:	d9f0      	bls.n	80026b6 <HAL_RCC_OscConfig+0x4d2>
 80026d4:	e626      	b.n	8002324 <HAL_RCC_OscConfig+0x140>
 80026d6:	bf00      	nop
 80026d8:	40007000 	.word	0x40007000
 80026dc:	f99d808c 	.word	0xf99d808c
 80026e0:	feeefffc 	.word	0xfeeefffc

080026e4 <HAL_RCC_ClockConfig>:
{
 80026e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026e8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80026ea:	4604      	mov	r4, r0
 80026ec:	b910      	cbnz	r0, 80026f4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80026ee:	2001      	movs	r0, #1
}
 80026f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026f4:	4a4b      	ldr	r2, [pc, #300]	; (8002824 <HAL_RCC_ClockConfig+0x140>)
 80026f6:	6813      	ldr	r3, [r2, #0]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	428b      	cmp	r3, r1
 80026fe:	d32c      	bcc.n	800275a <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002700:	6820      	ldr	r0, [r4, #0]
 8002702:	0786      	lsls	r6, r0, #30
 8002704:	d434      	bmi.n	8002770 <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002706:	07c1      	lsls	r1, r0, #31
 8002708:	d43f      	bmi.n	800278a <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800270a:	6821      	ldr	r1, [r4, #0]
 800270c:	078a      	lsls	r2, r1, #30
 800270e:	d468      	bmi.n	80027e2 <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002710:	4a44      	ldr	r2, [pc, #272]	; (8002824 <HAL_RCC_ClockConfig+0x140>)
 8002712:	6813      	ldr	r3, [r2, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	42ab      	cmp	r3, r5
 800271a:	d86f      	bhi.n	80027fc <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800271c:	f011 0f04 	tst.w	r1, #4
 8002720:	4d41      	ldr	r5, [pc, #260]	; (8002828 <HAL_RCC_ClockConfig+0x144>)
 8002722:	d177      	bne.n	8002814 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002724:	070b      	lsls	r3, r1, #28
 8002726:	d506      	bpl.n	8002736 <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002728:	68ab      	ldr	r3, [r5, #8]
 800272a:	6922      	ldr	r2, [r4, #16]
 800272c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002730:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002734:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002736:	f7ff fd07 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 800273a:	68ab      	ldr	r3, [r5, #8]
 800273c:	4a3b      	ldr	r2, [pc, #236]	; (800282c <HAL_RCC_ClockConfig+0x148>)
 800273e:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8002742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002746:	5cd3      	ldrb	r3, [r2, r3]
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	40d8      	lsrs	r0, r3
 800274e:	4b38      	ldr	r3, [pc, #224]	; (8002830 <HAL_RCC_ClockConfig+0x14c>)
 8002750:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002752:	4b38      	ldr	r3, [pc, #224]	; (8002834 <HAL_RCC_ClockConfig+0x150>)
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	f7fe bf33 	b.w	80015c0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275a:	6813      	ldr	r3, [r2, #0]
 800275c:	f023 0307 	bic.w	r3, r3, #7
 8002760:	430b      	orrs	r3, r1
 8002762:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002764:	6813      	ldr	r3, [r2, #0]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	428b      	cmp	r3, r1
 800276c:	d1bf      	bne.n	80026ee <HAL_RCC_ClockConfig+0xa>
 800276e:	e7c7      	b.n	8002700 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002770:	4a2d      	ldr	r2, [pc, #180]	; (8002828 <HAL_RCC_ClockConfig+0x144>)
 8002772:	68a6      	ldr	r6, [r4, #8]
 8002774:	6891      	ldr	r1, [r2, #8]
 8002776:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 800277a:	428e      	cmp	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800277c:	bf81      	itttt	hi
 800277e:	6893      	ldrhi	r3, [r2, #8]
 8002780:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 8002784:	4333      	orrhi	r3, r6
 8002786:	6093      	strhi	r3, [r2, #8]
 8002788:	e7bd      	b.n	8002706 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800278a:	6862      	ldr	r2, [r4, #4]
 800278c:	4e26      	ldr	r6, [pc, #152]	; (8002828 <HAL_RCC_ClockConfig+0x144>)
 800278e:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002790:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002792:	d11a      	bne.n	80027ca <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002794:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002798:	d0a9      	beq.n	80026ee <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800279a:	68b3      	ldr	r3, [r6, #8]
 800279c:	f023 0303 	bic.w	r3, r3, #3
 80027a0:	4313      	orrs	r3, r2
 80027a2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80027a4:	f7fe ff54 	bl	8001650 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80027ac:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ae:	68b3      	ldr	r3, [r6, #8]
 80027b0:	6862      	ldr	r2, [r4, #4]
 80027b2:	f003 030c 	and.w	r3, r3, #12
 80027b6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80027ba:	d0a6      	beq.n	800270a <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027bc:	f7fe ff48 	bl	8001650 <HAL_GetTick>
 80027c0:	1bc0      	subs	r0, r0, r7
 80027c2:	4540      	cmp	r0, r8
 80027c4:	d9f3      	bls.n	80027ae <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 80027c6:	2003      	movs	r0, #3
 80027c8:	e792      	b.n	80026f0 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ca:	2a02      	cmp	r2, #2
 80027cc:	d102      	bne.n	80027d4 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80027d2:	e7e1      	b.n	8002798 <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027d4:	b912      	cbnz	r2, 80027dc <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027d6:	f013 0f02 	tst.w	r3, #2
 80027da:	e7dd      	b.n	8002798 <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027dc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80027e0:	e7da      	b.n	8002798 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027e2:	4a11      	ldr	r2, [pc, #68]	; (8002828 <HAL_RCC_ClockConfig+0x144>)
 80027e4:	68a6      	ldr	r6, [r4, #8]
 80027e6:	6890      	ldr	r0, [r2, #8]
 80027e8:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 80027ec:	4286      	cmp	r6, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ee:	bf3f      	itttt	cc
 80027f0:	6893      	ldrcc	r3, [r2, #8]
 80027f2:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 80027f6:	4333      	orrcc	r3, r6
 80027f8:	6093      	strcc	r3, [r2, #8]
 80027fa:	e789      	b.n	8002710 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fc:	6813      	ldr	r3, [r2, #0]
 80027fe:	f023 0307 	bic.w	r3, r3, #7
 8002802:	432b      	orrs	r3, r5
 8002804:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	6813      	ldr	r3, [r2, #0]
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	42ab      	cmp	r3, r5
 800280e:	f47f af6e 	bne.w	80026ee <HAL_RCC_ClockConfig+0xa>
 8002812:	e783      	b.n	800271c <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002814:	68ab      	ldr	r3, [r5, #8]
 8002816:	68e2      	ldr	r2, [r4, #12]
 8002818:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800281c:	4313      	orrs	r3, r2
 800281e:	60ab      	str	r3, [r5, #8]
 8002820:	e780      	b.n	8002724 <HAL_RCC_ClockConfig+0x40>
 8002822:	bf00      	nop
 8002824:	40022000 	.word	0x40022000
 8002828:	40021000 	.word	0x40021000
 800282c:	0800a70b 	.word	0x0800a70b
 8002830:	20000040 	.word	0x20000040
 8002834:	20000048 	.word	0x20000048

08002838 <HAL_RCC_GetHCLKFreq>:
}
 8002838:	4b01      	ldr	r3, [pc, #4]	; (8002840 <HAL_RCC_GetHCLKFreq+0x8>)
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000040 	.word	0x20000040

08002844 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002846:	4a06      	ldr	r2, [pc, #24]	; (8002860 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800284e:	5cd3      	ldrb	r3, [r2, r3]
 8002850:	4a04      	ldr	r2, [pc, #16]	; (8002864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002852:	6810      	ldr	r0, [r2, #0]
 8002854:	f003 031f 	and.w	r3, r3, #31
}
 8002858:	40d8      	lsrs	r0, r3
 800285a:	4770      	bx	lr
 800285c:	40021000 	.word	0x40021000
 8002860:	0800a71b 	.word	0x0800a71b
 8002864:	20000040 	.word	0x20000040

08002868 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <HAL_RCC_GetPCLK2Freq+0x18>)
 800286a:	4a06      	ldr	r2, [pc, #24]	; (8002884 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002872:	5cd3      	ldrb	r3, [r2, r3]
 8002874:	4a04      	ldr	r2, [pc, #16]	; (8002888 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002876:	6810      	ldr	r0, [r2, #0]
 8002878:	f003 031f 	and.w	r3, r3, #31
}
 800287c:	40d8      	lsrs	r0, r3
 800287e:	4770      	bx	lr
 8002880:	40021000 	.word	0x40021000
 8002884:	0800a71b 	.word	0x0800a71b
 8002888:	20000040 	.word	0x20000040

0800288c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800288c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800288e:	4c43      	ldr	r4, [pc, #268]	; (800299c <RCCEx_PLLSAI1_Config+0x110>)
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002890:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002892:	68e2      	ldr	r2, [r4, #12]
{
 8002894:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002896:	0790      	lsls	r0, r2, #30
{
 8002898:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800289a:	d029      	beq.n	80028f0 <RCCEx_PLLSAI1_Config+0x64>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800289c:	68e2      	ldr	r2, [r4, #12]
 800289e:	f002 0203 	and.w	r2, r2, #3
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d178      	bne.n	8002998 <RCCEx_PLLSAI1_Config+0x10c>
       ||
 80028a6:	2a00      	cmp	r2, #0
 80028a8:	d076      	beq.n	8002998 <RCCEx_PLLSAI1_Config+0x10c>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028aa:	68e3      	ldr	r3, [r4, #12]
       ||
 80028ac:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028ae:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80028b2:	3301      	adds	r3, #1
       ||
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d16f      	bne.n	8002998 <RCCEx_PLLSAI1_Config+0x10c>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028b8:	6823      	ldr	r3, [r4, #0]
 80028ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028be:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c0:	f7fe fec6 	bl	8001650 <HAL_GetTick>
 80028c4:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028c6:	6823      	ldr	r3, [r4, #0]
 80028c8:	011a      	lsls	r2, r3, #4
 80028ca:	d430      	bmi.n	800292e <RCCEx_PLLSAI1_Config+0xa2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028cc:	68ab      	ldr	r3, [r5, #8]
 80028ce:	021f      	lsls	r7, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 80028d0:	b3a6      	cbz	r6, 800293c <RCCEx_PLLSAI1_Config+0xb0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028d2:	2e01      	cmp	r6, #1
 80028d4:	d14d      	bne.n	8002972 <RCCEx_PLLSAI1_Config+0xe6>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028d6:	692a      	ldr	r2, [r5, #16]
 80028d8:	6921      	ldr	r1, [r4, #16]
 80028da:	0852      	lsrs	r2, r2, #1
 80028dc:	1e53      	subs	r3, r2, #1
 80028de:	f421 02c0 	bic.w	r2, r1, #6291456	; 0x600000
 80028e2:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80028e6:	433a      	orrs	r2, r7
 80028e8:	ea42 5243 	orr.w	r2, r2, r3, lsl #21
 80028ec:	6122      	str	r2, [r4, #16]
 80028ee:	e030      	b.n	8002952 <RCCEx_PLLSAI1_Config+0xc6>
    switch(PllSai1->PLLSAI1Source)
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d011      	beq.n	8002918 <RCCEx_PLLSAI1_Config+0x8c>
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d013      	beq.n	8002920 <RCCEx_PLLSAI1_Config+0x94>
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d14d      	bne.n	8002998 <RCCEx_PLLSAI1_Config+0x10c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028fc:	6822      	ldr	r2, [r4, #0]
 80028fe:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002902:	d049      	beq.n	8002998 <RCCEx_PLLSAI1_Config+0x10c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002904:	68e0      	ldr	r0, [r4, #12]
 8002906:	686a      	ldr	r2, [r5, #4]
 8002908:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 800290c:	3a01      	subs	r2, #1
 800290e:	4318      	orrs	r0, r3
 8002910:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002914:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 8002916:	e7cf      	b.n	80028b8 <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002918:	6822      	ldr	r2, [r4, #0]
 800291a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800291e:	e7f0      	b.n	8002902 <RCCEx_PLLSAI1_Config+0x76>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002920:	6822      	ldr	r2, [r4, #0]
 8002922:	0391      	lsls	r1, r2, #14
 8002924:	d4ee      	bmi.n	8002904 <RCCEx_PLLSAI1_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002926:	6822      	ldr	r2, [r4, #0]
 8002928:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800292c:	e7e9      	b.n	8002902 <RCCEx_PLLSAI1_Config+0x76>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800292e:	f7fe fe8f 	bl	8001650 <HAL_GetTick>
 8002932:	1bc0      	subs	r0, r0, r7
 8002934:	2802      	cmp	r0, #2
 8002936:	d9c6      	bls.n	80028c6 <RCCEx_PLLSAI1_Config+0x3a>
        status = HAL_TIMEOUT;
 8002938:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 800293a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800293c:	6921      	ldr	r1, [r4, #16]
 800293e:	68eb      	ldr	r3, [r5, #12]
 8002940:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8002944:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	4339      	orrs	r1, r7
 800294c:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8002950:	6121      	str	r1, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8002952:	6823      	ldr	r3, [r4, #0]
 8002954:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002958:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800295a:	f7fe fe79 	bl	8001650 <HAL_GetTick>
 800295e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002960:	6823      	ldr	r3, [r4, #0]
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	d512      	bpl.n	800298c <RCCEx_PLLSAI1_Config+0x100>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002966:	6923      	ldr	r3, [r4, #16]
 8002968:	69aa      	ldr	r2, [r5, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	6123      	str	r3, [r4, #16]
 800296e:	2000      	movs	r0, #0
  return status;
 8002970:	e7e3      	b.n	800293a <RCCEx_PLLSAI1_Config+0xae>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002972:	696b      	ldr	r3, [r5, #20]
 8002974:	6922      	ldr	r2, [r4, #16]
 8002976:	085b      	lsrs	r3, r3, #1
 8002978:	1e59      	subs	r1, r3, #1
 800297a:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 800297e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002982:	433b      	orrs	r3, r7
 8002984:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002988:	6123      	str	r3, [r4, #16]
 800298a:	e7e2      	b.n	8002952 <RCCEx_PLLSAI1_Config+0xc6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800298c:	f7fe fe60 	bl	8001650 <HAL_GetTick>
 8002990:	1b80      	subs	r0, r0, r6
 8002992:	2802      	cmp	r0, #2
 8002994:	d9e4      	bls.n	8002960 <RCCEx_PLLSAI1_Config+0xd4>
 8002996:	e7cf      	b.n	8002938 <RCCEx_PLLSAI1_Config+0xac>
      status = HAL_ERROR;
 8002998:	2001      	movs	r0, #1
 800299a:	e7ce      	b.n	800293a <RCCEx_PLLSAI1_Config+0xae>
 800299c:	40021000 	.word	0x40021000

080029a0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80029a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029a2:	4c3c      	ldr	r4, [pc, #240]	; (8002a94 <RCCEx_PLLSAI2_Config+0xf4>)
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80029a4:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029a6:	68e2      	ldr	r2, [r4, #12]
{
 80029a8:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029aa:	0790      	lsls	r0, r2, #30
{
 80029ac:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029ae:	d027      	beq.n	8002a00 <RCCEx_PLLSAI2_Config+0x60>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80029b0:	68e2      	ldr	r2, [r4, #12]
 80029b2:	f002 0203 	and.w	r2, r2, #3
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d169      	bne.n	8002a8e <RCCEx_PLLSAI2_Config+0xee>
       ||
 80029ba:	2a00      	cmp	r2, #0
 80029bc:	d067      	beq.n	8002a8e <RCCEx_PLLSAI2_Config+0xee>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029be:	68e3      	ldr	r3, [r4, #12]
       ||
 80029c0:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029c2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80029c6:	3301      	adds	r3, #1
       ||
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d160      	bne.n	8002a8e <RCCEx_PLLSAI2_Config+0xee>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80029cc:	6823      	ldr	r3, [r4, #0]
 80029ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029d2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d4:	f7fe fe3c 	bl	8001650 <HAL_GetTick>
 80029d8:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029da:	6823      	ldr	r3, [r4, #0]
 80029dc:	009a      	lsls	r2, r3, #2
 80029de:	d42e      	bmi.n	8002a3e <RCCEx_PLLSAI2_Config+0x9e>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029e0:	68ab      	ldr	r3, [r5, #8]
 80029e2:	0218      	lsls	r0, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 80029e4:	b396      	cbz	r6, 8002a4c <RCCEx_PLLSAI2_Config+0xac>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029e6:	6963      	ldr	r3, [r4, #20]
 80029e8:	6929      	ldr	r1, [r5, #16]
 80029ea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029ee:	0849      	lsrs	r1, r1, #1
 80029f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029f4:	3901      	subs	r1, #1
 80029f6:	4303      	orrs	r3, r0
 80029f8:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80029fc:	6163      	str	r3, [r4, #20]
 80029fe:	e030      	b.n	8002a62 <RCCEx_PLLSAI2_Config+0xc2>
    switch(PllSai2->PLLSAI2Source)
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d011      	beq.n	8002a28 <RCCEx_PLLSAI2_Config+0x88>
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d013      	beq.n	8002a30 <RCCEx_PLLSAI2_Config+0x90>
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d140      	bne.n	8002a8e <RCCEx_PLLSAI2_Config+0xee>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a0c:	6822      	ldr	r2, [r4, #0]
 8002a0e:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a12:	d03c      	beq.n	8002a8e <RCCEx_PLLSAI2_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a14:	68e0      	ldr	r0, [r4, #12]
 8002a16:	686a      	ldr	r2, [r5, #4]
 8002a18:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 8002a1c:	3a01      	subs	r2, #1
 8002a1e:	4318      	orrs	r0, r3
 8002a20:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002a24:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 8002a26:	e7d1      	b.n	80029cc <RCCEx_PLLSAI2_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a28:	6822      	ldr	r2, [r4, #0]
 8002a2a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002a2e:	e7f0      	b.n	8002a12 <RCCEx_PLLSAI2_Config+0x72>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a30:	6822      	ldr	r2, [r4, #0]
 8002a32:	0391      	lsls	r1, r2, #14
 8002a34:	d4ee      	bmi.n	8002a14 <RCCEx_PLLSAI2_Config+0x74>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a36:	6822      	ldr	r2, [r4, #0]
 8002a38:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002a3c:	e7e9      	b.n	8002a12 <RCCEx_PLLSAI2_Config+0x72>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a3e:	f7fe fe07 	bl	8001650 <HAL_GetTick>
 8002a42:	1bc0      	subs	r0, r0, r7
 8002a44:	2802      	cmp	r0, #2
 8002a46:	d9c8      	bls.n	80029da <RCCEx_PLLSAI2_Config+0x3a>
        status = HAL_TIMEOUT;
 8002a48:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8002a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a4c:	6962      	ldr	r2, [r4, #20]
 8002a4e:	68eb      	ldr	r3, [r5, #12]
 8002a50:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8002a54:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a58:	091b      	lsrs	r3, r3, #4
 8002a5a:	4302      	orrs	r2, r0
 8002a5c:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8002a60:	6162      	str	r2, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a68:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8002a6a:	f7fe fdf1 	bl	8001650 <HAL_GetTick>
 8002a6e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	d505      	bpl.n	8002a82 <RCCEx_PLLSAI2_Config+0xe2>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a76:	6963      	ldr	r3, [r4, #20]
 8002a78:	696a      	ldr	r2, [r5, #20]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	6163      	str	r3, [r4, #20]
 8002a7e:	2000      	movs	r0, #0
  return status;
 8002a80:	e7e3      	b.n	8002a4a <RCCEx_PLLSAI2_Config+0xaa>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a82:	f7fe fde5 	bl	8001650 <HAL_GetTick>
 8002a86:	1b80      	subs	r0, r0, r6
 8002a88:	2802      	cmp	r0, #2
 8002a8a:	d9f1      	bls.n	8002a70 <RCCEx_PLLSAI2_Config+0xd0>
 8002a8c:	e7dc      	b.n	8002a48 <RCCEx_PLLSAI2_Config+0xa8>
      status = HAL_ERROR;
 8002a8e:	2001      	movs	r0, #1
 8002a90:	e7db      	b.n	8002a4a <RCCEx_PLLSAI2_Config+0xaa>
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000

08002a98 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002a98:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a9c:	6806      	ldr	r6, [r0, #0]
 8002a9e:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8002aa2:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002aa4:	d009      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002aa6:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8002aa8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002aac:	d022      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002aae:	d813      	bhi.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002ab0:	b331      	cbz	r1, 8002b00 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8002ab2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002ab6:	d02a      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ab8:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002aba:	6823      	ldr	r3, [r4, #0]
 8002abc:	04d8      	lsls	r0, r3, #19
 8002abe:	d509      	bpl.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002ac0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002ac2:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8002ac6:	d02c      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8002ac8:	d826      	bhi.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8002aca:	b381      	cbz	r1, 8002b2e <HAL_RCCEx_PeriphCLKConfig+0x96>
 8002acc:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002ad0:	d070      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002ad2:	2601      	movs	r6, #1
 8002ad4:	4635      	mov	r5, r6
 8002ad6:	e039      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002ad8:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002adc:	d1ec      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ade:	4a3b      	ldr	r2, [pc, #236]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ae0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002ae2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002ae6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002aea:	430b      	orrs	r3, r1
 8002aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002af0:	2600      	movs	r6, #0
 8002af2:	e7e2      	b.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002af4:	4a35      	ldr	r2, [pc, #212]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002af6:	68d3      	ldr	r3, [r2, #12]
 8002af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002afc:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 8002afe:	e7ee      	b.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b00:	3004      	adds	r0, #4
 8002b02:	f7ff fec3 	bl	800288c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b06:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002b08:	2800      	cmp	r0, #0
 8002b0a:	d1d6      	bne.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x22>
 8002b0c:	e7e7      	b.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b0e:	2100      	movs	r1, #0
 8002b10:	3020      	adds	r0, #32
 8002b12:	f7ff ff45 	bl	80029a0 <RCCEx_PLLSAI2_Config>
 8002b16:	e7f6      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002b18:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002b1c:	d1d9      	bne.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8002b1e:	4635      	mov	r5, r6
 8002b20:	e009      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b22:	4a2a      	ldr	r2, [pc, #168]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b24:	68d3      	ldr	r3, [r2, #12]
 8002b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2a:	60d3      	str	r3, [r2, #12]
      break;
 8002b2c:	e7f7      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b2e:	1d20      	adds	r0, r4, #4
 8002b30:	f7ff feac 	bl	800288c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b34:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002b36:	2d00      	cmp	r5, #0
 8002b38:	d142      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x128>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b3a:	4a24      	ldr	r2, [pc, #144]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b3c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002b3e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002b42:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002b46:	430b      	orrs	r3, r1
 8002b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b4c:	6823      	ldr	r3, [r4, #0]
 8002b4e:	0399      	lsls	r1, r3, #14
 8002b50:	f140 815e 	bpl.w	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x378>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b54:	4f1d      	ldr	r7, [pc, #116]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b58:	00da      	lsls	r2, r3, #3
 8002b5a:	d433      	bmi.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b62:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	9301      	str	r3, [sp, #4]
 8002b6c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002b6e:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b72:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8002b76:	f8d9 3000 	ldr.w	r3, [r9]
 8002b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b7e:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8002b82:	f7fe fd65 	bl	8001650 <HAL_GetTick>
 8002b86:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b88:	f8d9 3000 	ldr.w	r3, [r9]
 8002b8c:	05db      	lsls	r3, r3, #23
 8002b8e:	d521      	bpl.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    if(ret == HAL_OK)
 8002b90:	bb3d      	cbnz	r5, 8002be2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b96:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002b9a:	f040 810f 	bne.w	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x324>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ba2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bb0:	4635      	mov	r5, r6
 8002bb2:	e016      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	f104 0020 	add.w	r0, r4, #32
 8002bba:	f7ff fef1 	bl	80029a0 <RCCEx_PLLSAI2_Config>
 8002bbe:	e7b9      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002bc0:	462e      	mov	r6, r5
 8002bc2:	e7c3      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 8002bc4:	f04f 0800 	mov.w	r8, #0
 8002bc8:	e7d3      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002bca:	bf00      	nop
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd4:	f7fe fd3c 	bl	8001650 <HAL_GetTick>
 8002bd8:	eba0 000a 	sub.w	r0, r0, sl
 8002bdc:	2802      	cmp	r0, #2
 8002bde:	d9d3      	bls.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 8002be0:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002be2:	f1b8 0f00 	cmp.w	r8, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bee:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bf0:	6823      	ldr	r3, [r4, #0]
 8002bf2:	07da      	lsls	r2, r3, #31
 8002bf4:	d508      	bpl.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x170>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bf6:	499d      	ldr	r1, [pc, #628]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002bf8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002bfa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002bfe:	f022 0203 	bic.w	r2, r2, #3
 8002c02:	4302      	orrs	r2, r0
 8002c04:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c08:	079f      	lsls	r7, r3, #30
 8002c0a:	d508      	bpl.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x186>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c0c:	4997      	ldr	r1, [pc, #604]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002c0e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002c10:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c14:	f022 020c 	bic.w	r2, r2, #12
 8002c18:	4302      	orrs	r2, r0
 8002c1a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c1e:	075e      	lsls	r6, r3, #29
 8002c20:	d508      	bpl.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c22:	4992      	ldr	r1, [pc, #584]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002c24:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002c26:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c2a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002c2e:	4302      	orrs	r2, r0
 8002c30:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c34:	0718      	lsls	r0, r3, #28
 8002c36:	d508      	bpl.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c38:	498c      	ldr	r1, [pc, #560]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002c3a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002c3c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c40:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002c44:	4302      	orrs	r2, r0
 8002c46:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c4a:	06d9      	lsls	r1, r3, #27
 8002c4c:	d508      	bpl.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c4e:	4987      	ldr	r1, [pc, #540]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002c50:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002c52:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c56:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c5a:	4302      	orrs	r2, r0
 8002c5c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c60:	069a      	lsls	r2, r3, #26
 8002c62:	d508      	bpl.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c64:	4981      	ldr	r1, [pc, #516]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002c66:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002c68:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c6c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002c70:	4302      	orrs	r2, r0
 8002c72:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c76:	059f      	lsls	r7, r3, #22
 8002c78:	d508      	bpl.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c7a:	497c      	ldr	r1, [pc, #496]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002c7c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002c7e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c82:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002c86:	4302      	orrs	r2, r0
 8002c88:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c8c:	055e      	lsls	r6, r3, #21
 8002c8e:	d508      	bpl.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c90:	4976      	ldr	r1, [pc, #472]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002c92:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002c94:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c98:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002c9c:	4302      	orrs	r2, r0
 8002c9e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ca2:	0658      	lsls	r0, r3, #25
 8002ca4:	d508      	bpl.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ca6:	4971      	ldr	r1, [pc, #452]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002ca8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002caa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002cae:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002cb2:	4302      	orrs	r2, r0
 8002cb4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cb8:	0619      	lsls	r1, r3, #24
 8002cba:	d508      	bpl.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cbc:	496b      	ldr	r1, [pc, #428]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002cbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002cc0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002cc4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002cc8:	4302      	orrs	r2, r0
 8002cca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cce:	05da      	lsls	r2, r3, #23
 8002cd0:	d508      	bpl.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cd2:	4966      	ldr	r1, [pc, #408]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cd6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002cda:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002cde:	4302      	orrs	r2, r0
 8002ce0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ce4:	049b      	lsls	r3, r3, #18
 8002ce6:	d510      	bpl.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x272>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ce8:	4a60      	ldr	r2, [pc, #384]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002cea:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002cec:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002cf0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002cf4:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cf6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cfa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cfe:	f040 8089 	bne.w	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d02:	68d3      	ldr	r3, [r2, #12]
 8002d04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d08:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d0a:	6823      	ldr	r3, [r4, #0]
 8002d0c:	031f      	lsls	r7, r3, #12
 8002d0e:	d510      	bpl.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d10:	4a56      	ldr	r2, [pc, #344]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002d12:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002d14:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002d18:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002d1c:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d1e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d22:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d26:	f040 8081 	bne.w	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x394>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d2a:	68d3      	ldr	r3, [r2, #12]
 8002d2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d30:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d32:	6823      	ldr	r3, [r4, #0]
 8002d34:	035e      	lsls	r6, r3, #13
 8002d36:	d50f      	bpl.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d38:	4a4c      	ldr	r2, [pc, #304]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002d3a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002d3c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002d40:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002d44:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d46:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d4e:	d179      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d50:	68d3      	ldr	r3, [r2, #12]
 8002d52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d56:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d58:	6823      	ldr	r3, [r4, #0]
 8002d5a:	0458      	lsls	r0, r3, #17
 8002d5c:	d512      	bpl.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d5e:	4943      	ldr	r1, [pc, #268]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002d60:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002d62:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002d66:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002d6a:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d6c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d74:	d171      	bne.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d76:	2102      	movs	r1, #2
 8002d78:	1d20      	adds	r0, r4, #4
 8002d7a:	f7ff fd87 	bl	800288c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002d7e:	2800      	cmp	r0, #0
 8002d80:	bf18      	it	ne
 8002d82:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d84:	6822      	ldr	r2, [r4, #0]
 8002d86:	0411      	lsls	r1, r2, #16
 8002d88:	d508      	bpl.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x304>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d8a:	4938      	ldr	r1, [pc, #224]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002d8c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002d8e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002d92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d96:	4303      	orrs	r3, r0
 8002d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d9c:	03d3      	lsls	r3, r2, #15
 8002d9e:	d509      	bpl.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002da0:	4a32      	ldr	r2, [pc, #200]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8002da2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002da6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002daa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dae:	430b      	orrs	r3, r1
 8002db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002db4:	4628      	mov	r0, r5
 8002db6:	b002      	add	sp, #8
 8002db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dbc:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	f43f aeec 	beq.w	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x106>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dc6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dda:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002de2:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002de4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002de8:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002dec:	f57f aed7 	bpl.w	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x106>
        tickstart = HAL_GetTick();
 8002df0:	f7fe fc2e 	bl	8001650 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002df4:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002df8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002dfe:	0799      	lsls	r1, r3, #30
 8002e00:	f53f aecd 	bmi.w	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x106>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e04:	f7fe fc24 	bl	8001650 <HAL_GetTick>
 8002e08:	1b40      	subs	r0, r0, r5
 8002e0a:	4548      	cmp	r0, r9
 8002e0c:	d9f5      	bls.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002e0e:	e6e7      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002e10:	4635      	mov	r5, r6
 8002e12:	e6ed      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e14:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002e18:	f47f af77 	bne.w	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x272>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	1d20      	adds	r0, r4, #4
 8002e20:	f7ff fd34 	bl	800288c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002e24:	2800      	cmp	r0, #0
 8002e26:	bf18      	it	ne
 8002e28:	4605      	movne	r5, r0
 8002e2a:	e76e      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x272>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e2c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002e30:	f47f af7f 	bne.w	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x29a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e34:	2101      	movs	r1, #1
 8002e36:	1d20      	adds	r0, r4, #4
 8002e38:	f7ff fd28 	bl	800288c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002e3c:	2800      	cmp	r0, #0
 8002e3e:	bf18      	it	ne
 8002e40:	4605      	movne	r5, r0
 8002e42:	e776      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e44:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002e48:	d186      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	1d20      	adds	r0, r4, #4
 8002e4e:	f7ff fd1d 	bl	800288c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002e52:	2800      	cmp	r0, #0
 8002e54:	bf18      	it	ne
 8002e56:	4605      	movne	r5, r0
 8002e58:	e77e      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e5a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002e5e:	d191      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e60:	2102      	movs	r1, #2
 8002e62:	f104 0020 	add.w	r0, r4, #32
 8002e66:	f7ff fd9b 	bl	80029a0 <RCCEx_PLLSAI2_Config>
 8002e6a:	e788      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8002e6c:	40021000 	.word	0x40021000

08002e70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e70:	b570      	push	{r4, r5, r6, lr}
 8002e72:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e74:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e76:	6921      	ldr	r1, [r4, #16]
 8002e78:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e7a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e7c:	69c0      	ldr	r0, [r0, #28]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	6961      	ldr	r1, [r4, #20]
 8002e82:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e84:	498f      	ldr	r1, [pc, #572]	; (80030c4 <UART_SetConfig+0x254>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e86:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e88:	4029      	ands	r1, r5
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	68e1      	ldr	r1, [r4, #12]
 8002e92:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002e96:	430a      	orrs	r2, r1
 8002e98:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e9a:	4a8b      	ldr	r2, [pc, #556]	; (80030c8 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e9c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e9e:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ea0:	bf1c      	itt	ne
 8002ea2:	6a22      	ldrne	r2, [r4, #32]
 8002ea4:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002eac:	430a      	orrs	r2, r1
 8002eae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002eb0:	4a86      	ldr	r2, [pc, #536]	; (80030cc <UART_SetConfig+0x25c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d117      	bne.n	8002ee6 <UART_SetConfig+0x76>
 8002eb6:	4b86      	ldr	r3, [pc, #536]	; (80030d0 <UART_SetConfig+0x260>)
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	f200 80cf 	bhi.w	8003066 <UART_SetConfig+0x1f6>
 8002ec8:	4a82      	ldr	r2, [pc, #520]	; (80030d4 <UART_SetConfig+0x264>)
 8002eca:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ecc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002ed0:	f040 8099 	bne.w	8003006 <UART_SetConfig+0x196>
  {
    switch (clocksource)
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d822      	bhi.n	8002f1e <UART_SetConfig+0xae>
 8002ed8:	e8df f003 	tbb	[pc, r3]
 8002edc:	2193c8d9 	.word	0x2193c8d9
 8002ee0:	212121ce 	.word	0x212121ce
 8002ee4:	dd          	.byte	0xdd
 8002ee5:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ee6:	4a7c      	ldr	r2, [pc, #496]	; (80030d8 <UART_SetConfig+0x268>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d106      	bne.n	8002efa <UART_SetConfig+0x8a>
 8002eec:	4b78      	ldr	r3, [pc, #480]	; (80030d0 <UART_SetConfig+0x260>)
 8002eee:	4a7b      	ldr	r2, [pc, #492]	; (80030dc <UART_SetConfig+0x26c>)
 8002ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef4:	f003 030c 	and.w	r3, r3, #12
 8002ef8:	e7e7      	b.n	8002eca <UART_SetConfig+0x5a>
 8002efa:	4a79      	ldr	r2, [pc, #484]	; (80030e0 <UART_SetConfig+0x270>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d119      	bne.n	8002f34 <UART_SetConfig+0xc4>
 8002f00:	4b73      	ldr	r3, [pc, #460]	; (80030d0 <UART_SetConfig+0x260>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f06:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f0a:	2b20      	cmp	r3, #32
 8002f0c:	f000 80b7 	beq.w	800307e <UART_SetConfig+0x20e>
 8002f10:	d807      	bhi.n	8002f22 <UART_SetConfig+0xb2>
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 80b8 	beq.w	8003088 <UART_SetConfig+0x218>
 8002f18:	2b10      	cmp	r3, #16
 8002f1a:	f000 80aa 	beq.w	8003072 <UART_SetConfig+0x202>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f1e:	2001      	movs	r0, #1
 8002f20:	e04e      	b.n	8002fc0 <UART_SetConfig+0x150>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f22:	2b30      	cmp	r3, #48	; 0x30
 8002f24:	d1fb      	bne.n	8002f1e <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f26:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002f2a:	f000 80b4 	beq.w	8003096 <UART_SetConfig+0x226>
 8002f2e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002f32:	e083      	b.n	800303c <UART_SetConfig+0x1cc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f34:	4a6b      	ldr	r2, [pc, #428]	; (80030e4 <UART_SetConfig+0x274>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d10f      	bne.n	8002f5a <UART_SetConfig+0xea>
 8002f3a:	4b65      	ldr	r3, [pc, #404]	; (80030d0 <UART_SetConfig+0x260>)
 8002f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f40:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f44:	2b80      	cmp	r3, #128	; 0x80
 8002f46:	f000 809a 	beq.w	800307e <UART_SetConfig+0x20e>
 8002f4a:	d804      	bhi.n	8002f56 <UART_SetConfig+0xe6>
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 809b 	beq.w	8003088 <UART_SetConfig+0x218>
 8002f52:	2b40      	cmp	r3, #64	; 0x40
 8002f54:	e7e1      	b.n	8002f1a <UART_SetConfig+0xaa>
 8002f56:	2bc0      	cmp	r3, #192	; 0xc0
 8002f58:	e7e4      	b.n	8002f24 <UART_SetConfig+0xb4>
 8002f5a:	4a63      	ldr	r2, [pc, #396]	; (80030e8 <UART_SetConfig+0x278>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d112      	bne.n	8002f86 <UART_SetConfig+0x116>
 8002f60:	4b5b      	ldr	r3, [pc, #364]	; (80030d0 <UART_SetConfig+0x260>)
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f6e:	f000 8086 	beq.w	800307e <UART_SetConfig+0x20e>
 8002f72:	d805      	bhi.n	8002f80 <UART_SetConfig+0x110>
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 8087 	beq.w	8003088 <UART_SetConfig+0x218>
 8002f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f7e:	e7cc      	b.n	8002f1a <UART_SetConfig+0xaa>
 8002f80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f84:	e7ce      	b.n	8002f24 <UART_SetConfig+0xb4>
 8002f86:	4a50      	ldr	r2, [pc, #320]	; (80030c8 <UART_SetConfig+0x258>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d1c8      	bne.n	8002f1e <UART_SetConfig+0xae>
 8002f8c:	4b50      	ldr	r3, [pc, #320]	; (80030d0 <UART_SetConfig+0x260>)
 8002f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f92:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f9a:	d015      	beq.n	8002fc8 <UART_SetConfig+0x158>
 8002f9c:	d806      	bhi.n	8002fac <UART_SetConfig+0x13c>
 8002f9e:	b15b      	cbz	r3, 8002fb8 <UART_SetConfig+0x148>
 8002fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa4:	d1bb      	bne.n	8002f1e <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 8002fa6:	f7ff f8cf 	bl	8002148 <HAL_RCC_GetSysClockFreq>
        break;
 8002faa:	e007      	b.n	8002fbc <UART_SetConfig+0x14c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fb0:	d1b5      	bne.n	8002f1e <UART_SetConfig+0xae>
        pclk = (uint32_t) LSE_VALUE;
 8002fb2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002fb6:	e008      	b.n	8002fca <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fb8:	f7ff fc44 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002fbc:	b928      	cbnz	r0, 8002fca <UART_SetConfig+0x15a>
 8002fbe:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fc0:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8002fc2:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 8002fc6:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 8002fc8:	4848      	ldr	r0, [pc, #288]	; (80030ec <UART_SetConfig+0x27c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002fca:	6862      	ldr	r2, [r4, #4]
 8002fcc:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002fd0:	4283      	cmp	r3, r0
 8002fd2:	d8a4      	bhi.n	8002f1e <UART_SetConfig+0xae>
 8002fd4:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002fd8:	d8a1      	bhi.n	8002f1e <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002fda:	0851      	lsrs	r1, r2, #1
 8002fdc:	2500      	movs	r5, #0
 8002fde:	468c      	mov	ip, r1
 8002fe0:	f44f 7680 	mov.w	r6, #256	; 0x100
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	fbe0 c106 	umlal	ip, r1, r0, r6
 8002fea:	462b      	mov	r3, r5
 8002fec:	4660      	mov	r0, ip
 8002fee:	f7fd fe2b 	bl	8000c48 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ff2:	4b3f      	ldr	r3, [pc, #252]	; (80030f0 <UART_SetConfig+0x280>)
 8002ff4:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d890      	bhi.n	8002f1e <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 8002ffc:	6823      	ldr	r3, [r4, #0]
 8002ffe:	60d8      	str	r0, [r3, #12]
 8003000:	e7dd      	b.n	8002fbe <UART_SetConfig+0x14e>
        pclk = (uint32_t) HSI_VALUE;
 8003002:	483a      	ldr	r0, [pc, #232]	; (80030ec <UART_SetConfig+0x27c>)
 8003004:	e047      	b.n	8003096 <UART_SetConfig+0x226>
    switch (clocksource)
 8003006:	2b08      	cmp	r3, #8
 8003008:	d889      	bhi.n	8002f1e <UART_SetConfig+0xae>
 800300a:	a201      	add	r2, pc, #4	; (adr r2, 8003010 <UART_SetConfig+0x1a0>)
 800300c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003010:	08003035 	.word	0x08003035
 8003014:	0800305b 	.word	0x0800305b
 8003018:	08003085 	.word	0x08003085
 800301c:	08002f1f 	.word	0x08002f1f
 8003020:	08003061 	.word	0x08003061
 8003024:	08002f1f 	.word	0x08002f1f
 8003028:	08002f1f 	.word	0x08002f1f
 800302c:	08002f1f 	.word	0x08002f1f
 8003030:	08002f2f 	.word	0x08002f2f
        pclk = HAL_RCC_GetPCLK1Freq();
 8003034:	f7ff fc06 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003038:	2800      	cmp	r0, #0
 800303a:	d0c0      	beq.n	8002fbe <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800303c:	6862      	ldr	r2, [r4, #4]
 800303e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003042:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003046:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800304a:	f1a3 0110 	sub.w	r1, r3, #16
 800304e:	4291      	cmp	r1, r2
 8003050:	f63f af65 	bhi.w	8002f1e <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003054:	6822      	ldr	r2, [r4, #0]
 8003056:	60d3      	str	r3, [r2, #12]
 8003058:	e7b1      	b.n	8002fbe <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800305a:	f7ff fc05 	bl	8002868 <HAL_RCC_GetPCLK2Freq>
        break;
 800305e:	e7eb      	b.n	8003038 <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 8003060:	f7ff f872 	bl	8002148 <HAL_RCC_GetSysClockFreq>
        break;
 8003064:	e7e8      	b.n	8003038 <UART_SetConfig+0x1c8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003066:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800306a:	d1f6      	bne.n	800305a <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK2Freq();
 800306c:	f7ff fbfc 	bl	8002868 <HAL_RCC_GetPCLK2Freq>
        break;
 8003070:	e00f      	b.n	8003092 <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003072:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003076:	d1f3      	bne.n	8003060 <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetSysClockFreq();
 8003078:	f7ff f866 	bl	8002148 <HAL_RCC_GetSysClockFreq>
        break;
 800307c:	e009      	b.n	8003092 <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800307e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003082:	d0be      	beq.n	8003002 <UART_SetConfig+0x192>
        pclk = (uint32_t) HSI_VALUE;
 8003084:	4819      	ldr	r0, [pc, #100]	; (80030ec <UART_SetConfig+0x27c>)
 8003086:	e7d9      	b.n	800303c <UART_SetConfig+0x1cc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003088:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800308c:	d1d2      	bne.n	8003034 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK1Freq();
 800308e:	f7ff fbd9 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003092:	2800      	cmp	r0, #0
 8003094:	d093      	beq.n	8002fbe <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003096:	6862      	ldr	r2, [r4, #4]
 8003098:	0853      	lsrs	r3, r2, #1
 800309a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800309e:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030a2:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030a6:	f1a0 0210 	sub.w	r2, r0, #16
 80030aa:	429a      	cmp	r2, r3
 80030ac:	f63f af37 	bhi.w	8002f1e <UART_SetConfig+0xae>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030b0:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 80030b4:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030b6:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030b8:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 80030bc:	4318      	orrs	r0, r3
 80030be:	60d0      	str	r0, [r2, #12]
 80030c0:	e77d      	b.n	8002fbe <UART_SetConfig+0x14e>
 80030c2:	bf00      	nop
 80030c4:	efff69f3 	.word	0xefff69f3
 80030c8:	40008000 	.word	0x40008000
 80030cc:	40013800 	.word	0x40013800
 80030d0:	40021000 	.word	0x40021000
 80030d4:	0800a754 	.word	0x0800a754
 80030d8:	40004400 	.word	0x40004400
 80030dc:	0800a757 	.word	0x0800a757
 80030e0:	40004800 	.word	0x40004800
 80030e4:	40004c00 	.word	0x40004c00
 80030e8:	40005000 	.word	0x40005000
 80030ec:	00f42400 	.word	0x00f42400
 80030f0:	000ffcff 	.word	0x000ffcff

080030f4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80030f6:	07da      	lsls	r2, r3, #31
{
 80030f8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030fa:	d506      	bpl.n	800310a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030fc:	6801      	ldr	r1, [r0, #0]
 80030fe:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003100:	684a      	ldr	r2, [r1, #4]
 8003102:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003106:	4322      	orrs	r2, r4
 8003108:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800310a:	079c      	lsls	r4, r3, #30
 800310c:	d506      	bpl.n	800311c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800310e:	6801      	ldr	r1, [r0, #0]
 8003110:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003112:	684a      	ldr	r2, [r1, #4]
 8003114:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003118:	4322      	orrs	r2, r4
 800311a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800311c:	0759      	lsls	r1, r3, #29
 800311e:	d506      	bpl.n	800312e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003120:	6801      	ldr	r1, [r0, #0]
 8003122:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003124:	684a      	ldr	r2, [r1, #4]
 8003126:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800312a:	4322      	orrs	r2, r4
 800312c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800312e:	071a      	lsls	r2, r3, #28
 8003130:	d506      	bpl.n	8003140 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003132:	6801      	ldr	r1, [r0, #0]
 8003134:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003136:	684a      	ldr	r2, [r1, #4]
 8003138:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800313c:	4322      	orrs	r2, r4
 800313e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003140:	06dc      	lsls	r4, r3, #27
 8003142:	d506      	bpl.n	8003152 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003144:	6801      	ldr	r1, [r0, #0]
 8003146:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003148:	688a      	ldr	r2, [r1, #8]
 800314a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800314e:	4322      	orrs	r2, r4
 8003150:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003152:	0699      	lsls	r1, r3, #26
 8003154:	d506      	bpl.n	8003164 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003156:	6801      	ldr	r1, [r0, #0]
 8003158:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800315a:	688a      	ldr	r2, [r1, #8]
 800315c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003160:	4322      	orrs	r2, r4
 8003162:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003164:	065a      	lsls	r2, r3, #25
 8003166:	d50f      	bpl.n	8003188 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003168:	6801      	ldr	r1, [r0, #0]
 800316a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800316c:	684a      	ldr	r2, [r1, #4]
 800316e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003172:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003174:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003178:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800317a:	d105      	bne.n	8003188 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800317c:	684a      	ldr	r2, [r1, #4]
 800317e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003180:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003184:	4322      	orrs	r2, r4
 8003186:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003188:	061b      	lsls	r3, r3, #24
 800318a:	d506      	bpl.n	800319a <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800318c:	6802      	ldr	r2, [r0, #0]
 800318e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003190:	6853      	ldr	r3, [r2, #4]
 8003192:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003196:	430b      	orrs	r3, r1
 8003198:	6053      	str	r3, [r2, #4]
  }
}
 800319a:	bd10      	pop	{r4, pc}

0800319c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800319c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031a0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80031a4:	4604      	mov	r4, r0
 80031a6:	460e      	mov	r6, r1
 80031a8:	4615      	mov	r5, r2
 80031aa:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ac:	6822      	ldr	r2, [r4, #0]
 80031ae:	69d3      	ldr	r3, [r2, #28]
 80031b0:	ea36 0303 	bics.w	r3, r6, r3
 80031b4:	bf0c      	ite	eq
 80031b6:	2301      	moveq	r3, #1
 80031b8:	2300      	movne	r3, #0
 80031ba:	42ab      	cmp	r3, r5
 80031bc:	d001      	beq.n	80031c2 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80031be:	2000      	movs	r0, #0
 80031c0:	e025      	b.n	800320e <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 80031c2:	f1b8 3fff 	cmp.w	r8, #4294967295
 80031c6:	d0f2      	beq.n	80031ae <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c8:	f7fe fa42 	bl	8001650 <HAL_GetTick>
 80031cc:	1bc0      	subs	r0, r0, r7
 80031ce:	4540      	cmp	r0, r8
 80031d0:	6820      	ldr	r0, [r4, #0]
 80031d2:	d802      	bhi.n	80031da <UART_WaitOnFlagUntilTimeout+0x3e>
 80031d4:	f1b8 0f00 	cmp.w	r8, #0
 80031d8:	d11b      	bne.n	8003212 <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031da:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e2:	e840 3200 	strex	r2, r3, [r0]
 80031e6:	2a00      	cmp	r2, #0
 80031e8:	d1f7      	bne.n	80031da <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ea:	f100 0308 	add.w	r3, r0, #8
 80031ee:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f6:	f100 0108 	add.w	r1, r0, #8
 80031fa:	e841 3200 	strex	r2, r3, [r1]
 80031fe:	2a00      	cmp	r2, #0
 8003200:	d1f3      	bne.n	80031ea <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8003202:	2320      	movs	r3, #32
 8003204:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003206:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8003208:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 800320c:	2003      	movs	r0, #3
}
 800320e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003212:	6803      	ldr	r3, [r0, #0]
 8003214:	075a      	lsls	r2, r3, #29
 8003216:	d5c9      	bpl.n	80031ac <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003218:	69c3      	ldr	r3, [r0, #28]
 800321a:	051b      	lsls	r3, r3, #20
 800321c:	d5c6      	bpl.n	80031ac <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800321e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003222:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003224:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003228:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800322c:	e840 3200 	strex	r2, r3, [r0]
 8003230:	2a00      	cmp	r2, #0
 8003232:	d1f7      	bne.n	8003224 <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003234:	f100 0308 	add.w	r3, r0, #8
 8003238:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800323c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003240:	f100 0108 	add.w	r1, r0, #8
 8003244:	e841 3200 	strex	r2, r3, [r1]
 8003248:	2a00      	cmp	r2, #0
 800324a:	d1f3      	bne.n	8003234 <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 800324c:	2320      	movs	r3, #32
 800324e:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003250:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003252:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8003256:	e7d7      	b.n	8003208 <UART_WaitOnFlagUntilTimeout+0x6c>

08003258 <HAL_UART_Transmit>:
{
 8003258:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800325c:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800325e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8003260:	2b20      	cmp	r3, #32
{
 8003262:	4604      	mov	r4, r0
 8003264:	460e      	mov	r6, r1
 8003266:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003268:	d14e      	bne.n	8003308 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 800326a:	2900      	cmp	r1, #0
 800326c:	d04a      	beq.n	8003304 <HAL_UART_Transmit+0xac>
 800326e:	2a00      	cmp	r2, #0
 8003270:	d048      	beq.n	8003304 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8003272:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8003276:	2b01      	cmp	r3, #1
 8003278:	d046      	beq.n	8003308 <HAL_UART_Transmit+0xb0>
 800327a:	2301      	movs	r3, #1
 800327c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003280:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003282:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003284:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003288:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 800328a:	f7fe f9e1 	bl	8001650 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800328e:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8003290:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003294:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003298:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 800329a:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800329e:	d103      	bne.n	80032a8 <HAL_UART_Transmit+0x50>
 80032a0:	6922      	ldr	r2, [r4, #16]
 80032a2:	b90a      	cbnz	r2, 80032a8 <HAL_UART_Transmit+0x50>
 80032a4:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80032a6:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 80032a8:	2200      	movs	r2, #0
 80032aa:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 80032ae:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032b2:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80032b6:	b292      	uxth	r2, r2
 80032b8:	b93a      	cbnz	r2, 80032ca <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032ba:	2140      	movs	r1, #64	; 0x40
 80032bc:	4620      	mov	r0, r4
 80032be:	f7ff ff6d 	bl	800319c <UART_WaitOnFlagUntilTimeout>
 80032c2:	b950      	cbnz	r0, 80032da <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80032c4:	2320      	movs	r3, #32
 80032c6:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80032c8:	e008      	b.n	80032dc <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032ca:	2200      	movs	r2, #0
 80032cc:	2180      	movs	r1, #128	; 0x80
 80032ce:	4620      	mov	r0, r4
 80032d0:	9303      	str	r3, [sp, #12]
 80032d2:	f7ff ff63 	bl	800319c <UART_WaitOnFlagUntilTimeout>
 80032d6:	9b03      	ldr	r3, [sp, #12]
 80032d8:	b118      	cbz	r0, 80032e2 <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 80032da:	2003      	movs	r0, #3
}
 80032dc:	b004      	add	sp, #16
 80032de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032e2:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 80032e4:	b95e      	cbnz	r6, 80032fe <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032e6:	f835 2b02 	ldrh.w	r2, [r5], #2
 80032ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ee:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 80032f0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80032f4:	3a01      	subs	r2, #1
 80032f6:	b292      	uxth	r2, r2
 80032f8:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80032fc:	e7d7      	b.n	80032ae <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032fe:	f816 2b01 	ldrb.w	r2, [r6], #1
 8003302:	e7f4      	b.n	80032ee <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 8003304:	2001      	movs	r0, #1
 8003306:	e7e9      	b.n	80032dc <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8003308:	2002      	movs	r0, #2
 800330a:	e7e7      	b.n	80032dc <HAL_UART_Transmit+0x84>

0800330c <UART_CheckIdleState>:
{
 800330c:	b530      	push	{r4, r5, lr}
 800330e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003310:	2500      	movs	r5, #0
{
 8003312:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003314:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8003318:	f7fe f99a 	bl	8001650 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800331c:	6822      	ldr	r2, [r4, #0]
 800331e:	6812      	ldr	r2, [r2, #0]
 8003320:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8003322:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003324:	d415      	bmi.n	8003352 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003326:	6822      	ldr	r2, [r4, #0]
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	0752      	lsls	r2, r2, #29
 800332c:	d509      	bpl.n	8003342 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800332e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003332:	9200      	str	r2, [sp, #0]
 8003334:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003338:	2200      	movs	r2, #0
 800333a:	4620      	mov	r0, r4
 800333c:	f7ff ff2e 	bl	800319c <UART_WaitOnFlagUntilTimeout>
 8003340:	b9a0      	cbnz	r0, 800336c <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8003342:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003344:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003346:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8003348:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800334c:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800334e:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 8003350:	e00d      	b.n	800336e <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003352:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003356:	9200      	str	r2, [sp, #0]
 8003358:	9003      	str	r0, [sp, #12]
 800335a:	462a      	mov	r2, r5
 800335c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003360:	4620      	mov	r0, r4
 8003362:	f7ff ff1b 	bl	800319c <UART_WaitOnFlagUntilTimeout>
 8003366:	9b03      	ldr	r3, [sp, #12]
 8003368:	2800      	cmp	r0, #0
 800336a:	d0dc      	beq.n	8003326 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800336c:	2003      	movs	r0, #3
}
 800336e:	b005      	add	sp, #20
 8003370:	bd30      	pop	{r4, r5, pc}

08003372 <HAL_UART_Init>:
{
 8003372:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003374:	4604      	mov	r4, r0
 8003376:	b340      	cbz	r0, 80033ca <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003378:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800337a:	b91b      	cbnz	r3, 8003384 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 800337c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8003380:	f7fe f87e 	bl	8001480 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003384:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003386:	2324      	movs	r3, #36	; 0x24
 8003388:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 800338a:	6813      	ldr	r3, [r2, #0]
 800338c:	f023 0301 	bic.w	r3, r3, #1
 8003390:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003392:	4620      	mov	r0, r4
 8003394:	f7ff fd6c 	bl	8002e70 <UART_SetConfig>
 8003398:	2801      	cmp	r0, #1
 800339a:	d016      	beq.n	80033ca <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800339c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800339e:	b113      	cbz	r3, 80033a6 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80033a0:	4620      	mov	r0, r4
 80033a2:	f7ff fea7 	bl	80030f4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033a6:	6823      	ldr	r3, [r4, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033b6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80033be:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80033c0:	601a      	str	r2, [r3, #0]
}
 80033c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80033c6:	f7ff bfa1 	b.w	800330c <UART_CheckIdleState>
}
 80033ca:	2001      	movs	r0, #1
 80033cc:	bd10      	pop	{r4, pc}
	...

080033d0 <aiSystemPerformanceInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiSystemPerformanceInit(void)
{
 80033d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  printf("\r\n#\r\n");
 80033d4:	485c      	ldr	r0, [pc, #368]	; (8003548 <aiSystemPerformanceInit+0x178>)
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 80033d6:	4e5d      	ldr	r6, [pc, #372]	; (800354c <aiSystemPerformanceInit+0x17c>)
      printf("\r\nFound network \"%s\"\r\n", nn_name);
 80033d8:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8003580 <aiSystemPerformanceInit+0x1b0>
  printf("Creating the network \"%s\"..\r\n", nn_name);
 80033dc:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 8003584 <aiSystemPerformanceInit+0x1b4>
  printf("Initializing the network\r\n");
 80033e0:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 8003588 <aiSystemPerformanceInit+0x1b8>
{
 80033e4:	b091      	sub	sp, #68	; 0x44
  printf("\r\n#\r\n");
 80033e6:	f005 f965 	bl	80086b4 <puts>
  printf("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_,
 80033ea:	2302      	movs	r3, #2
 80033ec:	4958      	ldr	r1, [pc, #352]	; (8003550 <aiSystemPerformanceInit+0x180>)
 80033ee:	4859      	ldr	r0, [pc, #356]	; (8003554 <aiSystemPerformanceInit+0x184>)
 80033f0:	2205      	movs	r2, #5
 80033f2:	f005 f8d9 	bl	80085a8 <iprintf>
      _APP_VERSION_MINOR_ );
  printf("#\r\n");
 80033f6:	4858      	ldr	r0, [pc, #352]	; (8003558 <aiSystemPerformanceInit+0x188>)
 80033f8:	f005 f95c 	bl	80086b4 <puts>

  systemSettingLog();
 80033fc:	f000 faac 	bl	8003958 <systemSettingLog>
extern struct cyclesCount cyclesCount;

__STATIC_INLINE void cyclesCounterInit(void)
{
  struct dwtTime t;
  dwtCyclesToTime(UINT32_MAX, &t);
 8003400:	aa04      	add	r2, sp, #16
 8003402:	2100      	movs	r1, #0
 8003404:	f04f 30ff 	mov.w	r0, #4294967295
 8003408:	f000 fa6a 	bl	80038e0 <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 800340c:	9a05      	ldr	r2, [sp, #20]
 800340e:	9b06      	ldr	r3, [sp, #24]
 8003410:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003414:	fb01 3302 	mla	r3, r1, r2, r3
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8003418:	4635      	mov	r5, r6
 800341a:	4a50      	ldr	r2, [pc, #320]	; (800355c <aiSystemPerformanceInit+0x18c>)
 800341c:	2400      	movs	r4, #0
 800341e:	6013      	str	r3, [r2, #0]
  dwtIpInit();
 8003420:	f000 fa4a 	bl	80038b8 <dwtIpInit>
  aiPlatformVersion();
 8003424:	f000 f8b2 	bl	800358c <aiPlatformVersion>
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8003428:	f845 4b04 	str.w	r4, [r5], #4
  printf("Discovering the network(s)...\r\n");
 800342c:	484c      	ldr	r0, [pc, #304]	; (8003560 <aiSystemPerformanceInit+0x190>)
 800342e:	f005 f941 	bl	80086b4 <puts>
    nn_name = ai_mnetwork_find(NULL, idx);
 8003432:	4621      	mov	r1, r4
 8003434:	2000      	movs	r0, #0
 8003436:	f000 fb75 	bl	8003b24 <ai_mnetwork_find>
    if (nn_name) {
 800343a:	4607      	mov	r7, r0
 800343c:	b190      	cbz	r0, 8003464 <aiSystemPerformanceInit+0x94>
      printf("\r\nFound network \"%s\"\r\n", nn_name);
 800343e:	4601      	mov	r1, r0
 8003440:	4648      	mov	r0, r9
 8003442:	f005 f8b1 	bl	80085a8 <iprintf>
  printf("Creating the network \"%s\"..\r\n", nn_name);
 8003446:	4639      	mov	r1, r7
 8003448:	4650      	mov	r0, sl
 800344a:	f005 f8ad 	bl	80085a8 <iprintf>
  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 800344e:	2200      	movs	r2, #0
 8003450:	1f29      	subs	r1, r5, #4
 8003452:	4638      	mov	r0, r7
 8003454:	f000 fb74 	bl	8003b40 <ai_mnetwork_create>
  if (err.type) {
 8003458:	f010 03ff 	ands.w	r3, r0, #255	; 0xff
 800345c:	d00b      	beq.n	8003476 <aiSystemPerformanceInit+0xa6>
    aiLogErr(err, "ai_mnetwork_create");
 800345e:	4941      	ldr	r1, [pc, #260]	; (8003564 <aiSystemPerformanceInit+0x194>)
 8003460:	f000 f8a4 	bl	80035ac <aiLogErr>

  cyclesCounterInit();

  aiInit();

  srand(3); /* deterministic outcome */
 8003464:	2003      	movs	r0, #3
 8003466:	f005 f92d 	bl	80086c4 <srand>
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 800346a:	4b3f      	ldr	r3, [pc, #252]	; (8003568 <aiSystemPerformanceInit+0x198>)
 800346c:	2000      	movs	r0, #0
 800346e:	6058      	str	r0, [r3, #4]

  dwtReset();
  return 0;
}
 8003470:	b011      	add	sp, #68	; 0x44
 8003472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  printf("Initializing the network\r\n");
 8003476:	4658      	mov	r0, fp
 8003478:	9301      	str	r3, [sp, #4]
 800347a:	f005 f91b 	bl	80086b4 <puts>
  if (ai_mnetwork_get_info(ctx->handle,
 800347e:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8003482:	4629      	mov	r1, r5
 8003484:	f000 fba2 	bl	8003bcc <ai_mnetwork_get_info>
 8003488:	46a8      	mov	r8, r5
 800348a:	9b01      	ldr	r3, [sp, #4]
 800348c:	b970      	cbnz	r0, 80034ac <aiSystemPerformanceInit+0xdc>
    err = ai_mnetwork_get_error(ctx->handle);
 800348e:	2378      	movs	r3, #120	; 0x78
 8003490:	435c      	muls	r4, r3
 8003492:	9001      	str	r0, [sp, #4]
 8003494:	5930      	ldr	r0, [r6, r4]
 8003496:	f000 fba4 	bl	8003be2 <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_get_info");
 800349a:	4934      	ldr	r1, [pc, #208]	; (800356c <aiSystemPerformanceInit+0x19c>)
 800349c:	f000 f886 	bl	80035ac <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 80034a0:	5930      	ldr	r0, [r6, r4]
 80034a2:	f000 fb7b 	bl	8003b9c <ai_mnetwork_destroy>
    ctx->handle = AI_HANDLE_NULL;
 80034a6:	9a01      	ldr	r2, [sp, #4]
 80034a8:	5132      	str	r2, [r6, r4]
  } while (nn_name);
 80034aa:	e7db      	b.n	8003464 <aiSystemPerformanceInit+0x94>
  ai_network_params params = AI_NETWORK_PARAMS_INIT(
 80034ac:	4619      	mov	r1, r3
 80034ae:	222c      	movs	r2, #44	; 0x2c
 80034b0:	a805      	add	r0, sp, #20
 80034b2:	f004 fb27 	bl	8007b04 <memset>
 80034b6:	4b2e      	ldr	r3, [pc, #184]	; (8003570 <aiSystemPerformanceInit+0x1a0>)
  if (ai_mnetwork_get_ext_data_activations(ctx->handle, &ext_addr, &sz) == 0) {
 80034b8:	f855 0c04 	ldr.w	r0, [r5, #-4]
  ai_network_params params = AI_NETWORK_PARAMS_INIT(
 80034bc:	9304      	str	r3, [sp, #16]
  if (ai_mnetwork_get_ext_data_activations(ctx->handle, &ext_addr, &sz) == 0) {
 80034be:	aa03      	add	r2, sp, #12
 80034c0:	a902      	add	r1, sp, #8
  ai_network_params params = AI_NETWORK_PARAMS_INIT(
 80034c2:	930a      	str	r3, [sp, #40]	; 0x28
  if (ai_mnetwork_get_ext_data_activations(ctx->handle, &ext_addr, &sz) == 0) {
 80034c4:	f000 fbd2 	bl	8003c6c <ai_mnetwork_get_ext_data_activations>
 80034c8:	b9b0      	cbnz	r0, 80034f8 <aiSystemPerformanceInit+0x128>
    if (ext_addr == 0xFFFFFFFF) {
 80034ca:	9a02      	ldr	r2, [sp, #8]
 80034cc:	1c51      	adds	r1, r2, #1
 80034ce:	d112      	bne.n	80034f6 <aiSystemPerformanceInit+0x126>
      params.activations.data = (ai_handle)activations;
 80034d0:	4a28      	ldr	r2, [pc, #160]	; (8003574 <aiSystemPerformanceInit+0x1a4>)
 80034d2:	920e      	str	r2, [sp, #56]	; 0x38
      if (sz > AI_MNETWORK_DATA_ACTIVATIONS_INT_SIZE) {
 80034d4:	9a03      	ldr	r2, [sp, #12]
 80034d6:	f5b2 6fd8 	cmp.w	r2, #1728	; 0x6c0
 80034da:	d90d      	bls.n	80034f8 <aiSystemPerformanceInit+0x128>
 80034dc:	9001      	str	r0, [sp, #4]
        printf("E: APP error (aiBootstrap for %s) - size of the local activations buffer is not enough\r\n",
 80034de:	4639      	mov	r1, r7
 80034e0:	4825      	ldr	r0, [pc, #148]	; (8003578 <aiSystemPerformanceInit+0x1a8>)
 80034e2:	f005 f861 	bl	80085a8 <iprintf>
        ai_mnetwork_destroy(ctx->handle);
 80034e6:	2278      	movs	r2, #120	; 0x78
 80034e8:	4354      	muls	r4, r2
 80034ea:	5930      	ldr	r0, [r6, r4]
 80034ec:	f000 fb56 	bl	8003b9c <ai_mnetwork_destroy>
        ctx->handle = AI_HANDLE_NULL;
 80034f0:	9b01      	ldr	r3, [sp, #4]
 80034f2:	5133      	str	r3, [r6, r4]
  } while (nn_name);
 80034f4:	e7b6      	b.n	8003464 <aiSystemPerformanceInit+0x94>
      params.activations.data = (ai_handle)ext_addr;
 80034f6:	920e      	str	r2, [sp, #56]	; 0x38
  if (!ai_mnetwork_init(ctx->handle, &params)) {
 80034f8:	f855 0c04 	ldr.w	r0, [r5, #-4]
 80034fc:	a904      	add	r1, sp, #16
 80034fe:	f000 fb7d 	bl	8003bfc <ai_mnetwork_init>
 8003502:	4607      	mov	r7, r0
 8003504:	b960      	cbnz	r0, 8003520 <aiSystemPerformanceInit+0x150>
    err = ai_mnetwork_get_error(ctx->handle);
 8003506:	2378      	movs	r3, #120	; 0x78
 8003508:	435c      	muls	r4, r3
 800350a:	5930      	ldr	r0, [r6, r4]
 800350c:	f000 fb69 	bl	8003be2 <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_init");
 8003510:	491a      	ldr	r1, [pc, #104]	; (800357c <aiSystemPerformanceInit+0x1ac>)
    aiLogErr(err, "ai_mnetwork_get_info");
 8003512:	f000 f84b 	bl	80035ac <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8003516:	5930      	ldr	r0, [r6, r4]
 8003518:	f000 fb40 	bl	8003b9c <ai_mnetwork_destroy>
    ctx->handle = AI_HANDLE_NULL;
 800351c:	5137      	str	r7, [r6, r4]
  } while (nn_name);
 800351e:	e7a1      	b.n	8003464 <aiSystemPerformanceInit+0x94>
  if (ai_mnetwork_get_info(ctx->handle,
 8003520:	f855 0c04 	ldr.w	r0, [r5, #-4]
 8003524:	4629      	mov	r1, r5
 8003526:	f000 fb51 	bl	8003bcc <ai_mnetwork_get_info>
 800352a:	3578      	adds	r5, #120	; 0x78
 800352c:	4607      	mov	r7, r0
 800352e:	b120      	cbz	r0, 800353a <aiSystemPerformanceInit+0x16a>
    aiPrintNetworkInfo(&ctx->report);
 8003530:	4640      	mov	r0, r8
 8003532:	f000 f8e9 	bl	8003708 <aiPrintNetworkInfo>
    idx++;
 8003536:	3401      	adds	r4, #1
  } while (nn_name);
 8003538:	e77b      	b.n	8003432 <aiSystemPerformanceInit+0x62>
    err = ai_mnetwork_get_error(ctx->handle);
 800353a:	2378      	movs	r3, #120	; 0x78
 800353c:	435c      	muls	r4, r3
 800353e:	5930      	ldr	r0, [r6, r4]
 8003540:	f000 fb4f 	bl	8003be2 <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_get_info");
 8003544:	4909      	ldr	r1, [pc, #36]	; (800356c <aiSystemPerformanceInit+0x19c>)
 8003546:	e7e4      	b.n	8003512 <aiSystemPerformanceInit+0x142>
 8003548:	0800a764 	.word	0x0800a764
 800354c:	20001900 	.word	0x20001900
 8003550:	0800a769 	.word	0x0800a769
 8003554:	0800a78b 	.word	0x0800a78b
 8003558:	0800a766 	.word	0x0800a766
 800355c:	20001978 	.word	0x20001978
 8003560:	0800a798 	.word	0x0800a798
 8003564:	0800a7ec 	.word	0x0800a7ec
 8003568:	e0001000 	.word	0xe0001000
 800356c:	0800a819 	.word	0x0800a819
 8003570:	40000040 	.word	0x40000040
 8003574:	20001240 	.word	0x20001240
 8003578:	0800a82e 	.word	0x0800a82e
 800357c:	0800a887 	.word	0x0800a887
 8003580:	0800a7b7 	.word	0x0800a7b7
 8003584:	0800a7ce 	.word	0x0800a7ce
 8003588:	0800a7ff 	.word	0x0800a7ff

0800358c <aiPlatformVersion>:
#include <aiTestHelper.h>

#include <ai_platform_interface.h>

void aiPlatformVersion(void)
{
 800358c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  printf("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 800358e:	2207      	movs	r2, #7
 8003590:	2300      	movs	r3, #0
 8003592:	9200      	str	r2, [sp, #0]
 8003594:	2201      	movs	r2, #1
 8003596:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800359a:	4611      	mov	r1, r2
 800359c:	4802      	ldr	r0, [pc, #8]	; (80035a8 <aiPlatformVersion+0x1c>)
 800359e:	f005 f803 	bl	80085a8 <iprintf>
      AI_PLATFORM_API_MINOR,
      AI_PLATFORM_API_MICRO,
      AI_PLATFORM_RUNTIME_MAJOR,
      AI_PLATFORM_RUNTIME_MINOR,
      AI_PLATFORM_RUNTIME_MICRO);
}
 80035a2:	b005      	add	sp, #20
 80035a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80035a8:	0800a898 	.word	0x0800a898

080035ac <aiLogErr>:
{
  return buffer->height * buffer->width * buffer->channels;
}

void aiLogErr(const ai_error err, const char *fct)
{
 80035ac:	b410      	push	{r4}
  if (fct)
    printf("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80035ae:	f3c0 2317 	ubfx	r3, r0, #8, #24
 80035b2:	b2c4      	uxtb	r4, r0
  if (fct)
 80035b4:	b129      	cbz	r1, 80035c2 <aiLogErr+0x16>
    printf("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80035b6:	4622      	mov	r2, r4
 80035b8:	4805      	ldr	r0, [pc, #20]	; (80035d0 <aiLogErr+0x24>)
        err.type, err.code);
  else
    printf("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
}
 80035ba:	f85d 4b04 	ldr.w	r4, [sp], #4
    printf("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80035be:	f004 bff3 	b.w	80085a8 <iprintf>
    printf("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80035c2:	4621      	mov	r1, r4
 80035c4:	4803      	ldr	r0, [pc, #12]	; (80035d4 <aiLogErr+0x28>)
}
 80035c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    printf("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80035ca:	461a      	mov	r2, r3
 80035cc:	f004 bfec 	b.w	80085a8 <iprintf>
 80035d0:	0800a8ca 	.word	0x0800a8ca
 80035d4:	0800a8f7 	.word	0x0800a8f7

080035d8 <aiPrintLayoutBuffer>:


void aiPrintLayoutBuffer(const char *msg, int idx,
    const ai_buffer* buffer)
{
 80035d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t type_id = AI_BUFFER_FMT_GET_TYPE(buffer->format);
 80035da:	6815      	ldr	r5, [r2, #0]
{
 80035dc:	4614      	mov	r4, r2
  uint32_t type_id = AI_BUFFER_FMT_GET_TYPE(buffer->format);
 80035de:	f3c5 4543 	ubfx	r5, r5, #17, #4
  printf("%s[%d] ",msg, idx);
 80035e2:	460a      	mov	r2, r1
 80035e4:	4601      	mov	r1, r0
 80035e6:	483c      	ldr	r0, [pc, #240]	; (80036d8 <aiPrintLayoutBuffer+0x100>)
 80035e8:	f004 ffde 	bl	80085a8 <iprintf>
  if (type_id == AI_BUFFER_FMT_TYPE_Q) {
 80035ec:	2d02      	cmp	r5, #2
 80035ee:	d15c      	bne.n	80036aa <aiPrintLayoutBuffer+0xd2>
    printf(" %s%d,",
        AI_BUFFER_FMT_GET_SIGN(buffer->format)?"s":"u",
 80035f0:	6822      	ldr	r2, [r4, #0]
    printf(" %s%d,",
 80035f2:	4b3a      	ldr	r3, [pc, #232]	; (80036dc <aiPrintLayoutBuffer+0x104>)
 80035f4:	493a      	ldr	r1, [pc, #232]	; (80036e0 <aiPrintLayoutBuffer+0x108>)
 80035f6:	483b      	ldr	r0, [pc, #236]	; (80036e4 <aiPrintLayoutBuffer+0x10c>)
 80035f8:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 80035fc:	bf08      	it	eq
 80035fe:	4619      	moveq	r1, r3
 8003600:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 8003604:	f004 ffd0 	bl	80085a8 <iprintf>
            (int)AI_BUFFER_FMT_GET_BITS(buffer->format));
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8003608:	6963      	ldr	r3, [r4, #20]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d03f      	beq.n	800368e <aiPrintLayoutBuffer+0xb6>
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	07d0      	lsls	r0, r2, #31
 8003612:	d53c      	bpl.n	800368e <aiPrintLayoutBuffer+0xb6>
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	2a00      	cmp	r2, #0
 8003618:	d039      	beq.n	800368e <aiPrintLayoutBuffer+0xb6>
      ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, 0);
 800361a:	6853      	ldr	r3, [r2, #4]
 800361c:	b35b      	cbz	r3, 8003676 <aiPrintLayoutBuffer+0x9e>
 800361e:	8851      	ldrh	r1, [r2, #2]
 8003620:	b349      	cbz	r1, 8003676 <aiPrintLayoutBuffer+0x9e>
 8003622:	6819      	ldr	r1, [r3, #0]
 8003624:	6808      	ldr	r0, [r1, #0]
      int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, 0);
 8003626:	8811      	ldrh	r1, [r2, #0]
 8003628:	0789      	lsls	r1, r1, #30
 800362a:	d526      	bpl.n	800367a <aiPrintLayoutBuffer+0xa2>
 800362c:	b36b      	cbz	r3, 800368a <aiPrintLayoutBuffer+0xb2>
 800362e:	8855      	ldrh	r5, [r2, #2]
 8003630:	b10d      	cbz	r5, 8003636 <aiPrintLayoutBuffer+0x5e>
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	781d      	ldrb	r5, [r3, #0]
      printf(" scale=%f, zero=%d,", scale, zero_point);
 8003636:	f7fc ff87 	bl	8000548 <__aeabi_f2d>
 800363a:	9500      	str	r5, [sp, #0]
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4829      	ldr	r0, [pc, #164]	; (80036e8 <aiPrintLayoutBuffer+0x110>)
 8003642:	f004 ffb1 	bl	80085a8 <iprintf>
  else if (type_id == AI_BUFFER_FMT_TYPE_BOOL)
    printf(" bool,");
  else
    printf("NONE");
  printf(" %d bytes, shape=(%d,%d,%d)",
      (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), buffer->format),
 8003646:	8923      	ldrh	r3, [r4, #8]
 8003648:	88e2      	ldrh	r2, [r4, #6]
 800364a:	6821      	ldr	r1, [r4, #0]
 800364c:	68e0      	ldr	r0, [r4, #12]
  printf(" %d bytes, shape=(%d,%d,%d)",
 800364e:	9000      	str	r0, [sp, #0]
      (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), buffer->format),
 8003650:	fb02 f503 	mul.w	r5, r2, r3
 8003654:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 8003658:	4369      	muls	r1, r5
 800365a:	4341      	muls	r1, r0
 800365c:	3104      	adds	r1, #4
  printf(" %d bytes, shape=(%d,%d,%d)",
 800365e:	08c9      	lsrs	r1, r1, #3
 8003660:	4822      	ldr	r0, [pc, #136]	; (80036ec <aiPrintLayoutBuffer+0x114>)
 8003662:	f004 ffa1 	bl	80085a8 <iprintf>
      buffer->height, buffer->width, (int)buffer->channels);
  if (buffer->data)
 8003666:	6921      	ldr	r1, [r4, #16]
 8003668:	b379      	cbz	r1, 80036ca <aiPrintLayoutBuffer+0xf2>
    printf(" (@0x%08x)\r\n", (int)buffer->data);
 800366a:	4821      	ldr	r0, [pc, #132]	; (80036f0 <aiPrintLayoutBuffer+0x118>)
  else
    printf(" (USER domain)\r\n");
}
 800366c:	b003      	add	sp, #12
 800366e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    printf(" (@0x%08x)\r\n", (int)buffer->data);
 8003672:	f004 bf99 	b.w	80085a8 <iprintf>
      ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, 0);
 8003676:	2000      	movs	r0, #0
 8003678:	e7d5      	b.n	8003626 <aiPrintLayoutBuffer+0x4e>
      int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, 0);
 800367a:	b133      	cbz	r3, 800368a <aiPrintLayoutBuffer+0xb2>
 800367c:	8855      	ldrh	r5, [r2, #2]
 800367e:	2d00      	cmp	r5, #0
 8003680:	d0d9      	beq.n	8003636 <aiPrintLayoutBuffer+0x5e>
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f993 5000 	ldrsb.w	r5, [r3]
 8003688:	e7d5      	b.n	8003636 <aiPrintLayoutBuffer+0x5e>
 800368a:	461d      	mov	r5, r3
 800368c:	e7d3      	b.n	8003636 <aiPrintLayoutBuffer+0x5e>
          (int)AI_BUFFER_FMT_GET_BITS(buffer->format)
 800368e:	6823      	ldr	r3, [r4, #0]
      printf("Q%d.%d,",
 8003690:	4818      	ldr	r0, [pc, #96]	; (80036f4 <aiPrintLayoutBuffer+0x11c>)
          - ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 8003692:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003696:	3a40      	subs	r2, #64	; 0x40
          (int)AI_BUFFER_FMT_GET_BITS(buffer->format)
 8003698:	f3c3 11c6 	ubfx	r1, r3, #7, #7
              (int)AI_BUFFER_FMT_GET_SIGN(buffer->format)),
 800369c:	f3c3 53c0 	ubfx	r3, r3, #23, #1
          - ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 80036a0:	4413      	add	r3, r2
      printf("Q%d.%d,",
 80036a2:	1ac9      	subs	r1, r1, r3
 80036a4:	f004 ff80 	bl	80085a8 <iprintf>
 80036a8:	e7cd      	b.n	8003646 <aiPrintLayoutBuffer+0x6e>
  else if (type_id == AI_BUFFER_FMT_TYPE_FLOAT)
 80036aa:	2d01      	cmp	r5, #1
 80036ac:	d106      	bne.n	80036bc <aiPrintLayoutBuffer+0xe4>
        (int)AI_BUFFER_FMT_GET_BITS(buffer->format));
 80036ae:	6821      	ldr	r1, [r4, #0]
    printf(" float%d,",
 80036b0:	4811      	ldr	r0, [pc, #68]	; (80036f8 <aiPrintLayoutBuffer+0x120>)
 80036b2:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 80036b6:	f004 ff77 	bl	80085a8 <iprintf>
 80036ba:	e7c4      	b.n	8003646 <aiPrintLayoutBuffer+0x6e>
  else if (type_id == AI_BUFFER_FMT_TYPE_BOOL)
 80036bc:	2d03      	cmp	r5, #3
    printf(" bool,");
 80036be:	bf0c      	ite	eq
 80036c0:	480e      	ldreq	r0, [pc, #56]	; (80036fc <aiPrintLayoutBuffer+0x124>)
    printf("NONE");
 80036c2:	480f      	ldrne	r0, [pc, #60]	; (8003700 <aiPrintLayoutBuffer+0x128>)
 80036c4:	f004 ff70 	bl	80085a8 <iprintf>
 80036c8:	e7bd      	b.n	8003646 <aiPrintLayoutBuffer+0x6e>
    printf(" (USER domain)\r\n");
 80036ca:	480e      	ldr	r0, [pc, #56]	; (8003704 <aiPrintLayoutBuffer+0x12c>)
}
 80036cc:	b003      	add	sp, #12
 80036ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    printf(" (USER domain)\r\n");
 80036d2:	f004 bfef 	b.w	80086b4 <puts>
 80036d6:	bf00      	nop
 80036d8:	0800a923 	.word	0x0800a923
 80036dc:	0800a921 	.word	0x0800a921
 80036e0:	0800a91f 	.word	0x0800a91f
 80036e4:	0800a92b 	.word	0x0800a92b
 80036e8:	0800a932 	.word	0x0800a932
 80036ec:	0800a964 	.word	0x0800a964
 80036f0:	0800a980 	.word	0x0800a980
 80036f4:	0800a946 	.word	0x0800a946
 80036f8:	0800a94e 	.word	0x0800a94e
 80036fc:	0800a958 	.word	0x0800a958
 8003700:	0800a95f 	.word	0x0800a95f
 8003704:	0800a98d 	.word	0x0800a98d

08003708 <aiPrintNetworkInfo>:

void aiPrintNetworkInfo(const ai_network_report* report)
{
 8003708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int i;
  uint32_t w_addr = (uint32_t)report->params.data;
 800370a:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
{
 800370c:	4604      	mov	r4, r0

  if ((w_addr) && (*(uint32_t *)w_addr == AI_MAGIC_MARKER)) {
 800370e:	b125      	cbz	r5, 800371a <aiPrintNetworkInfo+0x12>
 8003710:	682a      	ldr	r2, [r5, #0]
 8003712:	4b35      	ldr	r3, [pc, #212]	; (80037e8 <aiPrintNetworkInfo+0xe0>)
 8003714:	429a      	cmp	r2, r3
    w_addr = *(uint32_t *)((uint32_t *)(w_addr) + 1);
 8003716:	bf08      	it	eq
 8003718:	686d      	ldreq	r5, [r5, #4]
  }

  printf("Network informations...\r\n");
 800371a:	4834      	ldr	r0, [pc, #208]	; (80037ec <aiPrintNetworkInfo+0xe4>)
 800371c:	f004 ffca 	bl	80086b4 <puts>
  printf(" model name         : %s\r\n", report->model_name);
 8003720:	6821      	ldr	r1, [r4, #0]
 8003722:	4833      	ldr	r0, [pc, #204]	; (80037f0 <aiPrintNetworkInfo+0xe8>)
 8003724:	f004 ff40 	bl	80085a8 <iprintf>
  printf(" model signature    : %s\r\n", report->model_signature);
 8003728:	6861      	ldr	r1, [r4, #4]
 800372a:	4832      	ldr	r0, [pc, #200]	; (80037f4 <aiPrintNetworkInfo+0xec>)
 800372c:	f004 ff3c 	bl	80085a8 <iprintf>
  printf(" model datetime     : %s\r\n", report->model_datetime);
 8003730:	68a1      	ldr	r1, [r4, #8]
 8003732:	4831      	ldr	r0, [pc, #196]	; (80037f8 <aiPrintNetworkInfo+0xf0>)
 8003734:	f004 ff38 	bl	80085a8 <iprintf>
  printf(" compile datetime   : %s\r\n", report->compile_datetime);
 8003738:	68e1      	ldr	r1, [r4, #12]
 800373a:	4830      	ldr	r0, [pc, #192]	; (80037fc <aiPrintNetworkInfo+0xf4>)
 800373c:	f004 ff34 	bl	80085a8 <iprintf>
  printf(" runtime version    : %d.%d.%d\r\n",
 8003740:	7da3      	ldrb	r3, [r4, #22]
 8003742:	7d21      	ldrb	r1, [r4, #20]
 8003744:	7d62      	ldrb	r2, [r4, #21]
 8003746:	482e      	ldr	r0, [pc, #184]	; (8003800 <aiPrintNetworkInfo+0xf8>)
 8003748:	f004 ff2e 	bl	80085a8 <iprintf>
      report->runtime_version.major,
      report->runtime_version.minor,
      report->runtime_version.micro);
  if (report->tool_revision[0])
 800374c:	69a1      	ldr	r1, [r4, #24]
 800374e:	780b      	ldrb	r3, [r1, #0]
 8003750:	b113      	cbz	r3, 8003758 <aiPrintNetworkInfo+0x50>
    printf(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 8003752:	482c      	ldr	r0, [pc, #176]	; (8003804 <aiPrintNetworkInfo+0xfc>)
 8003754:	f004 ff28 	bl	80085a8 <iprintf>
  printf(" tools version      : %d.%d.%d\r\n",
 8003758:	7fa3      	ldrb	r3, [r4, #30]
 800375a:	7f62      	ldrb	r2, [r4, #29]
 800375c:	7f21      	ldrb	r1, [r4, #28]
 800375e:	482a      	ldr	r0, [pc, #168]	; (8003808 <aiPrintNetworkInfo+0x100>)
  printf(" weights            : %d bytes (0x%08x)\r\n",
      (int)AI_BUFFER_SIZE(&report->params), (unsigned int)w_addr);
  printf(" inputs/outputs     : %u/%u\r\n", report->n_inputs,
      report->n_outputs);
  for (i=0; i<report->n_inputs; i++)
    aiPrintLayoutBuffer("  I", i, &report->inputs[i]);
 8003760:	4f2a      	ldr	r7, [pc, #168]	; (800380c <aiPrintNetworkInfo+0x104>)
  printf(" tools version      : %d.%d.%d\r\n",
 8003762:	f004 ff21 	bl	80085a8 <iprintf>
  printf(" complexity         : %lu MACC\r\n", (unsigned long)report->n_macc);
 8003766:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003768:	4829      	ldr	r0, [pc, #164]	; (8003810 <aiPrintNetworkInfo+0x108>)
 800376a:	f004 ff1d 	bl	80085a8 <iprintf>
  printf(" c-nodes            : %d\r\n", (int)report->n_nodes);
 800376e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003770:	4828      	ldr	r0, [pc, #160]	; (8003814 <aiPrintNetworkInfo+0x10c>)
 8003772:	f004 ff19 	bl	80085a8 <iprintf>
      (int)AI_BUFFER_SIZE(&report->activations), (int)report->activations.data);
 8003776:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 800377a:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
  printf(" activations        : %d bytes (0x%08x)\r\n",
 800377e:	4826      	ldr	r0, [pc, #152]	; (8003818 <aiPrintNetworkInfo+0x110>)
      (int)AI_BUFFER_SIZE(&report->activations), (int)report->activations.data);
 8003780:	434b      	muls	r3, r1
  printf(" activations        : %d bytes (0x%08x)\r\n",
 8003782:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	; 0x60
 8003786:	4359      	muls	r1, r3
 8003788:	f004 ff0e 	bl	80085a8 <iprintf>
      (int)AI_BUFFER_SIZE(&report->params), (unsigned int)w_addr);
 800378c:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
 8003790:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
  printf(" weights            : %d bytes (0x%08x)\r\n",
 8003794:	4821      	ldr	r0, [pc, #132]	; (800381c <aiPrintNetworkInfo+0x114>)
      (int)AI_BUFFER_SIZE(&report->params), (unsigned int)w_addr);
 8003796:	434b      	muls	r3, r1
 8003798:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  printf(" weights            : %d bytes (0x%08x)\r\n",
 800379a:	462a      	mov	r2, r5
 800379c:	4359      	muls	r1, r3
 800379e:	f004 ff03 	bl	80085a8 <iprintf>
  printf(" inputs/outputs     : %u/%u\r\n", report->n_inputs,
 80037a2:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80037a4:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 80037a6:	481e      	ldr	r0, [pc, #120]	; (8003820 <aiPrintNetworkInfo+0x118>)
 80037a8:	f004 fefe 	bl	80085a8 <iprintf>
  for (i=0; i<report->n_inputs; i++)
 80037ac:	2500      	movs	r5, #0
    aiPrintLayoutBuffer("  I", i, &report->inputs[i]);
 80037ae:	2618      	movs	r6, #24
  for (i=0; i<report->n_inputs; i++)
 80037b0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80037b2:	42ab      	cmp	r3, r5
 80037b4:	dc06      	bgt.n	80037c4 <aiPrintNetworkInfo+0xbc>
  for (i=0; i<report->n_outputs; i++)
    aiPrintLayoutBuffer("  O", i, &report->outputs[i]);
 80037b6:	4f1b      	ldr	r7, [pc, #108]	; (8003824 <aiPrintNetworkInfo+0x11c>)
  for (i=0; i<report->n_outputs; i++)
 80037b8:	2500      	movs	r5, #0
    aiPrintLayoutBuffer("  O", i, &report->outputs[i]);
 80037ba:	2618      	movs	r6, #24
  for (i=0; i<report->n_outputs; i++)
 80037bc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80037be:	42ab      	cmp	r3, r5
 80037c0:	dc09      	bgt.n	80037d6 <aiPrintNetworkInfo+0xce>
}
 80037c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aiPrintLayoutBuffer("  I", i, &report->inputs[i]);
 80037c4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80037c6:	4629      	mov	r1, r5
 80037c8:	fb06 2205 	mla	r2, r6, r5, r2
 80037cc:	4638      	mov	r0, r7
 80037ce:	f7ff ff03 	bl	80035d8 <aiPrintLayoutBuffer>
  for (i=0; i<report->n_inputs; i++)
 80037d2:	3501      	adds	r5, #1
 80037d4:	e7ec      	b.n	80037b0 <aiPrintNetworkInfo+0xa8>
    aiPrintLayoutBuffer("  O", i, &report->outputs[i]);
 80037d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80037d8:	4629      	mov	r1, r5
 80037da:	fb06 2205 	mla	r2, r6, r5, r2
 80037de:	4638      	mov	r0, r7
 80037e0:	f7ff fefa 	bl	80035d8 <aiPrintLayoutBuffer>
  for (i=0; i<report->n_outputs; i++)
 80037e4:	3501      	adds	r5, #1
 80037e6:	e7e9      	b.n	80037bc <aiPrintNetworkInfo+0xb4>
 80037e8:	a1facade 	.word	0xa1facade
 80037ec:	0800a99d 	.word	0x0800a99d
 80037f0:	0800a9b6 	.word	0x0800a9b6
 80037f4:	0800a9d1 	.word	0x0800a9d1
 80037f8:	0800a9ec 	.word	0x0800a9ec
 80037fc:	0800aa07 	.word	0x0800aa07
 8003800:	0800aa22 	.word	0x0800aa22
 8003804:	0800aa43 	.word	0x0800aa43
 8003808:	0800aa5e 	.word	0x0800aa5e
 800380c:	0800ab2d 	.word	0x0800ab2d
 8003810:	0800aa7f 	.word	0x0800aa7f
 8003814:	0800aaa0 	.word	0x0800aaa0
 8003818:	0800aabb 	.word	0x0800aabb
 800381c:	0800aae5 	.word	0x0800aae5
 8003820:	0800ab0f 	.word	0x0800ab0f
 8003824:	0800ab31 	.word	0x0800ab31

08003828 <_write>:
#if defined(__GNUC__) && !defined(__ARMCC_VERSION)

int _write(int fd, const void *buff, int count);

int _write(int fd, const void *buff, int count)
{
 8003828:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status;

  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 800382a:	1e14      	subs	r4, r2, #0
 800382c:	da0a      	bge.n	8003844 <_write+0x1c>
 800382e:	3801      	subs	r0, #1
 8003830:	2801      	cmp	r0, #1
 8003832:	d907      	bls.n	8003844 <_write+0x1c>
    errno = EBADF;
 8003834:	f003 ff6a 	bl	800770c <__errno>
 8003838:	2309      	movs	r3, #9
 800383a:	6003      	str	r3, [r0, #0]
    return -1;
 800383c:	f04f 34ff 	mov.w	r4, #4294967295
        HAL_MAX_DELAY);
  else
    status = HAL_OK;

  return (status == HAL_OK ? count : 0);
}
 8003840:	4620      	mov	r0, r4
 8003842:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 8003844:	4b06      	ldr	r3, [pc, #24]	; (8003860 <_write+0x38>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0f9      	beq.n	8003840 <_write+0x18>
    status = HAL_UART_Transmit(&UartHandle, (uint8_t *)buff, count,
 800384c:	b2a2      	uxth	r2, r4
 800384e:	4805      	ldr	r0, [pc, #20]	; (8003864 <_write+0x3c>)
 8003850:	f04f 33ff 	mov.w	r3, #4294967295
 8003854:	f7ff fd00 	bl	8003258 <HAL_UART_Transmit>
  return (status == HAL_OK ? count : 0);
 8003858:	2800      	cmp	r0, #0
 800385a:	bf18      	it	ne
 800385c:	2400      	movne	r4, #0
 800385e:	e7ef      	b.n	8003840 <_write+0x18>
 8003860:	2000004c 	.word	0x2000004c
 8003864:	20001198 	.word	0x20001198

08003868 <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 8003868:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 800386a:	4d11      	ldr	r5, [pc, #68]	; (80038b0 <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 800386c:	3003      	adds	r0, #3
  io_malloc.cfg |= 1 << 1;
 800386e:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8003870:	f020 0403 	bic.w	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8003874:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8003878:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 800387c:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 800387e:	f004 f92b 	bl	8007ad8 <malloc>

  /* remember size */
  if (ptr) {
 8003882:	b1a0      	cbz	r0, 80038ae <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8003884:	1903      	adds	r3, r0, r4
 8003886:	4a0b      	ldr	r2, [pc, #44]	; (80038b4 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 8003888:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 800388a:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 800388c:	682b      	ldr	r3, [r5, #0]
 800388e:	07db      	lsls	r3, r3, #31
 8003890:	d50c      	bpl.n	80038ac <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 8003892:	68eb      	ldr	r3, [r5, #12]
 8003894:	3301      	adds	r3, #1
 8003896:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 8003898:	686b      	ldr	r3, [r5, #4]
 800389a:	4423      	add	r3, r4
 800389c:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 800389e:	69ab      	ldr	r3, [r5, #24]
 80038a0:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 80038a2:	696b      	ldr	r3, [r5, #20]
    io_malloc.used += bytes;
 80038a4:	61ac      	str	r4, [r5, #24]
    if (io_malloc.used > io_malloc.max) {
 80038a6:	429c      	cmp	r4, r3
      io_malloc.max = io_malloc.used;
 80038a8:	bf88      	it	hi
 80038aa:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 80038ac:	3004      	adds	r0, #4
}
 80038ae:	bd38      	pop	{r3, r4, r5, pc}
 80038b0:	20001984 	.word	0x20001984
 80038b4:	efdcba98 	.word	0xefdcba98

080038b8 <dwtIpInit>:
#endif
}

void dwtIpInit(void)
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80038b8:	4a08      	ldr	r2, [pc, #32]	; (80038dc <dwtIpInit+0x24>)
 80038ba:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 80038be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038c2:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc

#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
#endif

  DWT->CYCCNT = 0;
 80038c6:	f5a2 425d 	sub.w	r2, r2, #56576	; 0xdd00
 80038ca:	2300      	movs	r3, #0
 80038cc:	6053      	str	r3, [r2, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk | DWT_CTRL_CPIEVTENA_Msk;
 80038ce:	6813      	ldr	r3, [r2, #0]
 80038d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	6013      	str	r3, [r2, #0]

}
 80038da:	4770      	bx	lr
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <dwtCyclesToTime>:
  return HAL_RCC_GetSysClockFreq();
#endif
}

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 80038e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e4:	4604      	mov	r4, r0
 80038e6:	468a      	mov	sl, r1
  if (!t)
 80038e8:	4617      	mov	r7, r2
 80038ea:	b382      	cbz	r2, 800394e <dwtCyclesToTime+0x6e>
  return HAL_RCC_GetHCLKFreq();
 80038ec:	f7fe ffa4 	bl	8002838 <HAL_RCC_GetHCLKFreq>
    return -1;
  uint32_t fcpu = systemCoreClock();
  uint64_t s  = clks / fcpu;
 80038f0:	2300      	movs	r3, #0
  return HAL_RCC_GetHCLKFreq();
 80038f2:	4602      	mov	r2, r0
  uint64_t s  = clks / fcpu;
 80038f4:	9001      	str	r0, [sp, #4]
 80038f6:	4651      	mov	r1, sl
 80038f8:	4620      	mov	r0, r4
 80038fa:	f7fd f9a5 	bl	8000c48 <__aeabi_uldivmod>
  uint64_t ms = (clks * 1000) / fcpu;
 80038fe:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  uint64_t s  = clks / fcpu;
 8003902:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 8003904:	fba4 0106 	umull	r0, r1, r4, r6
 8003908:	9a01      	ldr	r2, [sp, #4]
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 800390a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8003954 <dwtCyclesToTime+0x74>
  uint64_t ms = (clks * 1000) / fcpu;
 800390e:	2300      	movs	r3, #0
 8003910:	fb06 110a 	mla	r1, r6, sl, r1
 8003914:	f7fd f998 	bl	8000c48 <__aeabi_uldivmod>
  ms -= (s * 1000);
 8003918:	fbab 3106 	umull	r3, r1, fp, r6
 800391c:	1ac5      	subs	r5, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 800391e:	fba4 0109 	umull	r0, r1, r4, r9
 8003922:	9a01      	ldr	r2, [sp, #4]
 8003924:	fb09 110a 	mla	r1, r9, sl, r1
 8003928:	2300      	movs	r3, #0
 800392a:	f7fd f98d 	bl	8000c48 <__aeabi_uldivmod>
  us -= (ms * 1000 + s * 1000000);
  t->fcpu = fcpu;
 800392e:	9a01      	ldr	r2, [sp, #4]
  t->s = s;
  t->ms = ms;
 8003930:	60bd      	str	r5, [r7, #8]
  us -= (ms * 1000 + s * 1000000);
 8003932:	fbab 8909 	umull	r8, r9, fp, r9
 8003936:	eba0 0008 	sub.w	r0, r0, r8
 800393a:	fba5 5606 	umull	r5, r6, r5, r6
  t->s = s;
 800393e:	e9c7 2b00 	strd	r2, fp, [r7]
  us -= (ms * 1000 + s * 1000000);
 8003942:	1b40      	subs	r0, r0, r5
  t->us = us;
 8003944:	60f8      	str	r0, [r7, #12]
  return 0;
 8003946:	2000      	movs	r0, #0
}
 8003948:	b003      	add	sp, #12
 800394a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 800394e:	f04f 30ff 	mov.w	r0, #4294967295
 8003952:	e7f9      	b.n	8003948 <dwtCyclesToTime+0x68>
 8003954:	000f4240 	.word	0x000f4240

08003958 <systemSettingLog>:
{
  return mconf;
}

void systemSettingLog(void)
{
 8003958:	b570      	push	{r4, r5, r6, lr}
  struct dwtTime t;
  uint32_t st;

#if !defined(STM32F3) && !defined(STM32L5) && !defined(STM32U5)
  uint32_t acr = FLASH->ACR ;
 800395a:	4b49      	ldr	r3, [pc, #292]	; (8003a80 <systemSettingLog+0x128>)
  /* Display ARM Complier version */

#if defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  printf("Compiled with MDK-ARM Keil (Arm Compiler 6) %d\r\n", __ARMCC_VERSION);
#elif defined(__GNUC__)
  printf("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 800395c:	4849      	ldr	r0, [pc, #292]	; (8003a84 <systemSettingLog+0x12c>)
  uint32_t acr = FLASH->ACR ;
 800395e:	681c      	ldr	r4, [r3, #0]
{
 8003960:	b088      	sub	sp, #32
  printf("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8003962:	2203      	movs	r2, #3
 8003964:	210a      	movs	r1, #10
 8003966:	2301      	movs	r3, #1
 8003968:	f004 fe1e 	bl	80085a8 <iprintf>
#endif


  /* Display Device configuration */

  printf("STM32 Runtime configuration...\r\n");
 800396c:	4846      	ldr	r0, [pc, #280]	; (8003a88 <systemSettingLog+0x130>)
 800396e:	f004 fea1 	bl	80086b4 <puts>

  printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
      (int)HAL_GetDEVID(),
 8003972:	f7fd fe91 	bl	8001698 <HAL_GetDEVID>
 8003976:	4605      	mov	r5, r0
      devIdToStr(HAL_GetDEVID()),
 8003978:	f7fd fe8e 	bl	8001698 <HAL_GetDEVID>
  switch (dev_id) {
 800397c:	f2a0 4315 	subw	r3, r0, #1045	; 0x415
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b6b      	cmp	r3, #107	; 0x6b
 8003984:	bf96      	itet	ls
 8003986:	4a41      	ldrls	r2, [pc, #260]	; (8003a8c <systemSettingLog+0x134>)
  printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003988:	4e41      	ldrhi	r6, [pc, #260]	; (8003a90 <systemSettingLog+0x138>)
 800398a:	f852 6023 	ldrls.w	r6, [r2, r3, lsl #2]
      (int)HAL_GetREVID()
 800398e:	f7fd fe7d 	bl	800168c <HAL_GetREVID>
  printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003992:	4632      	mov	r2, r6
      (int)HAL_GetREVID()
 8003994:	4603      	mov	r3, r0
  printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003996:	4629      	mov	r1, r5
 8003998:	483e      	ldr	r0, [pc, #248]	; (8003a94 <systemSettingLog+0x13c>)
          ""
#endif
  );

#if (__FPU_PRESENT == 1) && __FPU_USED
  mconf = (1 << 16);  /* FPU present and used */
 800399a:	4d3f      	ldr	r5, [pc, #252]	; (8003a98 <systemSettingLog+0x140>)
  printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 800399c:	f004 fe04 	bl	80085a8 <iprintf>
  printf(" Core Arch.   : M%d - %s %s\r\n",
 80039a0:	4a3e      	ldr	r2, [pc, #248]	; (8003a9c <systemSettingLog+0x144>)
 80039a2:	4b3f      	ldr	r3, [pc, #252]	; (8003aa0 <systemSettingLog+0x148>)
 80039a4:	483f      	ldr	r0, [pc, #252]	; (8003aa4 <systemSettingLog+0x14c>)
 80039a6:	2104      	movs	r1, #4
 80039a8:	f004 fdfe 	bl	80085a8 <iprintf>
  mconf = (1 << 16);  /* FPU present and used */
 80039ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039b0:	602b      	str	r3, [r5, #0]
#endif

  printf(" HAL version  : 0x%08x\r\n", (int)HAL_GetHalVersion());
 80039b2:	f7fd fe67 	bl	8001684 <HAL_GetHalVersion>
 80039b6:	4601      	mov	r1, r0
 80039b8:	483b      	ldr	r0, [pc, #236]	; (8003aa8 <systemSettingLog+0x150>)
 80039ba:	f004 fdf5 	bl	80085a8 <iprintf>
  return HAL_RCC_GetHCLKFreq();
 80039be:	f7fe ff3b 	bl	8002838 <HAL_RCC_GetHCLKFreq>

  val = systemCoreClock()/1000000;

#if !defined(STM32H7)
  printf(" system clock : %u MHz\r\n", (int)val);
 80039c2:	493a      	ldr	r1, [pc, #232]	; (8003aac <systemSettingLog+0x154>)
 80039c4:	fbb0 f1f1 	udiv	r1, r0, r1
 80039c8:	4839      	ldr	r0, [pc, #228]	; (8003ab0 <systemSettingLog+0x158>)
 80039ca:	f004 fded 	bl	80085a8 <iprintf>
      bitToStr(val & SCB_CCR_DC_Msk));
#endif
#else
#if !defined(STM32F3) && !defined(STM32L5) && !defined(STM32U5) && !defined(STM32MP1)
  mconf |= (1 << 24);  /* F4/L4 conf. */
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 80039ce:	682b      	ldr	r3, [r5, #0]
 80039d0:	f004 0607 	and.w	r6, r4, #7
 80039d4:	4333      	orrs	r3, r6
  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 80039d6:	05e2      	lsls	r2, r4, #23
    mconf |= (1 << 8);
 80039d8:	bf4c      	ite	mi
 80039da:	f043 2301 	orrmi.w	r3, r3, #16777472	; 0x1000100
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 80039de:	f043 7380 	orrpl.w	r3, r3, #16777216	; 0x1000000
    mconf |= (1 << 8);
 80039e2:	602b      	str	r3, [r5, #0]
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 80039e4:	05a0      	lsls	r0, r4, #22
    mconf |= (1 << 9);
 80039e6:	bf48      	it	mi
 80039e8:	682b      	ldrmi	r3, [r5, #0]
    return "False";
 80039ea:	4832      	ldr	r0, [pc, #200]	; (8003ab4 <systemSettingLog+0x15c>)
    mconf |= (1 << 9);
 80039ec:	bf44      	itt	mi
 80039ee:	f443 7300 	orrmi.w	r3, r3, #512	; 0x200
 80039f2:	602b      	strmi	r3, [r5, #0]
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 80039f4:	0561      	lsls	r1, r4, #21
    mconf |= (1 << 10);
 80039f6:	bf48      	it	mi
 80039f8:	682b      	ldrmi	r3, [r5, #0]
    return "False";
 80039fa:	492f      	ldr	r1, [pc, #188]	; (8003ab8 <systemSettingLog+0x160>)
    mconf |= (1 << 10);
 80039fc:	bf44      	itt	mi
 80039fe:	f443 6380 	orrmi.w	r3, r3, #1024	; 0x400
 8003a02:	602b      	strmi	r3, [r5, #0]
    return "False";
 8003a04:	f414 7f80 	tst.w	r4, #256	; 0x100
 8003a08:	bf14      	ite	ne
 8003a0a:	460a      	movne	r2, r1
 8003a0c:	4602      	moveq	r2, r0
 8003a0e:	f414 7f00 	tst.w	r4, #512	; 0x200
 8003a12:	bf14      	ite	ne
 8003a14:	460b      	movne	r3, r1
 8003a16:	4603      	moveq	r3, r0
 8003a18:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8003a1c:	bf08      	it	eq
 8003a1e:	4601      	moveq	r1, r0
  printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8003a20:	e9cd 1600 	strd	r1, r6, [sp]
 8003a24:	4621      	mov	r1, r4
  if (!__HAL_RCC_CRC_IS_CLK_ENABLED())
 8003a26:	4c25      	ldr	r4, [pc, #148]	; (8003abc <systemSettingLog+0x164>)
  printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8003a28:	4825      	ldr	r0, [pc, #148]	; (8003ac0 <systemSettingLog+0x168>)
 8003a2a:	f004 fdbd 	bl	80085a8 <iprintf>
  if (!__HAL_RCC_CRC_IS_CLK_ENABLED())
 8003a2e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003a30:	04db      	lsls	r3, r3, #19
 8003a32:	d402      	bmi.n	8003a3a <systemSettingLog+0xe2>
    printf("W: CRC IP clock is NOT enabled\r\n");
 8003a34:	4823      	ldr	r0, [pc, #140]	; (8003ac4 <systemSettingLog+0x16c>)
 8003a36:	f004 fe3d 	bl	80086b4 <puts>
  __HAL_RCC_CRC_CLK_ENABLE();
 8003a3a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003a3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a40:	64a3      	str	r3, [r4, #72]	; 0x48
 8003a42:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003a44:	4c20      	ldr	r4, [pc, #128]	; (8003ac8 <systemSettingLog+0x170>)
 8003a46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a4a:	9303      	str	r3, [sp, #12]
 8003a4c:	2500      	movs	r5, #0
 8003a4e:	9b03      	ldr	r3, [sp, #12]
  crcIpInit();
  dwtIpInit();

  /* Display HAL tick Calibration */
  dwtReset();
  HAL_Delay(100);
 8003a50:	2064      	movs	r0, #100	; 0x64
  dwtIpInit();
 8003a52:	f7ff ff31 	bl	80038b8 <dwtIpInit>
 8003a56:	6065      	str	r5, [r4, #4]
  HAL_Delay(100);
 8003a58:	f7fd fe00 	bl	800165c <HAL_Delay>
  return DWT->CYCCNT;
 8003a5c:	6860      	ldr	r0, [r4, #4]
  st = dwtGetCycles();
  dwtCyclesToTime(st/100, &t);
 8003a5e:	aa04      	add	r2, sp, #16
 8003a60:	2464      	movs	r4, #100	; 0x64
 8003a62:	4629      	mov	r1, r5
 8003a64:	fbb0 f0f4 	udiv	r0, r0, r4
 8003a68:	f7ff ff3a 	bl	80038e0 <dwtCyclesToTime>

  printf(" Calibration  : HAL_Delay(1)=%d.%03d ms\r\n",
 8003a6c:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 8003a70:	9a07      	ldr	r2, [sp, #28]
 8003a72:	4816      	ldr	r0, [pc, #88]	; (8003acc <systemSettingLog+0x174>)
 8003a74:	fb04 3101 	mla	r1, r4, r1, r3
 8003a78:	f004 fd96 	bl	80085a8 <iprintf>
      t.s * 100 + t.ms, t.us);
}
 8003a7c:	b008      	add	sp, #32
 8003a7e:	bd70      	pop	{r4, r5, r6, pc}
 8003a80:	40022000 	.word	0x40022000
 8003a84:	0800ab48 	.word	0x0800ab48
 8003a88:	0800ab65 	.word	0x0800ab65
 8003a8c:	0800ad98 	.word	0x0800ad98
 8003a90:	0800ab35 	.word	0x0800ab35
 8003a94:	0800ab85 	.word	0x0800ab85
 8003a98:	200019a0 	.word	0x200019a0
 8003a9c:	0800abbf 	.word	0x0800abbf
 8003aa0:	0800abb6 	.word	0x0800abb6
 8003aa4:	0800abcb 	.word	0x0800abcb
 8003aa8:	0800abe9 	.word	0x0800abe9
 8003aac:	000f4240 	.word	0x000f4240
 8003ab0:	0800ac02 	.word	0x0800ac02
 8003ab4:	0800ab42 	.word	0x0800ab42
 8003ab8:	0800ab3d 	.word	0x0800ab3d
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	0800ac1b 	.word	0x0800ac1b
 8003ac4:	0800ac5f 	.word	0x0800ac5f
 8003ac8:	e0001000 	.word	0xe0001000
 8003acc:	0800ac7f 	.word	0x0800ac7f

08003ad0 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <ai_mnetwork_handle+0x18>)
 8003ad2:	b120      	cbz	r0, 8003ade <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 8003ad4:	4298      	cmp	r0, r3
 8003ad6:	bf0c      	ite	eq
 8003ad8:	4618      	moveq	r0, r3
 8003ada:	2000      	movne	r0, #0
 8003adc:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8003ade:	681a      	ldr	r2, [r3, #0]
            return inst;
 8003ae0:	2a00      	cmp	r2, #0
 8003ae2:	bf08      	it	eq
 8003ae4:	4618      	moveq	r0, r3
}
 8003ae6:	4770      	bx	lr
 8003ae8:	200019a4 	.word	0x200019a4

08003aec <ai_mnetwork_is_valid.constprop.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 8003aec:	b510      	push	{r4, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 8003aee:	4604      	mov	r4, r0
 8003af0:	b160      	cbz	r0, 8003b0c <ai_mnetwork_is_valid.constprop.0+0x20>
 8003af2:	f7fc fb6d 	bl	80001d0 <strlen>
 8003af6:	2807      	cmp	r0, #7
 8003af8:	4602      	mov	r2, r0
 8003afa:	d107      	bne.n	8003b0c <ai_mnetwork_is_valid.constprop.0+0x20>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8003afc:	4804      	ldr	r0, [pc, #16]	; (8003b10 <ai_mnetwork_is_valid.constprop.0+0x24>)
 8003afe:	4621      	mov	r1, r4
 8003b00:	f004 fe61 	bl	80087c6 <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 8003b04:	fab0 f080 	clz	r0, r0
 8003b08:	0940      	lsrs	r0, r0, #5
}
 8003b0a:	bd10      	pop	{r4, pc}
    return false;
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	e7fc      	b.n	8003b0a <ai_mnetwork_is_valid.constprop.0+0x1e>
 8003b10:	0800af48 	.word	0x0800af48

08003b14 <MX_X_CUBE_AI_Init>:
{
 8003b14:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 8003b16:	f7fd fc25 	bl	8001364 <MX_USART2_UART_Init>
}
 8003b1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aiSystemPerformanceInit();
 8003b1e:	f7ff bc57 	b.w	80033d0 <aiSystemPerformanceInit>
	...

08003b24 <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8003b24:	b510      	push	{r4, lr}
 8003b26:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 8003b28:	f7ff ffe0 	bl	8003aec <ai_mnetwork_is_valid.constprop.0>
 8003b2c:	b920      	cbnz	r0, 8003b38 <ai_mnetwork_find+0x14>
        else {
            if (!idx--)
                return entry->name;
        }
    }
    return NULL;
 8003b2e:	2c00      	cmp	r4, #0
 8003b30:	4802      	ldr	r0, [pc, #8]	; (8003b3c <ai_mnetwork_find+0x18>)
 8003b32:	bf18      	it	ne
 8003b34:	2000      	movne	r0, #0
}
 8003b36:	bd10      	pop	{r4, pc}
            return entry->name;
 8003b38:	4800      	ldr	r0, [pc, #0]	; (8003b3c <ai_mnetwork_find+0x18>)
 8003b3a:	e7fc      	b.n	8003b36 <ai_mnetwork_find+0x12>
 8003b3c:	0800af48 	.word	0x0800af48

08003b40 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 8003b40:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b42:	4606      	mov	r6, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8003b44:	2000      	movs	r0, #0
{
 8003b46:	460d      	mov	r5, r1
 8003b48:	4611      	mov	r1, r2
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8003b4a:	f7ff ffc1 	bl	8003ad0 <ai_mnetwork_handle>

    if (!inst) {
 8003b4e:	4604      	mov	r4, r0
 8003b50:	b930      	cbnz	r0, 8003b60 <ai_mnetwork_create+0x20>
        err.type = AI_ERROR_ALLOCATION_FAILED;
        err.code = AI_ERROR_CODE_NETWORK;
        return err;
 8003b52:	f241 0031 	movw	r0, #4145	; 0x1031
        inst->handle = *network;
        *network = (ai_handle*)inst;
    }

    return err;
}
 8003b56:	b002      	add	sp, #8
 8003b58:	bd70      	pop	{r4, r5, r6, pc}
        return err;
 8003b5a:	f241 0014 	movw	r0, #4116	; 0x1014
 8003b5e:	e7fa      	b.n	8003b56 <ai_mnetwork_create+0x16>
        if (ai_mnetwork_is_valid(name, entry)) {
 8003b60:	4630      	mov	r0, r6
 8003b62:	9101      	str	r1, [sp, #4]
 8003b64:	f7ff ffc2 	bl	8003aec <ai_mnetwork_is_valid.constprop.0>
 8003b68:	9901      	ldr	r1, [sp, #4]
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	d0f5      	beq.n	8003b5a <ai_mnetwork_create+0x1a>
        err = found->ai_create(network, network_config);
 8003b6e:	4628      	mov	r0, r5
 8003b70:	f000 f8d6 	bl	8003d20 <ai_network_create>
 8003b74:	b2c2      	uxtb	r2, r0
 8003b76:	f3c0 2317 	ubfx	r3, r0, #8, #24
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 8003b7a:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 8003b7e:	d104      	bne.n	8003b8a <ai_mnetwork_create+0x4a>
        inst->entry = found;
 8003b80:	4905      	ldr	r1, [pc, #20]	; (8003b98 <ai_mnetwork_create+0x58>)
 8003b82:	6021      	str	r1, [r4, #0]
        inst->handle = *network;
 8003b84:	6829      	ldr	r1, [r5, #0]
 8003b86:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 8003b88:	602c      	str	r4, [r5, #0]
    return err;
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	f362 0007 	bfi	r0, r2, #0, #8
 8003b90:	f363 201f 	bfi	r0, r3, #8, #24
 8003b94:	e7df      	b.n	8003b56 <ai_mnetwork_create+0x16>
 8003b96:	bf00      	nop
 8003b98:	0800af50 	.word	0x0800af50

08003b9c <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 8003b9c:	b538      	push	{r3, r4, r5, lr}
 8003b9e:	4604      	mov	r4, r0
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003ba0:	f7ff ff96 	bl	8003ad0 <ai_mnetwork_handle>
    if (inn) {
 8003ba4:	4605      	mov	r5, r0
 8003ba6:	b160      	cbz	r0, 8003bc2 <ai_mnetwork_destroy+0x26>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 8003ba8:	6803      	ldr	r3, [r0, #0]
 8003baa:	6840      	ldr	r0, [r0, #4]
 8003bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bae:	4798      	blx	r3
        if (hdl != inn->handle) {
 8003bb0:	686b      	ldr	r3, [r5, #4]
 8003bb2:	4283      	cmp	r3, r0
 8003bb4:	d005      	beq.n	8003bc2 <ai_mnetwork_destroy+0x26>
        if ((inst) && (&gnetworks[i] == inst)) {
 8003bb6:	4b04      	ldr	r3, [pc, #16]	; (8003bc8 <ai_mnetwork_destroy+0x2c>)
 8003bb8:	429d      	cmp	r5, r3
 8003bba:	f04f 0400 	mov.w	r4, #0
 8003bbe:	d100      	bne.n	8003bc2 <ai_mnetwork_destroy+0x26>
            gnetworks[i].entry = NULL;
 8003bc0:	602c      	str	r4, [r5, #0]
            ai_mnetwork_release_handle(inn);
            network = AI_HANDLE_NULL;
        }
    }
    return network;
}
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	bd38      	pop	{r3, r4, r5, pc}
 8003bc6:	bf00      	nop
 8003bc8:	200019a4 	.word	0x200019a4

08003bcc <ai_mnetwork_get_info>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_info(ai_handle network, ai_network_report* report)
{
 8003bcc:	b510      	push	{r4, lr}
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003bce:	f7ff ff7f 	bl	8003ad0 <ai_mnetwork_handle>
    if (inn)
 8003bd2:	b128      	cbz	r0, 8003be0 <ai_mnetwork_get_info+0x14>
        return inn->entry->ai_get_info(inn->handle, report);
 8003bd4:	6802      	ldr	r2, [r0, #0]
 8003bd6:	6840      	ldr	r0, [r0, #4]
 8003bd8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    else
        return false;
}
 8003bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_info(inn->handle, report);
 8003bde:	4710      	bx	r2
}
 8003be0:	bd10      	pop	{r4, pc}

08003be2 <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 8003be2:	b510      	push	{r4, lr}
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
    err.code = AI_ERROR_CODE_NETWORK;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003be4:	f7ff ff74 	bl	8003ad0 <ai_mnetwork_handle>
    if (inn)
 8003be8:	b128      	cbz	r0, 8003bf6 <ai_mnetwork_get_error+0x14>
        return inn->entry->ai_get_error(inn->handle);
 8003bea:	6803      	ldr	r3, [r0, #0]
 8003bec:	6840      	ldr	r0, [r0, #4]
 8003bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    else
        return err;
}
 8003bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_error(inn->handle);
 8003bf4:	4718      	bx	r3
}
 8003bf6:	f241 0014 	movw	r0, #4116	; 0x1014
 8003bfa:	bd10      	pop	{r4, pc}

08003bfc <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network, const ai_network_params* params)
{
 8003bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bfe:	b08d      	sub	sp, #52	; 0x34
    struct network_instance *inn;
    ai_network_params par;

    /* TODO: adding check ai_buffer activations/weights shape coherence */

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003c00:	f7ff ff66 	bl	8003ad0 <ai_mnetwork_handle>
{
 8003c04:	460e      	mov	r6, r1
    if (inn) {
 8003c06:	4607      	mov	r7, r0
 8003c08:	b330      	cbz	r0, 8003c58 <ai_mnetwork_init+0x5c>
        par = inn->entry->params;
 8003c0a:	f8d0 c000 	ldr.w	ip, [r0]
 8003c0e:	f10c 0504 	add.w	r5, ip, #4
 8003c12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c14:	466c      	mov	r4, sp
 8003c16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003c20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (params->activations.n_batches)
 8003c24:	8bb3      	ldrh	r3, [r6, #28]
 8003c26:	b1cb      	cbz	r3, 8003c5c <ai_mnetwork_init+0x60>
            par.activations = params->activations;
 8003c28:	f106 0518 	add.w	r5, r6, #24
 8003c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c2e:	ac06      	add	r4, sp, #24
 8003c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c32:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003c36:	e884 0003 	stmia.w	r4, {r0, r1}
        else
            par.activations.data = params->activations.data;
        if (params->params.n_batches)
 8003c3a:	88b3      	ldrh	r3, [r6, #4]
 8003c3c:	b18b      	cbz	r3, 8003c62 <ai_mnetwork_init+0x66>
            par.params = params->params;
 8003c3e:	4634      	mov	r4, r6
 8003c40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c42:	466d      	mov	r5, sp
 8003c44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c4a:	e885 0003 	stmia.w	r5, {r0, r1}
        else
            par.params.data = inn->entry->ai_data_weights_get_default();
        return inn->entry->ai_init(inn->handle, &par);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c54:	4669      	mov	r1, sp
 8003c56:	4798      	blx	r3
    }
    else
        return false;
}
 8003c58:	b00d      	add	sp, #52	; 0x34
 8003c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            par.activations.data = params->activations.data;
 8003c5c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003c5e:	930a      	str	r3, [sp, #40]	; 0x28
 8003c60:	e7eb      	b.n	8003c3a <ai_mnetwork_init+0x3e>
            par.params.data = inn->entry->ai_data_weights_get_default();
 8003c62:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 8003c66:	4798      	blx	r3
 8003c68:	9004      	str	r0, [sp, #16]
 8003c6a:	e7f0      	b.n	8003c4e <ai_mnetwork_init+0x52>

08003c6c <ai_mnetwork_get_ext_data_activations>:

 AI_API_ENTRY
int ai_mnetwork_get_ext_data_activations(ai_handle network,
         ai_u32 *add,
         ai_u32 *size)
 {
 8003c6c:	b510      	push	{r4, lr}
 8003c6e:	4614      	mov	r4, r2
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003c70:	f7ff ff2e 	bl	8003ad0 <ai_mnetwork_handle>
     if (inn && add && size) {
 8003c74:	b140      	cbz	r0, 8003c88 <ai_mnetwork_get_ext_data_activations+0x1c>
 8003c76:	b139      	cbz	r1, 8003c88 <ai_mnetwork_get_ext_data_activations+0x1c>
 8003c78:	b134      	cbz	r4, 8003c88 <ai_mnetwork_get_ext_data_activations+0x1c>
         *add = inn->entry->extActBufferStartAddr;
 8003c7a:	6803      	ldr	r3, [r0, #0]
 8003c7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c7e:	600a      	str	r2, [r1, #0]
         *size = inn->entry->actBufferSize;
 8003c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c82:	6023      	str	r3, [r4, #0]
         return 0;
 8003c84:	2000      	movs	r0, #0
     }
     else
         return -1;
 }
 8003c86:	bd10      	pop	{r4, pc}
         return -1;
 8003c88:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8c:	e7fb      	b.n	8003c86 <ai_mnetwork_get_ext_data_activations+0x1a>
	...

08003c90 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/
AI_DEPRECATED
AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8003c90:	b570      	push	{r4, r5, r6, lr}
 8003c92:	b09e      	sub	sp, #120	; 0x78
 8003c94:	4606      	mov	r6, r0
 8003c96:	460d      	mov	r5, r1
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8003c98:	f000 fa84 	bl	80041a4 <ai_platform_context_acquire>
 8003c9c:	4604      	mov	r4, r0

  if (report && net_ctx)
 8003c9e:	2d00      	cmp	r5, #0
 8003ca0:	d02f      	beq.n	8003d02 <ai_network_get_info+0x72>
 8003ca2:	b358      	cbz	r0, 8003cfc <ai_network_get_info+0x6c>
  {
    ai_network_report r = {
 8003ca4:	2264      	movs	r2, #100	; 0x64
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	a805      	add	r0, sp, #20
 8003caa:	f003 ff2b 	bl	8007b04 <memset>
 8003cae:	4b16      	ldr	r3, [pc, #88]	; (8003d08 <ai_network_get_info+0x78>)
 8003cb0:	9301      	str	r3, [sp, #4]
 8003cb2:	4b16      	ldr	r3, [pc, #88]	; (8003d0c <ai_network_get_info+0x7c>)
 8003cb4:	9302      	str	r3, [sp, #8]
 8003cb6:	4b16      	ldr	r3, [pc, #88]	; (8003d10 <ai_network_get_info+0x80>)
 8003cb8:	9303      	str	r3, [sp, #12]
 8003cba:	4b16      	ldr	r3, [pc, #88]	; (8003d14 <ai_network_get_info+0x84>)
 8003cbc:	9304      	str	r3, [sp, #16]
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8003cbe:	f000 f945 	bl	8003f4c <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8003cc2:	9005      	str	r0, [sp, #20]
      .runtime_version   = ai_platform_runtime_get_version(),
 8003cc4:	f000 f984 	bl	8003fd0 <ai_platform_runtime_get_version>
    ai_network_report r = {
 8003cc8:	4b13      	ldr	r3, [pc, #76]	; (8003d18 <ai_network_get_info+0x88>)
 8003cca:	9307      	str	r3, [sp, #28]
 8003ccc:	2307      	movs	r3, #7
 8003cce:	f88d 3020 	strb.w	r3, [sp, #32]
      .runtime_version   = ai_platform_runtime_get_version(),
 8003cd2:	9006      	str	r0, [sp, #24]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8003cd4:	f000 f9be 	bl	8004054 <ai_platform_api_get_version>
 8003cd8:	900a      	str	r0, [sp, #40]	; 0x28
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8003cda:	f000 fa0f 	bl	80040fc <ai_platform_interface_api_get_version>
    ai_network_report r = {
 8003cde:	f643 0350 	movw	r3, #14416	; 0x3850
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8003ce2:	900b      	str	r0, [sp, #44]	; 0x2c
      .activations       = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8003ce4:	a901      	add	r1, sp, #4
 8003ce6:	4630      	mov	r0, r6
    ai_network_report r = {
 8003ce8:	930c      	str	r3, [sp, #48]	; 0x30
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8003cea:	f000 fb1d 	bl	8004328 <ai_platform_api_get_network_report>
 8003cee:	4604      	mov	r4, r0
 8003cf0:	b120      	cbz	r0, 8003cfc <ai_network_get_info+0x6c>

    *report = r;
 8003cf2:	2274      	movs	r2, #116	; 0x74
 8003cf4:	a901      	add	r1, sp, #4
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	f003 fef6 	bl	8007ae8 <memcpy>
    return true;
  }
  return false;
}
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	b01e      	add	sp, #120	; 0x78
 8003d00:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8003d02:	462c      	mov	r4, r5
 8003d04:	e7fa      	b.n	8003cfc <ai_network_get_info+0x6c>
 8003d06:	bf00      	nop
 8003d08:	0800af48 	.word	0x0800af48
 8003d0c:	0800afb0 	.word	0x0800afb0
 8003d10:	0800afd1 	.word	0x0800afd1
 8003d14:	0800afea 	.word	0x0800afea
 8003d18:	0800a7cd 	.word	0x0800a7cd

08003d1c <ai_network_get_error>:
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8003d1c:	f000 ba8a 	b.w	8004234 <ai_platform_network_get_error>

08003d20 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8003d20:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8003d22:	2304      	movs	r3, #4
 8003d24:	2200      	movs	r2, #0
 8003d26:	e9cd 3200 	strd	r3, r2, [sp]
 8003d2a:	4a03      	ldr	r2, [pc, #12]	; (8003d38 <ai_network_create+0x18>)
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	f000 fd9d 	bl	800486c <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8003d32:	b003      	add	sp, #12
 8003d34:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d38:	200006b0 	.word	0x200006b0

08003d3c <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8003d3c:	f000 be6c 	b.w	8004a18 <ai_platform_network_destroy>

08003d40 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8003d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d42:	b085      	sub	sp, #20
 8003d44:	4606      	mov	r6, r0
 8003d46:	9101      	str	r1, [sp, #4]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8003d48:	f000 fede 	bl	8004b08 <ai_platform_network_init>
  if (!net_ctx) return false;
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	d06a      	beq.n	8003e26 <ai_network_init+0xe6>
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8003d50:	9a01      	ldr	r2, [sp, #4]
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8003d52:	2300      	movs	r3, #0
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8003d54:	2101      	movs	r1, #1
 8003d56:	a803      	add	r0, sp, #12
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8003d58:	9303      	str	r3, [sp, #12]
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8003d5a:	f000 f88f 	bl	8003e7c <ai_platform_get_weights_map>
 8003d5e:	9a01      	ldr	r2, [sp, #4]
 8003d60:	4604      	mov	r4, r0
 8003d62:	2800      	cmp	r0, #0
 8003d64:	d037      	beq.n	8003dd6 <ai_network_init+0x96>
    conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8003d66:	4931      	ldr	r1, [pc, #196]	; (8003e2c <ai_network_init+0xec>)
 8003d68:	680b      	ldr	r3, [r1, #0]
 8003d6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d6e:	600b      	str	r3, [r1, #0]
    conv2d_weights_array.data = AI_PTR(weights_map[0] + 0);
 8003d70:	9b03      	ldr	r3, [sp, #12]
    conv2d_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 8003d72:	e9c1 3302 	strd	r3, r3, [r1, #8]
    conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8003d76:	492e      	ldr	r1, [pc, #184]	; (8003e30 <ai_network_init+0xf0>)
 8003d78:	6808      	ldr	r0, [r1, #0]
 8003d7a:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8003d7e:	6008      	str	r0, [r1, #0]
    conv2d_bias_array.data = AI_PTR(weights_map[0] + 1536);
 8003d80:	f503 60c0 	add.w	r0, r3, #1536	; 0x600
    conv2d_bias_array.data_start = AI_PTR(weights_map[0] + 1536);
 8003d84:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8003d88:	492a      	ldr	r1, [pc, #168]	; (8003e34 <ai_network_init+0xf4>)
 8003d8a:	6808      	ldr	r0, [r1, #0]
 8003d8c:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8003d90:	6008      	str	r0, [r1, #0]
    dense_weights_array.data = AI_PTR(weights_map[0] + 1632);
 8003d92:	f503 60cc 	add.w	r0, r3, #1632	; 0x660
    dense_weights_array.data_start = AI_PTR(weights_map[0] + 1632);
 8003d96:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8003d9a:	4927      	ldr	r1, [pc, #156]	; (8003e38 <ai_network_init+0xf8>)
 8003d9c:	6808      	ldr	r0, [r1, #0]
 8003d9e:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8003da2:	6008      	str	r0, [r1, #0]
    dense_bias_array.data = AI_PTR(weights_map[0] + 12000);
 8003da4:	f503 503b 	add.w	r0, r3, #11968	; 0x2ec0
 8003da8:	3020      	adds	r0, #32
    dense_bias_array.data_start = AI_PTR(weights_map[0] + 12000);
 8003daa:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8003dae:	4923      	ldr	r1, [pc, #140]	; (8003e3c <ai_network_init+0xfc>)
 8003db0:	6808      	ldr	r0, [r1, #0]
 8003db2:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8003db6:	6008      	str	r0, [r1, #0]
    dense_1_weights_array.data = AI_PTR(weights_map[0] + 12048);
 8003db8:	f503 503c 	add.w	r0, r3, #12032	; 0x2f00
 8003dbc:	3010      	adds	r0, #16
    dense_1_weights_array.data_start = AI_PTR(weights_map[0] + 12048);
 8003dbe:	e9c1 0002 	strd	r0, r0, [r1, #8]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8003dc2:	491f      	ldr	r1, [pc, #124]	; (8003e40 <ai_network_init+0x100>)
    dense_1_bias_array.data = AI_PTR(weights_map[0] + 12240);
 8003dc4:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8003dc8:	6808      	ldr	r0, [r1, #0]
    dense_1_bias_array.data = AI_PTR(weights_map[0] + 12240);
 8003dca:	3310      	adds	r3, #16
    dense_1_bias_array.data_start = AI_PTR(weights_map[0] + 12240);
 8003dcc:	e9c1 3302 	strd	r3, r3, [r1, #8]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8003dd0:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8003dd4:	6008      	str	r0, [r1, #0]
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8003dd6:	2500      	movs	r5, #0
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8003dd8:	2101      	movs	r1, #1
 8003dda:	a803      	add	r0, sp, #12
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8003ddc:	9503      	str	r5, [sp, #12]
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8003dde:	f000 f881 	bl	8003ee4 <ai_platform_get_activations_map>
 8003de2:	4607      	mov	r7, r0
 8003de4:	b1c8      	cbz	r0, 8003e1a <ai_network_init+0xda>
    input_0_output_array.data = AI_PTR(NULL);
 8003de6:	4b17      	ldr	r3, [pc, #92]	; (8003e44 <ai_network_init+0x104>)
    conv2d_output_array.data = AI_PTR(activations_map[0] + 864);
 8003de8:	4a17      	ldr	r2, [pc, #92]	; (8003e48 <ai_network_init+0x108>)
    input_0_output_array.data_start = AI_PTR(NULL);
 8003dea:	e9c3 5502 	strd	r5, r5, [r3, #8]
    conv2d_output_array.data = AI_PTR(activations_map[0] + 864);
 8003dee:	9b03      	ldr	r3, [sp, #12]
 8003df0:	f503 7158 	add.w	r1, r3, #864	; 0x360
    conv2d_output_array.data_start = AI_PTR(activations_map[0] + 864);
 8003df4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_output_array.data = AI_PTR(activations_map[0] + 0);
 8003df8:	4a14      	ldr	r2, [pc, #80]	; (8003e4c <ai_network_init+0x10c>)
    dense_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8003dfa:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_nl_output_array.data = AI_PTR(activations_map[0] + 48);
 8003dfe:	4a14      	ldr	r2, [pc, #80]	; (8003e50 <ai_network_init+0x110>)
 8003e00:	f103 0130 	add.w	r1, r3, #48	; 0x30
    dense_nl_output_array.data_start = AI_PTR(activations_map[0] + 48);
 8003e04:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_output_array.data = AI_PTR(activations_map[0] + 0);
 8003e08:	4a12      	ldr	r2, [pc, #72]	; (8003e54 <ai_network_init+0x114>)
    dense_1_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8003e0a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_nl_output_array.data = AI_PTR(NULL);
 8003e0e:	4a12      	ldr	r2, [pc, #72]	; (8003e58 <ai_network_init+0x118>)
    dense_1_nl_output_array.data_start = AI_PTR(NULL);
 8003e10:	e9c2 5502 	strd	r5, r5, [r2, #8]
    conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 0);
 8003e14:	4a11      	ldr	r2, [pc, #68]	; (8003e5c <ai_network_init+0x11c>)
    conv2d_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 8003e16:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8003e1a:	4630      	mov	r0, r6
 8003e1c:	f000 ff86 	bl	8004d2c <ai_platform_network_post_init>
 8003e20:	4038      	ands	r0, r7
 8003e22:	4020      	ands	r0, r4
 8003e24:	b2c0      	uxtb	r0, r0

  return ok;
}
 8003e26:	b005      	add	sp, #20
 8003e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	200004c8 	.word	0x200004c8
 8003e30:	200003cc 	.word	0x200003cc
 8003e34:	200006a0 	.word	0x200006a0
 8003e38:	200005e0 	.word	0x200005e0
 8003e3c:	200005b4 	.word	0x200005b4
 8003e40:	200004f4 	.word	0x200004f4
 8003e44:	20000714 	.word	0x20000714
 8003e48:	20000470 	.word	0x20000470
 8003e4c:	20000674 	.word	0x20000674
 8003e50:	20000648 	.word	0x20000648
 8003e54:	20000588 	.word	0x20000588
 8003e58:	2000055c 	.word	0x2000055c
 8003e5c:	2000049c 	.word	0x2000049c

08003e60 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8003e60:	f000 bff8 	b.w	8004e54 <ai_platform_network_process>

08003e64 <ai_network_forward>:
}

AI_API_ENTRY
ai_i32 ai_network_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 8003e64:	2200      	movs	r2, #0
 8003e66:	f000 bff5 	b.w	8004e54 <ai_platform_network_process>
	...

08003e6c <ai_network_data_weights_get>:
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_network_weights_map);

}
 8003e6c:	4800      	ldr	r0, [pc, #0]	; (8003e70 <ai_network_data_weights_get+0x4>)
 8003e6e:	4770      	bx	lr
 8003e70:	0800e020 	.word	0x0800e020

08003e74 <_ai_platform_acquire_crc>:
 8003e74:	2001      	movs	r0, #1
 8003e76:	4770      	bx	lr

08003e78 <_ai_platform_release_crc>:
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop

08003e7c <ai_platform_get_weights_map>:
 8003e7c:	b132      	cbz	r2, 8003e8c <ai_platform_get_weights_map+0x10>
 8003e7e:	6912      	ldr	r2, [r2, #16]
 8003e80:	b122      	cbz	r2, 8003e8c <ai_platform_get_weights_map+0x10>
 8003e82:	b110      	cbz	r0, 8003e8a <ai_platform_get_weights_map+0xe>
 8003e84:	b921      	cbnz	r1, 8003e90 <ai_platform_get_weights_map+0x14>
 8003e86:	4608      	mov	r0, r1
 8003e88:	4770      	bx	lr
 8003e8a:	4770      	bx	lr
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	4770      	bx	lr
 8003e90:	b470      	push	{r4, r5, r6}
 8003e92:	4b13      	ldr	r3, [pc, #76]	; (8003ee0 <ai_platform_get_weights_map+0x64>)
 8003e94:	6815      	ldr	r5, [r2, #0]
 8003e96:	429d      	cmp	r5, r3
 8003e98:	d007      	beq.n	8003eaa <ai_platform_get_weights_map+0x2e>
 8003e9a:	6002      	str	r2, [r0, #0]
 8003e9c:	f1a1 0001 	sub.w	r0, r1, #1
 8003ea0:	fab0 f080 	clz	r0, r0
 8003ea4:	0940      	lsrs	r0, r0, #5
 8003ea6:	bc70      	pop	{r4, r5, r6}
 8003ea8:	4770      	bx	lr
 8003eaa:	6854      	ldr	r4, [r2, #4]
 8003eac:	42ac      	cmp	r4, r5
 8003eae:	f102 0204 	add.w	r2, r2, #4
 8003eb2:	d011      	beq.n	8003ed8 <ai_platform_get_weights_map+0x5c>
 8003eb4:	1f03      	subs	r3, r0, #4
 8003eb6:	4616      	mov	r6, r2
 8003eb8:	2000      	movs	r0, #0
 8003eba:	e003      	b.n	8003ec4 <ai_platform_get_weights_map+0x48>
 8003ebc:	f856 4f04 	ldr.w	r4, [r6, #4]!
 8003ec0:	42ac      	cmp	r4, r5
 8003ec2:	d009      	beq.n	8003ed8 <ai_platform_get_weights_map+0x5c>
 8003ec4:	3001      	adds	r0, #1
 8003ec6:	4281      	cmp	r1, r0
 8003ec8:	f843 4f04 	str.w	r4, [r3, #4]!
 8003ecc:	d1f6      	bne.n	8003ebc <ai_platform_get_weights_map+0x40>
 8003ece:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003ed2:	4b03      	ldr	r3, [pc, #12]	; (8003ee0 <ai_platform_get_weights_map+0x64>)
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <ai_platform_get_weights_map+0x60>
 8003ed8:	2000      	movs	r0, #0
 8003eda:	e7e4      	b.n	8003ea6 <ai_platform_get_weights_map+0x2a>
 8003edc:	2001      	movs	r0, #1
 8003ede:	e7e2      	b.n	8003ea6 <ai_platform_get_weights_map+0x2a>
 8003ee0:	a1facade 	.word	0xa1facade

08003ee4 <ai_platform_get_activations_map>:
 8003ee4:	b132      	cbz	r2, 8003ef4 <ai_platform_get_activations_map+0x10>
 8003ee6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003ee8:	b122      	cbz	r2, 8003ef4 <ai_platform_get_activations_map+0x10>
 8003eea:	b110      	cbz	r0, 8003ef2 <ai_platform_get_activations_map+0xe>
 8003eec:	b921      	cbnz	r1, 8003ef8 <ai_platform_get_activations_map+0x14>
 8003eee:	4608      	mov	r0, r1
 8003ef0:	4770      	bx	lr
 8003ef2:	4770      	bx	lr
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	4770      	bx	lr
 8003ef8:	b470      	push	{r4, r5, r6}
 8003efa:	4b13      	ldr	r3, [pc, #76]	; (8003f48 <ai_platform_get_activations_map+0x64>)
 8003efc:	6815      	ldr	r5, [r2, #0]
 8003efe:	429d      	cmp	r5, r3
 8003f00:	d007      	beq.n	8003f12 <ai_platform_get_activations_map+0x2e>
 8003f02:	6002      	str	r2, [r0, #0]
 8003f04:	f1a1 0001 	sub.w	r0, r1, #1
 8003f08:	fab0 f080 	clz	r0, r0
 8003f0c:	0940      	lsrs	r0, r0, #5
 8003f0e:	bc70      	pop	{r4, r5, r6}
 8003f10:	4770      	bx	lr
 8003f12:	6854      	ldr	r4, [r2, #4]
 8003f14:	42ac      	cmp	r4, r5
 8003f16:	f102 0204 	add.w	r2, r2, #4
 8003f1a:	d011      	beq.n	8003f40 <ai_platform_get_activations_map+0x5c>
 8003f1c:	1f03      	subs	r3, r0, #4
 8003f1e:	4616      	mov	r6, r2
 8003f20:	2000      	movs	r0, #0
 8003f22:	e003      	b.n	8003f2c <ai_platform_get_activations_map+0x48>
 8003f24:	f856 4f04 	ldr.w	r4, [r6, #4]!
 8003f28:	42ac      	cmp	r4, r5
 8003f2a:	d009      	beq.n	8003f40 <ai_platform_get_activations_map+0x5c>
 8003f2c:	3001      	adds	r0, #1
 8003f2e:	4281      	cmp	r1, r0
 8003f30:	f843 4f04 	str.w	r4, [r3, #4]!
 8003f34:	d1f6      	bne.n	8003f24 <ai_platform_get_activations_map+0x40>
 8003f36:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003f3a:	4b03      	ldr	r3, [pc, #12]	; (8003f48 <ai_platform_get_activations_map+0x64>)
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d001      	beq.n	8003f44 <ai_platform_get_activations_map+0x60>
 8003f40:	2000      	movs	r0, #0
 8003f42:	e7e4      	b.n	8003f0e <ai_platform_get_activations_map+0x2a>
 8003f44:	2001      	movs	r0, #1
 8003f46:	e7e2      	b.n	8003f0e <ai_platform_get_activations_map+0x2a>
 8003f48:	a1facade 	.word	0xa1facade

08003f4c <ai_platform_runtime_get_revision>:
 8003f4c:	b508      	push	{r3, lr}
 8003f4e:	4a17      	ldr	r2, [pc, #92]	; (8003fac <ai_platform_runtime_get_revision+0x60>)
 8003f50:	6813      	ldr	r3, [r2, #0]
 8003f52:	f023 0301 	bic.w	r3, r3, #1
 8003f56:	6013      	str	r3, [r2, #0]
 8003f58:	f7ff ff8c 	bl	8003e74 <_ai_platform_acquire_crc>
 8003f5c:	4b14      	ldr	r3, [pc, #80]	; (8003fb0 <ai_platform_runtime_get_revision+0x64>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f68:	d00d      	beq.n	8003f86 <ai_platform_runtime_get_revision+0x3a>
 8003f6a:	4b12      	ldr	r3, [pc, #72]	; (8003fb4 <ai_platform_runtime_get_revision+0x68>)
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	2a00      	cmp	r2, #0
 8003f74:	d1fc      	bne.n	8003f70 <ai_platform_runtime_get_revision+0x24>
 8003f76:	4b10      	ldr	r3, [pc, #64]	; (8003fb8 <ai_platform_runtime_get_revision+0x6c>)
 8003f78:	4a10      	ldr	r2, [pc, #64]	; (8003fbc <ai_platform_runtime_get_revision+0x70>)
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	4b10      	ldr	r3, [pc, #64]	; (8003fc0 <ai_platform_runtime_get_revision+0x74>)
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d00e      	beq.n	8003fa2 <ai_platform_runtime_get_revision+0x56>
 8003f84:	e7fe      	b.n	8003f84 <ai_platform_runtime_get_revision+0x38>
 8003f86:	4b0f      	ldr	r3, [pc, #60]	; (8003fc4 <ai_platform_runtime_get_revision+0x78>)
 8003f88:	2201      	movs	r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	2a00      	cmp	r2, #0
 8003f90:	d1fc      	bne.n	8003f8c <ai_platform_runtime_get_revision+0x40>
 8003f92:	4b0d      	ldr	r3, [pc, #52]	; (8003fc8 <ai_platform_runtime_get_revision+0x7c>)
 8003f94:	4a09      	ldr	r2, [pc, #36]	; (8003fbc <ai_platform_runtime_get_revision+0x70>)
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <ai_platform_runtime_get_revision+0x74>)
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d000      	beq.n	8003fa2 <ai_platform_runtime_get_revision+0x56>
 8003fa0:	e7fe      	b.n	8003fa0 <ai_platform_runtime_get_revision+0x54>
 8003fa2:	f7ff ff69 	bl	8003e78 <_ai_platform_release_crc>
 8003fa6:	4809      	ldr	r0, [pc, #36]	; (8003fcc <ai_platform_runtime_get_revision+0x80>)
 8003fa8:	bd08      	pop	{r3, pc}
 8003faa:	bf00      	nop
 8003fac:	e0002000 	.word	0xe0002000
 8003fb0:	e0042000 	.word	0xe0042000
 8003fb4:	58024c08 	.word	0x58024c08
 8003fb8:	58024c00 	.word	0x58024c00
 8003fbc:	f407a5c2 	.word	0xf407a5c2
 8003fc0:	b5e8b5cd 	.word	0xb5e8b5cd
 8003fc4:	40023008 	.word	0x40023008
 8003fc8:	40023000 	.word	0x40023000
 8003fcc:	0800e02c 	.word	0x0800e02c

08003fd0 <ai_platform_runtime_get_version>:
 8003fd0:	b500      	push	{lr}
 8003fd2:	4a18      	ldr	r2, [pc, #96]	; (8004034 <ai_platform_runtime_get_version+0x64>)
 8003fd4:	6813      	ldr	r3, [r2, #0]
 8003fd6:	f023 0301 	bic.w	r3, r3, #1
 8003fda:	6013      	str	r3, [r2, #0]
 8003fdc:	b083      	sub	sp, #12
 8003fde:	f7ff ff49 	bl	8003e74 <_ai_platform_acquire_crc>
 8003fe2:	4b15      	ldr	r3, [pc, #84]	; (8004038 <ai_platform_runtime_get_version+0x68>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fee:	d00d      	beq.n	800400c <ai_platform_runtime_get_version+0x3c>
 8003ff0:	4b12      	ldr	r3, [pc, #72]	; (800403c <ai_platform_runtime_get_version+0x6c>)
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	2a00      	cmp	r2, #0
 8003ffa:	d1fc      	bne.n	8003ff6 <ai_platform_runtime_get_version+0x26>
 8003ffc:	4b10      	ldr	r3, [pc, #64]	; (8004040 <ai_platform_runtime_get_version+0x70>)
 8003ffe:	4a11      	ldr	r2, [pc, #68]	; (8004044 <ai_platform_runtime_get_version+0x74>)
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	4b10      	ldr	r3, [pc, #64]	; (8004048 <ai_platform_runtime_get_version+0x78>)
 8004006:	429a      	cmp	r2, r3
 8004008:	d00e      	beq.n	8004028 <ai_platform_runtime_get_version+0x58>
 800400a:	e7fe      	b.n	800400a <ai_platform_runtime_get_version+0x3a>
 800400c:	4b0f      	ldr	r3, [pc, #60]	; (800404c <ai_platform_runtime_get_version+0x7c>)
 800400e:	2201      	movs	r2, #1
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	2a00      	cmp	r2, #0
 8004016:	d1fc      	bne.n	8004012 <ai_platform_runtime_get_version+0x42>
 8004018:	4b0d      	ldr	r3, [pc, #52]	; (8004050 <ai_platform_runtime_get_version+0x80>)
 800401a:	4a0a      	ldr	r2, [pc, #40]	; (8004044 <ai_platform_runtime_get_version+0x74>)
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	4b09      	ldr	r3, [pc, #36]	; (8004048 <ai_platform_runtime_get_version+0x78>)
 8004022:	429a      	cmp	r2, r3
 8004024:	d000      	beq.n	8004028 <ai_platform_runtime_get_version+0x58>
 8004026:	e7fe      	b.n	8004026 <ai_platform_runtime_get_version+0x56>
 8004028:	f7ff ff26 	bl	8003e78 <_ai_platform_release_crc>
 800402c:	2007      	movs	r0, #7
 800402e:	b003      	add	sp, #12
 8004030:	f85d fb04 	ldr.w	pc, [sp], #4
 8004034:	e0002000 	.word	0xe0002000
 8004038:	e0042000 	.word	0xe0042000
 800403c:	58024c08 	.word	0x58024c08
 8004040:	58024c00 	.word	0x58024c00
 8004044:	f407a5c2 	.word	0xf407a5c2
 8004048:	b5e8b5cd 	.word	0xb5e8b5cd
 800404c:	40023008 	.word	0x40023008
 8004050:	40023000 	.word	0x40023000

08004054 <ai_platform_api_get_version>:
 8004054:	b500      	push	{lr}
 8004056:	4a20      	ldr	r2, [pc, #128]	; (80040d8 <ai_platform_api_get_version+0x84>)
 8004058:	6813      	ldr	r3, [r2, #0]
 800405a:	f023 0301 	bic.w	r3, r3, #1
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	b083      	sub	sp, #12
 8004062:	f7ff ff07 	bl	8003e74 <_ai_platform_acquire_crc>
 8004066:	4b1d      	ldr	r3, [pc, #116]	; (80040dc <ai_platform_api_get_version+0x88>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800406e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004072:	d00d      	beq.n	8004090 <ai_platform_api_get_version+0x3c>
 8004074:	4b1a      	ldr	r3, [pc, #104]	; (80040e0 <ai_platform_api_get_version+0x8c>)
 8004076:	2201      	movs	r2, #1
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	2a00      	cmp	r2, #0
 800407e:	d1fc      	bne.n	800407a <ai_platform_api_get_version+0x26>
 8004080:	4b18      	ldr	r3, [pc, #96]	; (80040e4 <ai_platform_api_get_version+0x90>)
 8004082:	4a19      	ldr	r2, [pc, #100]	; (80040e8 <ai_platform_api_get_version+0x94>)
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	4b18      	ldr	r3, [pc, #96]	; (80040ec <ai_platform_api_get_version+0x98>)
 800408a:	429a      	cmp	r2, r3
 800408c:	d00e      	beq.n	80040ac <ai_platform_api_get_version+0x58>
 800408e:	e7fe      	b.n	800408e <ai_platform_api_get_version+0x3a>
 8004090:	4b17      	ldr	r3, [pc, #92]	; (80040f0 <ai_platform_api_get_version+0x9c>)
 8004092:	2201      	movs	r2, #1
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	2a00      	cmp	r2, #0
 800409a:	d1fc      	bne.n	8004096 <ai_platform_api_get_version+0x42>
 800409c:	4b15      	ldr	r3, [pc, #84]	; (80040f4 <ai_platform_api_get_version+0xa0>)
 800409e:	4a12      	ldr	r2, [pc, #72]	; (80040e8 <ai_platform_api_get_version+0x94>)
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	4b11      	ldr	r3, [pc, #68]	; (80040ec <ai_platform_api_get_version+0x98>)
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d000      	beq.n	80040ac <ai_platform_api_get_version+0x58>
 80040aa:	e7fe      	b.n	80040aa <ai_platform_api_get_version+0x56>
 80040ac:	f7ff fee4 	bl	8003e78 <_ai_platform_release_crc>
 80040b0:	4b11      	ldr	r3, [pc, #68]	; (80040f8 <ai_platform_api_get_version+0xa4>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2000      	movs	r0, #0
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	f362 0007 	bfi	r0, r2, #0, #8
 80040bc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80040c0:	f362 200f 	bfi	r0, r2, #8, #8
 80040c4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80040c8:	f362 4017 	bfi	r0, r2, #16, #8
 80040cc:	0e1b      	lsrs	r3, r3, #24
 80040ce:	f363 601f 	bfi	r0, r3, #24, #8
 80040d2:	b003      	add	sp, #12
 80040d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80040d8:	e0002000 	.word	0xe0002000
 80040dc:	e0042000 	.word	0xe0042000
 80040e0:	58024c08 	.word	0x58024c08
 80040e4:	58024c00 	.word	0x58024c00
 80040e8:	f407a5c2 	.word	0xf407a5c2
 80040ec:	b5e8b5cd 	.word	0xb5e8b5cd
 80040f0:	40023008 	.word	0x40023008
 80040f4:	40023000 	.word	0x40023000
 80040f8:	0800e030 	.word	0x0800e030

080040fc <ai_platform_interface_api_get_version>:
 80040fc:	b500      	push	{lr}
 80040fe:	4a20      	ldr	r2, [pc, #128]	; (8004180 <ai_platform_interface_api_get_version+0x84>)
 8004100:	6813      	ldr	r3, [r2, #0]
 8004102:	f023 0301 	bic.w	r3, r3, #1
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	b083      	sub	sp, #12
 800410a:	f7ff feb3 	bl	8003e74 <_ai_platform_acquire_crc>
 800410e:	4b1d      	ldr	r3, [pc, #116]	; (8004184 <ai_platform_interface_api_get_version+0x88>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411a:	d00d      	beq.n	8004138 <ai_platform_interface_api_get_version+0x3c>
 800411c:	4b1a      	ldr	r3, [pc, #104]	; (8004188 <ai_platform_interface_api_get_version+0x8c>)
 800411e:	2201      	movs	r2, #1
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	2a00      	cmp	r2, #0
 8004126:	d1fc      	bne.n	8004122 <ai_platform_interface_api_get_version+0x26>
 8004128:	4b18      	ldr	r3, [pc, #96]	; (800418c <ai_platform_interface_api_get_version+0x90>)
 800412a:	4a19      	ldr	r2, [pc, #100]	; (8004190 <ai_platform_interface_api_get_version+0x94>)
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	4b18      	ldr	r3, [pc, #96]	; (8004194 <ai_platform_interface_api_get_version+0x98>)
 8004132:	429a      	cmp	r2, r3
 8004134:	d00e      	beq.n	8004154 <ai_platform_interface_api_get_version+0x58>
 8004136:	e7fe      	b.n	8004136 <ai_platform_interface_api_get_version+0x3a>
 8004138:	4b17      	ldr	r3, [pc, #92]	; (8004198 <ai_platform_interface_api_get_version+0x9c>)
 800413a:	2201      	movs	r2, #1
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	2a00      	cmp	r2, #0
 8004142:	d1fc      	bne.n	800413e <ai_platform_interface_api_get_version+0x42>
 8004144:	4b15      	ldr	r3, [pc, #84]	; (800419c <ai_platform_interface_api_get_version+0xa0>)
 8004146:	4a12      	ldr	r2, [pc, #72]	; (8004190 <ai_platform_interface_api_get_version+0x94>)
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	4b11      	ldr	r3, [pc, #68]	; (8004194 <ai_platform_interface_api_get_version+0x98>)
 800414e:	429a      	cmp	r2, r3
 8004150:	d000      	beq.n	8004154 <ai_platform_interface_api_get_version+0x58>
 8004152:	e7fe      	b.n	8004152 <ai_platform_interface_api_get_version+0x56>
 8004154:	f7ff fe90 	bl	8003e78 <_ai_platform_release_crc>
 8004158:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <ai_platform_interface_api_get_version+0xa4>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2000      	movs	r0, #0
 800415e:	b2da      	uxtb	r2, r3
 8004160:	f362 0007 	bfi	r0, r2, #0, #8
 8004164:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004168:	f362 200f 	bfi	r0, r2, #8, #8
 800416c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004170:	f362 4017 	bfi	r0, r2, #16, #8
 8004174:	0e1b      	lsrs	r3, r3, #24
 8004176:	f363 601f 	bfi	r0, r3, #24, #8
 800417a:	b003      	add	sp, #12
 800417c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004180:	e0002000 	.word	0xe0002000
 8004184:	e0042000 	.word	0xe0042000
 8004188:	58024c08 	.word	0x58024c08
 800418c:	58024c00 	.word	0x58024c00
 8004190:	f407a5c2 	.word	0xf407a5c2
 8004194:	b5e8b5cd 	.word	0xb5e8b5cd
 8004198:	40023008 	.word	0x40023008
 800419c:	40023000 	.word	0x40023000
 80041a0:	0800e034 	.word	0x0800e034

080041a4 <ai_platform_context_acquire>:
 80041a4:	b510      	push	{r4, lr}
 80041a6:	4604      	mov	r4, r0
 80041a8:	b120      	cbz	r0, 80041b4 <ai_platform_context_acquire+0x10>
 80041aa:	4b19      	ldr	r3, [pc, #100]	; (8004210 <ai_platform_context_acquire+0x6c>)
 80041ac:	6802      	ldr	r2, [r0, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	bf18      	it	ne
 80041b2:	2400      	movne	r4, #0
 80041b4:	4a17      	ldr	r2, [pc, #92]	; (8004214 <ai_platform_context_acquire+0x70>)
 80041b6:	6813      	ldr	r3, [r2, #0]
 80041b8:	f023 0301 	bic.w	r3, r3, #1
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	f7ff fe59 	bl	8003e74 <_ai_platform_acquire_crc>
 80041c2:	4b15      	ldr	r3, [pc, #84]	; (8004218 <ai_platform_context_acquire+0x74>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ce:	d00d      	beq.n	80041ec <ai_platform_context_acquire+0x48>
 80041d0:	4b12      	ldr	r3, [pc, #72]	; (800421c <ai_platform_context_acquire+0x78>)
 80041d2:	2201      	movs	r2, #1
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	2a00      	cmp	r2, #0
 80041da:	d1fc      	bne.n	80041d6 <ai_platform_context_acquire+0x32>
 80041dc:	4b10      	ldr	r3, [pc, #64]	; (8004220 <ai_platform_context_acquire+0x7c>)
 80041de:	4a11      	ldr	r2, [pc, #68]	; (8004224 <ai_platform_context_acquire+0x80>)
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	4b10      	ldr	r3, [pc, #64]	; (8004228 <ai_platform_context_acquire+0x84>)
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d00e      	beq.n	8004208 <ai_platform_context_acquire+0x64>
 80041ea:	e7fe      	b.n	80041ea <ai_platform_context_acquire+0x46>
 80041ec:	4b0f      	ldr	r3, [pc, #60]	; (800422c <ai_platform_context_acquire+0x88>)
 80041ee:	2201      	movs	r2, #1
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	2a00      	cmp	r2, #0
 80041f6:	d1fc      	bne.n	80041f2 <ai_platform_context_acquire+0x4e>
 80041f8:	4b0d      	ldr	r3, [pc, #52]	; (8004230 <ai_platform_context_acquire+0x8c>)
 80041fa:	4a0a      	ldr	r2, [pc, #40]	; (8004224 <ai_platform_context_acquire+0x80>)
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	4b09      	ldr	r3, [pc, #36]	; (8004228 <ai_platform_context_acquire+0x84>)
 8004202:	429a      	cmp	r2, r3
 8004204:	d000      	beq.n	8004208 <ai_platform_context_acquire+0x64>
 8004206:	e7fe      	b.n	8004206 <ai_platform_context_acquire+0x62>
 8004208:	f7ff fe36 	bl	8003e78 <_ai_platform_release_crc>
 800420c:	4620      	mov	r0, r4
 800420e:	bd10      	pop	{r4, pc}
 8004210:	a1c00100 	.word	0xa1c00100
 8004214:	e0002000 	.word	0xe0002000
 8004218:	e0042000 	.word	0xe0042000
 800421c:	58024c08 	.word	0x58024c08
 8004220:	58024c00 	.word	0x58024c00
 8004224:	f407a5c2 	.word	0xf407a5c2
 8004228:	b5e8b5cd 	.word	0xb5e8b5cd
 800422c:	40023008 	.word	0x40023008
 8004230:	40023000 	.word	0x40023000

08004234 <ai_platform_network_get_error>:
 8004234:	b510      	push	{r4, lr}
 8004236:	b120      	cbz	r0, 8004242 <ai_platform_network_get_error+0xe>
 8004238:	4b32      	ldr	r3, [pc, #200]	; (8004304 <ai_platform_network_get_error+0xd0>)
 800423a:	6802      	ldr	r2, [r0, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	4604      	mov	r4, r0
 8004240:	d02e      	beq.n	80042a0 <ai_platform_network_get_error+0x6c>
 8004242:	4a31      	ldr	r2, [pc, #196]	; (8004308 <ai_platform_network_get_error+0xd4>)
 8004244:	6813      	ldr	r3, [r2, #0]
 8004246:	f023 0301 	bic.w	r3, r3, #1
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	f7ff fe12 	bl	8003e74 <_ai_platform_acquire_crc>
 8004250:	4b2e      	ldr	r3, [pc, #184]	; (800430c <ai_platform_network_get_error+0xd8>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800425c:	d00d      	beq.n	800427a <ai_platform_network_get_error+0x46>
 800425e:	4b2c      	ldr	r3, [pc, #176]	; (8004310 <ai_platform_network_get_error+0xdc>)
 8004260:	2201      	movs	r2, #1
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	2a00      	cmp	r2, #0
 8004268:	d1fc      	bne.n	8004264 <ai_platform_network_get_error+0x30>
 800426a:	4b2a      	ldr	r3, [pc, #168]	; (8004314 <ai_platform_network_get_error+0xe0>)
 800426c:	4a2a      	ldr	r2, [pc, #168]	; (8004318 <ai_platform_network_get_error+0xe4>)
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	4b2a      	ldr	r3, [pc, #168]	; (800431c <ai_platform_network_get_error+0xe8>)
 8004274:	429a      	cmp	r2, r3
 8004276:	d00d      	beq.n	8004294 <ai_platform_network_get_error+0x60>
 8004278:	e7fe      	b.n	8004278 <ai_platform_network_get_error+0x44>
 800427a:	4b29      	ldr	r3, [pc, #164]	; (8004320 <ai_platform_network_get_error+0xec>)
 800427c:	2201      	movs	r2, #1
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	2a00      	cmp	r2, #0
 8004284:	d1fc      	bne.n	8004280 <ai_platform_network_get_error+0x4c>
 8004286:	4b27      	ldr	r3, [pc, #156]	; (8004324 <ai_platform_network_get_error+0xf0>)
 8004288:	4a23      	ldr	r2, [pc, #140]	; (8004318 <ai_platform_network_get_error+0xe4>)
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	4b23      	ldr	r3, [pc, #140]	; (800431c <ai_platform_network_get_error+0xe8>)
 8004290:	429a      	cmp	r2, r3
 8004292:	d104      	bne.n	800429e <ai_platform_network_get_error+0x6a>
 8004294:	f7ff fdf0 	bl	8003e78 <_ai_platform_release_crc>
 8004298:	f241 0010 	movw	r0, #4112	; 0x1010
 800429c:	bd10      	pop	{r4, pc}
 800429e:	e7fe      	b.n	800429e <ai_platform_network_get_error+0x6a>
 80042a0:	4a19      	ldr	r2, [pc, #100]	; (8004308 <ai_platform_network_get_error+0xd4>)
 80042a2:	6813      	ldr	r3, [r2, #0]
 80042a4:	f023 0301 	bic.w	r3, r3, #1
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	f7ff fde3 	bl	8003e74 <_ai_platform_acquire_crc>
 80042ae:	4b17      	ldr	r3, [pc, #92]	; (800430c <ai_platform_network_get_error+0xd8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ba:	d00d      	beq.n	80042d8 <ai_platform_network_get_error+0xa4>
 80042bc:	4b14      	ldr	r3, [pc, #80]	; (8004310 <ai_platform_network_get_error+0xdc>)
 80042be:	2201      	movs	r2, #1
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	2a00      	cmp	r2, #0
 80042c6:	d1fc      	bne.n	80042c2 <ai_platform_network_get_error+0x8e>
 80042c8:	4b12      	ldr	r3, [pc, #72]	; (8004314 <ai_platform_network_get_error+0xe0>)
 80042ca:	4a13      	ldr	r2, [pc, #76]	; (8004318 <ai_platform_network_get_error+0xe4>)
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	4b12      	ldr	r3, [pc, #72]	; (800431c <ai_platform_network_get_error+0xe8>)
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d00e      	beq.n	80042f4 <ai_platform_network_get_error+0xc0>
 80042d6:	e7fe      	b.n	80042d6 <ai_platform_network_get_error+0xa2>
 80042d8:	4b11      	ldr	r3, [pc, #68]	; (8004320 <ai_platform_network_get_error+0xec>)
 80042da:	2201      	movs	r2, #1
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	2a00      	cmp	r2, #0
 80042e2:	d1fc      	bne.n	80042de <ai_platform_network_get_error+0xaa>
 80042e4:	4b0f      	ldr	r3, [pc, #60]	; (8004324 <ai_platform_network_get_error+0xf0>)
 80042e6:	4a0c      	ldr	r2, [pc, #48]	; (8004318 <ai_platform_network_get_error+0xe4>)
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	4b0b      	ldr	r3, [pc, #44]	; (800431c <ai_platform_network_get_error+0xe8>)
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d000      	beq.n	80042f4 <ai_platform_network_get_error+0xc0>
 80042f2:	e7fe      	b.n	80042f2 <ai_platform_network_get_error+0xbe>
 80042f4:	f7ff fdc0 	bl	8003e78 <_ai_platform_release_crc>
 80042f8:	f104 0010 	add.w	r0, r4, #16
 80042fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004300:	f001 b828 	b.w	8005354 <core_get_error>
 8004304:	a1c00100 	.word	0xa1c00100
 8004308:	e0002000 	.word	0xe0002000
 800430c:	e0042000 	.word	0xe0042000
 8004310:	58024c08 	.word	0x58024c08
 8004314:	58024c00 	.word	0x58024c00
 8004318:	f407a5c2 	.word	0xf407a5c2
 800431c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004320:	40023008 	.word	0x40023008
 8004324:	40023000 	.word	0x40023000

08004328 <ai_platform_api_get_network_report>:
 8004328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800432c:	b083      	sub	sp, #12
 800432e:	b120      	cbz	r0, 800433a <ai_platform_api_get_network_report+0x12>
 8004330:	4ba1      	ldr	r3, [pc, #644]	; (80045b8 <ai_platform_api_get_network_report+0x290>)
 8004332:	6802      	ldr	r2, [r0, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	4605      	mov	r5, r0
 8004338:	d030      	beq.n	800439c <ai_platform_api_get_network_report+0x74>
 800433a:	4aa0      	ldr	r2, [pc, #640]	; (80045bc <ai_platform_api_get_network_report+0x294>)
 800433c:	6813      	ldr	r3, [r2, #0]
 800433e:	f023 0301 	bic.w	r3, r3, #1
 8004342:	6013      	str	r3, [r2, #0]
 8004344:	f7ff fd96 	bl	8003e74 <_ai_platform_acquire_crc>
 8004348:	4b9d      	ldr	r3, [pc, #628]	; (80045c0 <ai_platform_api_get_network_report+0x298>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004354:	d00d      	beq.n	8004372 <ai_platform_api_get_network_report+0x4a>
 8004356:	4b9b      	ldr	r3, [pc, #620]	; (80045c4 <ai_platform_api_get_network_report+0x29c>)
 8004358:	2201      	movs	r2, #1
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	2a00      	cmp	r2, #0
 8004360:	d1fc      	bne.n	800435c <ai_platform_api_get_network_report+0x34>
 8004362:	4b99      	ldr	r3, [pc, #612]	; (80045c8 <ai_platform_api_get_network_report+0x2a0>)
 8004364:	4a99      	ldr	r2, [pc, #612]	; (80045cc <ai_platform_api_get_network_report+0x2a4>)
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	4b99      	ldr	r3, [pc, #612]	; (80045d0 <ai_platform_api_get_network_report+0x2a8>)
 800436c:	429a      	cmp	r2, r3
 800436e:	d00d      	beq.n	800438c <ai_platform_api_get_network_report+0x64>
 8004370:	e7fe      	b.n	8004370 <ai_platform_api_get_network_report+0x48>
 8004372:	4b98      	ldr	r3, [pc, #608]	; (80045d4 <ai_platform_api_get_network_report+0x2ac>)
 8004374:	2201      	movs	r2, #1
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	2a00      	cmp	r2, #0
 800437c:	d1fc      	bne.n	8004378 <ai_platform_api_get_network_report+0x50>
 800437e:	4b96      	ldr	r3, [pc, #600]	; (80045d8 <ai_platform_api_get_network_report+0x2b0>)
 8004380:	4a92      	ldr	r2, [pc, #584]	; (80045cc <ai_platform_api_get_network_report+0x2a4>)
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	4b92      	ldr	r3, [pc, #584]	; (80045d0 <ai_platform_api_get_network_report+0x2a8>)
 8004388:	429a      	cmp	r2, r3
 800438a:	d106      	bne.n	800439a <ai_platform_api_get_network_report+0x72>
 800438c:	f7ff fd74 	bl	8003e78 <_ai_platform_release_crc>
 8004390:	2600      	movs	r6, #0
 8004392:	4630      	mov	r0, r6
 8004394:	b003      	add	sp, #12
 8004396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800439a:	e7fe      	b.n	800439a <ai_platform_api_get_network_report+0x72>
 800439c:	4a87      	ldr	r2, [pc, #540]	; (80045bc <ai_platform_api_get_network_report+0x294>)
 800439e:	6813      	ldr	r3, [r2, #0]
 80043a0:	f023 0301 	bic.w	r3, r3, #1
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	460c      	mov	r4, r1
 80043a8:	f7ff fd64 	bl	8003e74 <_ai_platform_acquire_crc>
 80043ac:	4b84      	ldr	r3, [pc, #528]	; (80045c0 <ai_platform_api_get_network_report+0x298>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b8:	d00d      	beq.n	80043d6 <ai_platform_api_get_network_report+0xae>
 80043ba:	4b82      	ldr	r3, [pc, #520]	; (80045c4 <ai_platform_api_get_network_report+0x29c>)
 80043bc:	2201      	movs	r2, #1
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	2a00      	cmp	r2, #0
 80043c4:	d1fc      	bne.n	80043c0 <ai_platform_api_get_network_report+0x98>
 80043c6:	4b80      	ldr	r3, [pc, #512]	; (80045c8 <ai_platform_api_get_network_report+0x2a0>)
 80043c8:	4a80      	ldr	r2, [pc, #512]	; (80045cc <ai_platform_api_get_network_report+0x2a4>)
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	4b80      	ldr	r3, [pc, #512]	; (80045d0 <ai_platform_api_get_network_report+0x2a8>)
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d00e      	beq.n	80043f2 <ai_platform_api_get_network_report+0xca>
 80043d4:	e7fe      	b.n	80043d4 <ai_platform_api_get_network_report+0xac>
 80043d6:	4b7f      	ldr	r3, [pc, #508]	; (80045d4 <ai_platform_api_get_network_report+0x2ac>)
 80043d8:	2201      	movs	r2, #1
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	2a00      	cmp	r2, #0
 80043e0:	d1fc      	bne.n	80043dc <ai_platform_api_get_network_report+0xb4>
 80043e2:	4b7d      	ldr	r3, [pc, #500]	; (80045d8 <ai_platform_api_get_network_report+0x2b0>)
 80043e4:	4a79      	ldr	r2, [pc, #484]	; (80045cc <ai_platform_api_get_network_report+0x2a4>)
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	4b79      	ldr	r3, [pc, #484]	; (80045d0 <ai_platform_api_get_network_report+0x2a8>)
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d000      	beq.n	80043f2 <ai_platform_api_get_network_report+0xca>
 80043f0:	e7fe      	b.n	80043f0 <ai_platform_api_get_network_report+0xc8>
 80043f2:	f7ff fd41 	bl	8003e78 <_ai_platform_release_crc>
 80043f6:	2c00      	cmp	r4, #0
 80043f8:	d07c      	beq.n	80044f4 <ai_platform_api_get_network_report+0x1cc>
 80043fa:	2300      	movs	r3, #0
 80043fc:	66e3      	str	r3, [r4, #108]	; 0x6c
 80043fe:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004400:	2a00      	cmp	r2, #0
 8004402:	d079      	beq.n	80044f8 <ai_platform_api_get_network_report+0x1d0>
 8004404:	2301      	movs	r3, #1
 8004406:	66e3      	str	r3, [r4, #108]	; 0x6c
 8004408:	6913      	ldr	r3, [r2, #16]
 800440a:	429a      	cmp	r2, r3
 800440c:	d00c      	beq.n	8004428 <ai_platform_api_get_network_report+0x100>
 800440e:	b15b      	cbz	r3, 8004428 <ai_platform_api_get_network_report+0x100>
 8004410:	2202      	movs	r2, #2
 8004412:	e003      	b.n	800441c <ai_platform_api_get_network_report+0xf4>
 8004414:	1c50      	adds	r0, r2, #1
 8004416:	460b      	mov	r3, r1
 8004418:	b121      	cbz	r1, 8004424 <ai_platform_api_get_network_report+0xfc>
 800441a:	4602      	mov	r2, r0
 800441c:	66e2      	str	r2, [r4, #108]	; 0x6c
 800441e:	6919      	ldr	r1, [r3, #16]
 8004420:	4299      	cmp	r1, r3
 8004422:	d1f7      	bne.n	8004414 <ai_platform_api_get_network_report+0xec>
 8004424:	2a00      	cmp	r2, #0
 8004426:	d067      	beq.n	80044f8 <ai_platform_api_get_network_report+0x1d0>
 8004428:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 80d6 	beq.w	80045dc <ai_platform_api_get_network_report+0x2b4>
 8004430:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8004432:	2f00      	cmp	r7, #0
 8004434:	f000 80d2 	beq.w	80045dc <ai_platform_api_get_network_report+0x2b4>
 8004438:	883b      	ldrh	r3, [r7, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 80ce 	beq.w	80045dc <ai_platform_api_get_network_report+0x2b4>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 80ca 	beq.w	80045dc <ai_platform_api_get_network_report+0x2b4>
 8004448:	681e      	ldr	r6, [r3, #0]
 800444a:	2e00      	cmp	r6, #0
 800444c:	f000 80c6 	beq.w	80045dc <ai_platform_api_get_network_report+0x2b4>
 8004450:	f04f 0800 	mov.w	r8, #0
 8004454:	4641      	mov	r1, r8
 8004456:	f04f 0b18 	mov.w	fp, #24
 800445a:	f04f 0a01 	mov.w	sl, #1
 800445e:	e019      	b.n	8004494 <ai_platform_api_get_network_report+0x16c>
 8004460:	f849 1038 	str.w	r1, [r9, r8, lsl #3]
 8004464:	6830      	ldr	r0, [r6, #0]
 8004466:	6050      	str	r0, [r2, #4]
 8004468:	2800      	cmp	r0, #0
 800446a:	d039      	beq.n	80044e0 <ai_platform_api_get_network_report+0x1b8>
 800446c:	8840      	ldrh	r0, [r0, #2]
 800446e:	2800      	cmp	r0, #0
 8004470:	d036      	beq.n	80044e0 <ai_platform_api_get_network_report+0x1b8>
 8004472:	f849 a00c 	str.w	sl, [r9, ip]
 8004476:	615a      	str	r2, [r3, #20]
 8004478:	8838      	ldrh	r0, [r7, #0]
 800447a:	f108 0301 	add.w	r3, r8, #1
 800447e:	4283      	cmp	r3, r0
 8004480:	4698      	mov	r8, r3
 8004482:	b29a      	uxth	r2, r3
 8004484:	d240      	bcs.n	8004508 <ai_platform_api_get_network_report+0x1e0>
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	2800      	cmp	r0, #0
 800448a:	d03d      	beq.n	8004508 <ai_platform_api_get_network_report+0x1e0>
 800448c:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
 8004490:	2e00      	cmp	r6, #0
 8004492:	d039      	beq.n	8004508 <ai_platform_api_get_network_report+0x1e0>
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	69b2      	ldr	r2, [r6, #24]
 8004498:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800449c:	6810      	ldr	r0, [r2, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	9101      	str	r1, [sp, #4]
 80044a2:	9200      	str	r2, [sp, #0]
 80044a4:	f003 f8b8 	bl	8007618 <ai_array_to_buffer_fmt>
 80044a8:	9a00      	ldr	r2, [sp, #0]
 80044aa:	9901      	ldr	r1, [sp, #4]
 80044ac:	fb0b fc08 	mul.w	ip, fp, r8
 80044b0:	eb02 030c 	add.w	r3, r2, ip
 80044b4:	f842 000c 	str.w	r0, [r2, ip]
 80044b8:	f8a3 a004 	strh.w	sl, [r3, #4]
 80044bc:	68f2      	ldr	r2, [r6, #12]
 80044be:	68d2      	ldr	r2, [r2, #12]
 80044c0:	80da      	strh	r2, [r3, #6]
 80044c2:	68f2      	ldr	r2, [r6, #12]
 80044c4:	6892      	ldr	r2, [r2, #8]
 80044c6:	811a      	strh	r2, [r3, #8]
 80044c8:	68f2      	ldr	r2, [r6, #12]
 80044ca:	6852      	ldr	r2, [r2, #4]
 80044cc:	60da      	str	r2, [r3, #12]
 80044ce:	69b2      	ldr	r2, [r6, #24]
 80044d0:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 80044d4:	6892      	ldr	r2, [r2, #8]
 80044d6:	611a      	str	r2, [r3, #16]
 80044d8:	eb09 020c 	add.w	r2, r9, ip
 80044dc:	2a00      	cmp	r2, #0
 80044de:	d1bf      	bne.n	8004460 <ai_platform_api_get_network_report+0x138>
 80044e0:	2200      	movs	r2, #0
 80044e2:	e7c8      	b.n	8004476 <ai_platform_api_get_network_report+0x14e>
 80044e4:	2300      	movs	r3, #0
 80044e6:	8663      	strh	r3, [r4, #50]	; 0x32
 80044e8:	f105 0010 	add.w	r0, r5, #16
 80044ec:	2218      	movs	r2, #24
 80044ee:	2113      	movs	r1, #19
 80044f0:	f000 ff36 	bl	8005360 <core_set_error>
 80044f4:	2600      	movs	r6, #0
 80044f6:	e74c      	b.n	8004392 <ai_platform_api_get_network_report+0x6a>
 80044f8:	f105 0010 	add.w	r0, r5, #16
 80044fc:	2218      	movs	r2, #24
 80044fe:	2111      	movs	r1, #17
 8004500:	f000 ff2e 	bl	8005360 <core_set_error>
 8004504:	2600      	movs	r6, #0
 8004506:	e744      	b.n	8004392 <ai_platform_api_get_network_report+0x6a>
 8004508:	2a00      	cmp	r2, #0
 800450a:	d067      	beq.n	80045dc <ai_platform_api_get_network_report+0x2b4>
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	6363      	str	r3, [r4, #52]	; 0x34
 8004512:	8622      	strh	r2, [r4, #48]	; 0x30
 8004514:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8004516:	2b01      	cmp	r3, #1
 8004518:	d9e4      	bls.n	80044e4 <ai_platform_api_get_network_report+0x1bc>
 800451a:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800451e:	2600      	movs	r6, #0
 8004520:	f108 0a0c 	add.w	sl, r8, #12
 8004524:	4631      	mov	r1, r6
 8004526:	f04f 0b01 	mov.w	fp, #1
 800452a:	b2b3      	uxth	r3, r6
 800452c:	f1ba 0f00 	cmp.w	sl, #0
 8004530:	d05f      	beq.n	80045f2 <ai_platform_api_get_network_report+0x2ca>
 8004532:	f8b8 000c 	ldrh.w	r0, [r8, #12]
 8004536:	4286      	cmp	r6, r0
 8004538:	d25b      	bcs.n	80045f2 <ai_platform_api_get_network_report+0x2ca>
 800453a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800453e:	2800      	cmp	r0, #0
 8004540:	d057      	beq.n	80045f2 <ai_platform_api_get_network_report+0x2ca>
 8004542:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8004546:	2f00      	cmp	r7, #0
 8004548:	d053      	beq.n	80045f2 <ai_platform_api_get_network_report+0x2ca>
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	6853      	ldr	r3, [r2, #4]
 8004554:	9101      	str	r1, [sp, #4]
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800455c:	f003 f85c 	bl	8007618 <ai_array_to_buffer_fmt>
 8004560:	2318      	movs	r3, #24
 8004562:	fb03 fe06 	mul.w	lr, r3, r6
 8004566:	9b00      	ldr	r3, [sp, #0]
 8004568:	9901      	ldr	r1, [sp, #4]
 800456a:	f843 000e 	str.w	r0, [r3, lr]
 800456e:	eb03 0c0e 	add.w	ip, r3, lr
 8004572:	00f0      	lsls	r0, r6, #3
 8004574:	f8ac b004 	strh.w	fp, [ip, #4]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f8ac 3006 	strh.w	r3, [ip, #6]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f8ac 3008 	strh.w	r3, [ip, #8]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f8cc 300c 	str.w	r3, [ip, #12]
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f8cc 3010 	str.w	r3, [ip, #16]
 8004598:	eb09 0300 	add.w	r3, r9, r0
 800459c:	b33b      	cbz	r3, 80045ee <ai_platform_api_get_network_report+0x2c6>
 800459e:	f849 1036 	str.w	r1, [r9, r6, lsl #3]
 80045a2:	683f      	ldr	r7, [r7, #0]
 80045a4:	605f      	str	r7, [r3, #4]
 80045a6:	b317      	cbz	r7, 80045ee <ai_platform_api_get_network_report+0x2c6>
 80045a8:	887f      	ldrh	r7, [r7, #2]
 80045aa:	b307      	cbz	r7, 80045ee <ai_platform_api_get_network_report+0x2c6>
 80045ac:	f849 b000 	str.w	fp, [r9, r0]
 80045b0:	f8cc 3014 	str.w	r3, [ip, #20]
 80045b4:	3601      	adds	r6, #1
 80045b6:	e7b8      	b.n	800452a <ai_platform_api_get_network_report+0x202>
 80045b8:	a1c00100 	.word	0xa1c00100
 80045bc:	e0002000 	.word	0xe0002000
 80045c0:	e0042000 	.word	0xe0042000
 80045c4:	58024c08 	.word	0x58024c08
 80045c8:	58024c00 	.word	0x58024c00
 80045cc:	f407a5c2 	.word	0xf407a5c2
 80045d0:	b5e8b5cd 	.word	0xb5e8b5cd
 80045d4:	40023008 	.word	0x40023008
 80045d8:	40023000 	.word	0x40023000
 80045dc:	2600      	movs	r6, #0
 80045de:	f105 0010 	add.w	r0, r5, #16
 80045e2:	8626      	strh	r6, [r4, #48]	; 0x30
 80045e4:	2218      	movs	r2, #24
 80045e6:	2112      	movs	r1, #18
 80045e8:	f000 feba 	bl	8005360 <core_set_error>
 80045ec:	e6d1      	b.n	8004392 <ai_platform_api_get_network_report+0x6a>
 80045ee:	2300      	movs	r3, #0
 80045f0:	e7de      	b.n	80045b0 <ai_platform_api_get_network_report+0x288>
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f43f af77 	beq.w	80044e6 <ai_platform_api_get_network_report+0x1be>
 80045f8:	f8da 2008 	ldr.w	r2, [sl, #8]
 80045fc:	6852      	ldr	r2, [r2, #4]
 80045fe:	63a2      	str	r2, [r4, #56]	; 0x38
 8004600:	8663      	strh	r3, [r4, #50]	; 0x32
 8004602:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004604:	b16b      	cbz	r3, 8004622 <ai_platform_api_get_network_report+0x2fa>
 8004606:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8004608:	b15b      	cbz	r3, 8004622 <ai_platform_api_get_network_report+0x2fa>
 800460a:	6a2b      	ldr	r3, [r5, #32]
 800460c:	b10b      	cbz	r3, 8004612 <ai_platform_api_get_network_report+0x2ea>
 800460e:	8beb      	ldrh	r3, [r5, #30]
 8004610:	b97b      	cbnz	r3, 8004632 <ai_platform_api_get_network_report+0x30a>
 8004612:	f105 0010 	add.w	r0, r5, #16
 8004616:	2212      	movs	r2, #18
 8004618:	2111      	movs	r1, #17
 800461a:	f000 fea1 	bl	8005360 <core_set_error>
 800461e:	2600      	movs	r6, #0
 8004620:	e6b7      	b.n	8004392 <ai_platform_api_get_network_report+0x6a>
 8004622:	f105 0010 	add.w	r0, r5, #16
 8004626:	2213      	movs	r2, #19
 8004628:	2111      	movs	r1, #17
 800462a:	f000 fe99 	bl	8005360 <core_set_error>
 800462e:	2600      	movs	r6, #0
 8004630:	e6af      	b.n	8004392 <ai_platform_api_get_network_report+0x6a>
 8004632:	686b      	ldr	r3, [r5, #4]
 8004634:	4a83      	ldr	r2, [pc, #524]	; (8004844 <ai_platform_api_get_network_report+0x51c>)
 8004636:	6723      	str	r3, [r4, #112]	; 0x70
 8004638:	6813      	ldr	r3, [r2, #0]
 800463a:	f023 0301 	bic.w	r3, r3, #1
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	f7ff fc18 	bl	8003e74 <_ai_platform_acquire_crc>
 8004644:	4b80      	ldr	r3, [pc, #512]	; (8004848 <ai_platform_api_get_network_report+0x520>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800464c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004650:	d00d      	beq.n	800466e <ai_platform_api_get_network_report+0x346>
 8004652:	4b7e      	ldr	r3, [pc, #504]	; (800484c <ai_platform_api_get_network_report+0x524>)
 8004654:	2201      	movs	r2, #1
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	2a00      	cmp	r2, #0
 800465c:	d1fc      	bne.n	8004658 <ai_platform_api_get_network_report+0x330>
 800465e:	4b7c      	ldr	r3, [pc, #496]	; (8004850 <ai_platform_api_get_network_report+0x528>)
 8004660:	4a7c      	ldr	r2, [pc, #496]	; (8004854 <ai_platform_api_get_network_report+0x52c>)
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	4b7c      	ldr	r3, [pc, #496]	; (8004858 <ai_platform_api_get_network_report+0x530>)
 8004668:	429a      	cmp	r2, r3
 800466a:	d00e      	beq.n	800468a <ai_platform_api_get_network_report+0x362>
 800466c:	e7fe      	b.n	800466c <ai_platform_api_get_network_report+0x344>
 800466e:	4b7b      	ldr	r3, [pc, #492]	; (800485c <ai_platform_api_get_network_report+0x534>)
 8004670:	2201      	movs	r2, #1
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	2a00      	cmp	r2, #0
 8004678:	d1fc      	bne.n	8004674 <ai_platform_api_get_network_report+0x34c>
 800467a:	4b79      	ldr	r3, [pc, #484]	; (8004860 <ai_platform_api_get_network_report+0x538>)
 800467c:	4a75      	ldr	r2, [pc, #468]	; (8004854 <ai_platform_api_get_network_report+0x52c>)
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	4b75      	ldr	r3, [pc, #468]	; (8004858 <ai_platform_api_get_network_report+0x530>)
 8004684:	429a      	cmp	r2, r3
 8004686:	d000      	beq.n	800468a <ai_platform_api_get_network_report+0x362>
 8004688:	e7fe      	b.n	8004688 <ai_platform_api_get_network_report+0x360>
 800468a:	f7ff fbf5 	bl	8003e78 <_ai_platform_release_crc>
 800468e:	4a6d      	ldr	r2, [pc, #436]	; (8004844 <ai_platform_api_get_network_report+0x51c>)
 8004690:	4b74      	ldr	r3, [pc, #464]	; (8004864 <ai_platform_api_get_network_report+0x53c>)
 8004692:	6123      	str	r3, [r4, #16]
 8004694:	6813      	ldr	r3, [r2, #0]
 8004696:	f023 0301 	bic.w	r3, r3, #1
 800469a:	6013      	str	r3, [r2, #0]
 800469c:	f7ff fbea 	bl	8003e74 <_ai_platform_acquire_crc>
 80046a0:	4b69      	ldr	r3, [pc, #420]	; (8004848 <ai_platform_api_get_network_report+0x520>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ac:	d00d      	beq.n	80046ca <ai_platform_api_get_network_report+0x3a2>
 80046ae:	4b67      	ldr	r3, [pc, #412]	; (800484c <ai_platform_api_get_network_report+0x524>)
 80046b0:	2201      	movs	r2, #1
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	2a00      	cmp	r2, #0
 80046b8:	d1fc      	bne.n	80046b4 <ai_platform_api_get_network_report+0x38c>
 80046ba:	4b65      	ldr	r3, [pc, #404]	; (8004850 <ai_platform_api_get_network_report+0x528>)
 80046bc:	4a65      	ldr	r2, [pc, #404]	; (8004854 <ai_platform_api_get_network_report+0x52c>)
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	4b65      	ldr	r3, [pc, #404]	; (8004858 <ai_platform_api_get_network_report+0x530>)
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d00e      	beq.n	80046e6 <ai_platform_api_get_network_report+0x3be>
 80046c8:	e7fe      	b.n	80046c8 <ai_platform_api_get_network_report+0x3a0>
 80046ca:	4b64      	ldr	r3, [pc, #400]	; (800485c <ai_platform_api_get_network_report+0x534>)
 80046cc:	2201      	movs	r2, #1
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	2a00      	cmp	r2, #0
 80046d4:	d1fc      	bne.n	80046d0 <ai_platform_api_get_network_report+0x3a8>
 80046d6:	4b62      	ldr	r3, [pc, #392]	; (8004860 <ai_platform_api_get_network_report+0x538>)
 80046d8:	4a5e      	ldr	r2, [pc, #376]	; (8004854 <ai_platform_api_get_network_report+0x52c>)
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	4b5e      	ldr	r3, [pc, #376]	; (8004858 <ai_platform_api_get_network_report+0x530>)
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d000      	beq.n	80046e6 <ai_platform_api_get_network_report+0x3be>
 80046e4:	e7fe      	b.n	80046e4 <ai_platform_api_get_network_report+0x3bc>
 80046e6:	f7ff fbc7 	bl	8003e78 <_ai_platform_release_crc>
 80046ea:	4a56      	ldr	r2, [pc, #344]	; (8004844 <ai_platform_api_get_network_report+0x51c>)
 80046ec:	2307      	movs	r3, #7
 80046ee:	6163      	str	r3, [r4, #20]
 80046f0:	6813      	ldr	r3, [r2, #0]
 80046f2:	f023 0301 	bic.w	r3, r3, #1
 80046f6:	6013      	str	r3, [r2, #0]
 80046f8:	f7ff fbbc 	bl	8003e74 <_ai_platform_acquire_crc>
 80046fc:	4b52      	ldr	r3, [pc, #328]	; (8004848 <ai_platform_api_get_network_report+0x520>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004708:	d00d      	beq.n	8004726 <ai_platform_api_get_network_report+0x3fe>
 800470a:	4b50      	ldr	r3, [pc, #320]	; (800484c <ai_platform_api_get_network_report+0x524>)
 800470c:	2201      	movs	r2, #1
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	2a00      	cmp	r2, #0
 8004714:	d1fc      	bne.n	8004710 <ai_platform_api_get_network_report+0x3e8>
 8004716:	4b4e      	ldr	r3, [pc, #312]	; (8004850 <ai_platform_api_get_network_report+0x528>)
 8004718:	4a4e      	ldr	r2, [pc, #312]	; (8004854 <ai_platform_api_get_network_report+0x52c>)
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	4b4e      	ldr	r3, [pc, #312]	; (8004858 <ai_platform_api_get_network_report+0x530>)
 8004720:	429a      	cmp	r2, r3
 8004722:	d00e      	beq.n	8004742 <ai_platform_api_get_network_report+0x41a>
 8004724:	e7fe      	b.n	8004724 <ai_platform_api_get_network_report+0x3fc>
 8004726:	4b4d      	ldr	r3, [pc, #308]	; (800485c <ai_platform_api_get_network_report+0x534>)
 8004728:	2201      	movs	r2, #1
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	2a00      	cmp	r2, #0
 8004730:	d1fc      	bne.n	800472c <ai_platform_api_get_network_report+0x404>
 8004732:	4b4b      	ldr	r3, [pc, #300]	; (8004860 <ai_platform_api_get_network_report+0x538>)
 8004734:	4a47      	ldr	r2, [pc, #284]	; (8004854 <ai_platform_api_get_network_report+0x52c>)
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	4b47      	ldr	r3, [pc, #284]	; (8004858 <ai_platform_api_get_network_report+0x530>)
 800473c:	429a      	cmp	r2, r3
 800473e:	d000      	beq.n	8004742 <ai_platform_api_get_network_report+0x41a>
 8004740:	e7fe      	b.n	8004740 <ai_platform_api_get_network_report+0x418>
 8004742:	f7ff fb99 	bl	8003e78 <_ai_platform_release_crc>
 8004746:	4a3f      	ldr	r2, [pc, #252]	; (8004844 <ai_platform_api_get_network_report+0x51c>)
 8004748:	f240 1301 	movw	r3, #257	; 0x101
 800474c:	6263      	str	r3, [r4, #36]	; 0x24
 800474e:	6813      	ldr	r3, [r2, #0]
 8004750:	f023 0301 	bic.w	r3, r3, #1
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	f7ff fb8d 	bl	8003e74 <_ai_platform_acquire_crc>
 800475a:	4b3b      	ldr	r3, [pc, #236]	; (8004848 <ai_platform_api_get_network_report+0x520>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004766:	d00d      	beq.n	8004784 <ai_platform_api_get_network_report+0x45c>
 8004768:	4b38      	ldr	r3, [pc, #224]	; (800484c <ai_platform_api_get_network_report+0x524>)
 800476a:	2201      	movs	r2, #1
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	2a00      	cmp	r2, #0
 8004772:	d1fc      	bne.n	800476e <ai_platform_api_get_network_report+0x446>
 8004774:	4b36      	ldr	r3, [pc, #216]	; (8004850 <ai_platform_api_get_network_report+0x528>)
 8004776:	4a37      	ldr	r2, [pc, #220]	; (8004854 <ai_platform_api_get_network_report+0x52c>)
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	4b36      	ldr	r3, [pc, #216]	; (8004858 <ai_platform_api_get_network_report+0x530>)
 800477e:	429a      	cmp	r2, r3
 8004780:	d00e      	beq.n	80047a0 <ai_platform_api_get_network_report+0x478>
 8004782:	e7fe      	b.n	8004782 <ai_platform_api_get_network_report+0x45a>
 8004784:	4b35      	ldr	r3, [pc, #212]	; (800485c <ai_platform_api_get_network_report+0x534>)
 8004786:	2201      	movs	r2, #1
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	2a00      	cmp	r2, #0
 800478e:	d1fc      	bne.n	800478a <ai_platform_api_get_network_report+0x462>
 8004790:	4b33      	ldr	r3, [pc, #204]	; (8004860 <ai_platform_api_get_network_report+0x538>)
 8004792:	4a30      	ldr	r2, [pc, #192]	; (8004854 <ai_platform_api_get_network_report+0x52c>)
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	4b2f      	ldr	r3, [pc, #188]	; (8004858 <ai_platform_api_get_network_report+0x530>)
 800479a:	429a      	cmp	r2, r3
 800479c:	d000      	beq.n	80047a0 <ai_platform_api_get_network_report+0x478>
 800479e:	e7fe      	b.n	800479e <ai_platform_api_get_network_report+0x476>
 80047a0:	f7ff fb6a 	bl	8003e78 <_ai_platform_release_crc>
 80047a4:	f240 4301 	movw	r3, #1025	; 0x401
 80047a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80047aa:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80047ac:	4a2e      	ldr	r2, [pc, #184]	; (8004868 <ai_platform_api_get_network_report+0x540>)
 80047ae:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80047b0:	0e18      	lsrs	r0, r3, #24
 80047b2:	f884 0020 	strb.w	r0, [r4, #32]
 80047b6:	0c18      	lsrs	r0, r3, #16
 80047b8:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
 80047bc:	0a1b      	lsrs	r3, r3, #8
 80047be:	2000      	movs	r0, #0
 80047c0:	4291      	cmp	r1, r2
 80047c2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 80047c6:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
 80047ca:	d019      	beq.n	8004800 <ai_platform_api_get_network_report+0x4d8>
 80047cc:	6aae      	ldr	r6, [r5, #40]	; 0x28
 80047ce:	b386      	cbz	r6, 8004832 <ai_platform_api_get_network_report+0x50a>
 80047d0:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 80047d2:	b373      	cbz	r3, 8004832 <ai_platform_api_get_network_report+0x50a>
 80047d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80047d6:	f104 0754 	add.w	r7, r4, #84	; 0x54
 80047da:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80047dc:	e896 0003 	ldmia.w	r6, {r0, r1}
 80047e0:	e887 0003 	stmia.w	r7, {r0, r1}
 80047e4:	6a2b      	ldr	r3, [r5, #32]
 80047e6:	b1db      	cbz	r3, 8004820 <ai_platform_api_get_network_report+0x4f8>
 80047e8:	8bea      	ldrh	r2, [r5, #30]
 80047ea:	b1ca      	cbz	r2, 8004820 <ai_platform_api_get_network_report+0x4f8>
 80047ec:	461d      	mov	r5, r3
 80047ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047f0:	343c      	adds	r4, #60	; 0x3c
 80047f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80047f8:	2601      	movs	r6, #1
 80047fa:	e884 0003 	stmia.w	r4, {r0, r1}
 80047fe:	e5c8      	b.n	8004392 <ai_platform_api_get_network_report+0x6a>
 8004800:	f105 0324 	add.w	r3, r5, #36	; 0x24
 8004804:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004808:	f104 0348 	add.w	r3, r4, #72	; 0x48
 800480c:	e883 0003 	stmia.w	r3, {r0, r1}
 8004810:	351c      	adds	r5, #28
 8004812:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004816:	3440      	adds	r4, #64	; 0x40
 8004818:	e884 0003 	stmia.w	r4, {r0, r1}
 800481c:	2601      	movs	r6, #1
 800481e:	e5b8      	b.n	8004392 <ai_platform_api_get_network_report+0x6a>
 8004820:	2500      	movs	r5, #0
 8004822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004824:	343c      	adds	r4, #60	; 0x3c
 8004826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004828:	e895 0003 	ldmia.w	r5, {r0, r1}
 800482c:	e884 0003 	stmia.w	r4, {r0, r1}
 8004830:	deff      	udf	#255	; 0xff
 8004832:	2500      	movs	r5, #0
 8004834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004836:	3454      	adds	r4, #84	; 0x54
 8004838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800483a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800483e:	e884 0003 	stmia.w	r4, {r0, r1}
 8004842:	deff      	udf	#255	; 0xff
 8004844:	e0002000 	.word	0xe0002000
 8004848:	e0042000 	.word	0xe0042000
 800484c:	58024c08 	.word	0x58024c08
 8004850:	58024c00 	.word	0x58024c00
 8004854:	f407a5c2 	.word	0xf407a5c2
 8004858:	b5e8b5cd 	.word	0xb5e8b5cd
 800485c:	40023008 	.word	0x40023008
 8004860:	40023000 	.word	0x40023000
 8004864:	0800e02c 	.word	0x0800e02c
 8004868:	a1facade 	.word	0xa1facade

0800486c <ai_platform_network_create>:
 800486c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004870:	b082      	sub	sp, #8
 8004872:	4607      	mov	r7, r0
 8004874:	4616      	mov	r6, r2
 8004876:	461d      	mov	r5, r3
 8004878:	f89d 4020 	ldrb.w	r4, [sp, #32]
 800487c:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 8004880:	f7ff faf8 	bl	8003e74 <_ai_platform_acquire_crc>
 8004884:	b178      	cbz	r0, 80048a6 <ai_platform_network_create+0x3a>
 8004886:	4b5a      	ldr	r3, [pc, #360]	; (80049f0 <ai_platform_network_create+0x184>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800488e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004892:	4602      	mov	r2, r0
 8004894:	d00c      	beq.n	80048b0 <ai_platform_network_create+0x44>
 8004896:	4b57      	ldr	r3, [pc, #348]	; (80049f4 <ai_platform_network_create+0x188>)
 8004898:	2118      	movs	r1, #24
 800489a:	6019      	str	r1, [r3, #0]
 800489c:	6819      	ldr	r1, [r3, #0]
 800489e:	2918      	cmp	r1, #24
 80048a0:	d034      	beq.n	800490c <ai_platform_network_create+0xa0>
 80048a2:	f7ff fae9 	bl	8003e78 <_ai_platform_release_crc>
 80048a6:	f241 0033 	movw	r0, #4147	; 0x1033
 80048aa:	b002      	add	sp, #8
 80048ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048b0:	4b51      	ldr	r3, [pc, #324]	; (80049f8 <ai_platform_network_create+0x18c>)
 80048b2:	2101      	movs	r1, #1
 80048b4:	6019      	str	r1, [r3, #0]
 80048b6:	2114      	movs	r1, #20
 80048b8:	e001      	b.n	80048be <ai_platform_network_create+0x52>
 80048ba:	3901      	subs	r1, #1
 80048bc:	d002      	beq.n	80048c4 <ai_platform_network_create+0x58>
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	2800      	cmp	r0, #0
 80048c2:	d1fa      	bne.n	80048ba <ai_platform_network_create+0x4e>
 80048c4:	4b4c      	ldr	r3, [pc, #304]	; (80049f8 <ai_platform_network_create+0x18c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	b9f3      	cbnz	r3, 8004908 <ai_platform_network_create+0x9c>
 80048ca:	4610      	mov	r0, r2
 80048cc:	f7ff fad4 	bl	8003e78 <_ai_platform_release_crc>
 80048d0:	4a4a      	ldr	r2, [pc, #296]	; (80049fc <ai_platform_network_create+0x190>)
 80048d2:	6813      	ldr	r3, [r2, #0]
 80048d4:	f023 0301 	bic.w	r3, r3, #1
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	f7ff facb 	bl	8003e74 <_ai_platform_acquire_crc>
 80048de:	4b44      	ldr	r3, [pc, #272]	; (80049f0 <ai_platform_network_create+0x184>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ea:	d015      	beq.n	8004918 <ai_platform_network_create+0xac>
 80048ec:	4b41      	ldr	r3, [pc, #260]	; (80049f4 <ai_platform_network_create+0x188>)
 80048ee:	2201      	movs	r2, #1
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	2a00      	cmp	r2, #0
 80048f6:	d1fc      	bne.n	80048f2 <ai_platform_network_create+0x86>
 80048f8:	4b41      	ldr	r3, [pc, #260]	; (8004a00 <ai_platform_network_create+0x194>)
 80048fa:	4a42      	ldr	r2, [pc, #264]	; (8004a04 <ai_platform_network_create+0x198>)
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	4b41      	ldr	r3, [pc, #260]	; (8004a08 <ai_platform_network_create+0x19c>)
 8004902:	429a      	cmp	r2, r3
 8004904:	d016      	beq.n	8004934 <ai_platform_network_create+0xc8>
 8004906:	e7fe      	b.n	8004906 <ai_platform_network_create+0x9a>
 8004908:	4610      	mov	r0, r2
 800490a:	e7ca      	b.n	80048a2 <ai_platform_network_create+0x36>
 800490c:	2101      	movs	r1, #1
 800490e:	6019      	str	r1, [r3, #0]
 8004910:	6819      	ldr	r1, [r3, #0]
 8004912:	2900      	cmp	r1, #0
 8004914:	d1fc      	bne.n	8004910 <ai_platform_network_create+0xa4>
 8004916:	e7d8      	b.n	80048ca <ai_platform_network_create+0x5e>
 8004918:	4b37      	ldr	r3, [pc, #220]	; (80049f8 <ai_platform_network_create+0x18c>)
 800491a:	2201      	movs	r2, #1
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	2a00      	cmp	r2, #0
 8004922:	d1fc      	bne.n	800491e <ai_platform_network_create+0xb2>
 8004924:	4b39      	ldr	r3, [pc, #228]	; (8004a0c <ai_platform_network_create+0x1a0>)
 8004926:	4a37      	ldr	r2, [pc, #220]	; (8004a04 <ai_platform_network_create+0x198>)
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	4b36      	ldr	r3, [pc, #216]	; (8004a08 <ai_platform_network_create+0x19c>)
 800492e:	429a      	cmp	r2, r3
 8004930:	d000      	beq.n	8004934 <ai_platform_network_create+0xc8>
 8004932:	e7fe      	b.n	8004932 <ai_platform_network_create+0xc6>
 8004934:	f7ff faa0 	bl	8003e78 <_ai_platform_release_crc>
 8004938:	b1af      	cbz	r7, 8004966 <ai_platform_network_create+0xfa>
 800493a:	4b35      	ldr	r3, [pc, #212]	; (8004a10 <ai_platform_network_create+0x1a4>)
 800493c:	6033      	str	r3, [r6, #0]
 800493e:	603e      	str	r6, [r7, #0]
 8004940:	f000 fd06 	bl	8005350 <core_init>
 8004944:	b990      	cbnz	r0, 800496c <ai_platform_network_create+0x100>
 8004946:	062d      	lsls	r5, r5, #24
 8004948:	0424      	lsls	r4, r4, #16
 800494a:	2230      	movs	r2, #48	; 0x30
 800494c:	2300      	movs	r3, #0
 800494e:	603b      	str	r3, [r7, #0]
 8004950:	2110      	movs	r1, #16
 8004952:	ea44 2308 	orr.w	r3, r4, r8, lsl #8
 8004956:	2000      	movs	r0, #0
 8004958:	432b      	orrs	r3, r5
 800495a:	f362 0007 	bfi	r0, r2, #0, #8
 800495e:	6473      	str	r3, [r6, #68]	; 0x44
 8004960:	f361 201f 	bfi	r0, r1, #8, #24
 8004964:	e7a1      	b.n	80048aa <ai_platform_network_create+0x3e>
 8004966:	f241 0010 	movw	r0, #4112	; 0x1010
 800496a:	e79e      	b.n	80048aa <ai_platform_network_create+0x3e>
 800496c:	4a23      	ldr	r2, [pc, #140]	; (80049fc <ai_platform_network_create+0x190>)
 800496e:	6813      	ldr	r3, [r2, #0]
 8004970:	f023 0301 	bic.w	r3, r3, #1
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	f7ff fa7d 	bl	8003e74 <_ai_platform_acquire_crc>
 800497a:	4b1d      	ldr	r3, [pc, #116]	; (80049f0 <ai_platform_network_create+0x184>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004986:	d00d      	beq.n	80049a4 <ai_platform_network_create+0x138>
 8004988:	4b1a      	ldr	r3, [pc, #104]	; (80049f4 <ai_platform_network_create+0x188>)
 800498a:	2201      	movs	r2, #1
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	2a00      	cmp	r2, #0
 8004992:	d1fc      	bne.n	800498e <ai_platform_network_create+0x122>
 8004994:	4b1a      	ldr	r3, [pc, #104]	; (8004a00 <ai_platform_network_create+0x194>)
 8004996:	4a1b      	ldr	r2, [pc, #108]	; (8004a04 <ai_platform_network_create+0x198>)
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	4b1a      	ldr	r3, [pc, #104]	; (8004a08 <ai_platform_network_create+0x19c>)
 800499e:	429a      	cmp	r2, r3
 80049a0:	d00e      	beq.n	80049c0 <ai_platform_network_create+0x154>
 80049a2:	e7fe      	b.n	80049a2 <ai_platform_network_create+0x136>
 80049a4:	4b14      	ldr	r3, [pc, #80]	; (80049f8 <ai_platform_network_create+0x18c>)
 80049a6:	2201      	movs	r2, #1
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	2a00      	cmp	r2, #0
 80049ae:	d1fc      	bne.n	80049aa <ai_platform_network_create+0x13e>
 80049b0:	4b16      	ldr	r3, [pc, #88]	; (8004a0c <ai_platform_network_create+0x1a0>)
 80049b2:	4a14      	ldr	r2, [pc, #80]	; (8004a04 <ai_platform_network_create+0x198>)
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	4b13      	ldr	r3, [pc, #76]	; (8004a08 <ai_platform_network_create+0x19c>)
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d000      	beq.n	80049c0 <ai_platform_network_create+0x154>
 80049be:	e7fe      	b.n	80049be <ai_platform_network_create+0x152>
 80049c0:	062d      	lsls	r5, r5, #24
 80049c2:	0424      	lsls	r4, r4, #16
 80049c4:	f7ff fa58 	bl	8003e78 <_ai_platform_release_crc>
 80049c8:	ea45 0304 	orr.w	r3, r5, r4
 80049cc:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 80049d0:	d001      	beq.n	80049d6 <ai_platform_network_create+0x16a>
 80049d2:	2201      	movs	r2, #1
 80049d4:	e7ba      	b.n	800494c <ai_platform_network_create+0xe0>
 80049d6:	a802      	add	r0, sp, #8
 80049d8:	4b0e      	ldr	r3, [pc, #56]	; (8004a14 <ai_platform_network_create+0x1a8>)
 80049da:	f840 3d04 	str.w	r3, [r0, #-4]!
 80049de:	f002 fd5f 	bl	80074a0 <ai_check_custom_types>
 80049e2:	b110      	cbz	r0, 80049ea <ai_platform_network_create+0x17e>
 80049e4:	2100      	movs	r1, #0
 80049e6:	460a      	mov	r2, r1
 80049e8:	e7b3      	b.n	8004952 <ai_platform_network_create+0xe6>
 80049ea:	2202      	movs	r2, #2
 80049ec:	e7ae      	b.n	800494c <ai_platform_network_create+0xe0>
 80049ee:	bf00      	nop
 80049f0:	e0042000 	.word	0xe0042000
 80049f4:	58024c08 	.word	0x58024c08
 80049f8:	40023008 	.word	0x40023008
 80049fc:	e0002000 	.word	0xe0002000
 8004a00:	58024c00 	.word	0x58024c00
 8004a04:	f407a5c2 	.word	0xf407a5c2
 8004a08:	b5e8b5cd 	.word	0xb5e8b5cd
 8004a0c:	40023000 	.word	0x40023000
 8004a10:	a1c00100 	.word	0xa1c00100
 8004a14:	84048403 	.word	0x84048403

08004a18 <ai_platform_network_destroy>:
 8004a18:	b510      	push	{r4, lr}
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	b118      	cbz	r0, 8004a26 <ai_platform_network_destroy+0xe>
 8004a1e:	4b31      	ldr	r3, [pc, #196]	; (8004ae4 <ai_platform_network_destroy+0xcc>)
 8004a20:	6802      	ldr	r2, [r0, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d02d      	beq.n	8004a82 <ai_platform_network_destroy+0x6a>
 8004a26:	4a30      	ldr	r2, [pc, #192]	; (8004ae8 <ai_platform_network_destroy+0xd0>)
 8004a28:	6813      	ldr	r3, [r2, #0]
 8004a2a:	f023 0301 	bic.w	r3, r3, #1
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	f7ff fa20 	bl	8003e74 <_ai_platform_acquire_crc>
 8004a34:	4b2d      	ldr	r3, [pc, #180]	; (8004aec <ai_platform_network_destroy+0xd4>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a40:	d00d      	beq.n	8004a5e <ai_platform_network_destroy+0x46>
 8004a42:	4b2b      	ldr	r3, [pc, #172]	; (8004af0 <ai_platform_network_destroy+0xd8>)
 8004a44:	2201      	movs	r2, #1
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	2a00      	cmp	r2, #0
 8004a4c:	d1fc      	bne.n	8004a48 <ai_platform_network_destroy+0x30>
 8004a4e:	4b29      	ldr	r3, [pc, #164]	; (8004af4 <ai_platform_network_destroy+0xdc>)
 8004a50:	4a29      	ldr	r2, [pc, #164]	; (8004af8 <ai_platform_network_destroy+0xe0>)
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	4b29      	ldr	r3, [pc, #164]	; (8004afc <ai_platform_network_destroy+0xe4>)
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d00e      	beq.n	8004a7a <ai_platform_network_destroy+0x62>
 8004a5c:	e7fe      	b.n	8004a5c <ai_platform_network_destroy+0x44>
 8004a5e:	4b28      	ldr	r3, [pc, #160]	; (8004b00 <ai_platform_network_destroy+0xe8>)
 8004a60:	2201      	movs	r2, #1
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	2a00      	cmp	r2, #0
 8004a68:	d1fc      	bne.n	8004a64 <ai_platform_network_destroy+0x4c>
 8004a6a:	4b26      	ldr	r3, [pc, #152]	; (8004b04 <ai_platform_network_destroy+0xec>)
 8004a6c:	4a22      	ldr	r2, [pc, #136]	; (8004af8 <ai_platform_network_destroy+0xe0>)
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	4b22      	ldr	r3, [pc, #136]	; (8004afc <ai_platform_network_destroy+0xe4>)
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d000      	beq.n	8004a7a <ai_platform_network_destroy+0x62>
 8004a78:	e7fe      	b.n	8004a78 <ai_platform_network_destroy+0x60>
 8004a7a:	f7ff f9fd 	bl	8003e78 <_ai_platform_release_crc>
 8004a7e:	4620      	mov	r0, r4
 8004a80:	bd10      	pop	{r4, pc}
 8004a82:	4a19      	ldr	r2, [pc, #100]	; (8004ae8 <ai_platform_network_destroy+0xd0>)
 8004a84:	6813      	ldr	r3, [r2, #0]
 8004a86:	f023 0301 	bic.w	r3, r3, #1
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	f7ff f9f2 	bl	8003e74 <_ai_platform_acquire_crc>
 8004a90:	4b16      	ldr	r3, [pc, #88]	; (8004aec <ai_platform_network_destroy+0xd4>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a9c:	d00d      	beq.n	8004aba <ai_platform_network_destroy+0xa2>
 8004a9e:	4b14      	ldr	r3, [pc, #80]	; (8004af0 <ai_platform_network_destroy+0xd8>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	2a00      	cmp	r2, #0
 8004aa8:	d1fc      	bne.n	8004aa4 <ai_platform_network_destroy+0x8c>
 8004aaa:	4b12      	ldr	r3, [pc, #72]	; (8004af4 <ai_platform_network_destroy+0xdc>)
 8004aac:	4a12      	ldr	r2, [pc, #72]	; (8004af8 <ai_platform_network_destroy+0xe0>)
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	4b12      	ldr	r3, [pc, #72]	; (8004afc <ai_platform_network_destroy+0xe4>)
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d00e      	beq.n	8004ad6 <ai_platform_network_destroy+0xbe>
 8004ab8:	e7fe      	b.n	8004ab8 <ai_platform_network_destroy+0xa0>
 8004aba:	4b11      	ldr	r3, [pc, #68]	; (8004b00 <ai_platform_network_destroy+0xe8>)
 8004abc:	2201      	movs	r2, #1
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	2a00      	cmp	r2, #0
 8004ac4:	d1fc      	bne.n	8004ac0 <ai_platform_network_destroy+0xa8>
 8004ac6:	4b0f      	ldr	r3, [pc, #60]	; (8004b04 <ai_platform_network_destroy+0xec>)
 8004ac8:	4a0b      	ldr	r2, [pc, #44]	; (8004af8 <ai_platform_network_destroy+0xe0>)
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <ai_platform_network_destroy+0xe4>)
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d000      	beq.n	8004ad6 <ai_platform_network_destroy+0xbe>
 8004ad4:	e7fe      	b.n	8004ad4 <ai_platform_network_destroy+0xbc>
 8004ad6:	f7ff f9cf 	bl	8003e78 <_ai_platform_release_crc>
 8004ada:	4620      	mov	r0, r4
 8004adc:	f002 fd84 	bl	80075e8 <ai_layers_destroy_all>
 8004ae0:	2400      	movs	r4, #0
 8004ae2:	e7cc      	b.n	8004a7e <ai_platform_network_destroy+0x66>
 8004ae4:	a1c00100 	.word	0xa1c00100
 8004ae8:	e0002000 	.word	0xe0002000
 8004aec:	e0042000 	.word	0xe0042000
 8004af0:	58024c08 	.word	0x58024c08
 8004af4:	58024c00 	.word	0x58024c00
 8004af8:	f407a5c2 	.word	0xf407a5c2
 8004afc:	b5e8b5cd 	.word	0xb5e8b5cd
 8004b00:	40023008 	.word	0x40023008
 8004b04:	40023000 	.word	0x40023000

08004b08 <ai_platform_network_init>:
 8004b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b0c:	2800      	cmp	r0, #0
 8004b0e:	d04d      	beq.n	8004bac <ai_platform_network_init+0xa4>
 8004b10:	4b7c      	ldr	r3, [pc, #496]	; (8004d04 <ai_platform_network_init+0x1fc>)
 8004b12:	6802      	ldr	r2, [r0, #0]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	4604      	mov	r4, r0
 8004b18:	d148      	bne.n	8004bac <ai_platform_network_init+0xa4>
 8004b1a:	4a7b      	ldr	r2, [pc, #492]	; (8004d08 <ai_platform_network_init+0x200>)
 8004b1c:	6813      	ldr	r3, [r2, #0]
 8004b1e:	f023 0301 	bic.w	r3, r3, #1
 8004b22:	6013      	str	r3, [r2, #0]
 8004b24:	460d      	mov	r5, r1
 8004b26:	f7ff f9a5 	bl	8003e74 <_ai_platform_acquire_crc>
 8004b2a:	4b78      	ldr	r3, [pc, #480]	; (8004d0c <ai_platform_network_init+0x204>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b36:	d00d      	beq.n	8004b54 <ai_platform_network_init+0x4c>
 8004b38:	4b75      	ldr	r3, [pc, #468]	; (8004d10 <ai_platform_network_init+0x208>)
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	2a00      	cmp	r2, #0
 8004b42:	d1fc      	bne.n	8004b3e <ai_platform_network_init+0x36>
 8004b44:	4b73      	ldr	r3, [pc, #460]	; (8004d14 <ai_platform_network_init+0x20c>)
 8004b46:	4a74      	ldr	r2, [pc, #464]	; (8004d18 <ai_platform_network_init+0x210>)
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	4b73      	ldr	r3, [pc, #460]	; (8004d1c <ai_platform_network_init+0x214>)
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d00d      	beq.n	8004b6e <ai_platform_network_init+0x66>
 8004b52:	e7fe      	b.n	8004b52 <ai_platform_network_init+0x4a>
 8004b54:	4b72      	ldr	r3, [pc, #456]	; (8004d20 <ai_platform_network_init+0x218>)
 8004b56:	2201      	movs	r2, #1
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	2a00      	cmp	r2, #0
 8004b5e:	d1fc      	bne.n	8004b5a <ai_platform_network_init+0x52>
 8004b60:	4b70      	ldr	r3, [pc, #448]	; (8004d24 <ai_platform_network_init+0x21c>)
 8004b62:	4a6d      	ldr	r2, [pc, #436]	; (8004d18 <ai_platform_network_init+0x210>)
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	4b6c      	ldr	r3, [pc, #432]	; (8004d1c <ai_platform_network_init+0x214>)
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d11d      	bne.n	8004baa <ai_platform_network_init+0xa2>
 8004b6e:	f7ff f983 	bl	8003e78 <_ai_platform_release_crc>
 8004b72:	2d00      	cmp	r5, #0
 8004b74:	d076      	beq.n	8004c64 <ai_platform_network_init+0x15c>
 8004b76:	4b6c      	ldr	r3, [pc, #432]	; (8004d28 <ai_platform_network_init+0x220>)
 8004b78:	682a      	ldr	r2, [r5, #0]
 8004b7a:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d030      	beq.n	8004be4 <ai_platform_network_init+0xdc>
 8004b82:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8004b84:	46a9      	mov	r9, r5
 8004b86:	f105 0118 	add.w	r1, r5, #24
 8004b8a:	2e00      	cmp	r6, #0
 8004b8c:	f000 8095 	beq.w	8004cba <ai_platform_network_init+0x1b2>
 8004b90:	f1bc 0f00 	cmp.w	ip, #0
 8004b94:	f000 80a4 	beq.w	8004ce0 <ai_platform_network_init+0x1d8>
 8004b98:	f8b4 801e 	ldrh.w	r8, [r4, #30]
 8004b9c:	f1b8 0f01 	cmp.w	r8, #1
 8004ba0:	d16a      	bne.n	8004c78 <ai_platform_network_init+0x170>
 8004ba2:	2700      	movs	r7, #0
 8004ba4:	468c      	mov	ip, r1
 8004ba6:	83a7      	strh	r7, [r4, #28]
 8004ba8:	e028      	b.n	8004bfc <ai_platform_network_init+0xf4>
 8004baa:	e7fe      	b.n	8004baa <ai_platform_network_init+0xa2>
 8004bac:	4a56      	ldr	r2, [pc, #344]	; (8004d08 <ai_platform_network_init+0x200>)
 8004bae:	6813      	ldr	r3, [r2, #0]
 8004bb0:	f023 0301 	bic.w	r3, r3, #1
 8004bb4:	6013      	str	r3, [r2, #0]
 8004bb6:	f7ff f95d 	bl	8003e74 <_ai_platform_acquire_crc>
 8004bba:	4b54      	ldr	r3, [pc, #336]	; (8004d0c <ai_platform_network_init+0x204>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc6:	d067      	beq.n	8004c98 <ai_platform_network_init+0x190>
 8004bc8:	4b51      	ldr	r3, [pc, #324]	; (8004d10 <ai_platform_network_init+0x208>)
 8004bca:	2201      	movs	r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	2a00      	cmp	r2, #0
 8004bd2:	d1fc      	bne.n	8004bce <ai_platform_network_init+0xc6>
 8004bd4:	4b4f      	ldr	r3, [pc, #316]	; (8004d14 <ai_platform_network_init+0x20c>)
 8004bd6:	4a50      	ldr	r2, [pc, #320]	; (8004d18 <ai_platform_network_init+0x210>)
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	4b4f      	ldr	r3, [pc, #316]	; (8004d1c <ai_platform_network_init+0x214>)
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d067      	beq.n	8004cb2 <ai_platform_network_init+0x1aa>
 8004be2:	e7fe      	b.n	8004be2 <ai_platform_network_init+0xda>
 8004be4:	8be1      	ldrh	r1, [r4, #30]
 8004be6:	88eb      	ldrh	r3, [r5, #6]
 8004be8:	89af      	ldrh	r7, [r5, #12]
 8004bea:	f8b5 800e 	ldrh.w	r8, [r5, #14]
 8004bee:	88aa      	ldrh	r2, [r5, #4]
 8004bf0:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8004bf4:	428b      	cmp	r3, r1
 8004bf6:	d13f      	bne.n	8004c78 <ai_platform_network_init+0x170>
 8004bf8:	83a2      	strh	r2, [r4, #28]
 8004bfa:	b19b      	cbz	r3, 8004c24 <ai_platform_network_init+0x11c>
 8004bfc:	f04f 0e00 	mov.w	lr, #0
 8004c00:	46f2      	mov	sl, lr
 8004c02:	eb09 060e 	add.w	r6, r9, lr
 8004c06:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004c08:	6a25      	ldr	r5, [r4, #32]
 8004c0a:	4475      	add	r5, lr
 8004c0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c0e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8004c12:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c16:	8be3      	ldrh	r3, [r4, #30]
 8004c18:	f10a 0a01 	add.w	sl, sl, #1
 8004c1c:	459a      	cmp	sl, r3
 8004c1e:	f10e 0e18 	add.w	lr, lr, #24
 8004c22:	d3ee      	bcc.n	8004c02 <ai_platform_network_init+0xfa>
 8004c24:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004c26:	4598      	cmp	r8, r3
 8004c28:	d12e      	bne.n	8004c88 <ai_platform_network_init+0x180>
 8004c2a:	84a7      	strh	r7, [r4, #36]	; 0x24
 8004c2c:	f1b8 0f00 	cmp.w	r8, #0
 8004c30:	d012      	beq.n	8004c58 <ai_platform_network_init+0x150>
 8004c32:	2700      	movs	r7, #0
 8004c34:	46be      	mov	lr, r7
 8004c36:	eb0c 0607 	add.w	r6, ip, r7
 8004c3a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004c3c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004c3e:	443d      	add	r5, r7
 8004c40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c42:	e896 0003 	ldmia.w	r6, {r0, r1}
 8004c46:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c4a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004c4c:	f10e 0e01 	add.w	lr, lr, #1
 8004c50:	459e      	cmp	lr, r3
 8004c52:	f107 0718 	add.w	r7, r7, #24
 8004c56:	d3ee      	bcc.n	8004c36 <ai_platform_network_init+0x12e>
 8004c58:	2303      	movs	r3, #3
 8004c5a:	60e3      	str	r3, [r4, #12]
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	f002 fc49 	bl	80074f4 <ai_layers_init_all>
 8004c62:	e006      	b.n	8004c72 <ai_platform_network_init+0x16a>
 8004c64:	f104 0010 	add.w	r0, r4, #16
 8004c68:	2211      	movs	r2, #17
 8004c6a:	2110      	movs	r1, #16
 8004c6c:	462c      	mov	r4, r5
 8004c6e:	f000 fb77 	bl	8005360 <core_set_error>
 8004c72:	4620      	mov	r0, r4
 8004c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c78:	f104 0010 	add.w	r0, r4, #16
 8004c7c:	2212      	movs	r2, #18
 8004c7e:	2116      	movs	r1, #22
 8004c80:	f000 fb6e 	bl	8005360 <core_set_error>
 8004c84:	2400      	movs	r4, #0
 8004c86:	e7f4      	b.n	8004c72 <ai_platform_network_init+0x16a>
 8004c88:	f104 0010 	add.w	r0, r4, #16
 8004c8c:	2213      	movs	r2, #19
 8004c8e:	2116      	movs	r1, #22
 8004c90:	f000 fb66 	bl	8005360 <core_set_error>
 8004c94:	2400      	movs	r4, #0
 8004c96:	e7ec      	b.n	8004c72 <ai_platform_network_init+0x16a>
 8004c98:	4b21      	ldr	r3, [pc, #132]	; (8004d20 <ai_platform_network_init+0x218>)
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	2a00      	cmp	r2, #0
 8004ca2:	d1fc      	bne.n	8004c9e <ai_platform_network_init+0x196>
 8004ca4:	4b1f      	ldr	r3, [pc, #124]	; (8004d24 <ai_platform_network_init+0x21c>)
 8004ca6:	4a1c      	ldr	r2, [pc, #112]	; (8004d18 <ai_platform_network_init+0x210>)
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	4b1b      	ldr	r3, [pc, #108]	; (8004d1c <ai_platform_network_init+0x214>)
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d115      	bne.n	8004cde <ai_platform_network_init+0x1d6>
 8004cb2:	f7ff f8e1 	bl	8003e78 <_ai_platform_release_crc>
 8004cb6:	2400      	movs	r4, #0
 8004cb8:	e7db      	b.n	8004c72 <ai_platform_network_init+0x16a>
 8004cba:	8c28      	ldrh	r0, [r5, #32]
 8004cbc:	8bea      	ldrh	r2, [r5, #30]
 8004cbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004cc0:	fb02 f200 	mul.w	r2, r2, r0
 8004cc4:	fb03 f302 	mul.w	r3, r3, r2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f43f af61 	beq.w	8004b90 <ai_platform_network_init+0x88>
 8004cce:	f104 0010 	add.w	r0, r4, #16
 8004cd2:	2213      	movs	r2, #19
 8004cd4:	2110      	movs	r1, #16
 8004cd6:	4634      	mov	r4, r6
 8004cd8:	f000 fb42 	bl	8005360 <core_set_error>
 8004cdc:	e7c9      	b.n	8004c72 <ai_platform_network_init+0x16a>
 8004cde:	e7fe      	b.n	8004cde <ai_platform_network_init+0x1d6>
 8004ce0:	8928      	ldrh	r0, [r5, #8]
 8004ce2:	88ea      	ldrh	r2, [r5, #6]
 8004ce4:	68eb      	ldr	r3, [r5, #12]
 8004ce6:	fb02 f200 	mul.w	r2, r2, r0
 8004cea:	fb03 f302 	mul.w	r3, r3, r2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f43f af52 	beq.w	8004b98 <ai_platform_network_init+0x90>
 8004cf4:	f104 0010 	add.w	r0, r4, #16
 8004cf8:	2212      	movs	r2, #18
 8004cfa:	2110      	movs	r1, #16
 8004cfc:	4664      	mov	r4, ip
 8004cfe:	f000 fb2f 	bl	8005360 <core_set_error>
 8004d02:	e7b6      	b.n	8004c72 <ai_platform_network_init+0x16a>
 8004d04:	a1c00100 	.word	0xa1c00100
 8004d08:	e0002000 	.word	0xe0002000
 8004d0c:	e0042000 	.word	0xe0042000
 8004d10:	58024c08 	.word	0x58024c08
 8004d14:	58024c00 	.word	0x58024c00
 8004d18:	f407a5c2 	.word	0xf407a5c2
 8004d1c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004d20:	40023008 	.word	0x40023008
 8004d24:	40023000 	.word	0x40023000
 8004d28:	a1facade 	.word	0xa1facade

08004d2c <ai_platform_network_post_init>:
 8004d2c:	b538      	push	{r3, r4, r5, lr}
 8004d2e:	b120      	cbz	r0, 8004d3a <ai_platform_network_post_init+0xe>
 8004d30:	4b3f      	ldr	r3, [pc, #252]	; (8004e30 <ai_platform_network_post_init+0x104>)
 8004d32:	6802      	ldr	r2, [r0, #0]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	4604      	mov	r4, r0
 8004d38:	d02d      	beq.n	8004d96 <ai_platform_network_post_init+0x6a>
 8004d3a:	4a3e      	ldr	r2, [pc, #248]	; (8004e34 <ai_platform_network_post_init+0x108>)
 8004d3c:	6813      	ldr	r3, [r2, #0]
 8004d3e:	f023 0301 	bic.w	r3, r3, #1
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	f7ff f896 	bl	8003e74 <_ai_platform_acquire_crc>
 8004d48:	4b3b      	ldr	r3, [pc, #236]	; (8004e38 <ai_platform_network_post_init+0x10c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d54:	d00d      	beq.n	8004d72 <ai_platform_network_post_init+0x46>
 8004d56:	4b39      	ldr	r3, [pc, #228]	; (8004e3c <ai_platform_network_post_init+0x110>)
 8004d58:	2201      	movs	r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	2a00      	cmp	r2, #0
 8004d60:	d1fc      	bne.n	8004d5c <ai_platform_network_post_init+0x30>
 8004d62:	4b37      	ldr	r3, [pc, #220]	; (8004e40 <ai_platform_network_post_init+0x114>)
 8004d64:	4a37      	ldr	r2, [pc, #220]	; (8004e44 <ai_platform_network_post_init+0x118>)
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	4b37      	ldr	r3, [pc, #220]	; (8004e48 <ai_platform_network_post_init+0x11c>)
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d00d      	beq.n	8004d8c <ai_platform_network_post_init+0x60>
 8004d70:	e7fe      	b.n	8004d70 <ai_platform_network_post_init+0x44>
 8004d72:	4b36      	ldr	r3, [pc, #216]	; (8004e4c <ai_platform_network_post_init+0x120>)
 8004d74:	2201      	movs	r2, #1
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	2a00      	cmp	r2, #0
 8004d7c:	d1fc      	bne.n	8004d78 <ai_platform_network_post_init+0x4c>
 8004d7e:	4b34      	ldr	r3, [pc, #208]	; (8004e50 <ai_platform_network_post_init+0x124>)
 8004d80:	4a30      	ldr	r2, [pc, #192]	; (8004e44 <ai_platform_network_post_init+0x118>)
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	4b30      	ldr	r3, [pc, #192]	; (8004e48 <ai_platform_network_post_init+0x11c>)
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d103      	bne.n	8004d94 <ai_platform_network_post_init+0x68>
 8004d8c:	f7ff f874 	bl	8003e78 <_ai_platform_release_crc>
 8004d90:	2000      	movs	r0, #0
 8004d92:	bd38      	pop	{r3, r4, r5, pc}
 8004d94:	e7fe      	b.n	8004d94 <ai_platform_network_post_init+0x68>
 8004d96:	4a27      	ldr	r2, [pc, #156]	; (8004e34 <ai_platform_network_post_init+0x108>)
 8004d98:	6813      	ldr	r3, [r2, #0]
 8004d9a:	f023 0301 	bic.w	r3, r3, #1
 8004d9e:	6013      	str	r3, [r2, #0]
 8004da0:	f7ff f868 	bl	8003e74 <_ai_platform_acquire_crc>
 8004da4:	4b24      	ldr	r3, [pc, #144]	; (8004e38 <ai_platform_network_post_init+0x10c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004db0:	d00d      	beq.n	8004dce <ai_platform_network_post_init+0xa2>
 8004db2:	4b22      	ldr	r3, [pc, #136]	; (8004e3c <ai_platform_network_post_init+0x110>)
 8004db4:	2201      	movs	r2, #1
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	2a00      	cmp	r2, #0
 8004dbc:	d1fc      	bne.n	8004db8 <ai_platform_network_post_init+0x8c>
 8004dbe:	4b20      	ldr	r3, [pc, #128]	; (8004e40 <ai_platform_network_post_init+0x114>)
 8004dc0:	4a20      	ldr	r2, [pc, #128]	; (8004e44 <ai_platform_network_post_init+0x118>)
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	4b20      	ldr	r3, [pc, #128]	; (8004e48 <ai_platform_network_post_init+0x11c>)
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d00e      	beq.n	8004dea <ai_platform_network_post_init+0xbe>
 8004dcc:	e7fe      	b.n	8004dcc <ai_platform_network_post_init+0xa0>
 8004dce:	4b1f      	ldr	r3, [pc, #124]	; (8004e4c <ai_platform_network_post_init+0x120>)
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	2a00      	cmp	r2, #0
 8004dd8:	d1fc      	bne.n	8004dd4 <ai_platform_network_post_init+0xa8>
 8004dda:	4b1d      	ldr	r3, [pc, #116]	; (8004e50 <ai_platform_network_post_init+0x124>)
 8004ddc:	4a19      	ldr	r2, [pc, #100]	; (8004e44 <ai_platform_network_post_init+0x118>)
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	4b19      	ldr	r3, [pc, #100]	; (8004e48 <ai_platform_network_post_init+0x11c>)
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d000      	beq.n	8004dea <ai_platform_network_post_init+0xbe>
 8004de8:	e7fe      	b.n	8004de8 <ai_platform_network_post_init+0xbc>
 8004dea:	f7ff f845 	bl	8003e78 <_ai_platform_release_crc>
 8004dee:	68e3      	ldr	r3, [r4, #12]
 8004df0:	f013 0502 	ands.w	r5, r3, #2
 8004df4:	d011      	beq.n	8004e1a <ai_platform_network_post_init+0xee>
 8004df6:	4620      	mov	r0, r4
 8004df8:	f002 fb90 	bl	800751c <ai_layers_post_init_all>
 8004dfc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004dfe:	b1a3      	cbz	r3, 8004e2a <ai_platform_network_post_init+0xfe>
 8004e00:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004e02:	b195      	cbz	r5, 8004e2a <ai_platform_network_post_init+0xfe>
 8004e04:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e06:	4629      	mov	r1, r5
 8004e08:	2000      	movs	r0, #0
 8004e0a:	4798      	blx	r3
 8004e0c:	692b      	ldr	r3, [r5, #16]
 8004e0e:	42ab      	cmp	r3, r5
 8004e10:	d00b      	beq.n	8004e2a <ai_platform_network_post_init+0xfe>
 8004e12:	461d      	mov	r5, r3
 8004e14:	b14b      	cbz	r3, 8004e2a <ai_platform_network_post_init+0xfe>
 8004e16:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e18:	e7f4      	b.n	8004e04 <ai_platform_network_post_init+0xd8>
 8004e1a:	f104 0010 	add.w	r0, r4, #16
 8004e1e:	2210      	movs	r2, #16
 8004e20:	2111      	movs	r1, #17
 8004e22:	f000 fa9d 	bl	8005360 <core_set_error>
 8004e26:	4628      	mov	r0, r5
 8004e28:	bd38      	pop	{r3, r4, r5, pc}
 8004e2a:	2001      	movs	r0, #1
 8004e2c:	bd38      	pop	{r3, r4, r5, pc}
 8004e2e:	bf00      	nop
 8004e30:	a1c00100 	.word	0xa1c00100
 8004e34:	e0002000 	.word	0xe0002000
 8004e38:	e0042000 	.word	0xe0042000
 8004e3c:	58024c08 	.word	0x58024c08
 8004e40:	58024c00 	.word	0x58024c00
 8004e44:	f407a5c2 	.word	0xf407a5c2
 8004e48:	b5e8b5cd 	.word	0xb5e8b5cd
 8004e4c:	40023008 	.word	0x40023008
 8004e50:	40023000 	.word	0x40023000

08004e54 <ai_platform_network_process>:
 8004e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e58:	b085      	sub	sp, #20
 8004e5a:	460d      	mov	r5, r1
 8004e5c:	9202      	str	r2, [sp, #8]
 8004e5e:	4604      	mov	r4, r0
 8004e60:	b120      	cbz	r0, 8004e6c <ai_platform_network_process+0x18>
 8004e62:	4b7b      	ldr	r3, [pc, #492]	; (8005050 <ai_platform_network_process+0x1fc>)
 8004e64:	6802      	ldr	r2, [r0, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	bf18      	it	ne
 8004e6a:	2400      	movne	r4, #0
 8004e6c:	4a79      	ldr	r2, [pc, #484]	; (8005054 <ai_platform_network_process+0x200>)
 8004e6e:	6813      	ldr	r3, [r2, #0]
 8004e70:	f023 0301 	bic.w	r3, r3, #1
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	f7fe fffd 	bl	8003e74 <_ai_platform_acquire_crc>
 8004e7a:	4b77      	ldr	r3, [pc, #476]	; (8005058 <ai_platform_network_process+0x204>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e86:	d00d      	beq.n	8004ea4 <ai_platform_network_process+0x50>
 8004e88:	4b74      	ldr	r3, [pc, #464]	; (800505c <ai_platform_network_process+0x208>)
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	2a00      	cmp	r2, #0
 8004e92:	d1fc      	bne.n	8004e8e <ai_platform_network_process+0x3a>
 8004e94:	4b72      	ldr	r3, [pc, #456]	; (8005060 <ai_platform_network_process+0x20c>)
 8004e96:	4a73      	ldr	r2, [pc, #460]	; (8005064 <ai_platform_network_process+0x210>)
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	4b72      	ldr	r3, [pc, #456]	; (8005068 <ai_platform_network_process+0x214>)
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d00e      	beq.n	8004ec0 <ai_platform_network_process+0x6c>
 8004ea2:	e7fe      	b.n	8004ea2 <ai_platform_network_process+0x4e>
 8004ea4:	4b71      	ldr	r3, [pc, #452]	; (800506c <ai_platform_network_process+0x218>)
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	2a00      	cmp	r2, #0
 8004eae:	d1fc      	bne.n	8004eaa <ai_platform_network_process+0x56>
 8004eb0:	4b6f      	ldr	r3, [pc, #444]	; (8005070 <ai_platform_network_process+0x21c>)
 8004eb2:	4a6c      	ldr	r2, [pc, #432]	; (8005064 <ai_platform_network_process+0x210>)
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	4b6b      	ldr	r3, [pc, #428]	; (8005068 <ai_platform_network_process+0x214>)
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d000      	beq.n	8004ec0 <ai_platform_network_process+0x6c>
 8004ebe:	e7fe      	b.n	8004ebe <ai_platform_network_process+0x6a>
 8004ec0:	f7fe ffda 	bl	8003e78 <_ai_platform_release_crc>
 8004ec4:	2c00      	cmp	r4, #0
 8004ec6:	f000 808e 	beq.w	8004fe6 <ai_platform_network_process+0x192>
 8004eca:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 8004ecc:	2f00      	cmp	r7, #0
 8004ece:	f040 823c 	bne.w	800534a <ai_platform_network_process+0x4f6>
 8004ed2:	68e3      	ldr	r3, [r4, #12]
 8004ed4:	f003 0303 	and.w	r3, r3, #3
 8004ed8:	f04f 0b00 	mov.w	fp, #0
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	f8c4 b014 	str.w	fp, [r4, #20]
 8004ee2:	f040 822b 	bne.w	800533c <ai_platform_network_process+0x4e8>
 8004ee6:	2d00      	cmp	r5, #0
 8004ee8:	f000 80a8 	beq.w	800503c <ai_platform_network_process+0x1e8>
 8004eec:	2f00      	cmp	r7, #0
 8004eee:	f000 80a5 	beq.w	800503c <ai_platform_network_process+0x1e8>
 8004ef2:	883b      	ldrh	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 80a1 	beq.w	800503c <ai_platform_network_process+0x1e8>
 8004efa:	f8b5 9004 	ldrh.w	r9, [r5, #4]
 8004efe:	9401      	str	r4, [sp, #4]
 8004f00:	46d8      	mov	r8, fp
 8004f02:	4598      	cmp	r8, r3
 8004f04:	f080 80b6 	bcs.w	8005074 <ai_platform_network_process+0x220>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 80b2 	beq.w	8005074 <ai_platform_network_process+0x220>
 8004f10:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8004f14:	2e00      	cmp	r6, #0
 8004f16:	f000 80ad 	beq.w	8005074 <ai_platform_network_process+0x220>
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	9303      	str	r3, [sp, #12]
 8004f20:	ea4f 1408 	mov.w	r4, r8, lsl #4
 8004f24:	eb13 0a04 	adds.w	sl, r3, r4
 8004f28:	f000 8087 	beq.w	800503a <ai_platform_network_process+0x1e6>
 8004f2c:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8004f30:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 8004f34:	69b0      	ldr	r0, [r6, #24]
 8004f36:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8004f3a:	6841      	ldr	r1, [r0, #4]
 8004f3c:	fb0b f30e 	mul.w	r3, fp, lr
 8004f40:	fb0c f303 	mul.w	r3, ip, r3
 8004f44:	4299      	cmp	r1, r3
 8004f46:	d36e      	bcc.n	8005026 <ai_platform_network_process+0x1d2>
 8004f48:	68f3      	ldr	r3, [r6, #12]
 8004f4a:	68da      	ldr	r2, [r3, #12]
 8004f4c:	455a      	cmp	r2, fp
 8004f4e:	d16a      	bne.n	8005026 <ai_platform_network_process+0x1d2>
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	4572      	cmp	r2, lr
 8004f54:	d167      	bne.n	8005026 <ai_platform_network_process+0x1d2>
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	459c      	cmp	ip, r3
 8004f5a:	d164      	bne.n	8005026 <ai_platform_network_process+0x1d2>
 8004f5c:	6800      	ldr	r0, [r0, #0]
 8004f5e:	f002 fbb3 	bl	80076c8 <ai_array_get_byte_size>
 8004f62:	68f2      	ldr	r2, [r6, #12]
 8004f64:	6973      	ldr	r3, [r6, #20]
 8004f66:	68d2      	ldr	r2, [r2, #12]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	fb03 f302 	mul.w	r3, r3, r2
 8004f6e:	4298      	cmp	r0, r3
 8004f70:	d359      	bcc.n	8005026 <ai_platform_network_process+0x1d2>
 8004f72:	69b3      	ldr	r3, [r6, #24]
 8004f74:	6818      	ldr	r0, [r3, #0]
 8004f76:	f002 fb4f 	bl	8007618 <ai_array_to_buffer_fmt>
 8004f7a:	682b      	ldr	r3, [r5, #0]
 8004f7c:	4043      	eors	r3, r0
 8004f7e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8004f82:	d146      	bne.n	8005012 <ai_platform_network_process+0x1be>
 8004f84:	692b      	ldr	r3, [r5, #16]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d03a      	beq.n	8005000 <ai_platform_network_process+0x1ac>
 8004f8a:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 8004f8e:	f1bb 0f00 	cmp.w	fp, #0
 8004f92:	d02d      	beq.n	8004ff0 <ai_platform_network_process+0x19c>
 8004f94:	68f2      	ldr	r2, [r6, #12]
 8004f96:	6973      	ldr	r3, [r6, #20]
 8004f98:	68d1      	ldr	r1, [r2, #12]
 8004f9a:	68da      	ldr	r2, [r3, #12]
 8004f9c:	fb02 f201 	mul.w	r2, r2, r1
 8004fa0:	f8ca 2008 	str.w	r2, [sl, #8]
 8004fa4:	88ab      	ldrh	r3, [r5, #4]
 8004fa6:	fb02 f203 	mul.w	r2, r2, r3
 8004faa:	f8ca 200c 	str.w	r2, [sl, #12]
 8004fae:	6929      	ldr	r1, [r5, #16]
 8004fb0:	f8ca 1004 	str.w	r1, [sl, #4]
 8004fb4:	692b      	ldr	r3, [r5, #16]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	9a03      	ldr	r2, [sp, #12]
 8004fba:	5113      	str	r3, [r2, r4]
 8004fbc:	69b0      	ldr	r0, [r6, #24]
 8004fbe:	6803      	ldr	r3, [r0, #0]
 8004fc0:	45d9      	cmp	r9, fp
 8004fc2:	bf38      	it	cc
 8004fc4:	46d9      	movcc	r9, fp
 8004fc6:	009a      	lsls	r2, r3, #2
 8004fc8:	d408      	bmi.n	8004fdc <ai_platform_network_process+0x188>
 8004fca:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8004fce:	1a9b      	subs	r3, r3, r2
 8004fd0:	4419      	add	r1, r3
 8004fd2:	6081      	str	r1, [r0, #8]
 8004fd4:	69b3      	ldr	r3, [r6, #24]
 8004fd6:	f8da 2004 	ldr.w	r2, [sl, #4]
 8004fda:	60da      	str	r2, [r3, #12]
 8004fdc:	883b      	ldrh	r3, [r7, #0]
 8004fde:	f108 0801 	add.w	r8, r8, #1
 8004fe2:	3518      	adds	r5, #24
 8004fe4:	e78d      	b.n	8004f02 <ai_platform_network_process+0xae>
 8004fe6:	46a3      	mov	fp, r4
 8004fe8:	4658      	mov	r0, fp
 8004fea:	b005      	add	sp, #20
 8004fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff0:	9c01      	ldr	r4, [sp, #4]
 8004ff2:	2221      	movs	r2, #33	; 0x21
 8004ff4:	f104 0010 	add.w	r0, r4, #16
 8004ff8:	2112      	movs	r1, #18
 8004ffa:	f000 f9b1 	bl	8005360 <core_set_error>
 8004ffe:	e7f3      	b.n	8004fe8 <ai_platform_network_process+0x194>
 8005000:	9c01      	ldr	r4, [sp, #4]
 8005002:	2217      	movs	r2, #23
 8005004:	f104 0010 	add.w	r0, r4, #16
 8005008:	2112      	movs	r1, #18
 800500a:	469b      	mov	fp, r3
 800500c:	f000 f9a8 	bl	8005360 <core_set_error>
 8005010:	e7ea      	b.n	8004fe8 <ai_platform_network_process+0x194>
 8005012:	9c01      	ldr	r4, [sp, #4]
 8005014:	2219      	movs	r2, #25
 8005016:	f104 0010 	add.w	r0, r4, #16
 800501a:	2112      	movs	r1, #18
 800501c:	f000 f9a0 	bl	8005360 <core_set_error>
 8005020:	f04f 0b00 	mov.w	fp, #0
 8005024:	e7e0      	b.n	8004fe8 <ai_platform_network_process+0x194>
 8005026:	9c01      	ldr	r4, [sp, #4]
 8005028:	2218      	movs	r2, #24
 800502a:	f104 0010 	add.w	r0, r4, #16
 800502e:	2112      	movs	r1, #18
 8005030:	f000 f996 	bl	8005360 <core_set_error>
 8005034:	f04f 0b00 	mov.w	fp, #0
 8005038:	e7d6      	b.n	8004fe8 <ai_platform_network_process+0x194>
 800503a:	9c01      	ldr	r4, [sp, #4]
 800503c:	f104 0010 	add.w	r0, r4, #16
 8005040:	2217      	movs	r2, #23
 8005042:	2112      	movs	r1, #18
 8005044:	f000 f98c 	bl	8005360 <core_set_error>
 8005048:	f04f 0b00 	mov.w	fp, #0
 800504c:	e7cc      	b.n	8004fe8 <ai_platform_network_process+0x194>
 800504e:	bf00      	nop
 8005050:	a1c00100 	.word	0xa1c00100
 8005054:	e0002000 	.word	0xe0002000
 8005058:	e0042000 	.word	0xe0042000
 800505c:	58024c08 	.word	0x58024c08
 8005060:	58024c00 	.word	0x58024c00
 8005064:	f407a5c2 	.word	0xf407a5c2
 8005068:	b5e8b5cd 	.word	0xb5e8b5cd
 800506c:	40023008 	.word	0x40023008
 8005070:	40023000 	.word	0x40023000
 8005074:	9c01      	ldr	r4, [sp, #4]
 8005076:	9a02      	ldr	r2, [sp, #8]
 8005078:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800507a:	2a00      	cmp	r2, #0
 800507c:	f000 80a9 	beq.w	80051d2 <ai_platform_network_process+0x37e>
 8005080:	2b01      	cmp	r3, #1
 8005082:	f240 809b 	bls.w	80051bc <ai_platform_network_process+0x368>
 8005086:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800508a:	f11a 0f0c 	cmn.w	sl, #12
 800508e:	f000 8095 	beq.w	80051bc <ai_platform_network_process+0x368>
 8005092:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 8090 	beq.w	80051bc <ai_platform_network_process+0x368>
 800509c:	9d02      	ldr	r5, [sp, #8]
 800509e:	9401      	str	r4, [sp, #4]
 80050a0:	f04f 0800 	mov.w	r8, #0
 80050a4:	4598      	cmp	r8, r3
 80050a6:	f080 8092 	bcs.w	80051ce <ai_platform_network_process+0x37a>
 80050aa:	f8da 3010 	ldr.w	r3, [sl, #16]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f000 808d 	beq.w	80051ce <ai_platform_network_process+0x37a>
 80050b4:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 80050b8:	2e00      	cmp	r6, #0
 80050ba:	f000 8088 	beq.w	80051ce <ai_platform_network_process+0x37a>
 80050be:	f8da 3014 	ldr.w	r3, [sl, #20]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	9302      	str	r3, [sp, #8]
 80050c6:	ea4f 1408 	mov.w	r4, r8, lsl #4
 80050ca:	191f      	adds	r7, r3, r4
 80050cc:	f000 812d 	beq.w	800532a <ai_platform_network_process+0x4d6>
 80050d0:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 80050d4:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 80050d8:	69b0      	ldr	r0, [r6, #24]
 80050da:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 80050de:	6841      	ldr	r1, [r0, #4]
 80050e0:	fb0b f30e 	mul.w	r3, fp, lr
 80050e4:	fb0c f303 	mul.w	r3, ip, r3
 80050e8:	4299      	cmp	r1, r3
 80050ea:	d366      	bcc.n	80051ba <ai_platform_network_process+0x366>
 80050ec:	68f3      	ldr	r3, [r6, #12]
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	455a      	cmp	r2, fp
 80050f2:	d162      	bne.n	80051ba <ai_platform_network_process+0x366>
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	4572      	cmp	r2, lr
 80050f8:	d15f      	bne.n	80051ba <ai_platform_network_process+0x366>
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	459c      	cmp	ip, r3
 80050fe:	d15c      	bne.n	80051ba <ai_platform_network_process+0x366>
 8005100:	6800      	ldr	r0, [r0, #0]
 8005102:	f002 fae1 	bl	80076c8 <ai_array_get_byte_size>
 8005106:	68f2      	ldr	r2, [r6, #12]
 8005108:	6973      	ldr	r3, [r6, #20]
 800510a:	68d2      	ldr	r2, [r2, #12]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	fb03 f302 	mul.w	r3, r3, r2
 8005112:	4298      	cmp	r0, r3
 8005114:	d351      	bcc.n	80051ba <ai_platform_network_process+0x366>
 8005116:	69b3      	ldr	r3, [r6, #24]
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	f002 fa7d 	bl	8007618 <ai_array_to_buffer_fmt>
 800511e:	682b      	ldr	r3, [r5, #0]
 8005120:	4043      	eors	r3, r0
 8005122:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8005126:	d13e      	bne.n	80051a6 <ai_platform_network_process+0x352>
 8005128:	692b      	ldr	r3, [r5, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d032      	beq.n	8005194 <ai_platform_network_process+0x340>
 800512e:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 8005132:	f1bb 0f00 	cmp.w	fp, #0
 8005136:	d025      	beq.n	8005184 <ai_platform_network_process+0x330>
 8005138:	68f2      	ldr	r2, [r6, #12]
 800513a:	6973      	ldr	r3, [r6, #20]
 800513c:	68d1      	ldr	r1, [r2, #12]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	fb02 f201 	mul.w	r2, r2, r1
 8005144:	60ba      	str	r2, [r7, #8]
 8005146:	88ab      	ldrh	r3, [r5, #4]
 8005148:	fb02 f203 	mul.w	r2, r2, r3
 800514c:	60fa      	str	r2, [r7, #12]
 800514e:	6929      	ldr	r1, [r5, #16]
 8005150:	6079      	str	r1, [r7, #4]
 8005152:	692b      	ldr	r3, [r5, #16]
 8005154:	4413      	add	r3, r2
 8005156:	9a02      	ldr	r2, [sp, #8]
 8005158:	5113      	str	r3, [r2, r4]
 800515a:	69b0      	ldr	r0, [r6, #24]
 800515c:	6803      	ldr	r3, [r0, #0]
 800515e:	45d9      	cmp	r9, fp
 8005160:	bf38      	it	cc
 8005162:	46d9      	movcc	r9, fp
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	d407      	bmi.n	8005178 <ai_platform_network_process+0x324>
 8005168:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800516c:	1a9b      	subs	r3, r3, r2
 800516e:	4419      	add	r1, r3
 8005170:	6081      	str	r1, [r0, #8]
 8005172:	69b3      	ldr	r3, [r6, #24]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	60da      	str	r2, [r3, #12]
 8005178:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800517c:	f108 0801 	add.w	r8, r8, #1
 8005180:	3518      	adds	r5, #24
 8005182:	e78f      	b.n	80050a4 <ai_platform_network_process+0x250>
 8005184:	9c01      	ldr	r4, [sp, #4]
 8005186:	2221      	movs	r2, #33	; 0x21
 8005188:	f104 0010 	add.w	r0, r4, #16
 800518c:	2113      	movs	r1, #19
 800518e:	f000 f8e7 	bl	8005360 <core_set_error>
 8005192:	e729      	b.n	8004fe8 <ai_platform_network_process+0x194>
 8005194:	9c01      	ldr	r4, [sp, #4]
 8005196:	2217      	movs	r2, #23
 8005198:	f104 0010 	add.w	r0, r4, #16
 800519c:	2113      	movs	r1, #19
 800519e:	469b      	mov	fp, r3
 80051a0:	f000 f8de 	bl	8005360 <core_set_error>
 80051a4:	e720      	b.n	8004fe8 <ai_platform_network_process+0x194>
 80051a6:	9c01      	ldr	r4, [sp, #4]
 80051a8:	2219      	movs	r2, #25
 80051aa:	f104 0010 	add.w	r0, r4, #16
 80051ae:	2113      	movs	r1, #19
 80051b0:	f000 f8d6 	bl	8005360 <core_set_error>
 80051b4:	f04f 0b00 	mov.w	fp, #0
 80051b8:	e716      	b.n	8004fe8 <ai_platform_network_process+0x194>
 80051ba:	9c01      	ldr	r4, [sp, #4]
 80051bc:	f104 0010 	add.w	r0, r4, #16
 80051c0:	2218      	movs	r2, #24
 80051c2:	2113      	movs	r1, #19
 80051c4:	f000 f8cc 	bl	8005360 <core_set_error>
 80051c8:	f04f 0b00 	mov.w	fp, #0
 80051cc:	e70c      	b.n	8004fe8 <ai_platform_network_process+0x194>
 80051ce:	9c01      	ldr	r4, [sp, #4]
 80051d0:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80051d2:	f8a4 9014 	strh.w	r9, [r4, #20]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 80a4 	beq.w	8005324 <ai_platform_network_process+0x4d0>
 80051dc:	2b01      	cmp	r3, #1
 80051de:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80051e0:	f240 809e 	bls.w	8005320 <ai_platform_network_process+0x4cc>
 80051e4:	f105 070c 	add.w	r7, r5, #12
 80051e8:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 80051ec:	8aa3      	ldrh	r3, [r4, #20]
 80051ee:	455b      	cmp	r3, fp
 80051f0:	f67f aefa 	bls.w	8004fe8 <ai_platform_network_process+0x194>
 80051f4:	9401      	str	r4, [sp, #4]
 80051f6:	2d00      	cmp	r5, #0
 80051f8:	d036      	beq.n	8005268 <ai_platform_network_process+0x414>
 80051fa:	882b      	ldrh	r3, [r5, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d033      	beq.n	8005268 <ai_platform_network_process+0x414>
 8005200:	686b      	ldr	r3, [r5, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d030      	beq.n	8005268 <ai_platform_network_process+0x414>
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f04f 0800 	mov.w	r8, #0
 800520c:	b9db      	cbnz	r3, 8005246 <ai_platform_network_process+0x3f2>
 800520e:	e02b      	b.n	8005268 <ai_platform_network_process+0x414>
 8005210:	68d4      	ldr	r4, [r2, #12]
 8005212:	1b00      	subs	r0, r0, r4
 8005214:	4401      	add	r1, r0
 8005216:	6091      	str	r1, [r2, #8]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	6872      	ldr	r2, [r6, #4]
 800521c:	60da      	str	r2, [r3, #12]
 800521e:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8005222:	f85a 2009 	ldr.w	r2, [sl, r9]
 8005226:	440b      	add	r3, r1
 8005228:	4293      	cmp	r3, r2
 800522a:	bf24      	itt	cs
 800522c:	68f3      	ldrcs	r3, [r6, #12]
 800522e:	1ad3      	subcs	r3, r2, r3
 8005230:	6073      	str	r3, [r6, #4]
 8005232:	882b      	ldrh	r3, [r5, #0]
 8005234:	f108 0801 	add.w	r8, r8, #1
 8005238:	4598      	cmp	r8, r3
 800523a:	d215      	bcs.n	8005268 <ai_platform_network_process+0x414>
 800523c:	686b      	ldr	r3, [r5, #4]
 800523e:	b19b      	cbz	r3, 8005268 <ai_platform_network_process+0x414>
 8005240:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005244:	b183      	cbz	r3, 8005268 <ai_platform_network_process+0x414>
 8005246:	68a9      	ldr	r1, [r5, #8]
 8005248:	699a      	ldr	r2, [r3, #24]
 800524a:	f8d1 a000 	ldr.w	sl, [r1]
 800524e:	6814      	ldr	r4, [r2, #0]
 8005250:	6890      	ldr	r0, [r2, #8]
 8005252:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8005256:	eb0a 0609 	add.w	r6, sl, r9
 800525a:	00a4      	lsls	r4, r4, #2
 800525c:	6871      	ldr	r1, [r6, #4]
 800525e:	d5d7      	bpl.n	8005210 <ai_platform_network_process+0x3bc>
 8005260:	68b2      	ldr	r2, [r6, #8]
 8005262:	f002 fc41 	bl	8007ae8 <memcpy>
 8005266:	e7da      	b.n	800521e <ai_platform_network_process+0x3ca>
 8005268:	9801      	ldr	r0, [sp, #4]
 800526a:	f002 f96f 	bl	800754c <ai_layers_forward_all>
 800526e:	2f00      	cmp	r7, #0
 8005270:	d047      	beq.n	8005302 <ai_platform_network_process+0x4ae>
 8005272:	883b      	ldrh	r3, [r7, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d044      	beq.n	8005302 <ai_platform_network_process+0x4ae>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d041      	beq.n	8005302 <ai_platform_network_process+0x4ae>
 800527e:	6818      	ldr	r0, [r3, #0]
 8005280:	2800      	cmp	r0, #0
 8005282:	d03e      	beq.n	8005302 <ai_platform_network_process+0x4ae>
 8005284:	f04f 0800 	mov.w	r8, #0
 8005288:	e019      	b.n	80052be <ai_platform_network_process+0x46a>
 800528a:	f85a 2009 	ldr.w	r2, [sl, r9]
 800528e:	4293      	cmp	r3, r2
 8005290:	bf24      	itt	cs
 8005292:	68f3      	ldrcs	r3, [r6, #12]
 8005294:	1ad3      	subcs	r3, r2, r3
 8005296:	6073      	str	r3, [r6, #4]
 8005298:	6981      	ldr	r1, [r0, #24]
 800529a:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 800529e:	1b12      	subs	r2, r2, r4
 80052a0:	4413      	add	r3, r2
 80052a2:	608b      	str	r3, [r1, #8]
 80052a4:	6983      	ldr	r3, [r0, #24]
 80052a6:	6872      	ldr	r2, [r6, #4]
 80052a8:	60da      	str	r2, [r3, #12]
 80052aa:	883b      	ldrh	r3, [r7, #0]
 80052ac:	f108 0801 	add.w	r8, r8, #1
 80052b0:	4598      	cmp	r8, r3
 80052b2:	d226      	bcs.n	8005302 <ai_platform_network_process+0x4ae>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	b323      	cbz	r3, 8005302 <ai_platform_network_process+0x4ae>
 80052b8:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80052bc:	b308      	cbz	r0, 8005302 <ai_platform_network_process+0x4ae>
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	6981      	ldr	r1, [r0, #24]
 80052c2:	f8d3 a000 	ldr.w	sl, [r3]
 80052c6:	680c      	ldr	r4, [r1, #0]
 80052c8:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80052cc:	eb0a 0609 	add.w	r6, sl, r9
 80052d0:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 80052d4:	00a4      	lsls	r4, r4, #2
 80052d6:	eb0c 0302 	add.w	r3, ip, r2
 80052da:	d5d6      	bpl.n	800528a <ai_platform_network_process+0x436>
 80052dc:	6889      	ldr	r1, [r1, #8]
 80052de:	4660      	mov	r0, ip
 80052e0:	f002 fc02 	bl	8007ae8 <memcpy>
 80052e4:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80052e8:	f85a 2009 	ldr.w	r2, [sl, r9]
 80052ec:	440b      	add	r3, r1
 80052ee:	4293      	cmp	r3, r2
 80052f0:	bf24      	itt	cs
 80052f2:	68f3      	ldrcs	r3, [r6, #12]
 80052f4:	1ad3      	subcs	r3, r2, r3
 80052f6:	6073      	str	r3, [r6, #4]
 80052f8:	883b      	ldrh	r3, [r7, #0]
 80052fa:	f108 0801 	add.w	r8, r8, #1
 80052fe:	4598      	cmp	r8, r3
 8005300:	d3d8      	bcc.n	80052b4 <ai_platform_network_process+0x460>
 8005302:	9b01      	ldr	r3, [sp, #4]
 8005304:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 8005308:	461a      	mov	r2, r3
 800530a:	f10b 0b01 	add.w	fp, fp, #1
 800530e:	8a9b      	ldrh	r3, [r3, #20]
 8005310:	fa1f fb8b 	uxth.w	fp, fp
 8005314:	455b      	cmp	r3, fp
 8005316:	f8a2 b016 	strh.w	fp, [r2, #22]
 800531a:	f63f af6c 	bhi.w	80051f6 <ai_platform_network_process+0x3a2>
 800531e:	e663      	b.n	8004fe8 <ai_platform_network_process+0x194>
 8005320:	2700      	movs	r7, #0
 8005322:	e761      	b.n	80051e8 <ai_platform_network_process+0x394>
 8005324:	461d      	mov	r5, r3
 8005326:	461f      	mov	r7, r3
 8005328:	e75e      	b.n	80051e8 <ai_platform_network_process+0x394>
 800532a:	9c01      	ldr	r4, [sp, #4]
 800532c:	2217      	movs	r2, #23
 800532e:	f104 0010 	add.w	r0, r4, #16
 8005332:	2113      	movs	r1, #19
 8005334:	f000 f814 	bl	8005360 <core_set_error>
 8005338:	46bb      	mov	fp, r7
 800533a:	e655      	b.n	8004fe8 <ai_platform_network_process+0x194>
 800533c:	f104 0010 	add.w	r0, r4, #16
 8005340:	2230      	movs	r2, #48	; 0x30
 8005342:	2111      	movs	r1, #17
 8005344:	f000 f80c 	bl	8005360 <core_set_error>
 8005348:	e64e      	b.n	8004fe8 <ai_platform_network_process+0x194>
 800534a:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800534c:	e5c1      	b.n	8004ed2 <ai_platform_network_process+0x7e>
 800534e:	bf00      	nop

08005350 <core_init>:
 8005350:	2001      	movs	r0, #1
 8005352:	4770      	bx	lr

08005354 <core_get_error>:
 8005354:	4603      	mov	r3, r0
 8005356:	2200      	movs	r2, #0
 8005358:	6800      	ldr	r0, [r0, #0]
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop

08005360 <core_set_error>:
 8005360:	7803      	ldrb	r3, [r0, #0]
 8005362:	b933      	cbnz	r3, 8005372 <core_set_error+0x12>
 8005364:	7001      	strb	r1, [r0, #0]
 8005366:	6803      	ldr	r3, [r0, #0]
 8005368:	f362 231f 	bfi	r3, r2, #8, #24
 800536c:	6003      	str	r3, [r0, #0]
 800536e:	2001      	movs	r0, #1
 8005370:	4770      	bx	lr
 8005372:	2000      	movs	r0, #0
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop

08005378 <func_dummy>:
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop

0800537c <ai_dict8_dot_array_f32>:
 800537c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005380:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005384:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8005388:	f000 80c0 	beq.w	800550c <ai_dict8_dot_array_f32+0x190>
 800538c:	f101 0408 	add.w	r4, r1, #8
 8005390:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8005394:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8005514 <ai_dict8_dot_array_f32+0x198>
 8005398:	eb04 0e09 	add.w	lr, r4, r9
 800539c:	f103 0520 	add.w	r5, r3, #32
 80053a0:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 80053a4:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 80053a8:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 80053ac:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 80053b0:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 80053b4:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 80053b8:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 80053bc:	ed55 3a04 	vldr	s7, [r5, #-16]
 80053c0:	ed55 4a03 	vldr	s9, [r5, #-12]
 80053c4:	ed55 5a02 	vldr	s11, [r5, #-8]
 80053c8:	ed55 6a01 	vldr	s13, [r5, #-4]
 80053cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80053d0:	edd6 7a00 	vldr	s15, [r6]
 80053d4:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 80053d8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80053dc:	ee67 7a83 	vmul.f32	s15, s15, s6
 80053e0:	ed9a 3a00 	vldr	s6, [sl]
 80053e4:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 80053e8:	eee3 7a05 	vfma.f32	s15, s6, s10
 80053ec:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80053f0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80053f4:	ed97 3a00 	vldr	s6, [r7]
 80053f8:	ed96 5a00 	vldr	s10, [r6]
 80053fc:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8005400:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8005404:	eee3 7a04 	vfma.f32	s15, s6, s8
 8005408:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800540c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005410:	ed9a 3a00 	vldr	s6, [sl]
 8005414:	ed96 4a00 	vldr	s8, [r6]
 8005418:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 800541c:	eee5 7a06 	vfma.f32	s15, s10, s12
 8005420:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005424:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005428:	ed97 5a00 	vldr	s10, [r7]
 800542c:	ed96 6a00 	vldr	s12, [r6]
 8005430:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005434:	3408      	adds	r4, #8
 8005436:	45a6      	cmp	lr, r4
 8005438:	f105 0520 	add.w	r5, r5, #32
 800543c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005440:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005444:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005448:	ee37 7a27 	vadd.f32	s14, s14, s15
 800544c:	d1a8      	bne.n	80053a0 <ai_dict8_dot_array_f32+0x24>
 800544e:	4449      	add	r1, r9
 8005450:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8005454:	f01c 0c07 	ands.w	ip, ip, #7
 8005458:	d050      	beq.n	80054fc <ai_dict8_dot_array_f32+0x180>
 800545a:	780c      	ldrb	r4, [r1, #0]
 800545c:	edd3 6a00 	vldr	s13, [r3]
 8005460:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005464:	edd4 7a00 	vldr	s15, [r4]
 8005468:	f1bc 0f01 	cmp.w	ip, #1
 800546c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005470:	d044      	beq.n	80054fc <ai_dict8_dot_array_f32+0x180>
 8005472:	784c      	ldrb	r4, [r1, #1]
 8005474:	edd3 6a01 	vldr	s13, [r3, #4]
 8005478:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800547c:	edd4 7a00 	vldr	s15, [r4]
 8005480:	f1bc 0f02 	cmp.w	ip, #2
 8005484:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005488:	d038      	beq.n	80054fc <ai_dict8_dot_array_f32+0x180>
 800548a:	788c      	ldrb	r4, [r1, #2]
 800548c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005490:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005494:	edd4 7a00 	vldr	s15, [r4]
 8005498:	f1bc 0f03 	cmp.w	ip, #3
 800549c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054a0:	d02c      	beq.n	80054fc <ai_dict8_dot_array_f32+0x180>
 80054a2:	78cc      	ldrb	r4, [r1, #3]
 80054a4:	edd3 6a03 	vldr	s13, [r3, #12]
 80054a8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80054ac:	edd4 7a00 	vldr	s15, [r4]
 80054b0:	f1bc 0f04 	cmp.w	ip, #4
 80054b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054b8:	d020      	beq.n	80054fc <ai_dict8_dot_array_f32+0x180>
 80054ba:	790c      	ldrb	r4, [r1, #4]
 80054bc:	edd3 6a04 	vldr	s13, [r3, #16]
 80054c0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80054c4:	edd4 7a00 	vldr	s15, [r4]
 80054c8:	f1bc 0f05 	cmp.w	ip, #5
 80054cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054d0:	d014      	beq.n	80054fc <ai_dict8_dot_array_f32+0x180>
 80054d2:	794c      	ldrb	r4, [r1, #5]
 80054d4:	edd3 6a05 	vldr	s13, [r3, #20]
 80054d8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80054dc:	edd4 7a00 	vldr	s15, [r4]
 80054e0:	f1bc 0f06 	cmp.w	ip, #6
 80054e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054e8:	d008      	beq.n	80054fc <ai_dict8_dot_array_f32+0x180>
 80054ea:	7989      	ldrb	r1, [r1, #6]
 80054ec:	edd3 7a06 	vldr	s15, [r3, #24]
 80054f0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80054f4:	edd2 6a00 	vldr	s13, [r2]
 80054f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054fc:	edd0 7a00 	vldr	s15, [r0]
 8005500:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005504:	ed80 7a00 	vstr	s14, [r0]
 8005508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800550c:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8005514 <ai_dict8_dot_array_f32+0x198>
 8005510:	e7a0      	b.n	8005454 <ai_dict8_dot_array_f32+0xd8>
 8005512:	bf00      	nop
 8005514:	00000000 	.word	0x00000000

08005518 <ai_dict4_dot_array_f32>:
 8005518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800551c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800551e:	f027 0c01 	bic.w	ip, r7, #1
 8005522:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8005526:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800552a:	f000 80ae 	beq.w	800568a <ai_dict4_dot_array_f32+0x172>
 800552e:	1d0d      	adds	r5, r1, #4
 8005530:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8005534:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8005690 <ai_dict4_dot_array_f32+0x178>
 8005538:	eb05 0e09 	add.w	lr, r5, r9
 800553c:	f103 0420 	add.w	r4, r3, #32
 8005540:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8005544:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8005548:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 800554c:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8005550:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8005554:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8005558:	ed14 5a04 	vldr	s10, [r4, #-16]
 800555c:	ed54 5a03 	vldr	s11, [r4, #-12]
 8005560:	ed14 6a02 	vldr	s12, [r4, #-8]
 8005564:	ed54 6a01 	vldr	s13, [r4, #-4]
 8005568:	f006 0a0f 	and.w	sl, r6, #15
 800556c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005570:	edda 7a00 	vldr	s15, [sl]
 8005574:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8005578:	0936      	lsrs	r6, r6, #4
 800557a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800557e:	ee67 7a83 	vmul.f32	s15, s15, s6
 8005582:	ed96 3a00 	vldr	s6, [r6]
 8005586:	ea4f 161b 	mov.w	r6, fp, lsr #4
 800558a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800558e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005592:	f00b 0b0f 	and.w	fp, fp, #15
 8005596:	edd6 3a00 	vldr	s7, [r6]
 800559a:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 800559e:	eee3 7a84 	vfma.f32	s15, s7, s8
 80055a2:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80055a6:	3504      	adds	r5, #4
 80055a8:	ed9b 4a00 	vldr	s8, [fp]
 80055ac:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 80055b0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80055b4:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 80055b8:	f00a 0a0f 	and.w	sl, sl, #15
 80055bc:	eddb 4a00 	vldr	s9, [fp]
 80055c0:	eee4 7a85 	vfma.f32	s15, s9, s10
 80055c4:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80055c8:	45ae      	cmp	lr, r5
 80055ca:	ed9a 5a00 	vldr	s10, [sl]
 80055ce:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 80055d2:	eee5 7a25 	vfma.f32	s15, s10, s11
 80055d6:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80055da:	f006 060f 	and.w	r6, r6, #15
 80055de:	edda 5a00 	vldr	s11, [sl]
 80055e2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80055e6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80055ea:	f104 0420 	add.w	r4, r4, #32
 80055ee:	ed96 6a00 	vldr	s12, [r6]
 80055f2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80055f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055fa:	d1a1      	bne.n	8005540 <ai_dict4_dot_array_f32+0x28>
 80055fc:	4449      	add	r1, r9
 80055fe:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8005602:	459c      	cmp	ip, r3
 8005604:	d92d      	bls.n	8005662 <ai_dict4_dot_array_f32+0x14a>
 8005606:	f10c 0c07 	add.w	ip, ip, #7
 800560a:	f103 0508 	add.w	r5, r3, #8
 800560e:	ebac 0c05 	sub.w	ip, ip, r5
 8005612:	f02c 0407 	bic.w	r4, ip, #7
 8005616:	f103 0810 	add.w	r8, r3, #16
 800561a:	44a0      	add	r8, r4
 800561c:	f101 3eff 	add.w	lr, r1, #4294967295
 8005620:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8005624:	ed15 6a01 	vldr	s12, [r5, #-4]
 8005628:	ed55 6a02 	vldr	s13, [r5, #-8]
 800562c:	f004 060f 	and.w	r6, r4, #15
 8005630:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005634:	0924      	lsrs	r4, r4, #4
 8005636:	edd6 7a00 	vldr	s15, [r6]
 800563a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800563e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005642:	ed94 6a00 	vldr	s12, [r4]
 8005646:	eee6 7a26 	vfma.f32	s15, s12, s13
 800564a:	3508      	adds	r5, #8
 800564c:	45a8      	cmp	r8, r5
 800564e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005652:	d1e5      	bne.n	8005620 <ai_dict4_dot_array_f32+0x108>
 8005654:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8005658:	f10c 0c01 	add.w	ip, ip, #1
 800565c:	4461      	add	r1, ip
 800565e:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8005662:	07fc      	lsls	r4, r7, #31
 8005664:	d509      	bpl.n	800567a <ai_dict4_dot_array_f32+0x162>
 8005666:	7809      	ldrb	r1, [r1, #0]
 8005668:	edd3 7a00 	vldr	s15, [r3]
 800566c:	090b      	lsrs	r3, r1, #4
 800566e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005672:	edd2 6a00 	vldr	s13, [r2]
 8005676:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800567a:	edd0 7a00 	vldr	s15, [r0]
 800567e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005682:	ed80 7a00 	vstr	s14, [r0]
 8005686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800568a:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8005690 <ai_dict4_dot_array_f32+0x178>
 800568e:	e7b8      	b.n	8005602 <ai_dict4_dot_array_f32+0xea>
 8005690:	00000000 	.word	0x00000000

08005694 <ai_dict_decompress_f32>:
 8005694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005698:	9f08      	ldr	r7, [sp, #32]
 800569a:	2b04      	cmp	r3, #4
 800569c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80056a0:	d00e      	beq.n	80056c0 <ai_dict_decompress_f32+0x2c>
 80056a2:	2b08      	cmp	r3, #8
 80056a4:	d10a      	bne.n	80056bc <ai_dict_decompress_f32+0x28>
 80056a6:	42b8      	cmp	r0, r7
 80056a8:	d208      	bcs.n	80056bc <ai_dict_decompress_f32+0x28>
 80056aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f840 3b04 	str.w	r3, [r0], #4
 80056b8:	4287      	cmp	r7, r0
 80056ba:	d8f6      	bhi.n	80056aa <ai_dict_decompress_f32+0x16>
 80056bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80056c0:	9b07      	ldr	r3, [sp, #28]
 80056c2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80056c6:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 80056ca:	f10c 38ff 	add.w	r8, ip, #4294967295
 80056ce:	f003 0e01 	and.w	lr, r3, #1
 80056d2:	42b8      	cmp	r0, r7
 80056d4:	d2f2      	bcs.n	80056bc <ai_dict_decompress_f32+0x28>
 80056d6:	f1bc 0f00 	cmp.w	ip, #0
 80056da:	d01a      	beq.n	8005712 <ai_dict_decompress_f32+0x7e>
 80056dc:	f100 0508 	add.w	r5, r0, #8
 80056e0:	1e4c      	subs	r4, r1, #1
 80056e2:	eb01 0608 	add.w	r6, r1, r8
 80056e6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80056ea:	091b      	lsrs	r3, r3, #4
 80056ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80056f0:	42a6      	cmp	r6, r4
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f845 3c08 	str.w	r3, [r5, #-8]
 80056f8:	7823      	ldrb	r3, [r4, #0]
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005702:	f105 0508 	add.w	r5, r5, #8
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f845 3c0c 	str.w	r3, [r5, #-12]
 800570c:	d1eb      	bne.n	80056e6 <ai_dict_decompress_f32+0x52>
 800570e:	4461      	add	r1, ip
 8005710:	4448      	add	r0, r9
 8005712:	f1be 0f00 	cmp.w	lr, #0
 8005716:	d103      	bne.n	8005720 <ai_dict_decompress_f32+0x8c>
 8005718:	4287      	cmp	r7, r0
 800571a:	d8dc      	bhi.n	80056d6 <ai_dict_decompress_f32+0x42>
 800571c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005720:	780b      	ldrb	r3, [r1, #0]
 8005722:	091b      	lsrs	r3, r3, #4
 8005724:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005728:	3101      	adds	r1, #1
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6003      	str	r3, [r0, #0]
 800572e:	3004      	adds	r0, #4
 8005730:	e7cf      	b.n	80056d2 <ai_dict_decompress_f32+0x3e>
 8005732:	bf00      	nop

08005734 <forward_conv2d_nl_pool>:
 8005734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005738:	ed2d 8b10 	vpush	{d8-d15}
 800573c:	b0e1      	sub	sp, #388	; 0x184
 800573e:	6983      	ldr	r3, [r0, #24]
 8005740:	881e      	ldrh	r6, [r3, #0]
 8005742:	af0a      	add	r7, sp, #40	; 0x28
 8005744:	2e00      	cmp	r6, #0
 8005746:	f000 859b 	beq.w	8006280 <forward_conv2d_nl_pool+0xb4c>
 800574a:	6859      	ldr	r1, [r3, #4]
 800574c:	684a      	ldr	r2, [r1, #4]
 800574e:	2a00      	cmp	r2, #0
 8005750:	f000 8593 	beq.w	800627a <forward_conv2d_nl_pool+0xb46>
 8005754:	f8d2 c000 	ldr.w	ip, [r2]
 8005758:	2e01      	cmp	r6, #1
 800575a:	f240 858b 	bls.w	8006274 <forward_conv2d_nl_pool+0xb40>
 800575e:	690a      	ldr	r2, [r1, #16]
 8005760:	2a00      	cmp	r2, #0
 8005762:	f000 8582 	beq.w	800626a <forward_conv2d_nl_pool+0xb36>
 8005766:	f8d2 9000 	ldr.w	r9, [r2]
 800576a:	2e02      	cmp	r6, #2
 800576c:	f000 8582 	beq.w	8006274 <forward_conv2d_nl_pool+0xb40>
 8005770:	69cd      	ldr	r5, [r1, #28]
 8005772:	2d00      	cmp	r5, #0
 8005774:	f000 8571 	beq.w	800625a <forward_conv2d_nl_pool+0xb26>
 8005778:	682a      	ldr	r2, [r5, #0]
 800577a:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800577e:	f111 0218 	adds.w	r2, r1, #24
 8005782:	d004      	beq.n	800578e <forward_conv2d_nl_pool+0x5a>
 8005784:	8b0a      	ldrh	r2, [r1, #24]
 8005786:	2a01      	cmp	r2, #1
 8005788:	f240 857c 	bls.w	8006284 <forward_conv2d_nl_pool+0xb50>
 800578c:	686a      	ldr	r2, [r5, #4]
 800578e:	68a9      	ldr	r1, [r5, #8]
 8005790:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005792:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 8005796:	f8dc b018 	ldr.w	fp, [ip, #24]
 800579a:	f8d7 4150 	ldr.w	r4, [r7, #336]	; 0x150
 800579e:	f8dc 800c 	ldr.w	r8, [ip, #12]
 80057a2:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80057a6:	f8d4 c018 	ldr.w	ip, [r4, #24]
 80057aa:	f8db 4008 	ldr.w	r4, [fp, #8]
 80057ae:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 80057b2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80057b6:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 80057ba:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
 80057be:	f8d8 400c 	ldr.w	r4, [r8, #12]
 80057c2:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80057c6:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80057ca:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 80057ce:	f8de 4004 	ldr.w	r4, [lr, #4]
 80057d2:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 80057d6:	f8de 400c 	ldr.w	r4, [lr, #12]
 80057da:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 80057de:	f8de 4008 	ldr.w	r4, [lr, #8]
 80057e2:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 80057e6:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80057ea:	6824      	ldr	r4, [r4, #0]
 80057ec:	f8c7 4144 	str.w	r4, [r7, #324]	; 0x144
 80057f0:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80057f4:	6864      	ldr	r4, [r4, #4]
 80057f6:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80057fa:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 80057fe:	68a5      	ldr	r5, [r4, #8]
 8005800:	f8da 4004 	ldr.w	r4, [sl, #4]
 8005804:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 8005808:	f8da 4008 	ldr.w	r4, [sl, #8]
 800580c:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8005810:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8005812:	6824      	ldr	r4, [r4, #0]
 8005814:	f8c7 4134 	str.w	r4, [r7, #308]	; 0x134
 8005818:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800581a:	6864      	ldr	r4, [r4, #4]
 800581c:	643c      	str	r4, [r7, #64]	; 0x40
 800581e:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8005822:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8005826:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005828:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800582c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800582e:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 8005832:	69c4      	ldr	r4, [r0, #28]
 8005834:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
 8005838:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800583a:	64bc      	str	r4, [r7, #72]	; 0x48
 800583c:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800583e:	647c      	str	r4, [r7, #68]	; 0x44
 8005840:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8005842:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 8005846:	e9d0 ba0c 	ldrd	fp, sl, [r0, #48]	; 0x30
 800584a:	2a00      	cmp	r2, #0
 800584c:	f000 84f8 	beq.w	8006240 <forward_conv2d_nl_pool+0xb0c>
 8005850:	6992      	ldr	r2, [r2, #24]
 8005852:	6892      	ldr	r2, [r2, #8]
 8005854:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8005858:	4680      	mov	r8, r0
 800585a:	6a00      	ldr	r0, [r0, #32]
 800585c:	2900      	cmp	r1, #0
 800585e:	f000 84e4 	beq.w	800622a <forward_conv2d_nl_pool+0xaf6>
 8005862:	698a      	ldr	r2, [r1, #24]
 8005864:	2a00      	cmp	r2, #0
 8005866:	f000 8533 	beq.w	80062d0 <forward_conv2d_nl_pool+0xb9c>
 800586a:	694b      	ldr	r3, [r1, #20]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005872:	e9d2 0100 	ldrd	r0, r1, [r2]
 8005876:	6893      	ldr	r3, [r2, #8]
 8005878:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800587c:	f001 ff24 	bl	80076c8 <ai_array_get_byte_size>
 8005880:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8005884:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8005888:	881e      	ldrh	r6, [r3, #0]
 800588a:	f8d2 c018 	ldr.w	ip, [r2, #24]
 800588e:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8005892:	f8d8 1058 	ldr.w	r1, [r8, #88]	; 0x58
 8005896:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005898:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 800589c:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 80058a0:	fa11 f585 	uxtah	r5, r1, r5
 80058a4:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80058a8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80058ac:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80058b0:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80058b4:	3901      	subs	r1, #1
 80058b6:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 80058ba:	eb05 0e00 	add.w	lr, r5, r0
 80058be:	fa1f f28a 	uxth.w	r2, sl
 80058c2:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 80058c6:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80058ca:	f8dc 4000 	ldr.w	r4, [ip]
 80058ce:	f8dc 1000 	ldr.w	r1, [ip]
 80058d2:	3a01      	subs	r2, #1
 80058d4:	fb00 5002 	mla	r0, r0, r2, r5
 80058d8:	fa1f f28b 	uxth.w	r2, fp
 80058dc:	f3c4 14c6 	ubfx	r4, r4, #7, #7
 80058e0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 80058e4:	f3c1 5141 	ubfx	r1, r1, #21, #2
 80058e8:	1e50      	subs	r0, r2, #1
 80058ea:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 80058ee:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80058f2:	fa44 f101 	asr.w	r1, r4, r1
 80058f6:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 80058fa:	f8dc 4000 	ldr.w	r4, [ip]
 80058fe:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8005902:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005906:	f3c4 4543 	ubfx	r5, r4, #17, #4
 800590a:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800590e:	ebae 0202 	sub.w	r2, lr, r2
 8005912:	fa1f fe81 	uxth.w	lr, r1
 8005916:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800591a:	fbb2 f2f1 	udiv	r2, r2, r1
 800591e:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 8005922:	3c01      	subs	r4, #1
 8005924:	fb04 1100 	mla	r1, r4, r0, r1
 8005928:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800592c:	1c51      	adds	r1, r2, #1
 800592e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005932:	487c      	ldr	r0, [pc, #496]	; (8005b24 <forward_conv2d_nl_pool+0x3f0>)
 8005934:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8005938:	4611      	mov	r1, r2
 800593a:	2a00      	cmp	r2, #0
 800593c:	bf08      	it	eq
 800593e:	4601      	moveq	r1, r0
 8005940:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 8005944:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8005948:	2d04      	cmp	r5, #4
 800594a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800594e:	f000 849e 	beq.w	800628e <forward_conv2d_nl_pool+0xb5a>
 8005952:	2d08      	cmp	r5, #8
 8005954:	f000 849b 	beq.w	800628e <forward_conv2d_nl_pool+0xb5a>
 8005958:	f8d9 2018 	ldr.w	r2, [r9, #24]
 800595c:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8005960:	2e03      	cmp	r6, #3
 8005962:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 8005966:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 800596a:	f240 8483 	bls.w	8006274 <forward_conv2d_nl_pool+0xb40>
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 8489 	beq.w	800628a <forward_conv2d_nl_pool+0xb56>
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8005986:	6899      	ldr	r1, [r3, #8]
 8005988:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800598c:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8005990:	6896      	ldr	r6, [r2, #8]
 8005992:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 8005996:	4249      	negs	r1, r1
 8005998:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 800599c:	2800      	cmp	r0, #0
 800599e:	f000 82dd 	beq.w	8005f5c <forward_conv2d_nl_pool+0x828>
 80059a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80059a6:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80059aa:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80059ae:	f8d7 50bc 	ldr.w	r5, [r7, #188]	; 0xbc
 80059b2:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 8005b28 <forward_conv2d_nl_pool+0x3f4>
 80059b6:	fb03 f200 	mul.w	r2, r3, r0
 80059ba:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80059be:	008c      	lsls	r4, r1, #2
 80059c0:	fb04 f000 	mul.w	r0, r4, r0
 80059c4:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 80059c8:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80059cc:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 80059d0:	fb01 fc02 	mul.w	ip, r1, r2
 80059d4:	00a2      	lsls	r2, r4, #2
 80059d6:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 80059da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80059de:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 80059e2:	00ab      	lsls	r3, r5, #2
 80059e4:	4694      	mov	ip, r2
 80059e6:	fb0c f204 	mul.w	r2, ip, r4
 80059ea:	fb04 f303 	mul.w	r3, r4, r3
 80059ee:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 80059f2:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 80059f6:	00a4      	lsls	r4, r4, #2
 80059f8:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80059fc:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 8005a00:	f04f 0c00 	mov.w	ip, #0
 8005a04:	fa0f f58b 	sxth.w	r5, fp
 8005a08:	f8c7 c0e0 	str.w	ip, [r7, #224]	; 0xe0
 8005a0c:	46a4      	mov	ip, r4
 8005a0e:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 8005a12:	f8c7 50e8 	str.w	r5, [r7, #232]	; 0xe8
 8005a16:	fa0f f58a 	sxth.w	r5, sl
 8005a1a:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
 8005a1e:	fb0c fc04 	mul.w	ip, ip, r4
 8005a22:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
 8005a26:	fb06 fc03 	mul.w	ip, r6, r3
 8005a2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a2e:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 8005a32:	4240      	negs	r0, r0
 8005a34:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 8005a38:	469c      	mov	ip, r3
 8005a3a:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8005a3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a42:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 8005a46:	f8b7 5130 	ldrh.w	r5, [r7, #304]	; 0x130
 8005a4a:	f8c7 50ec 	str.w	r5, [r7, #236]	; 0xec
 8005a4e:	fb00 f303 	mul.w	r3, r0, r3
 8005a52:	460d      	mov	r5, r1
 8005a54:	fb0c fc04 	mul.w	ip, ip, r4
 8005a58:	627b      	str	r3, [r7, #36]	; 0x24
 8005a5a:	fb04 f305 	mul.w	r3, r4, r5
 8005a5e:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 8005a62:	f8d7 50ec 	ldr.w	r5, [r7, #236]	; 0xec
 8005a66:	623b      	str	r3, [r7, #32]
 8005a68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a6c:	46a6      	mov	lr, r4
 8005a6e:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 8005a72:	fb05 f503 	mul.w	r5, r5, r3
 8005a76:	667d      	str	r5, [r7, #100]	; 0x64
 8005a78:	4625      	mov	r5, r4
 8005a7a:	fb05 f503 	mul.w	r5, r5, r3
 8005a7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005a82:	66bd      	str	r5, [r7, #104]	; 0x68
 8005a84:	fb00 f101 	mul.w	r1, r0, r1
 8005a88:	fb03 f306 	mul.w	r3, r3, r6
 8005a8c:	657b      	str	r3, [r7, #84]	; 0x54
 8005a8e:	008b      	lsls	r3, r1, #2
 8005a90:	633b      	str	r3, [r7, #48]	; 0x30
 8005a92:	0093      	lsls	r3, r2, #2
 8005a94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a96:	0083      	lsls	r3, r0, #2
 8005a98:	61bb      	str	r3, [r7, #24]
 8005a9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a9e:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8005aa2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8005aa6:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8005aaa:	2400      	movs	r4, #0
 8005aac:	63bb      	str	r3, [r7, #56]	; 0x38
 8005aae:	4603      	mov	r3, r0
 8005ab0:	fb03 f301 	mul.w	r3, r3, r1
 8005ab4:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
 8005ab8:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8005abc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005ac0:	00d1      	lsls	r1, r2, #3
 8005ac2:	0113      	lsls	r3, r2, #4
 8005ac4:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8005ac8:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8005acc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005ad0:	fb00 f004 	mul.w	r0, r0, r4
 8005ad4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8005ad8:	66f8      	str	r0, [r7, #108]	; 0x6c
 8005ada:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8005ade:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8005ae2:	469a      	mov	sl, r3
 8005ae4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f340 81d0 	ble.w	8005e8e <forward_conv2d_nl_pool+0x75a>
 8005aee:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8005af2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005af6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8005afa:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8005afe:	2900      	cmp	r1, #0
 8005b00:	441a      	add	r2, r3
 8005b02:	bfb4      	ite	lt
 8005b04:	2100      	movlt	r1, #0
 8005b06:	2300      	movge	r3, #0
 8005b08:	4282      	cmp	r2, r0
 8005b0a:	bf28      	it	cs
 8005b0c:	4602      	movcs	r2, r0
 8005b0e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8005b12:	2801      	cmp	r0, #1
 8005b14:	f000 83f6 	beq.w	8006304 <forward_conv2d_nl_pool+0xbd0>
 8005b18:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005b1c:	4281      	cmp	r1, r0
 8005b1e:	f000 822a 	beq.w	8005f76 <forward_conv2d_nl_pool+0x842>
 8005b22:	e003      	b.n	8005b2c <forward_conv2d_nl_pool+0x3f8>
 8005b24:	08005379 	.word	0x08005379
 8005b28:	00000000 	.word	0x00000000
 8005b2c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8005b30:	2900      	cmp	r1, #0
 8005b32:	f000 819f 	beq.w	8005e74 <forward_conv2d_nl_pool+0x740>
 8005b36:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8005b3a:	fb93 f1f0 	sdiv	r1, r3, r0
 8005b3e:	fb00 3111 	mls	r1, r0, r1, r3
 8005b42:	1a41      	subs	r1, r0, r1
 8005b44:	1ad2      	subs	r2, r2, r3
 8005b46:	fb91 f5f0 	sdiv	r5, r1, r0
 8005b4a:	fb00 1515 	mls	r5, r0, r5, r1
 8005b4e:	1b52      	subs	r2, r2, r5
 8005b50:	4601      	mov	r1, r0
 8005b52:	4402      	add	r2, r0
 8005b54:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8005b58:	f8d7 6120 	ldr.w	r6, [r7, #288]	; 0x120
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8005b62:	fbb4 f4f0 	udiv	r4, r4, r0
 8005b66:	6a38      	ldr	r0, [r7, #32]
 8005b68:	3a01      	subs	r2, #1
 8005b6a:	fb92 f8f1 	sdiv	r8, r2, r1
 8005b6e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8005b72:	eba0 0c04 	sub.w	ip, r0, r4
 8005b76:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8005b7a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8005b7e:	4614      	mov	r4, r2
 8005b80:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8005b84:	fbb4 f2f2 	udiv	r2, r4, r2
 8005b88:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8005b8c:	663a      	str	r2, [r7, #96]	; 0x60
 8005b8e:	441d      	add	r5, r3
 8005b90:	fb0e f000 	mul.w	r0, lr, r0
 8005b94:	440b      	add	r3, r1
 8005b96:	eba6 0608 	sub.w	r6, r6, r8
 8005b9a:	fb04 f505 	mul.w	r5, r4, r5
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 8005ba4:	fb93 f3f4 	sdiv	r3, r3, r4
 8005ba8:	fb00 f406 	mul.w	r4, r0, r6
 8005bac:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8005bb0:	677d      	str	r5, [r7, #116]	; 0x74
 8005bb2:	0091      	lsls	r1, r2, #2
 8005bb4:	fb00 f003 	mul.w	r0, r0, r3
 8005bb8:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8005bbc:	65f8      	str	r0, [r7, #92]	; 0x5c
 8005bbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bc2:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8005bc6:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 8005bca:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8005bce:	1ac3      	subs	r3, r0, r3
 8005bd0:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 8005bd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005bd8:	008b      	lsls	r3, r1, #2
 8005bda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bdc:	00d3      	lsls	r3, r2, #3
 8005bde:	61fb      	str	r3, [r7, #28]
 8005be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005be4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005be8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 8005bf6:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8005bfa:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bfc:	46c2      	mov	sl, r8
 8005bfe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c02:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8005c06:	eb03 0c02 	add.w	ip, r3, r2
 8005c0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f2c0 811c 	blt.w	8005e4c <forward_conv2d_nl_pool+0x718>
 8005c14:	2000      	movs	r0, #0
 8005c16:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8005c18:	f8d7 80e8 	ldr.w	r8, [r7, #232]	; 0xe8
 8005c1c:	4605      	mov	r5, r0
 8005c1e:	4606      	mov	r6, r0
 8005c20:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c24:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005c28:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005c32:	440a      	add	r2, r1
 8005c34:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8005c38:	428b      	cmp	r3, r1
 8005c3a:	bf94      	ite	ls
 8005c3c:	ebc6 0303 	rsbls	r3, r6, r3
 8005c40:	ebc6 0301 	rsbhi	r3, r6, r1
 8005c44:	4415      	add	r5, r2
 8005c46:	1a1b      	subs	r3, r3, r0
 8005c48:	00a4      	lsls	r4, r4, #2
 8005c4a:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8005c4e:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 8005c52:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8005c56:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 8005c58:	4602      	mov	r2, r0
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	bf08      	it	eq
 8005c5e:	4662      	moveq	r2, ip
 8005c60:	f108 31ff 	add.w	r1, r8, #4294967295
 8005c64:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8005c68:	fb91 f1f0 	sdiv	r1, r1, r0
 8005c6c:	4429      	add	r1, r5
 8005c6e:	f8d7 5128 	ldr.w	r5, [r7, #296]	; 0x128
 8005c72:	fb0e 5501 	mla	r5, lr, r1, r5
 8005c76:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005c7a:	4403      	add	r3, r0
 8005c7c:	fb01 6104 	mla	r1, r1, r4, r6
 8005c80:	3b01      	subs	r3, #1
 8005c82:	fb93 f6f0 	sdiv	r6, r3, r0
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8005c8c:	fb06 3110 	mls	r1, r6, r0, r3
 8005c90:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005c94:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8005c98:	4562      	cmp	r2, ip
 8005c9a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005c9e:	bf08      	it	eq
 8005ca0:	eeb0 6a48 	vmoveq.f32	s12, s16
 8005ca4:	1b9b      	subs	r3, r3, r6
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	d070      	beq.n	8005d8c <forward_conv2d_nl_pool+0x658>
 8005caa:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8005cae:	fb0e f803 	mul.w	r8, lr, r3
 8005cb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cb4:	fb00 fb01 	mul.w	fp, r0, r1
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d067      	beq.n	8005d8c <forward_conv2d_nl_pool+0x658>
 8005cbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cc0:	18d3      	adds	r3, r2, r3
 8005cc2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005cc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cca:	1a9b      	subs	r3, r3, r2
 8005ccc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cce:	2300      	movs	r3, #0
 8005cd0:	673b      	str	r3, [r7, #112]	; 0x70
 8005cd2:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8005cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd8:	4413      	add	r3, r2
 8005cda:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cdc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005ce8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005cec:	ecf3 7a01 	vldmia	r3!, {s15}
 8005cf0:	f1ba 0f00 	cmp.w	sl, #0
 8005cf4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005cf8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005cfc:	f340 80a4 	ble.w	8005e48 <forward_conv2d_nl_pool+0x714>
 8005d00:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8005d04:	f04f 0c00 	mov.w	ip, #0
 8005d08:	2e00      	cmp	r6, #0
 8005d0a:	dd19      	ble.n	8005d40 <forward_conv2d_nl_pool+0x60c>
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	eb00 040e 	add.w	r4, r0, lr
 8005d12:	4284      	cmp	r4, r0
 8005d14:	d910      	bls.n	8005d38 <forward_conv2d_nl_pool+0x604>
 8005d16:	4603      	mov	r3, r0
 8005d18:	462a      	mov	r2, r5
 8005d1a:	ecb3 7a01 	vldmia	r3!, {s14}
 8005d1e:	ecf2 6a01 	vldmia	r2!, {s13}
 8005d22:	429c      	cmp	r4, r3
 8005d24:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005d28:	d8f7      	bhi.n	8005d1a <forward_conv2d_nl_pool+0x5e6>
 8005d2a:	43c3      	mvns	r3, r0
 8005d2c:	441c      	add	r4, r3
 8005d2e:	f024 0403 	bic.w	r4, r4, #3
 8005d32:	3404      	adds	r4, #4
 8005d34:	4425      	add	r5, r4
 8005d36:	4420      	add	r0, r4
 8005d38:	3101      	adds	r1, #1
 8005d3a:	428e      	cmp	r6, r1
 8005d3c:	4448      	add	r0, r9
 8005d3e:	d1e6      	bne.n	8005d0e <forward_conv2d_nl_pool+0x5da>
 8005d40:	f10c 0c01 	add.w	ip, ip, #1
 8005d44:	45e2      	cmp	sl, ip
 8005d46:	4458      	add	r0, fp
 8005d48:	4445      	add	r5, r8
 8005d4a:	d1dd      	bne.n	8005d08 <forward_conv2d_nl_pool+0x5d4>
 8005d4c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8005d50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d54:	441d      	add	r5, r3
 8005d56:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005d5a:	ece3 7a01 	vstmia	r3!, {s15}
 8005d5e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8005d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d1be      	bne.n	8005ce8 <forward_conv2d_nl_pool+0x5b4>
 8005d6a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005d6e:	69f9      	ldr	r1, [r7, #28]
 8005d70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d72:	4472      	add	r2, lr
 8005d74:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8005d78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d7a:	1a52      	subs	r2, r2, r1
 8005d7c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8005d80:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8005d84:	3301      	adds	r3, #1
 8005d86:	429a      	cmp	r2, r3
 8005d88:	673b      	str	r3, [r7, #112]	; 0x70
 8005d8a:	d1a2      	bne.n	8005cd2 <forward_conv2d_nl_pool+0x59e>
 8005d8c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8005d90:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005d94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d96:	4608      	mov	r0, r1
 8005d98:	4410      	add	r0, r2
 8005d9a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8005d9e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8005da2:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8005da6:	4401      	add	r1, r0
 8005da8:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8005dac:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8005db0:	1a8a      	subs	r2, r1, r2
 8005db2:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8005db6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005dba:	3301      	adds	r3, #1
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dc0:	f47f af1d 	bne.w	8005bfe <forward_conv2d_nl_pool+0x4ca>
 8005dc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005dcc:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	2a00      	cmp	r2, #0
 8005dd4:	f000 8210 	beq.w	80061f8 <forward_conv2d_nl_pool+0xac4>
 8005dd8:	2400      	movs	r4, #0
 8005dda:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 8005dde:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 8005de2:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 8005de6:	f8d7 9108 	ldr.w	r9, [r7, #264]	; 0x108
 8005dea:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 8005dee:	609e      	str	r6, [r3, #8]
 8005df0:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8005df4:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 8005df8:	462b      	mov	r3, r5
 8005dfa:	4641      	mov	r1, r8
 8005dfc:	4640      	mov	r0, r8
 8005dfe:	47a0      	blx	r4
 8005e00:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8005e04:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8005e08:	6859      	ldr	r1, [r3, #4]
 8005e0a:	68da      	ldr	r2, [r3, #12]
 8005e0c:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8005e10:	4405      	add	r5, r0
 8005e12:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8005e16:	0089      	lsls	r1, r1, #2
 8005e18:	4406      	add	r6, r0
 8005e1a:	eba5 0c09 	sub.w	ip, r5, r9
 8005e1e:	1850      	adds	r0, r2, r1
 8005e20:	45a4      	cmp	ip, r4
 8005e22:	bfa8      	it	ge
 8005e24:	464d      	movge	r5, r9
 8005e26:	4286      	cmp	r6, r0
 8005e28:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8005e2c:	bf28      	it	cs
 8005e2e:	1a76      	subcs	r6, r6, r1
 8005e30:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8005e34:	3001      	adds	r0, #1
 8005e36:	4281      	cmp	r1, r0
 8005e38:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 8005e3c:	d1d7      	bne.n	8005dee <forward_conv2d_nl_pool+0x6ba>
 8005e3e:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 8005e42:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 8005e46:	e019      	b.n	8005e7c <forward_conv2d_nl_pool+0x748>
 8005e48:	461a      	mov	r2, r3
 8005e4a:	e781      	b.n	8005d50 <forward_conv2d_nl_pool+0x61c>
 8005e4c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005e50:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8005e54:	fb90 f3f2 	sdiv	r3, r0, r2
 8005e58:	fb02 0313 	mls	r3, r2, r3, r0
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	4605      	mov	r5, r0
 8005e60:	fb93 f0f2 	sdiv	r0, r3, r2
 8005e64:	fb02 3010 	mls	r0, r2, r0, r3
 8005e68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e6a:	462e      	mov	r6, r5
 8005e6c:	18c4      	adds	r4, r0, r3
 8005e6e:	eb02 0805 	add.w	r8, r2, r5
 8005e72:	e6d5      	b.n	8005c20 <forward_conv2d_nl_pool+0x4ec>
 8005e74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	68da      	ldr	r2, [r3, #12]
 8005e7c:	609a      	str	r2, [r3, #8]
 8005e7e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005e82:	3301      	adds	r3, #1
 8005e84:	b21b      	sxth	r3, r3
 8005e86:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8005e8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e94:	f100 83bf 	bmi.w	8006616 <forward_conv2d_nl_pool+0xee2>
 8005e98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e9c:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8005ea0:	42a3      	cmp	r3, r4
 8005ea2:	f200 839d 	bhi.w	80065e0 <forward_conv2d_nl_pool+0xeac>
 8005ea6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	6990      	ldr	r0, [r2, #24]
 8005eae:	9301      	str	r3, [sp, #4]
 8005eb0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005eb4:	f8d7 80bc 	ldr.w	r8, [r7, #188]	; 0xbc
 8005eb8:	f8b7 5094 	ldrh.w	r5, [r7, #148]	; 0x94
 8005ebc:	1a9b      	subs	r3, r3, r2
 8005ebe:	fa1f f188 	uxth.w	r1, r8
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005ec8:	9308      	str	r3, [sp, #32]
 8005eca:	9105      	str	r1, [sp, #20]
 8005ecc:	2601      	movs	r6, #1
 8005ece:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005ed2:	9607      	str	r6, [sp, #28]
 8005ed4:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 8005ed8:	9506      	str	r5, [sp, #24]
 8005eda:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
 8005ede:	9304      	str	r3, [sp, #16]
 8005ee0:	1a64      	subs	r4, r4, r1
 8005ee2:	b2b1      	uxth	r1, r6
 8005ee4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8005eee:	b224      	sxth	r4, r4
 8005ef0:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8005ef4:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8005ef8:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8005efc:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8005efe:	47a0      	blx	r4
 8005f00:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8005f04:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 8005f08:	688a      	ldr	r2, [r1, #8]
 8005f0a:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8005f0c:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8005f10:	fa0f f388 	sxth.w	r3, r8
 8005f14:	1af3      	subs	r3, r6, r3
 8005f16:	4422      	add	r2, r4
 8005f18:	462e      	mov	r6, r5
 8005f1a:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8005f1e:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 8005f22:	608a      	str	r2, [r1, #8]
 8005f24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005f28:	4426      	add	r6, r4
 8005f2a:	b21b      	sxth	r3, r3
 8005f2c:	1b2c      	subs	r4, r5, r4
 8005f2e:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 8005f32:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 8005f34:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8005f38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f40:	f8c7 611c 	str.w	r6, [r7, #284]	; 0x11c
 8005f44:	3001      	adds	r0, #1
 8005f46:	442c      	add	r4, r5
 8005f48:	4283      	cmp	r3, r0
 8005f4a:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 8005f4e:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 8005f52:	f63f adc7 	bhi.w	8005ae4 <forward_conv2d_nl_pool+0x3b0>
 8005f56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	68da      	ldr	r2, [r3, #12]
 8005f5e:	609a      	str	r2, [r3, #8]
 8005f60:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f64:	68d3      	ldr	r3, [r2, #12]
 8005f66:	6093      	str	r3, [r2, #8]
 8005f68:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	ecbd 8b10 	vpop	{d8-d15}
 8005f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f76:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f78:	2901      	cmp	r1, #1
 8005f7a:	f47f add7 	bne.w	8005b2c <forward_conv2d_nl_pool+0x3f8>
 8005f7e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8005f82:	2900      	cmp	r1, #0
 8005f84:	f43f af76 	beq.w	8005e74 <forward_conv2d_nl_pool+0x740>
 8005f88:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8005f8c:	f8d7 6154 	ldr.w	r6, [r7, #340]	; 0x154
 8005f90:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8005f94:	1ad2      	subs	r2, r2, r3
 8005f96:	1a8c      	subs	r4, r1, r2
 8005f98:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8005f9c:	00b2      	lsls	r2, r6, #2
 8005f9e:	fb02 f204 	mul.w	r2, r2, r4
 8005fa2:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8005fa6:	fbb1 f1f0 	udiv	r1, r1, r0
 8005faa:	ebc1 7081 	rsb	r0, r1, r1, lsl #30
 8005fae:	460d      	mov	r5, r1
 8005fb0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005fb2:	62ba      	str	r2, [r7, #40]	; 0x28
 8005fb4:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 8005fb8:	0082      	lsls	r2, r0, #2
 8005fba:	65ba      	str	r2, [r7, #88]	; 0x58
 8005fbc:	00ca      	lsls	r2, r1, #3
 8005fbe:	607a      	str	r2, [r7, #4]
 8005fc0:	00aa      	lsls	r2, r5, #2
 8005fc2:	60ba      	str	r2, [r7, #8]
 8005fc4:	fb03 f206 	mul.w	r2, r3, r6
 8005fc8:	67ba      	str	r2, [r7, #120]	; 0x78
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	fb02 f303 	mul.w	r3, r2, r3
 8005fd0:	617b      	str	r3, [r7, #20]
 8005fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005fda:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005fde:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005fe2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005fe6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005fea:	2300      	movs	r3, #0
 8005fec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f2c0 8112 	blt.w	800621e <forward_conv2d_nl_pool+0xaea>
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ffe:	460a      	mov	r2, r1
 8006000:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8006004:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8006008:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 800600c:	4420      	add	r0, r4
 800600e:	4408      	add	r0, r1
 8006010:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8006014:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8006018:	190c      	adds	r4, r1, r4
 800601a:	42ac      	cmp	r4, r5
 800601c:	bf28      	it	cs
 800601e:	462c      	movcs	r4, r5
 8006020:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 8006024:	0080      	lsls	r0, r0, #2
 8006026:	1aa4      	subs	r4, r4, r2
 8006028:	2d00      	cmp	r5, #0
 800602a:	f000 80e9 	beq.w	8006200 <forward_conv2d_nl_pool+0xacc>
 800602e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006032:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 8006036:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800603a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800603e:	42b5      	cmp	r5, r6
 8006040:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8006044:	eba3 0204 	sub.w	r2, r3, r4
 8006048:	eba1 0104 	sub.w	r1, r1, r4
 800604c:	bf08      	it	eq
 800604e:	eef0 3a48 	vmoveq.f32	s7, s16
 8006052:	462b      	mov	r3, r5
 8006054:	697d      	ldr	r5, [r7, #20]
 8006056:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 800605a:	4428      	add	r0, r5
 800605c:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 8006060:	fb05 6e00 	mla	lr, r5, r0, r6
 8006064:	eb0e 000b 	add.w	r0, lr, fp
 8006068:	4586      	cmp	lr, r0
 800606a:	61f8      	str	r0, [r7, #28]
 800606c:	f080 80a5 	bcs.w	80061ba <forward_conv2d_nl_pool+0xa86>
 8006070:	0092      	lsls	r2, r2, #2
 8006072:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8006076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006078:	fb01 f10b 	mul.w	r1, r1, fp
 800607c:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8006080:	f024 0803 	bic.w	r8, r4, #3
 8006084:	2a00      	cmp	r2, #0
 8006086:	f000 8098 	beq.w	80061ba <forward_conv2d_nl_pool+0xa86>
 800608a:	f108 32ff 	add.w	r2, r8, #4294967295
 800608e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006090:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8006094:	0892      	lsrs	r2, r2, #2
 8006096:	3201      	adds	r2, #1
 8006098:	4401      	add	r1, r0
 800609a:	fb02 f00a 	mul.w	r0, r2, sl
 800609e:	6638      	str	r0, [r7, #96]	; 0x60
 80060a0:	0110      	lsls	r0, r2, #4
 80060a2:	0092      	lsls	r2, r2, #2
 80060a4:	65fa      	str	r2, [r7, #92]	; 0x5c
 80060a6:	1aca      	subs	r2, r1, r3
 80060a8:	613a      	str	r2, [r7, #16]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	6738      	str	r0, [r7, #112]	; 0x70
 80060ae:	4413      	add	r3, r2
 80060b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060b4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80060b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060ba:	4413      	add	r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	4413      	add	r3, r2
 80060c6:	677b      	str	r3, [r7, #116]	; 0x74
 80060c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060cc:	ecf3 6a01 	vldmia	r3!, {s13}
 80060d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80060d8:	2b00      	cmp	r3, #0
 80060da:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80060de:	dd57      	ble.n	8006190 <forward_conv2d_nl_pool+0xa5c>
 80060e0:	4676      	mov	r6, lr
 80060e2:	f04f 0c00 	mov.w	ip, #0
 80060e6:	f1b8 0f00 	cmp.w	r8, #0
 80060ea:	f340 8087 	ble.w	80061fc <forward_conv2d_nl_pool+0xac8>
 80060ee:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80060f2:	f109 0310 	add.w	r3, r9, #16
 80060f6:	18b1      	adds	r1, r6, r2
 80060f8:	2000      	movs	r0, #0
 80060fa:	4632      	mov	r2, r6
 80060fc:	eb02 050b 	add.w	r5, r2, fp
 8006100:	ed95 7a00 	vldr	s14, [r5]
 8006104:	ed53 7a03 	vldr	s15, [r3, #-12]
 8006108:	ed92 4a00 	vldr	s8, [r2]
 800610c:	ed53 4a04 	vldr	s9, [r3, #-16]
 8006110:	ed91 5a00 	vldr	s10, [r1]
 8006114:	ed53 5a02 	vldr	s11, [r3, #-8]
 8006118:	ed13 6a01 	vldr	s12, [r3, #-4]
 800611c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006120:	eb01 050b 	add.w	r5, r1, fp
 8006124:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006128:	3004      	adds	r0, #4
 800612a:	4540      	cmp	r0, r8
 800612c:	ed95 7a00 	vldr	s14, [r5]
 8006130:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006134:	4452      	add	r2, sl
 8006136:	4451      	add	r1, sl
 8006138:	f103 0310 	add.w	r3, r3, #16
 800613c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8006140:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006144:	dbda      	blt.n	80060fc <forward_conv2d_nl_pool+0x9c8>
 8006146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006148:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800614a:	441e      	add	r6, r3
 800614c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800614e:	4499      	add	r9, r3
 8006150:	42a0      	cmp	r0, r4
 8006152:	da11      	bge.n	8006178 <forward_conv2d_nl_pool+0xa44>
 8006154:	4602      	mov	r2, r0
 8006156:	4633      	mov	r3, r6
 8006158:	4649      	mov	r1, r9
 800615a:	edd3 7a00 	vldr	s15, [r3]
 800615e:	ecb1 7a01 	vldmia	r1!, {s14}
 8006162:	3201      	adds	r2, #1
 8006164:	42a2      	cmp	r2, r4
 8006166:	eee7 6a27 	vfma.f32	s13, s14, s15
 800616a:	445b      	add	r3, fp
 800616c:	d1f5      	bne.n	800615a <forward_conv2d_nl_pool+0xa26>
 800616e:	1a20      	subs	r0, r4, r0
 8006170:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8006174:	fb00 660b 	mla	r6, r0, fp, r6
 8006178:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800617c:	441e      	add	r6, r3
 800617e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006182:	4499      	add	r9, r3
 8006184:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006188:	f10c 0c01 	add.w	ip, ip, #1
 800618c:	4563      	cmp	r3, ip
 800618e:	d1aa      	bne.n	80060e6 <forward_conv2d_nl_pool+0x9b2>
 8006190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006192:	4499      	add	r9, r3
 8006194:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006196:	ece3 6a01 	vstmia	r3!, {s13}
 800619a:	677b      	str	r3, [r7, #116]	; 0x74
 800619c:	e9d7 2333 	ldrd	r2, r3, [r7, #204]	; 0xcc
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d191      	bne.n	80060c8 <forward_conv2d_nl_pool+0x994>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	1a9b      	subs	r3, r3, r2
 80061aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	f10e 0e04 	add.w	lr, lr, #4
 80061b4:	459e      	cmp	lr, r3
 80061b6:	f4ff af7d 	bcc.w	80060b4 <forward_conv2d_nl_pool+0x980>
 80061ba:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80061be:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80061c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061c6:	440a      	add	r2, r1
 80061c8:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80061cc:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 80061d0:	4608      	mov	r0, r1
 80061d2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80061d6:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 80061da:	4410      	add	r0, r2
 80061dc:	1a8a      	subs	r2, r1, r2
 80061de:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80061e2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80061e6:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80061ea:	3301      	adds	r3, #1
 80061ec:	429a      	cmp	r2, r3
 80061ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061f2:	f47f aefd 	bne.w	8005ff0 <forward_conv2d_nl_pool+0x8bc>
 80061f6:	e5e7      	b.n	8005dc8 <forward_conv2d_nl_pool+0x694>
 80061f8:	68da      	ldr	r2, [r3, #12]
 80061fa:	e63f      	b.n	8005e7c <forward_conv2d_nl_pool+0x748>
 80061fc:	2000      	movs	r0, #0
 80061fe:	e7a7      	b.n	8006150 <forward_conv2d_nl_pool+0xa1c>
 8006200:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006204:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8006208:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800620c:	1b19      	subs	r1, r3, r4
 800620e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006212:	eef0 3a48 	vmov.f32	s7, s16
 8006216:	1b1a      	subs	r2, r3, r4
 8006218:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800621c:	e71a      	b.n	8006054 <forward_conv2d_nl_pool+0x920>
 800621e:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8006222:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006224:	460a      	mov	r2, r1
 8006226:	440b      	add	r3, r1
 8006228:	e6ea      	b.n	8006000 <forward_conv2d_nl_pool+0x8cc>
 800622a:	b168      	cbz	r0, 8006248 <forward_conv2d_nl_pool+0xb14>
 800622c:	6882      	ldr	r2, [r0, #8]
 800622e:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8006232:	2201      	movs	r2, #1
 8006234:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8006238:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800623c:	f7ff bb29 	b.w	8005892 <forward_conv2d_nl_pool+0x15e>
 8006240:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8006244:	f7ff bb08 	b.w	8005858 <forward_conv2d_nl_pool+0x124>
 8006248:	2201      	movs	r2, #1
 800624a:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800624e:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8006252:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8006256:	f7ff bb1c 	b.w	8005892 <forward_conv2d_nl_pool+0x15e>
 800625a:	3118      	adds	r1, #24
 800625c:	d008      	beq.n	8006270 <forward_conv2d_nl_pool+0xb3c>
 800625e:	462a      	mov	r2, r5
 8006260:	f8c7 5150 	str.w	r5, [r7, #336]	; 0x150
 8006264:	4629      	mov	r1, r5
 8006266:	f7ff ba93 	b.w	8005790 <forward_conv2d_nl_pool+0x5c>
 800626a:	4691      	mov	r9, r2
 800626c:	f7ff ba7d 	b.w	800576a <forward_conv2d_nl_pool+0x36>
 8006270:	68cb      	ldr	r3, [r1, #12]
 8006272:	deff      	udf	#255	; 0xff
 8006274:	2300      	movs	r3, #0
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	deff      	udf	#255	; 0xff
 800627a:	4694      	mov	ip, r2
 800627c:	f7ff ba6c 	b.w	8005758 <forward_conv2d_nl_pool+0x24>
 8006280:	6873      	ldr	r3, [r6, #4]
 8006282:	deff      	udf	#255	; 0xff
 8006284:	2200      	movs	r2, #0
 8006286:	f7ff ba82 	b.w	800578e <forward_conv2d_nl_pool+0x5a>
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	deff      	udf	#255	; 0xff
 800628e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8006292:	2a00      	cmp	r2, #0
 8006294:	f43f ab60 	beq.w	8005958 <forward_conv2d_nl_pool+0x224>
 8006298:	2e03      	cmp	r6, #3
 800629a:	d9eb      	bls.n	8006274 <forward_conv2d_nl_pool+0xb40>
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a0:	b323      	cbz	r3, 80062ec <forward_conv2d_nl_pool+0xbb8>
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	b313      	cbz	r3, 80062ec <forward_conv2d_nl_pool+0xbb8>
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80062ac:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 80062b0:	9301      	str	r3, [sp, #4]
 80062b2:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80062b6:	9000      	str	r0, [sp, #0]
 80062b8:	4673      	mov	r3, lr
 80062ba:	4620      	mov	r0, r4
 80062bc:	f7ff f9ea 	bl	8005694 <ai_dict_decompress_f32>
 80062c0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80062c4:	b17c      	cbz	r4, 80062e6 <forward_conv2d_nl_pool+0xbb2>
 80062c6:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 80062ca:	881e      	ldrh	r6, [r3, #0]
 80062cc:	f7ff bb44 	b.w	8005958 <forward_conv2d_nl_pool+0x224>
 80062d0:	b178      	cbz	r0, 80062f2 <forward_conv2d_nl_pool+0xbbe>
 80062d2:	6881      	ldr	r1, [r0, #8]
 80062d4:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80062d8:	2201      	movs	r2, #1
 80062da:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 80062de:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80062e2:	f7ff bad6 	b.w	8005892 <forward_conv2d_nl_pool+0x15e>
 80062e6:	881e      	ldrh	r6, [r3, #0]
 80062e8:	f7ff bb36 	b.w	8005958 <forward_conv2d_nl_pool+0x224>
 80062ec:	2300      	movs	r3, #0
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	deff      	udf	#255	; 0xff
 80062f2:	2201      	movs	r2, #1
 80062f4:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 80062f8:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 80062fc:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8006300:	f7ff bac7 	b.w	8005892 <forward_conv2d_nl_pool+0x15e>
 8006304:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8006306:	2801      	cmp	r0, #1
 8006308:	f47f ac10 	bne.w	8005b2c <forward_conv2d_nl_pool+0x3f8>
 800630c:	1ad2      	subs	r2, r2, r3
 800630e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006310:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 8006314:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8006318:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800631a:	fb00 4101 	mla	r1, r0, r1, r4
 800631e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8006322:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8006326:	f080 81c4 	bcs.w	80066b2 <forward_conv2d_nl_pool+0xf7e>
 800632a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800632e:	2a00      	cmp	r2, #0
 8006330:	f43f ad4a 	beq.w	8005dc8 <forward_conv2d_nl_pool+0x694>
 8006334:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8006338:	fb02 f303 	mul.w	r3, r2, r3
 800633c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800633e:	677b      	str	r3, [r7, #116]	; 0x74
 8006340:	1a9b      	subs	r3, r3, r2
 8006342:	663b      	str	r3, [r7, #96]	; 0x60
 8006344:	188b      	adds	r3, r1, r2
 8006346:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006348:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800634c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006350:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006354:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006358:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
 800635c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006360:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006364:	2300      	movs	r3, #0
 8006366:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800636a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800636e:	2b00      	cmp	r3, #0
 8006370:	f000 8133 	beq.w	80065da <forward_conv2d_nl_pool+0xea6>
 8006374:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006378:	ed93 6a00 	vldr	s12, [r3]
 800637c:	3304      	adds	r3, #4
 800637e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006382:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006386:	2b00      	cmp	r3, #0
 8006388:	f000 8101 	beq.w	800658e <forward_conv2d_nl_pool+0xe5a>
 800638c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006390:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006394:	eb03 0802 	add.w	r8, r3, r2
 8006398:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800639a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800639e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80063aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80063b2:	f04f 0b00 	mov.w	fp, #0
 80063b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f2c0 8104 	blt.w	80065c8 <forward_conv2d_nl_pool+0xe94>
 80063c0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80063c4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80063c6:	2300      	movs	r3, #0
 80063c8:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 80063cc:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80063d0:	eb02 0c04 	add.w	ip, r2, r4
 80063d4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80063d8:	4540      	cmp	r0, r8
 80063da:	bf94      	ite	ls
 80063dc:	ebc3 0300 	rsbls	r3, r3, r0
 80063e0:	ebc3 0308 	rsbhi	r3, r3, r8
 80063e4:	eba2 0903 	sub.w	r9, r2, r3
 80063e8:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80063ec:	1ac4      	subs	r4, r0, r3
 80063ee:	fb03 f302 	mul.w	r3, r3, r2
 80063f2:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80063f6:	2a00      	cmp	r2, #0
 80063f8:	f340 80e3 	ble.w	80065c2 <forward_conv2d_nl_pool+0xe8e>
 80063fc:	f023 050f 	bic.w	r5, r3, #15
 8006400:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 8006404:	1e68      	subs	r0, r5, #1
 8006406:	0900      	lsrs	r0, r0, #4
 8006408:	3001      	adds	r0, #1
 800640a:	fb06 f204 	mul.w	r2, r6, r4
 800640e:	673a      	str	r2, [r7, #112]	; 0x70
 8006410:	0102      	lsls	r2, r0, #4
 8006412:	65ba      	str	r2, [r7, #88]	; 0x58
 8006414:	fb06 f909 	mul.w	r9, r6, r9
 8006418:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800641c:	eef0 6a46 	vmov.f32	s13, s12
 8006420:	f04f 0e00 	mov.w	lr, #0
 8006424:	4662      	mov	r2, ip
 8006426:	2d00      	cmp	r5, #0
 8006428:	f340 80c9 	ble.w	80065be <forward_conv2d_nl_pool+0xe8a>
 800642c:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8006430:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8006434:	2600      	movs	r6, #0
 8006436:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800643a:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800643e:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 8006442:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 8006446:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800644a:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800644e:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8006452:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 8006456:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800645a:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800645e:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8006462:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 8006466:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 800646a:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 800646e:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 8006472:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 8006476:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 800647a:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 800647e:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 8006482:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 8006486:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800648a:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 800648e:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 8006492:	ed50 3a04 	vldr	s7, [r0, #-16]
 8006496:	ed14 4a04 	vldr	s8, [r4, #-16]
 800649a:	ed50 4a03 	vldr	s9, [r0, #-12]
 800649e:	ed14 5a03 	vldr	s10, [r4, #-12]
 80064a2:	ed50 5a02 	vldr	s11, [r0, #-8]
 80064a6:	ed14 7a02 	vldr	s14, [r4, #-8]
 80064aa:	ee67 7aaf 	vmul.f32	s15, s15, s31
 80064ae:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 80064b2:	eeef 7a2e 	vfma.f32	s15, s30, s29
 80064b6:	3610      	adds	r6, #16
 80064b8:	42ae      	cmp	r6, r5
 80064ba:	ed14 fa01 	vldr	s30, [r4, #-4]
 80064be:	ed50 ea01 	vldr	s29, [r0, #-4]
 80064c2:	eeee 7a2f 	vfma.f32	s15, s28, s31
 80064c6:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80064ca:	f100 0040 	add.w	r0, r0, #64	; 0x40
 80064ce:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80064d2:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80064d6:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80064da:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80064de:	eee9 7a89 	vfma.f32	s15, s19, s18
 80064e2:	eee8 7a80 	vfma.f32	s15, s17, s0
 80064e6:	eee0 7a81 	vfma.f32	s15, s1, s2
 80064ea:	eee1 7a82 	vfma.f32	s15, s3, s4
 80064ee:	eee2 7a83 	vfma.f32	s15, s5, s6
 80064f2:	eee3 7a84 	vfma.f32	s15, s7, s8
 80064f6:	eee4 7a85 	vfma.f32	s15, s9, s10
 80064fa:	eee5 7a87 	vfma.f32	s15, s11, s14
 80064fe:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8006502:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006506:	db96      	blt.n	8006436 <forward_conv2d_nl_pool+0xd02>
 8006508:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800650a:	4451      	add	r1, sl
 800650c:	4452      	add	r2, sl
 800650e:	4283      	cmp	r3, r0
 8006510:	dd0f      	ble.n	8006532 <forward_conv2d_nl_pool+0xdfe>
 8006512:	4604      	mov	r4, r0
 8006514:	468c      	mov	ip, r1
 8006516:	4616      	mov	r6, r2
 8006518:	ecb6 7a01 	vldmia	r6!, {s14}
 800651c:	ecfc 7a01 	vldmia	ip!, {s15}
 8006520:	3401      	adds	r4, #1
 8006522:	42a3      	cmp	r3, r4
 8006524:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006528:	d1f6      	bne.n	8006518 <forward_conv2d_nl_pool+0xde4>
 800652a:	1a18      	subs	r0, r3, r0
 800652c:	0080      	lsls	r0, r0, #2
 800652e:	4402      	add	r2, r0
 8006530:	4401      	add	r1, r0
 8006532:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8006534:	4402      	add	r2, r0
 8006536:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800653a:	f10e 0e01 	add.w	lr, lr, #1
 800653e:	4570      	cmp	r0, lr
 8006540:	4449      	add	r1, r9
 8006542:	f47f af70 	bne.w	8006426 <forward_conv2d_nl_pool+0xcf2>
 8006546:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800654a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800654c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8006550:	edc3 6a00 	vstr	s13, [r3]
 8006554:	4608      	mov	r0, r1
 8006556:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800655a:	440b      	add	r3, r1
 800655c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8006560:	67bb      	str	r3, [r7, #120]	; 0x78
 8006562:	4410      	add	r0, r2
 8006564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006566:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800656a:	4608      	mov	r0, r1
 800656c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8006570:	4418      	add	r0, r3
 8006572:	1acb      	subs	r3, r1, r3
 8006574:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006578:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800657c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8006580:	f10b 0b01 	add.w	fp, fp, #1
 8006584:	455b      	cmp	r3, fp
 8006586:	eba8 0802 	sub.w	r8, r8, r2
 800658a:	f47f af14 	bne.w	80063b6 <forward_conv2d_nl_pool+0xc82>
 800658e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8006592:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006594:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006598:	440a      	add	r2, r1
 800659a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800659e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80065a2:	3204      	adds	r2, #4
 80065a4:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80065a8:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80065ac:	3301      	adds	r3, #1
 80065ae:	429a      	cmp	r2, r3
 80065b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065b4:	f47f aed9 	bne.w	800636a <forward_conv2d_nl_pool+0xc36>
 80065b8:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 80065bc:	e404      	b.n	8005dc8 <forward_conv2d_nl_pool+0x694>
 80065be:	2000      	movs	r0, #0
 80065c0:	e7a5      	b.n	800650e <forward_conv2d_nl_pool+0xdda>
 80065c2:	eef0 6a46 	vmov.f32	s13, s12
 80065c6:	e7be      	b.n	8006546 <forward_conv2d_nl_pool+0xe12>
 80065c8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80065cc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80065d0:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80065d4:	eba8 0303 	sub.w	r3, r8, r3
 80065d8:	e6f6      	b.n	80063c8 <forward_conv2d_nl_pool+0xc94>
 80065da:	eeb0 6a48 	vmov.f32	s12, s16
 80065de:	e6d0      	b.n	8006382 <forward_conv2d_nl_pool+0xc4e>
 80065e0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80065e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065e8:	4611      	mov	r1, r2
 80065ea:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80065ee:	4419      	add	r1, r3
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80065f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065fc:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8006600:	4413      	add	r3, r2
 8006602:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006606:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800660a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800660e:	4293      	cmp	r3, r2
 8006610:	f63f aa68 	bhi.w	8005ae4 <forward_conv2d_nl_pool+0x3b0>
 8006614:	e49f      	b.n	8005f56 <forward_conv2d_nl_pool+0x822>
 8006616:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800661a:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 800661e:	699a      	ldr	r2, [r3, #24]
 8006620:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8006624:	68d1      	ldr	r1, [r2, #12]
 8006626:	6853      	ldr	r3, [r2, #4]
 8006628:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800662a:	fb00 4012 	mls	r0, r0, r2, r4
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4281      	cmp	r1, r0
 8006632:	bf88      	it	hi
 8006634:	18c0      	addhi	r0, r0, r3
 8006636:	4281      	cmp	r1, r0
 8006638:	eb01 0203 	add.w	r2, r1, r3
 800663c:	d216      	bcs.n	800666c <forward_conv2d_nl_pool+0xf38>
 800663e:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	; 0xb4
 8006642:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8006646:	42a1      	cmp	r1, r4
 8006648:	d010      	beq.n	800666c <forward_conv2d_nl_pool+0xf38>
 800664a:	4290      	cmp	r0, r2
 800664c:	d20e      	bcs.n	800666c <forward_conv2d_nl_pool+0xf38>
 800664e:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8006652:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 8006656:	f850 3b04 	ldr.w	r3, [r0], #4
 800665a:	f841 3b04 	str.w	r3, [r1], #4
 800665e:	69a2      	ldr	r2, [r4, #24]
 8006660:	6853      	ldr	r3, [r2, #4]
 8006662:	68d2      	ldr	r2, [r2, #12]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	441a      	add	r2, r3
 8006668:	4282      	cmp	r2, r0
 800666a:	d8f4      	bhi.n	8006656 <forward_conv2d_nl_pool+0xf22>
 800666c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8006670:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 8006674:	f8b7 1140 	ldrh.w	r1, [r7, #320]	; 0x140
 8006678:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800667a:	4420      	add	r0, r4
 800667c:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8006680:	1a40      	subs	r0, r0, r1
 8006682:	4421      	add	r1, r4
 8006684:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8006688:	442c      	add	r4, r5
 800668a:	b209      	sxth	r1, r1
 800668c:	b200      	sxth	r0, r0
 800668e:	4294      	cmp	r4, r2
 8006690:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8006694:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 8006698:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800669c:	4621      	mov	r1, r4
 800669e:	f4ff abfb 	bcc.w	8005e98 <forward_conv2d_nl_pool+0x764>
 80066a2:	425b      	negs	r3, r3
 80066a4:	4419      	add	r1, r3
 80066a6:	4291      	cmp	r1, r2
 80066a8:	d2fc      	bcs.n	80066a4 <forward_conv2d_nl_pool+0xf70>
 80066aa:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 80066ae:	f7ff bbf3 	b.w	8005e98 <forward_conv2d_nl_pool+0x764>
 80066b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066b6:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 80066ba:	320a      	adds	r2, #10
 80066bc:	f022 0207 	bic.w	r2, r2, #7
 80066c0:	ebad 0d02 	sub.w	sp, sp, r2
 80066c4:	aa0a      	add	r2, sp, #40	; 0x28
 80066c6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80066ca:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80066ce:	2a00      	cmp	r2, #0
 80066d0:	f000 8153 	beq.w	800697a <forward_conv2d_nl_pool+0x1246>
 80066d4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80066d8:	f8c7 b01c 	str.w	fp, [r7, #28]
 80066dc:	fb02 f303 	mul.w	r3, r2, r3
 80066e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80066e2:	663b      	str	r3, [r7, #96]	; 0x60
 80066e4:	1a9b      	subs	r3, r3, r2
 80066e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80066e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80066ec:	f8c7 a014 	str.w	sl, [r7, #20]
 80066f0:	4413      	add	r3, r2
 80066f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80066f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80066fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006700:	67bb      	str	r3, [r7, #120]	; 0x78
 8006702:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006706:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800670a:	2300      	movs	r3, #0
 800670c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006710:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006714:	b13b      	cbz	r3, 8006726 <forward_conv2d_nl_pool+0xff2>
 8006716:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800671a:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800671e:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8006722:	f001 f9e1 	bl	8007ae8 <memcpy>
 8006726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800672a:	2b00      	cmp	r3, #0
 800672c:	f000 8137 	beq.w	800699e <forward_conv2d_nl_pool+0x126a>
 8006730:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006732:	ed93 6a00 	vldr	s12, [r3]
 8006736:	3304      	adds	r3, #4
 8006738:	67bb      	str	r3, [r7, #120]	; 0x78
 800673a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 8101 	beq.w	8006946 <forward_conv2d_nl_pool+0x1212>
 8006744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006748:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800674c:	eb03 0802 	add.w	r8, r3, r2
 8006750:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006752:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006758:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800675c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006760:	677b      	str	r3, [r7, #116]	; 0x74
 8006762:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006766:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800676a:	f04f 0b00 	mov.w	fp, #0
 800676e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006772:	2b00      	cmp	r3, #0
 8006774:	f2c0 810a 	blt.w	800698c <forward_conv2d_nl_pool+0x1258>
 8006778:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800677c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800677e:	2300      	movs	r3, #0
 8006780:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 8006784:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8006788:	eb02 0c04 	add.w	ip, r2, r4
 800678c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006790:	4540      	cmp	r0, r8
 8006792:	bf94      	ite	ls
 8006794:	ebc3 0300 	rsbls	r3, r3, r0
 8006798:	ebc3 0308 	rsbhi	r3, r3, r8
 800679c:	eba2 0903 	sub.w	r9, r2, r3
 80067a0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80067a4:	1ac4      	subs	r4, r0, r3
 80067a6:	fb03 f302 	mul.w	r3, r3, r2
 80067aa:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80067ae:	2a00      	cmp	r2, #0
 80067b0:	f340 80e9 	ble.w	8006986 <forward_conv2d_nl_pool+0x1252>
 80067b4:	f023 050f 	bic.w	r5, r3, #15
 80067b8:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 80067bc:	1e68      	subs	r0, r5, #1
 80067be:	0900      	lsrs	r0, r0, #4
 80067c0:	3001      	adds	r0, #1
 80067c2:	fb06 f204 	mul.w	r2, r6, r4
 80067c6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80067c8:	0102      	lsls	r2, r0, #4
 80067ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80067cc:	fb06 f909 	mul.w	r9, r6, r9
 80067d0:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 80067d4:	eef0 6a46 	vmov.f32	s13, s12
 80067d8:	f04f 0e00 	mov.w	lr, #0
 80067dc:	4662      	mov	r2, ip
 80067de:	2d00      	cmp	r5, #0
 80067e0:	f340 80cf 	ble.w	8006982 <forward_conv2d_nl_pool+0x124e>
 80067e4:	f101 0440 	add.w	r4, r1, #64	; 0x40
 80067e8:	f102 0040 	add.w	r0, r2, #64	; 0x40
 80067ec:	2600      	movs	r6, #0
 80067ee:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 80067f2:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 80067f6:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 80067fa:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 80067fe:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 8006802:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 8006806:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800680a:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800680e:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 8006812:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 8006816:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800681a:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800681e:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 8006822:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 8006826:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 800682a:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 800682e:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8006832:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 8006836:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800683a:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800683e:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8006842:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 8006846:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 800684a:	ed50 3a04 	vldr	s7, [r0, #-16]
 800684e:	ed14 4a04 	vldr	s8, [r4, #-16]
 8006852:	ed54 4a03 	vldr	s9, [r4, #-12]
 8006856:	ed10 5a03 	vldr	s10, [r0, #-12]
 800685a:	ed50 5a02 	vldr	s11, [r0, #-8]
 800685e:	ed14 7a02 	vldr	s14, [r4, #-8]
 8006862:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8006866:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800686a:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800686e:	3610      	adds	r6, #16
 8006870:	42ae      	cmp	r6, r5
 8006872:	ed14 fa01 	vldr	s30, [r4, #-4]
 8006876:	ed50 ea01 	vldr	s29, [r0, #-4]
 800687a:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800687e:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8006882:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8006886:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800688a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800688e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8006892:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8006896:	eee9 7a89 	vfma.f32	s15, s19, s18
 800689a:	eee8 7a80 	vfma.f32	s15, s17, s0
 800689e:	eee0 7a81 	vfma.f32	s15, s1, s2
 80068a2:	eee1 7a82 	vfma.f32	s15, s3, s4
 80068a6:	eee2 7a83 	vfma.f32	s15, s5, s6
 80068aa:	eee3 7a84 	vfma.f32	s15, s7, s8
 80068ae:	eee4 7a85 	vfma.f32	s15, s9, s10
 80068b2:	eee5 7a87 	vfma.f32	s15, s11, s14
 80068b6:	eeef 7a2e 	vfma.f32	s15, s30, s29
 80068ba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80068be:	db96      	blt.n	80067ee <forward_conv2d_nl_pool+0x10ba>
 80068c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068c2:	4451      	add	r1, sl
 80068c4:	4452      	add	r2, sl
 80068c6:	4283      	cmp	r3, r0
 80068c8:	dd0f      	ble.n	80068ea <forward_conv2d_nl_pool+0x11b6>
 80068ca:	4604      	mov	r4, r0
 80068cc:	468c      	mov	ip, r1
 80068ce:	4616      	mov	r6, r2
 80068d0:	ecb6 7a01 	vldmia	r6!, {s14}
 80068d4:	ecfc 7a01 	vldmia	ip!, {s15}
 80068d8:	3401      	adds	r4, #1
 80068da:	42a3      	cmp	r3, r4
 80068dc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80068e0:	d1f6      	bne.n	80068d0 <forward_conv2d_nl_pool+0x119c>
 80068e2:	1a18      	subs	r0, r3, r0
 80068e4:	0080      	lsls	r0, r0, #2
 80068e6:	4402      	add	r2, r0
 80068e8:	4401      	add	r1, r0
 80068ea:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80068ec:	4402      	add	r2, r0
 80068ee:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80068f2:	f10e 0e01 	add.w	lr, lr, #1
 80068f6:	4570      	cmp	r0, lr
 80068f8:	4449      	add	r1, r9
 80068fa:	f47f af70 	bne.w	80067de <forward_conv2d_nl_pool+0x10aa>
 80068fe:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006904:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8006908:	edc3 6a00 	vstr	s13, [r3]
 800690c:	4608      	mov	r0, r1
 800690e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8006912:	440b      	add	r3, r1
 8006914:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8006918:	677b      	str	r3, [r7, #116]	; 0x74
 800691a:	4410      	add	r0, r2
 800691c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800691e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8006922:	4608      	mov	r0, r1
 8006924:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8006928:	4418      	add	r0, r3
 800692a:	1acb      	subs	r3, r1, r3
 800692c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006930:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006934:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8006938:	f10b 0b01 	add.w	fp, fp, #1
 800693c:	455b      	cmp	r3, fp
 800693e:	eba8 0802 	sub.w	r8, r8, r2
 8006942:	f47f af14 	bne.w	800676e <forward_conv2d_nl_pool+0x103a>
 8006946:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800694a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800694e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006952:	440a      	add	r2, r1
 8006954:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8006958:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800695c:	3204      	adds	r2, #4
 800695e:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8006962:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8006966:	3301      	adds	r3, #1
 8006968:	429a      	cmp	r2, r3
 800696a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800696e:	f47f aecf 	bne.w	8006710 <forward_conv2d_nl_pool+0xfdc>
 8006972:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 8006976:	f8d7 a014 	ldr.w	sl, [r7, #20]
 800697a:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 800697e:	f7ff ba23 	b.w	8005dc8 <forward_conv2d_nl_pool+0x694>
 8006982:	2000      	movs	r0, #0
 8006984:	e79f      	b.n	80068c6 <forward_conv2d_nl_pool+0x1192>
 8006986:	eef0 6a46 	vmov.f32	s13, s12
 800698a:	e7b8      	b.n	80068fe <forward_conv2d_nl_pool+0x11ca>
 800698c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8006990:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8006994:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8006998:	eba8 0303 	sub.w	r3, r8, r3
 800699c:	e6f0      	b.n	8006780 <forward_conv2d_nl_pool+0x104c>
 800699e:	eeb0 6a48 	vmov.f32	s12, s16
 80069a2:	e6ca      	b.n	800673a <forward_conv2d_nl_pool+0x1006>

080069a4 <forward_dense>:
 80069a4:	6983      	ldr	r3, [r0, #24]
 80069a6:	881a      	ldrh	r2, [r3, #0]
 80069a8:	2a00      	cmp	r2, #0
 80069aa:	f000 80b5 	beq.w	8006b18 <forward_dense+0x174>
 80069ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b2:	ed2d 8b10 	vpush	{d8-d15}
 80069b6:	685f      	ldr	r7, [r3, #4]
 80069b8:	687e      	ldr	r6, [r7, #4]
 80069ba:	b091      	sub	sp, #68	; 0x44
 80069bc:	b106      	cbz	r6, 80069c0 <forward_dense+0x1c>
 80069be:	6836      	ldr	r6, [r6, #0]
 80069c0:	2a01      	cmp	r2, #1
 80069c2:	f240 80a6 	bls.w	8006b12 <forward_dense+0x16e>
 80069c6:	693d      	ldr	r5, [r7, #16]
 80069c8:	b105      	cbz	r5, 80069cc <forward_dense+0x28>
 80069ca:	682d      	ldr	r5, [r5, #0]
 80069cc:	2a02      	cmp	r2, #2
 80069ce:	f000 80a5 	beq.w	8006b1c <forward_dense+0x178>
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 821b 	beq.w	8006e10 <forward_dense+0x46c>
 80069da:	6819      	ldr	r1, [r3, #0]
 80069dc:	9106      	str	r1, [sp, #24]
 80069de:	f117 0118 	adds.w	r1, r7, #24
 80069e2:	f000 80c9 	beq.w	8006b78 <forward_dense+0x1d4>
 80069e6:	8b39      	ldrh	r1, [r7, #24]
 80069e8:	2901      	cmp	r1, #1
 80069ea:	f240 820e 	bls.w	8006e0a <forward_dense+0x466>
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f000 80c4 	beq.w	8006b7c <forward_dense+0x1d8>
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	9307      	str	r3, [sp, #28]
 80069f8:	9b06      	ldr	r3, [sp, #24]
 80069fa:	68ec      	ldr	r4, [r5, #12]
 80069fc:	6998      	ldr	r0, [r3, #24]
 80069fe:	68f1      	ldr	r1, [r6, #12]
 8006a00:	6803      	ldr	r3, [r0, #0]
 8006a02:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8006a06:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
 8006a0a:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 8006a0e:	f3c3 5141 	ubfx	r1, r3, #21, #2
 8006a12:	fa49 f101 	asr.w	r1, r9, r1
 8006a16:	910b      	str	r1, [sp, #44]	; 0x2c
 8006a18:	2a03      	cmp	r2, #3
 8006a1a:	fb0e f10c 	mul.w	r1, lr, ip
 8006a1e:	6864      	ldr	r4, [r4, #4]
 8006a20:	9108      	str	r1, [sp, #32]
 8006a22:	f000 81de 	beq.w	8006de2 <forward_dense+0x43e>
 8006a26:	6abf      	ldr	r7, [r7, #40]	; 0x28
 8006a28:	b117      	cbz	r7, 8006a30 <forward_dense+0x8c>
 8006a2a:	683f      	ldr	r7, [r7, #0]
 8006a2c:	b107      	cbz	r7, 8006a30 <forward_dense+0x8c>
 8006a2e:	69bf      	ldr	r7, [r7, #24]
 8006a30:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8006a34:	2b04      	cmp	r3, #4
 8006a36:	f000 81d7 	beq.w	8006de8 <forward_dense+0x444>
 8006a3a:	2b08      	cmp	r3, #8
 8006a3c:	f000 81d4 	beq.w	8006de8 <forward_dense+0x444>
 8006a40:	f04f 0a00 	mov.w	sl, #0
 8006a44:	69ab      	ldr	r3, [r5, #24]
 8006a46:	69b2      	ldr	r2, [r6, #24]
 8006a48:	6899      	ldr	r1, [r3, #8]
 8006a4a:	9b06      	ldr	r3, [sp, #24]
 8006a4c:	9104      	str	r1, [sp, #16]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	6897      	ldr	r7, [r2, #8]
 8006a52:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8006a56:	00a3      	lsls	r3, r4, #2
 8006a58:	9309      	str	r3, [sp, #36]	; 0x24
 8006a5a:	18ce      	adds	r6, r1, r3
 8006a5c:	9b08      	ldr	r3, [sp, #32]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d052      	beq.n	8006b08 <forward_dense+0x164>
 8006a62:	f1a8 0310 	sub.w	r3, r8, #16
 8006a66:	091b      	lsrs	r3, r3, #4
 8006a68:	3301      	adds	r3, #1
 8006a6a:	019b      	lsls	r3, r3, #6
 8006a6c:	930c      	str	r3, [sp, #48]	; 0x30
 8006a6e:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8006a72:	930a      	str	r3, [sp, #40]	; 0x28
 8006a74:	2300      	movs	r3, #0
 8006a76:	9305      	str	r3, [sp, #20]
 8006a78:	eddf aace 	vldr	s21, [pc, #824]	; 8006db4 <forward_dense+0x410>
 8006a7c:	f008 030f 	and.w	r3, r8, #15
 8006a80:	930d      	str	r3, [sp, #52]	; 0x34
 8006a82:	9b06      	ldr	r3, [sp, #24]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	689d      	ldr	r5, [r3, #8]
 8006a88:	9b07      	ldr	r3, [sp, #28]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f000 818f 	beq.w	8006dae <forward_dense+0x40a>
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	689c      	ldr	r4, [r3, #8]
 8006a94:	9b04      	ldr	r3, [sp, #16]
 8006a96:	f1ba 0f00 	cmp.w	sl, #0
 8006a9a:	d071      	beq.n	8006b80 <forward_dense+0x1dc>
 8006a9c:	42b3      	cmp	r3, r6
 8006a9e:	d229      	bcs.n	8006af4 <forward_dense+0x150>
 8006aa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006aa2:	469b      	mov	fp, r3
 8006aa4:	ab0f      	add	r3, sp, #60	; 0x3c
 8006aa6:	9303      	str	r3, [sp, #12]
 8006aa8:	2a04      	cmp	r2, #4
 8006aaa:	4633      	mov	r3, r6
 8006aac:	4646      	mov	r6, r8
 8006aae:	4698      	mov	r8, r3
 8006ab0:	d037      	beq.n	8006b22 <forward_dense+0x17e>
 8006ab2:	2c00      	cmp	r4, #0
 8006ab4:	f000 8180 	beq.w	8006db8 <forward_dense+0x414>
 8006ab8:	f8d4 c000 	ldr.w	ip, [r4]
 8006abc:	9803      	ldr	r0, [sp, #12]
 8006abe:	9600      	str	r6, [sp, #0]
 8006ac0:	463b      	mov	r3, r7
 8006ac2:	4629      	mov	r1, r5
 8006ac4:	4652      	mov	r2, sl
 8006ac6:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8006aca:	f7fe fc57 	bl	800537c <ai_dict8_dot_array_f32>
 8006ace:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ad0:	f84b 3b04 	str.w	r3, [fp], #4
 8006ad4:	45c3      	cmp	fp, r8
 8006ad6:	f104 0404 	add.w	r4, r4, #4
 8006ada:	444d      	add	r5, r9
 8006adc:	d3e9      	bcc.n	8006ab2 <forward_dense+0x10e>
 8006ade:	4643      	mov	r3, r8
 8006ae0:	46b0      	mov	r8, r6
 8006ae2:	461e      	mov	r6, r3
 8006ae4:	9a04      	ldr	r2, [sp, #16]
 8006ae6:	43d3      	mvns	r3, r2
 8006ae8:	4433      	add	r3, r6
 8006aea:	f023 0303 	bic.w	r3, r3, #3
 8006aee:	3304      	adds	r3, #4
 8006af0:	18d3      	adds	r3, r2, r3
 8006af2:	9304      	str	r3, [sp, #16]
 8006af4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006af6:	9b05      	ldr	r3, [sp, #20]
 8006af8:	4417      	add	r7, r2
 8006afa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006afc:	4416      	add	r6, r2
 8006afe:	9a08      	ldr	r2, [sp, #32]
 8006b00:	3301      	adds	r3, #1
 8006b02:	4293      	cmp	r3, r2
 8006b04:	9305      	str	r3, [sp, #20]
 8006b06:	d1bc      	bne.n	8006a82 <forward_dense+0xde>
 8006b08:	b011      	add	sp, #68	; 0x44
 8006b0a:	ecbd 8b10 	vpop	{d8-d15}
 8006b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b12:	2300      	movs	r3, #0
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	deff      	udf	#255	; 0xff
 8006b18:	6853      	ldr	r3, [r2, #4]
 8006b1a:	deff      	udf	#255	; 0xff
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	deff      	udf	#255	; 0xff
 8006b22:	b1a4      	cbz	r4, 8006b4e <forward_dense+0x1aa>
 8006b24:	f8d4 c000 	ldr.w	ip, [r4]
 8006b28:	9803      	ldr	r0, [sp, #12]
 8006b2a:	9600      	str	r6, [sp, #0]
 8006b2c:	463b      	mov	r3, r7
 8006b2e:	4629      	mov	r1, r5
 8006b30:	4652      	mov	r2, sl
 8006b32:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8006b36:	f7fe fcef 	bl	8005518 <ai_dict4_dot_array_f32>
 8006b3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b3c:	f84b 3b04 	str.w	r3, [fp], #4
 8006b40:	45c3      	cmp	fp, r8
 8006b42:	f104 0404 	add.w	r4, r4, #4
 8006b46:	444d      	add	r5, r9
 8006b48:	d2c9      	bcs.n	8006ade <forward_dense+0x13a>
 8006b4a:	2c00      	cmp	r4, #0
 8006b4c:	d1ea      	bne.n	8006b24 <forward_dense+0x180>
 8006b4e:	4634      	mov	r4, r6
 8006b50:	4646      	mov	r6, r8
 8006b52:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006b56:	9400      	str	r4, [sp, #0]
 8006b58:	463b      	mov	r3, r7
 8006b5a:	4629      	mov	r1, r5
 8006b5c:	4652      	mov	r2, sl
 8006b5e:	4640      	mov	r0, r8
 8006b60:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8006b64:	f7fe fcd8 	bl	8005518 <ai_dict4_dot_array_f32>
 8006b68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b6a:	f84b 3b04 	str.w	r3, [fp], #4
 8006b6e:	45b3      	cmp	fp, r6
 8006b70:	444d      	add	r5, r9
 8006b72:	d3f0      	bcc.n	8006b56 <forward_dense+0x1b2>
 8006b74:	46a0      	mov	r8, r4
 8006b76:	e7b5      	b.n	8006ae4 <forward_dense+0x140>
 8006b78:	9107      	str	r1, [sp, #28]
 8006b7a:	e73d      	b.n	80069f8 <forward_dense+0x54>
 8006b7c:	9307      	str	r3, [sp, #28]
 8006b7e:	e73b      	b.n	80069f8 <forward_dense+0x54>
 8006b80:	42b3      	cmp	r3, r6
 8006b82:	d2b7      	bcs.n	8006af4 <forward_dense+0x150>
 8006b84:	4618      	mov	r0, r3
 8006b86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b88:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8006b8c:	eb07 0c03 	add.w	ip, r7, r3
 8006b90:	469e      	mov	lr, r3
 8006b92:	2c00      	cmp	r4, #0
 8006b94:	f000 80ff 	beq.w	8006d96 <forward_dense+0x3f2>
 8006b98:	f1b8 0f0f 	cmp.w	r8, #15
 8006b9c:	edd4 fa00 	vldr	s31, [r4]
 8006ba0:	eddf 6a84 	vldr	s13, [pc, #528]	; 8006db4 <forward_dense+0x410>
 8006ba4:	f104 0404 	add.w	r4, r4, #4
 8006ba8:	f240 80fd 	bls.w	8006da6 <forward_dense+0x402>
 8006bac:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006bb0:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8006bb4:	4641      	mov	r1, r8
 8006bb6:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8006bba:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8006bbe:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8006bc2:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8006bc6:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8006bca:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8006bce:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8006bd2:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8006bd6:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8006bda:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8006bde:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8006be2:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8006be6:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8006bea:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8006bee:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8006bf2:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8006bf6:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8006bfa:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8006bfe:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8006c02:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8006c06:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8006c0a:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8006c0e:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8006c12:	ed12 4a04 	vldr	s8, [r2, #-16]
 8006c16:	ed53 4a04 	vldr	s9, [r3, #-16]
 8006c1a:	ed13 5a03 	vldr	s10, [r3, #-12]
 8006c1e:	ed52 5a03 	vldr	s11, [r2, #-12]
 8006c22:	ed13 6a02 	vldr	s12, [r3, #-8]
 8006c26:	ed12 7a02 	vldr	s14, [r2, #-8]
 8006c2a:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8006c2e:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8006c32:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8006c36:	3910      	subs	r1, #16
 8006c38:	290f      	cmp	r1, #15
 8006c3a:	ed52 ea01 	vldr	s29, [r2, #-4]
 8006c3e:	ed13 ea01 	vldr	s28, [r3, #-4]
 8006c42:	eeed 7a8f 	vfma.f32	s15, s27, s30
 8006c46:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8006c4a:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8006c4e:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8006c52:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8006c56:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8006c5a:	eee9 7a89 	vfma.f32	s15, s19, s18
 8006c5e:	eee8 7a88 	vfma.f32	s15, s17, s16
 8006c62:	eee0 7a20 	vfma.f32	s15, s0, s1
 8006c66:	eee1 7a21 	vfma.f32	s15, s2, s3
 8006c6a:	eee2 7a22 	vfma.f32	s15, s4, s5
 8006c6e:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006c72:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006c76:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006c7a:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006c7e:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8006c82:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006c86:	d896      	bhi.n	8006bb6 <forward_dense+0x212>
 8006c88:	eb05 010e 	add.w	r1, r5, lr
 8006c8c:	465b      	mov	r3, fp
 8006c8e:	4662      	mov	r2, ip
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d075      	beq.n	8006d80 <forward_dense+0x3dc>
 8006c94:	ed91 7a00 	vldr	s14, [r1]
 8006c98:	edd2 7a00 	vldr	s15, [r2]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006ca2:	d06d      	beq.n	8006d80 <forward_dense+0x3dc>
 8006ca4:	ed91 7a01 	vldr	s14, [r1, #4]
 8006ca8:	edd2 7a01 	vldr	s15, [r2, #4]
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006cb2:	d065      	beq.n	8006d80 <forward_dense+0x3dc>
 8006cb4:	ed91 7a02 	vldr	s14, [r1, #8]
 8006cb8:	edd2 7a02 	vldr	s15, [r2, #8]
 8006cbc:	2b03      	cmp	r3, #3
 8006cbe:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006cc2:	d05d      	beq.n	8006d80 <forward_dense+0x3dc>
 8006cc4:	ed91 7a03 	vldr	s14, [r1, #12]
 8006cc8:	edd2 7a03 	vldr	s15, [r2, #12]
 8006ccc:	2b04      	cmp	r3, #4
 8006cce:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006cd2:	d055      	beq.n	8006d80 <forward_dense+0x3dc>
 8006cd4:	ed91 7a04 	vldr	s14, [r1, #16]
 8006cd8:	edd2 7a04 	vldr	s15, [r2, #16]
 8006cdc:	2b05      	cmp	r3, #5
 8006cde:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006ce2:	d04d      	beq.n	8006d80 <forward_dense+0x3dc>
 8006ce4:	ed91 7a05 	vldr	s14, [r1, #20]
 8006ce8:	edd2 7a05 	vldr	s15, [r2, #20]
 8006cec:	2b06      	cmp	r3, #6
 8006cee:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006cf2:	d045      	beq.n	8006d80 <forward_dense+0x3dc>
 8006cf4:	ed91 7a06 	vldr	s14, [r1, #24]
 8006cf8:	edd2 7a06 	vldr	s15, [r2, #24]
 8006cfc:	2b07      	cmp	r3, #7
 8006cfe:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006d02:	d03d      	beq.n	8006d80 <forward_dense+0x3dc>
 8006d04:	ed91 7a07 	vldr	s14, [r1, #28]
 8006d08:	edd2 7a07 	vldr	s15, [r2, #28]
 8006d0c:	2b08      	cmp	r3, #8
 8006d0e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006d12:	d035      	beq.n	8006d80 <forward_dense+0x3dc>
 8006d14:	ed91 7a08 	vldr	s14, [r1, #32]
 8006d18:	edd2 7a08 	vldr	s15, [r2, #32]
 8006d1c:	2b09      	cmp	r3, #9
 8006d1e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006d22:	d02d      	beq.n	8006d80 <forward_dense+0x3dc>
 8006d24:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8006d28:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8006d2c:	2b0a      	cmp	r3, #10
 8006d2e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006d32:	d025      	beq.n	8006d80 <forward_dense+0x3dc>
 8006d34:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8006d38:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8006d3c:	2b0b      	cmp	r3, #11
 8006d3e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006d42:	d01d      	beq.n	8006d80 <forward_dense+0x3dc>
 8006d44:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8006d48:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8006d4c:	2b0c      	cmp	r3, #12
 8006d4e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006d52:	d015      	beq.n	8006d80 <forward_dense+0x3dc>
 8006d54:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8006d58:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8006d5c:	2b0d      	cmp	r3, #13
 8006d5e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006d62:	d00d      	beq.n	8006d80 <forward_dense+0x3dc>
 8006d64:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8006d68:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8006d6c:	2b0e      	cmp	r3, #14
 8006d6e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006d72:	d005      	beq.n	8006d80 <forward_dense+0x3dc>
 8006d74:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8006d78:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8006d7c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006d80:	444d      	add	r5, r9
 8006d82:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 8006d86:	ece0 6a01 	vstmia	r0!, {s13}
 8006d8a:	42b0      	cmp	r0, r6
 8006d8c:	f4bf aeaa 	bcs.w	8006ae4 <forward_dense+0x140>
 8006d90:	2c00      	cmp	r4, #0
 8006d92:	f47f af01 	bne.w	8006b98 <forward_dense+0x1f4>
 8006d96:	f1b8 0f0f 	cmp.w	r8, #15
 8006d9a:	eef0 fa6a 	vmov.f32	s31, s21
 8006d9e:	eddf 6a05 	vldr	s13, [pc, #20]	; 8006db4 <forward_dense+0x410>
 8006da2:	f63f af03 	bhi.w	8006bac <forward_dense+0x208>
 8006da6:	4643      	mov	r3, r8
 8006da8:	4629      	mov	r1, r5
 8006daa:	463a      	mov	r2, r7
 8006dac:	e770      	b.n	8006c90 <forward_dense+0x2ec>
 8006dae:	461c      	mov	r4, r3
 8006db0:	e670      	b.n	8006a94 <forward_dense+0xf0>
 8006db2:	bf00      	nop
 8006db4:	00000000 	.word	0x00000000
 8006db8:	4634      	mov	r4, r6
 8006dba:	4646      	mov	r6, r8
 8006dbc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006dc0:	9400      	str	r4, [sp, #0]
 8006dc2:	463b      	mov	r3, r7
 8006dc4:	4629      	mov	r1, r5
 8006dc6:	4652      	mov	r2, sl
 8006dc8:	4640      	mov	r0, r8
 8006dca:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8006dce:	f7fe fad5 	bl	800537c <ai_dict8_dot_array_f32>
 8006dd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dd4:	f84b 3b04 	str.w	r3, [fp], #4
 8006dd8:	455e      	cmp	r6, fp
 8006dda:	444d      	add	r5, r9
 8006ddc:	d8f0      	bhi.n	8006dc0 <forward_dense+0x41c>
 8006dde:	46a0      	mov	r8, r4
 8006de0:	e680      	b.n	8006ae4 <forward_dense+0x140>
 8006de2:	2300      	movs	r3, #0
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	deff      	udf	#255	; 0xff
 8006de8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8006dec:	2f00      	cmp	r7, #0
 8006dee:	f43f ae29 	beq.w	8006a44 <forward_dense+0xa0>
 8006df2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006df6:	f000 fc67 	bl	80076c8 <ai_array_get_byte_size>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	4651      	mov	r1, sl
 8006e00:	4618      	mov	r0, r3
 8006e02:	f000 fe71 	bl	8007ae8 <memcpy>
 8006e06:	4682      	mov	sl, r0
 8006e08:	e61c      	b.n	8006a44 <forward_dense+0xa0>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	9307      	str	r3, [sp, #28]
 8006e0e:	e5f3      	b.n	80069f8 <forward_dense+0x54>
 8006e10:	9306      	str	r3, [sp, #24]
 8006e12:	e5e4      	b.n	80069de <forward_dense+0x3a>

08006e14 <nl_func_relu_array_f32>:
 8006e14:	b410      	push	{r4}
 8006e16:	698c      	ldr	r4, [r1, #24]
 8006e18:	6981      	ldr	r1, [r0, #24]
 8006e1a:	68a3      	ldr	r3, [r4, #8]
 8006e1c:	6889      	ldr	r1, [r1, #8]
 8006e1e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006e22:	3a01      	subs	r2, #1
 8006e24:	0092      	lsls	r2, r2, #2
 8006e26:	189b      	adds	r3, r3, r2
 8006e28:	d216      	bcs.n	8006e58 <nl_func_relu_array_f32+0x44>
 8006e2a:	3204      	adds	r2, #4
 8006e2c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006e60 <nl_func_relu_array_f32+0x4c>
 8006e30:	4411      	add	r1, r2
 8006e32:	3304      	adds	r3, #4
 8006e34:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006e38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e40:	bfb8      	it	lt
 8006e42:	eef0 7a47 	vmovlt.f32	s15, s14
 8006e46:	ed61 7a01 	vstmdb	r1!, {s15}
 8006e4a:	68a0      	ldr	r0, [r4, #8]
 8006e4c:	f1a3 0208 	sub.w	r2, r3, #8
 8006e50:	4290      	cmp	r0, r2
 8006e52:	f1a3 0304 	sub.w	r3, r3, #4
 8006e56:	d9ed      	bls.n	8006e34 <nl_func_relu_array_f32+0x20>
 8006e58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	00000000 	.word	0x00000000

08006e64 <nl_func_sm_array_f32>:
 8006e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e68:	ed2d 8b04 	vpush	{d8-d9}
 8006e6c:	b089      	sub	sp, #36	; 0x24
 8006e6e:	698f      	ldr	r7, [r1, #24]
 8006e70:	6984      	ldr	r4, [r0, #24]
 8006e72:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8006e76:	68bd      	ldr	r5, [r7, #8]
 8006e78:	9402      	str	r4, [sp, #8]
 8006e7a:	4626      	mov	r6, r4
 8006e7c:	4696      	mov	lr, r2
 8006e7e:	eba2 020c 	sub.w	r2, r2, ip
 8006e82:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8006e86:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	68b6      	ldr	r6, [r6, #8]
 8006e8c:	ebae 0e04 	sub.w	lr, lr, r4
 8006e90:	4295      	cmp	r5, r2
 8006e92:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 8006e96:	d354      	bcc.n	8006f42 <nl_func_sm_array_f32+0xde>
 8006e98:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006e9c:	f1cc 0200 	rsb	r2, ip, #0
 8006ea0:	00a4      	lsls	r4, r4, #2
 8006ea2:	e9cd 1006 	strd	r1, r0, [sp, #24]
 8006ea6:	9303      	str	r3, [sp, #12]
 8006ea8:	9204      	str	r2, [sp, #16]
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4262      	negs	r2, r4
 8006eae:	9205      	str	r2, [sp, #20]
 8006eb0:	9301      	str	r3, [sp, #4]
 8006eb2:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8006eb6:	9b02      	ldr	r3, [sp, #8]
 8006eb8:	9a07      	ldr	r2, [sp, #28]
 8006eba:	60bd      	str	r5, [r7, #8]
 8006ebc:	609e      	str	r6, [r3, #8]
 8006ebe:	9b06      	ldr	r3, [sp, #24]
 8006ec0:	6992      	ldr	r2, [r2, #24]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	6894      	ldr	r4, [r2, #8]
 8006ec6:	9a03      	ldr	r2, [sp, #12]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	2a01      	cmp	r2, #1
 8006ecc:	ed93 8a00 	vldr	s16, [r3]
 8006ed0:	d940      	bls.n	8006f54 <nl_func_sm_array_f32+0xf0>
 8006ed2:	9901      	ldr	r1, [sp, #4]
 8006ed4:	1d1a      	adds	r2, r3, #4
 8006ed6:	eb03 0b01 	add.w	fp, r3, r1
 8006eda:	ecf2 7a01 	vldmia	r2!, {s15}
 8006ede:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ee6:	bfb8      	it	lt
 8006ee8:	eeb0 8a67 	vmovlt.f32	s16, s15
 8006eec:	4593      	cmp	fp, r2
 8006eee:	d1f4      	bne.n	8006eda <nl_func_sm_array_f32+0x76>
 8006ef0:	eddf 8a1b 	vldr	s17, [pc, #108]	; 8006f60 <nl_func_sm_array_f32+0xfc>
 8006ef4:	469a      	mov	sl, r3
 8006ef6:	46a1      	mov	r9, r4
 8006ef8:	46a0      	mov	r8, r4
 8006efa:	ecba 0a01 	vldmia	sl!, {s0}
 8006efe:	ee30 0a48 	vsub.f32	s0, s0, s16
 8006f02:	f003 fa1d 	bl	800a340 <expf>
 8006f06:	45d3      	cmp	fp, sl
 8006f08:	eca8 0a01 	vstmia	r8!, {s0}
 8006f0c:	ee78 8a80 	vadd.f32	s17, s17, s0
 8006f10:	d1f3      	bne.n	8006efa <nl_func_sm_array_f32+0x96>
 8006f12:	eef5 8a40 	vcmp.f32	s17, #0.0
 8006f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f1a:	d00b      	beq.n	8006f34 <nl_func_sm_array_f32+0xd0>
 8006f1c:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8006f20:	9b01      	ldr	r3, [sp, #4]
 8006f22:	441c      	add	r4, r3
 8006f24:	edd9 7a00 	vldr	s15, [r9]
 8006f28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f2c:	ece9 7a01 	vstmia	r9!, {s15}
 8006f30:	454c      	cmp	r4, r9
 8006f32:	d1f7      	bne.n	8006f24 <nl_func_sm_array_f32+0xc0>
 8006f34:	9b04      	ldr	r3, [sp, #16]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	441d      	add	r5, r3
 8006f3a:	9b05      	ldr	r3, [sp, #20]
 8006f3c:	42aa      	cmp	r2, r5
 8006f3e:	441e      	add	r6, r3
 8006f40:	d9b9      	bls.n	8006eb6 <nl_func_sm_array_f32+0x52>
 8006f42:	60ba      	str	r2, [r7, #8]
 8006f44:	9a02      	ldr	r2, [sp, #8]
 8006f46:	68d3      	ldr	r3, [r2, #12]
 8006f48:	6093      	str	r3, [r2, #8]
 8006f4a:	b009      	add	sp, #36	; 0x24
 8006f4c:	ecbd 8b04 	vpop	{d8-d9}
 8006f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f54:	2a00      	cmp	r2, #0
 8006f56:	d0ed      	beq.n	8006f34 <nl_func_sm_array_f32+0xd0>
 8006f58:	9a01      	ldr	r2, [sp, #4]
 8006f5a:	eb03 0b02 	add.w	fp, r3, r2
 8006f5e:	e7c7      	b.n	8006ef0 <nl_func_sm_array_f32+0x8c>
 8006f60:	00000000 	.word	0x00000000

08006f64 <nl_func_relu_generic_array_f32>:
 8006f64:	b430      	push	{r4, r5}
 8006f66:	6989      	ldr	r1, [r1, #24]
 8006f68:	6980      	ldr	r0, [r0, #24]
 8006f6a:	edd3 6a02 	vldr	s13, [r3, #8]
 8006f6e:	688c      	ldr	r4, [r1, #8]
 8006f70:	6880      	ldr	r0, [r0, #8]
 8006f72:	ed93 7a00 	vldr	s14, [r3]
 8006f76:	ed93 6a01 	vldr	s12, [r3, #4]
 8006f7a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006f7e:	3a01      	subs	r2, #1
 8006f80:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8006f84:	0092      	lsls	r2, r2, #2
 8006f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f8a:	4410      	add	r0, r2
 8006f8c:	4422      	add	r2, r4
 8006f8e:	d421      	bmi.n	8006fd4 <nl_func_relu_generic_array_f32+0x70>
 8006f90:	4294      	cmp	r4, r2
 8006f92:	d83d      	bhi.n	8007010 <nl_func_relu_generic_array_f32+0xac>
 8006f94:	1d13      	adds	r3, r2, #4
 8006f96:	1d02      	adds	r2, r0, #4
 8006f98:	e010      	b.n	8006fbc <nl_func_relu_generic_array_f32+0x58>
 8006f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fa2:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8006fa6:	d501      	bpl.n	8006fac <nl_func_relu_generic_array_f32+0x48>
 8006fa8:	ee65 7a86 	vmul.f32	s15, s11, s12
 8006fac:	ed62 7a01 	vstmdb	r2!, {s15}
 8006fb0:	6888      	ldr	r0, [r1, #8]
 8006fb2:	f1a3 0408 	sub.w	r4, r3, #8
 8006fb6:	4284      	cmp	r4, r0
 8006fb8:	462b      	mov	r3, r5
 8006fba:	d329      	bcc.n	8007010 <nl_func_relu_generic_array_f32+0xac>
 8006fbc:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006fc0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fc8:	f1a3 0504 	sub.w	r5, r3, #4
 8006fcc:	d4e5      	bmi.n	8006f9a <nl_func_relu_generic_array_f32+0x36>
 8006fce:	eef0 7a66 	vmov.f32	s15, s13
 8006fd2:	e7eb      	b.n	8006fac <nl_func_relu_generic_array_f32+0x48>
 8006fd4:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8006fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fdc:	d01a      	beq.n	8007014 <nl_func_relu_generic_array_f32+0xb0>
 8006fde:	4294      	cmp	r4, r2
 8006fe0:	d816      	bhi.n	8007010 <nl_func_relu_generic_array_f32+0xac>
 8006fe2:	1d13      	adds	r3, r2, #4
 8006fe4:	1d02      	adds	r2, r0, #4
 8006fe6:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006fea:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8006fee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ff2:	f1a3 0408 	sub.w	r4, r3, #8
 8006ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ffa:	f1a3 0004 	sub.w	r0, r3, #4
 8006ffe:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007002:	4623      	mov	r3, r4
 8007004:	d51e      	bpl.n	8007044 <nl_func_relu_generic_array_f32+0xe0>
 8007006:	ed62 6a01 	vstmdb	r2!, {s13}
 800700a:	688b      	ldr	r3, [r1, #8]
 800700c:	42a3      	cmp	r3, r4
 800700e:	d91e      	bls.n	800704e <nl_func_relu_generic_array_f32+0xea>
 8007010:	bc30      	pop	{r4, r5}
 8007012:	4770      	bx	lr
 8007014:	4294      	cmp	r4, r2
 8007016:	d8fb      	bhi.n	8007010 <nl_func_relu_generic_array_f32+0xac>
 8007018:	1d13      	adds	r3, r2, #4
 800701a:	2500      	movs	r5, #0
 800701c:	1d02      	adds	r2, r0, #4
 800701e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007022:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007026:	f1a3 0408 	sub.w	r4, r3, #8
 800702a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800702e:	f1a3 0004 	sub.w	r0, r3, #4
 8007032:	4623      	mov	r3, r4
 8007034:	db0d      	blt.n	8007052 <nl_func_relu_generic_array_f32+0xee>
 8007036:	ed62 7a01 	vstmdb	r2!, {s15}
 800703a:	688b      	ldr	r3, [r1, #8]
 800703c:	42a3      	cmp	r3, r4
 800703e:	d8e7      	bhi.n	8007010 <nl_func_relu_generic_array_f32+0xac>
 8007040:	4603      	mov	r3, r0
 8007042:	e7ec      	b.n	800701e <nl_func_relu_generic_array_f32+0xba>
 8007044:	ed62 7a01 	vstmdb	r2!, {s15}
 8007048:	688c      	ldr	r4, [r1, #8]
 800704a:	429c      	cmp	r4, r3
 800704c:	d8e0      	bhi.n	8007010 <nl_func_relu_generic_array_f32+0xac>
 800704e:	4603      	mov	r3, r0
 8007050:	e7c9      	b.n	8006fe6 <nl_func_relu_generic_array_f32+0x82>
 8007052:	f842 5d04 	str.w	r5, [r2, #-4]!
 8007056:	688c      	ldr	r4, [r1, #8]
 8007058:	429c      	cmp	r4, r3
 800705a:	d8d9      	bhi.n	8007010 <nl_func_relu_generic_array_f32+0xac>
 800705c:	4603      	mov	r3, r0
 800705e:	e7de      	b.n	800701e <nl_func_relu_generic_array_f32+0xba>

08007060 <forward_relu>:
 8007060:	6982      	ldr	r2, [r0, #24]
 8007062:	8813      	ldrh	r3, [r2, #0]
 8007064:	b333      	cbz	r3, 80070b4 <forward_relu+0x54>
 8007066:	6852      	ldr	r2, [r2, #4]
 8007068:	6851      	ldr	r1, [r2, #4]
 800706a:	b101      	cbz	r1, 800706e <forward_relu+0xe>
 800706c:	6809      	ldr	r1, [r1, #0]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d91d      	bls.n	80070ae <forward_relu+0x4e>
 8007072:	b4f0      	push	{r4, r5, r6, r7}
 8007074:	6917      	ldr	r7, [r2, #16]
 8007076:	b107      	cbz	r7, 800707a <forward_relu+0x1a>
 8007078:	683f      	ldr	r7, [r7, #0]
 800707a:	688c      	ldr	r4, [r1, #8]
 800707c:	69c3      	ldr	r3, [r0, #28]
 800707e:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8007082:	2b00      	cmp	r3, #0
 8007084:	d044      	beq.n	8007110 <forward_relu+0xb0>
 8007086:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 800708a:	2d01      	cmp	r5, #1
 800708c:	d014      	beq.n	80070b8 <forward_relu+0x58>
 800708e:	2c00      	cmp	r4, #0
 8007090:	d074      	beq.n	800717c <forward_relu+0x11c>
 8007092:	68ce      	ldr	r6, [r1, #12]
 8007094:	2201      	movs	r2, #1
 8007096:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800709a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800709e:	42a6      	cmp	r6, r4
 80070a0:	fb05 f202 	mul.w	r2, r5, r2
 80070a4:	d1f9      	bne.n	800709a <forward_relu+0x3a>
 80070a6:	4638      	mov	r0, r7
 80070a8:	bcf0      	pop	{r4, r5, r6, r7}
 80070aa:	f7ff bf5b 	b.w	8006f64 <nl_func_relu_generic_array_f32>
 80070ae:	2300      	movs	r3, #0
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	deff      	udf	#255	; 0xff
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	deff      	udf	#255	; 0xff
 80070b8:	69ba      	ldr	r2, [r7, #24]
 80070ba:	6988      	ldr	r0, [r1, #24]
 80070bc:	6896      	ldr	r6, [r2, #8]
 80070be:	ed93 7a00 	vldr	s14, [r3]
 80070c2:	6882      	ldr	r2, [r0, #8]
 80070c4:	b184      	cbz	r4, 80070e8 <forward_relu+0x88>
 80070c6:	68cf      	ldr	r7, [r1, #12]
 80070c8:	462b      	mov	r3, r5
 80070ca:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80070ce:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 80070d2:	42a7      	cmp	r7, r4
 80070d4:	fb01 f303 	mul.w	r3, r1, r3
 80070d8:	d1f9      	bne.n	80070ce <forward_relu+0x6e>
 80070da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80070de:	3b01      	subs	r3, #1
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	18d2      	adds	r2, r2, r3
 80070e4:	441e      	add	r6, r3
 80070e6:	d23f      	bcs.n	8007168 <forward_relu+0x108>
 80070e8:	1d13      	adds	r3, r2, #4
 80070ea:	2500      	movs	r5, #0
 80070ec:	1d32      	adds	r2, r6, #4
 80070ee:	ed53 7a01 	vldr	s15, [r3, #-4]
 80070f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80070f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070fa:	f1a3 0104 	sub.w	r1, r3, #4
 80070fe:	d835      	bhi.n	800716c <forward_relu+0x10c>
 8007100:	ed62 7a01 	vstmdb	r2!, {s15}
 8007104:	6884      	ldr	r4, [r0, #8]
 8007106:	3b08      	subs	r3, #8
 8007108:	429c      	cmp	r4, r3
 800710a:	d82d      	bhi.n	8007168 <forward_relu+0x108>
 800710c:	460b      	mov	r3, r1
 800710e:	e7ee      	b.n	80070ee <forward_relu+0x8e>
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	698d      	ldr	r5, [r1, #24]
 8007114:	6898      	ldr	r0, [r3, #8]
 8007116:	68ab      	ldr	r3, [r5, #8]
 8007118:	b184      	cbz	r4, 800713c <forward_relu+0xdc>
 800711a:	68ce      	ldr	r6, [r1, #12]
 800711c:	2201      	movs	r2, #1
 800711e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8007122:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8007126:	42a6      	cmp	r6, r4
 8007128:	fb01 f202 	mul.w	r2, r1, r2
 800712c:	d1f9      	bne.n	8007122 <forward_relu+0xc2>
 800712e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8007132:	3a01      	subs	r2, #1
 8007134:	0092      	lsls	r2, r2, #2
 8007136:	189b      	adds	r3, r3, r2
 8007138:	4410      	add	r0, r2
 800713a:	d215      	bcs.n	8007168 <forward_relu+0x108>
 800713c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007180 <forward_relu+0x120>
 8007140:	3304      	adds	r3, #4
 8007142:	1d01      	adds	r1, r0, #4
 8007144:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007148:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800714c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007150:	bfb8      	it	lt
 8007152:	eef0 7a47 	vmovlt.f32	s15, s14
 8007156:	ed61 7a01 	vstmdb	r1!, {s15}
 800715a:	68a8      	ldr	r0, [r5, #8]
 800715c:	f1a3 0208 	sub.w	r2, r3, #8
 8007160:	4290      	cmp	r0, r2
 8007162:	f1a3 0304 	sub.w	r3, r3, #4
 8007166:	d9ed      	bls.n	8007144 <forward_relu+0xe4>
 8007168:	bcf0      	pop	{r4, r5, r6, r7}
 800716a:	4770      	bx	lr
 800716c:	f842 5d04 	str.w	r5, [r2, #-4]!
 8007170:	6884      	ldr	r4, [r0, #8]
 8007172:	3b08      	subs	r3, #8
 8007174:	429c      	cmp	r4, r3
 8007176:	d8f7      	bhi.n	8007168 <forward_relu+0x108>
 8007178:	460b      	mov	r3, r1
 800717a:	e7b8      	b.n	80070ee <forward_relu+0x8e>
 800717c:	2201      	movs	r2, #1
 800717e:	e792      	b.n	80070a6 <forward_relu+0x46>
 8007180:	00000000 	.word	0x00000000

08007184 <forward_sm>:
 8007184:	6982      	ldr	r2, [r0, #24]
 8007186:	8813      	ldrh	r3, [r2, #0]
 8007188:	b32b      	cbz	r3, 80071d6 <forward_sm+0x52>
 800718a:	6852      	ldr	r2, [r2, #4]
 800718c:	6851      	ldr	r1, [r2, #4]
 800718e:	b101      	cbz	r1, 8007192 <forward_sm+0xe>
 8007190:	6809      	ldr	r1, [r1, #0]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d91c      	bls.n	80071d0 <forward_sm+0x4c>
 8007196:	6913      	ldr	r3, [r2, #16]
 8007198:	b1c3      	cbz	r3, 80071cc <forward_sm+0x48>
 800719a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800719c:	6818      	ldr	r0, [r3, #0]
 800719e:	688c      	ldr	r4, [r1, #8]
 80071a0:	68c3      	ldr	r3, [r0, #12]
 80071a2:	68ce      	ldr	r6, [r1, #12]
 80071a4:	685f      	ldr	r7, [r3, #4]
 80071a6:	6873      	ldr	r3, [r6, #4]
 80071a8:	0a24      	lsrs	r4, r4, #8
 80071aa:	b083      	sub	sp, #12
 80071ac:	d015      	beq.n	80071da <forward_sm+0x56>
 80071ae:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80071b2:	2201      	movs	r2, #1
 80071b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80071b8:	42a6      	cmp	r6, r4
 80071ba:	fb05 f202 	mul.w	r2, r5, r2
 80071be:	d1f9      	bne.n	80071b4 <forward_sm+0x30>
 80071c0:	e9cd 3700 	strd	r3, r7, [sp]
 80071c4:	f7ff fe4e 	bl	8006e64 <nl_func_sm_array_f32>
 80071c8:	b003      	add	sp, #12
 80071ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	deff      	udf	#255	; 0xff
 80071d0:	2300      	movs	r3, #0
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	deff      	udf	#255	; 0xff
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	deff      	udf	#255	; 0xff
 80071da:	2201      	movs	r2, #1
 80071dc:	e9cd 3700 	strd	r3, r7, [sp]
 80071e0:	f7ff fe40 	bl	8006e64 <nl_func_sm_array_f32>
 80071e4:	b003      	add	sp, #12
 80071e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080071e8 <pool_func_mp_array_f32>:
 80071e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ec:	b093      	sub	sp, #76	; 0x4c
 80071ee:	f8d0 b008 	ldr.w	fp, [r0, #8]
 80071f2:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80071f4:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 80071f8:	68a8      	ldr	r0, [r5, #8]
 80071fa:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 80071fe:	9508      	str	r5, [sp, #32]
 8007200:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 8007204:	9002      	str	r0, [sp, #8]
 8007206:	950d      	str	r5, [sp, #52]	; 0x34
 8007208:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 800720c:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 8007210:	9004      	str	r0, [sp, #16]
 8007212:	9506      	str	r5, [sp, #24]
 8007214:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 8007218:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 800721c:	9009      	str	r0, [sp, #36]	; 0x24
 800721e:	950b      	str	r5, [sp, #44]	; 0x2c
 8007220:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 8007224:	9200      	str	r2, [sp, #0]
 8007226:	468a      	mov	sl, r1
 8007228:	4699      	mov	r9, r3
 800722a:	b95c      	cbnz	r4, 8007244 <pool_func_mp_array_f32+0x5c>
 800722c:	b950      	cbnz	r0, 8007244 <pool_func_mp_array_f32+0x5c>
 800722e:	9b04      	ldr	r3, [sp, #16]
 8007230:	1a5a      	subs	r2, r3, r1
 8007232:	9b06      	ldr	r3, [sp, #24]
 8007234:	9908      	ldr	r1, [sp, #32]
 8007236:	3a01      	subs	r2, #1
 8007238:	3b01      	subs	r3, #1
 800723a:	fb13 2301 	smlabb	r3, r3, r1, r2
 800723e:	041a      	lsls	r2, r3, #16
 8007240:	f100 809b 	bmi.w	800737a <pool_func_mp_array_f32+0x192>
 8007244:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 808b 	beq.w	8007362 <pool_func_mp_array_f32+0x17a>
 800724c:	9b06      	ldr	r3, [sp, #24]
 800724e:	2b00      	cmp	r3, #0
 8007250:	f000 8087 	beq.w	8007362 <pool_func_mp_array_f32+0x17a>
 8007254:	f1b9 0f00 	cmp.w	r9, #0
 8007258:	f000 8083 	beq.w	8007362 <pool_func_mp_array_f32+0x17a>
 800725c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800725e:	1b1c      	subs	r4, r3, r4
 8007260:	9b04      	ldr	r3, [sp, #16]
 8007262:	1a1b      	subs	r3, r3, r0
 8007264:	b29b      	uxth	r3, r3
 8007266:	4240      	negs	r0, r0
 8007268:	2200      	movs	r2, #0
 800726a:	b2a1      	uxth	r1, r4
 800726c:	930f      	str	r3, [sp, #60]	; 0x3c
 800726e:	b283      	uxth	r3, r0
 8007270:	920e      	str	r2, [sp, #56]	; 0x38
 8007272:	910c      	str	r1, [sp, #48]	; 0x30
 8007274:	9310      	str	r3, [sp, #64]	; 0x40
 8007276:	9c06      	ldr	r4, [sp, #24]
 8007278:	990c      	ldr	r1, [sp, #48]	; 0x30
 800727a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800727c:	fb02 f204 	mul.w	r2, r2, r4
 8007280:	1acb      	subs	r3, r1, r3
 8007282:	920a      	str	r2, [sp, #40]	; 0x28
 8007284:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007286:	9205      	str	r2, [sp, #20]
 8007288:	2000      	movs	r0, #0
 800728a:	b21b      	sxth	r3, r3
 800728c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800728e:	9303      	str	r3, [sp, #12]
 8007290:	9007      	str	r0, [sp, #28]
 8007292:	4603      	mov	r3, r0
 8007294:	fa0f f881 	sxth.w	r8, r1
 8007298:	9204      	str	r2, [sp, #16]
 800729a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800729c:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 80072a0:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 80072a4:	4413      	add	r3, r2
 80072a6:	f04f 0e00 	mov.w	lr, #0
 80072aa:	fb09 f303 	mul.w	r3, r9, r3
 80072ae:	9301      	str	r3, [sp, #4]
 80072b0:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 80072b4:	4675      	mov	r5, lr
 80072b6:	9903      	ldr	r1, [sp, #12]
 80072b8:	eddf 7a78 	vldr	s15, [pc, #480]	; 800749c <pool_func_mp_array_f32+0x2b4>
 80072bc:	4588      	cmp	r8, r1
 80072be:	dd24      	ble.n	800730a <pool_func_mp_array_f32+0x122>
 80072c0:	4564      	cmp	r4, ip
 80072c2:	dd1e      	ble.n	8007302 <pool_func_mp_array_f32+0x11a>
 80072c4:	2900      	cmp	r1, #0
 80072c6:	fb0a f601 	mul.w	r6, sl, r1
 80072ca:	db1a      	blt.n	8007302 <pool_func_mp_array_f32+0x11a>
 80072cc:	9b00      	ldr	r3, [sp, #0]
 80072ce:	4299      	cmp	r1, r3
 80072d0:	da17      	bge.n	8007302 <pool_func_mp_array_f32+0x11a>
 80072d2:	f1bc 0f00 	cmp.w	ip, #0
 80072d6:	4663      	mov	r3, ip
 80072d8:	db46      	blt.n	8007368 <pool_func_mp_array_f32+0x180>
 80072da:	18f2      	adds	r2, r6, r3
 80072dc:	fb09 5202 	mla	r2, r9, r2, r5
 80072e0:	1c58      	adds	r0, r3, #1
 80072e2:	459a      	cmp	sl, r3
 80072e4:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 80072e8:	b203      	sxth	r3, r0
 80072ea:	dd08      	ble.n	80072fe <pool_func_mp_array_f32+0x116>
 80072ec:	ed92 7a00 	vldr	s14, [r2]
 80072f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072f8:	bfb8      	it	lt
 80072fa:	eef0 7a47 	vmovlt.f32	s15, s14
 80072fe:	429c      	cmp	r4, r3
 8007300:	dceb      	bgt.n	80072da <pool_func_mp_array_f32+0xf2>
 8007302:	3101      	adds	r1, #1
 8007304:	b209      	sxth	r1, r1
 8007306:	4588      	cmp	r8, r1
 8007308:	dcda      	bgt.n	80072c0 <pool_func_mp_array_f32+0xd8>
 800730a:	9b01      	ldr	r3, [sp, #4]
 800730c:	f10e 0e01 	add.w	lr, lr, #1
 8007310:	441d      	add	r5, r3
 8007312:	9b02      	ldr	r3, [sp, #8]
 8007314:	fa0f fe8e 	sxth.w	lr, lr
 8007318:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800731c:	45ce      	cmp	lr, r9
 800731e:	edc5 7a00 	vstr	s15, [r5]
 8007322:	4675      	mov	r5, lr
 8007324:	dbc7      	blt.n	80072b6 <pool_func_mp_array_f32+0xce>
 8007326:	9b07      	ldr	r3, [sp, #28]
 8007328:	9808      	ldr	r0, [sp, #32]
 800732a:	3301      	adds	r3, #1
 800732c:	b219      	sxth	r1, r3
 800732e:	9b05      	ldr	r3, [sp, #20]
 8007330:	9107      	str	r1, [sp, #28]
 8007332:	461a      	mov	r2, r3
 8007334:	4402      	add	r2, r0
 8007336:	9b04      	ldr	r3, [sp, #16]
 8007338:	b292      	uxth	r2, r2
 800733a:	9205      	str	r2, [sp, #20]
 800733c:	9a06      	ldr	r2, [sp, #24]
 800733e:	4403      	add	r3, r0
 8007340:	b29b      	uxth	r3, r3
 8007342:	428a      	cmp	r2, r1
 8007344:	9304      	str	r3, [sp, #16]
 8007346:	460b      	mov	r3, r1
 8007348:	dca7      	bgt.n	800729a <pool_func_mp_array_f32+0xb2>
 800734a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800734c:	3301      	adds	r3, #1
 800734e:	b21a      	sxth	r2, r3
 8007350:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 8007354:	440b      	add	r3, r1
 8007356:	b29b      	uxth	r3, r3
 8007358:	930c      	str	r3, [sp, #48]	; 0x30
 800735a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800735c:	920e      	str	r2, [sp, #56]	; 0x38
 800735e:	4293      	cmp	r3, r2
 8007360:	dc89      	bgt.n	8007276 <pool_func_mp_array_f32+0x8e>
 8007362:	b013      	add	sp, #76	; 0x4c
 8007364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007368:	3301      	adds	r3, #1
 800736a:	b21b      	sxth	r3, r3
 800736c:	42bb      	cmp	r3, r7
 800736e:	dac6      	bge.n	80072fe <pool_func_mp_array_f32+0x116>
 8007370:	3301      	adds	r3, #1
 8007372:	b21b      	sxth	r3, r3
 8007374:	42bb      	cmp	r3, r7
 8007376:	dbf7      	blt.n	8007368 <pool_func_mp_array_f32+0x180>
 8007378:	e7c1      	b.n	80072fe <pool_func_mp_array_f32+0x116>
 800737a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800737c:	9a00      	ldr	r2, [sp, #0]
 800737e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007380:	1a9a      	subs	r2, r3, r2
 8007382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007384:	3a01      	subs	r2, #1
 8007386:	3b01      	subs	r3, #1
 8007388:	fb13 2301 	smlabb	r3, r3, r1, r2
 800738c:	041b      	lsls	r3, r3, #16
 800738e:	f57f af59 	bpl.w	8007244 <pool_func_mp_array_f32+0x5c>
 8007392:	fb0a f309 	mul.w	r3, sl, r9
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
 800739c:	930e      	str	r3, [sp, #56]	; 0x38
 800739e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073a0:	9001      	str	r0, [sp, #4]
 80073a2:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80073ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073ae:	429a      	cmp	r2, r3
 80073b0:	ddd7      	ble.n	8007362 <pool_func_mp_array_f32+0x17a>
 80073b2:	9a00      	ldr	r2, [sp, #0]
 80073b4:	9906      	ldr	r1, [sp, #24]
 80073b6:	fa0f f882 	sxth.w	r8, r2
 80073ba:	2900      	cmp	r1, #0
 80073bc:	d062      	beq.n	8007484 <pool_func_mp_array_f32+0x29c>
 80073be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073c0:	fb01 f303 	mul.w	r3, r1, r3
 80073c4:	1a12      	subs	r2, r2, r0
 80073c6:	9305      	str	r3, [sp, #20]
 80073c8:	b213      	sxth	r3, r2
 80073ca:	9307      	str	r3, [sp, #28]
 80073cc:	f1b9 0f00 	cmp.w	r9, #0
 80073d0:	d058      	beq.n	8007484 <pool_func_mp_array_f32+0x29c>
 80073d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80073d4:	fb02 f303 	mul.w	r3, r2, r3
 80073d8:	2600      	movs	r6, #0
 80073da:	930c      	str	r3, [sp, #48]	; 0x30
 80073dc:	9b04      	ldr	r3, [sp, #16]
 80073de:	9303      	str	r3, [sp, #12]
 80073e0:	4637      	mov	r7, r6
 80073e2:	46b2      	mov	sl, r6
 80073e4:	9b05      	ldr	r3, [sp, #20]
 80073e6:	9611      	str	r6, [sp, #68]	; 0x44
 80073e8:	eb0a 0b03 	add.w	fp, sl, r3
 80073ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073ee:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 80073f2:	b235      	sxth	r5, r6
 80073f4:	18eb      	adds	r3, r5, r3
 80073f6:	f04f 0a00 	mov.w	sl, #0
 80073fa:	fb09 f303 	mul.w	r3, r9, r3
 80073fe:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007400:	930a      	str	r3, [sp, #40]	; 0x28
 8007402:	fb09 fb0b 	mul.w	fp, r9, fp
 8007406:	46d6      	mov	lr, sl
 8007408:	9807      	ldr	r0, [sp, #28]
 800740a:	4580      	cmp	r8, r0
 800740c:	dd43      	ble.n	8007496 <pool_func_mp_array_f32+0x2ae>
 800740e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007410:	eddf 7a22 	vldr	s15, [pc, #136]	; 800749c <pool_func_mp_array_f32+0x2b4>
 8007414:	eb0e 0403 	add.w	r4, lr, r3
 8007418:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800741a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800741e:	42a9      	cmp	r1, r5
 8007420:	dd0f      	ble.n	8007442 <pool_func_mp_array_f32+0x25a>
 8007422:	4622      	mov	r2, r4
 8007424:	462b      	mov	r3, r5
 8007426:	ed92 7a00 	vldr	s14, [r2]
 800742a:	3301      	adds	r3, #1
 800742c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007434:	b21b      	sxth	r3, r3
 8007436:	bfb8      	it	lt
 8007438:	eef0 7a47 	vmovlt.f32	s15, s14
 800743c:	4299      	cmp	r1, r3
 800743e:	4462      	add	r2, ip
 8007440:	d1f1      	bne.n	8007426 <pool_func_mp_array_f32+0x23e>
 8007442:	3001      	adds	r0, #1
 8007444:	b200      	sxth	r0, r0
 8007446:	4580      	cmp	r8, r0
 8007448:	4434      	add	r4, r6
 800744a:	d1e8      	bne.n	800741e <pool_func_mp_array_f32+0x236>
 800744c:	f10a 0a01 	add.w	sl, sl, #1
 8007450:	9a02      	ldr	r2, [sp, #8]
 8007452:	eb0b 030e 	add.w	r3, fp, lr
 8007456:	fa0f fa8a 	sxth.w	sl, sl
 800745a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800745e:	45ca      	cmp	sl, r9
 8007460:	edc3 7a00 	vstr	s15, [r3]
 8007464:	46d6      	mov	lr, sl
 8007466:	dbcf      	blt.n	8007408 <pool_func_mp_array_f32+0x220>
 8007468:	9b03      	ldr	r3, [sp, #12]
 800746a:	9a08      	ldr	r2, [sp, #32]
 800746c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800746e:	4413      	add	r3, r2
 8007470:	b29b      	uxth	r3, r3
 8007472:	3701      	adds	r7, #1
 8007474:	9303      	str	r3, [sp, #12]
 8007476:	9b06      	ldr	r3, [sp, #24]
 8007478:	b23f      	sxth	r7, r7
 800747a:	4416      	add	r6, r2
 800747c:	42bb      	cmp	r3, r7
 800747e:	b2b6      	uxth	r6, r6
 8007480:	46ba      	mov	sl, r7
 8007482:	dcaf      	bgt.n	80073e4 <pool_func_mp_array_f32+0x1fc>
 8007484:	9b00      	ldr	r3, [sp, #0]
 8007486:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007488:	4413      	add	r3, r2
 800748a:	b29b      	uxth	r3, r3
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	9b01      	ldr	r3, [sp, #4]
 8007490:	3301      	adds	r3, #1
 8007492:	9301      	str	r3, [sp, #4]
 8007494:	e788      	b.n	80073a8 <pool_func_mp_array_f32+0x1c0>
 8007496:	eddf 7a01 	vldr	s15, [pc, #4]	; 800749c <pool_func_mp_array_f32+0x2b4>
 800749a:	e7d7      	b.n	800744c <pool_func_mp_array_f32+0x264>
 800749c:	cf000000 	.word	0xcf000000

080074a0 <ai_check_custom_types>:
 80074a0:	4b13      	ldr	r3, [pc, #76]	; (80074f0 <ai_check_custom_types+0x50>)
 80074a2:	b082      	sub	sp, #8
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	9301      	str	r3, [sp, #4]
 80074a8:	b118      	cbz	r0, 80074b2 <ai_check_custom_types+0x12>
 80074aa:	7803      	ldrb	r3, [r0, #0]
 80074ac:	2b03      	cmp	r3, #3
 80074ae:	d002      	beq.n	80074b6 <ai_check_custom_types+0x16>
 80074b0:	2000      	movs	r0, #0
 80074b2:	b002      	add	sp, #8
 80074b4:	4770      	bx	lr
 80074b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d004      	beq.n	80074c8 <ai_check_custom_types+0x28>
 80074be:	2001      	movs	r0, #1
 80074c0:	f080 0001 	eor.w	r0, r0, #1
 80074c4:	b002      	add	sp, #8
 80074c6:	4770      	bx	lr
 80074c8:	7842      	ldrb	r2, [r0, #1]
 80074ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	f100 0001 	add.w	r0, r0, #1
 80074d4:	d1f3      	bne.n	80074be <ai_check_custom_types+0x1e>
 80074d6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80074da:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d1ed      	bne.n	80074be <ai_check_custom_types+0x1e>
 80074e2:	7842      	ldrb	r2, [r0, #1]
 80074e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d1e8      	bne.n	80074be <ai_check_custom_types+0x1e>
 80074ec:	2000      	movs	r0, #0
 80074ee:	e7e7      	b.n	80074c0 <ai_check_custom_types+0x20>
 80074f0:	0800a640 	.word	0x0800a640

080074f4 <ai_layers_init_all>:
 80074f4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80074f6:	b17a      	cbz	r2, 8007518 <ai_layers_init_all+0x24>
 80074f8:	6913      	ldr	r3, [r2, #16]
 80074fa:	60d0      	str	r0, [r2, #12]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	f04f 0201 	mov.w	r2, #1
 8007502:	d009      	beq.n	8007518 <ai_layers_init_all+0x24>
 8007504:	b143      	cbz	r3, 8007518 <ai_layers_init_all+0x24>
 8007506:	6919      	ldr	r1, [r3, #16]
 8007508:	60d8      	str	r0, [r3, #12]
 800750a:	4299      	cmp	r1, r3
 800750c:	f102 0201 	add.w	r2, r2, #1
 8007510:	d002      	beq.n	8007518 <ai_layers_init_all+0x24>
 8007512:	460b      	mov	r3, r1
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1f6      	bne.n	8007506 <ai_layers_init_all+0x12>
 8007518:	4610      	mov	r0, r2
 800751a:	4770      	bx	lr

0800751c <ai_layers_post_init_all>:
 800751c:	b538      	push	{r3, r4, r5, lr}
 800751e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007520:	b18c      	cbz	r4, 8007546 <ai_layers_post_init_all+0x2a>
 8007522:	2500      	movs	r5, #0
 8007524:	6863      	ldr	r3, [r4, #4]
 8007526:	f013 0f01 	tst.w	r3, #1
 800752a:	4620      	mov	r0, r4
 800752c:	d003      	beq.n	8007536 <ai_layers_post_init_all+0x1a>
 800752e:	6a23      	ldr	r3, [r4, #32]
 8007530:	b10b      	cbz	r3, 8007536 <ai_layers_post_init_all+0x1a>
 8007532:	4798      	blx	r3
 8007534:	3501      	adds	r5, #1
 8007536:	6923      	ldr	r3, [r4, #16]
 8007538:	42a3      	cmp	r3, r4
 800753a:	d002      	beq.n	8007542 <ai_layers_post_init_all+0x26>
 800753c:	461c      	mov	r4, r3
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1f0      	bne.n	8007524 <ai_layers_post_init_all+0x8>
 8007542:	4628      	mov	r0, r5
 8007544:	bd38      	pop	{r3, r4, r5, pc}
 8007546:	4625      	mov	r5, r4
 8007548:	e7fb      	b.n	8007542 <ai_layers_post_init_all+0x26>
 800754a:	bf00      	nop

0800754c <ai_layers_forward_all>:
 800754c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007550:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8007552:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8007554:	4604      	mov	r4, r0
 8007556:	2f00      	cmp	r7, #0
 8007558:	d02c      	beq.n	80075b4 <ai_layers_forward_all+0x68>
 800755a:	2d00      	cmp	r5, #0
 800755c:	d03f      	beq.n	80075de <ai_layers_forward_all+0x92>
 800755e:	6385      	str	r5, [r0, #56]	; 0x38
 8007560:	4629      	mov	r1, r5
 8007562:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007564:	2001      	movs	r0, #1
 8007566:	47b8      	blx	r7
 8007568:	2600      	movs	r6, #0
 800756a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800756c:	46b0      	mov	r8, r6
 800756e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007570:	2002      	movs	r0, #2
 8007572:	47b8      	blx	r7
 8007574:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8007576:	696b      	ldr	r3, [r5, #20]
 8007578:	4628      	mov	r0, r5
 800757a:	4798      	blx	r3
 800757c:	692b      	ldr	r3, [r5, #16]
 800757e:	429d      	cmp	r5, r3
 8007580:	f04f 0003 	mov.w	r0, #3
 8007584:	4619      	mov	r1, r3
 8007586:	d009      	beq.n	800759c <ai_layers_forward_all+0x50>
 8007588:	63a3      	str	r3, [r4, #56]	; 0x38
 800758a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800758c:	47b8      	blx	r7
 800758e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007590:	3601      	adds	r6, #1
 8007592:	2900      	cmp	r1, #0
 8007594:	d1eb      	bne.n	800756e <ai_layers_forward_all+0x22>
 8007596:	4630      	mov	r0, r6
 8007598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800759c:	2100      	movs	r1, #0
 800759e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 80075a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80075a4:	47b8      	blx	r7
 80075a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80075a8:	3601      	adds	r6, #1
 80075aa:	2900      	cmp	r1, #0
 80075ac:	d1df      	bne.n	800756e <ai_layers_forward_all+0x22>
 80075ae:	4630      	mov	r0, r6
 80075b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075b4:	b19d      	cbz	r5, 80075de <ai_layers_forward_all+0x92>
 80075b6:	6385      	str	r5, [r0, #56]	; 0x38
 80075b8:	463e      	mov	r6, r7
 80075ba:	696b      	ldr	r3, [r5, #20]
 80075bc:	4628      	mov	r0, r5
 80075be:	4798      	blx	r3
 80075c0:	692b      	ldr	r3, [r5, #16]
 80075c2:	42ab      	cmp	r3, r5
 80075c4:	f106 0601 	add.w	r6, r6, #1
 80075c8:	d004      	beq.n	80075d4 <ai_layers_forward_all+0x88>
 80075ca:	63a3      	str	r3, [r4, #56]	; 0x38
 80075cc:	461d      	mov	r5, r3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1f3      	bne.n	80075ba <ai_layers_forward_all+0x6e>
 80075d2:	e7e0      	b.n	8007596 <ai_layers_forward_all+0x4a>
 80075d4:	2300      	movs	r3, #0
 80075d6:	63a3      	str	r3, [r4, #56]	; 0x38
 80075d8:	4630      	mov	r0, r6
 80075da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075de:	462e      	mov	r6, r5
 80075e0:	4630      	mov	r0, r6
 80075e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075e6:	bf00      	nop

080075e8 <ai_layers_destroy_all>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80075ec:	b18c      	cbz	r4, 8007612 <ai_layers_destroy_all+0x2a>
 80075ee:	2500      	movs	r5, #0
 80075f0:	6863      	ldr	r3, [r4, #4]
 80075f2:	f013 0f04 	tst.w	r3, #4
 80075f6:	4620      	mov	r0, r4
 80075f8:	d003      	beq.n	8007602 <ai_layers_destroy_all+0x1a>
 80075fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80075fc:	b10b      	cbz	r3, 8007602 <ai_layers_destroy_all+0x1a>
 80075fe:	4798      	blx	r3
 8007600:	3501      	adds	r5, #1
 8007602:	6923      	ldr	r3, [r4, #16]
 8007604:	42a3      	cmp	r3, r4
 8007606:	d002      	beq.n	800760e <ai_layers_destroy_all+0x26>
 8007608:	461c      	mov	r4, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1f0      	bne.n	80075f0 <ai_layers_destroy_all+0x8>
 800760e:	4628      	mov	r0, r5
 8007610:	bd38      	pop	{r3, r4, r5, pc}
 8007612:	4625      	mov	r5, r4
 8007614:	e7fb      	b.n	800760e <ai_layers_destroy_all+0x26>
 8007616:	bf00      	nop

08007618 <ai_array_to_buffer_fmt>:
 8007618:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800761c:	2b02      	cmp	r3, #2
 800761e:	d029      	beq.n	8007674 <ai_array_to_buffer_fmt+0x5c>
 8007620:	4a22      	ldr	r2, [pc, #136]	; (80076ac <ai_array_to_buffer_fmt+0x94>)
 8007622:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8007626:	4293      	cmp	r3, r2
 8007628:	d010      	beq.n	800764c <ai_array_to_buffer_fmt+0x34>
 800762a:	dd13      	ble.n	8007654 <ai_array_to_buffer_fmt+0x3c>
 800762c:	4a20      	ldr	r2, [pc, #128]	; (80076b0 <ai_array_to_buffer_fmt+0x98>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d00c      	beq.n	800764c <ai_array_to_buffer_fmt+0x34>
 8007632:	dc27      	bgt.n	8007684 <ai_array_to_buffer_fmt+0x6c>
 8007634:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8007638:	4293      	cmp	r3, r2
 800763a:	d007      	beq.n	800764c <ai_array_to_buffer_fmt+0x34>
 800763c:	3207      	adds	r2, #7
 800763e:	4293      	cmp	r3, r2
 8007640:	d004      	beq.n	800764c <ai_array_to_buffer_fmt+0x34>
 8007642:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8007646:	4293      	cmp	r3, r2
 8007648:	d000      	beq.n	800764c <ai_array_to_buffer_fmt+0x34>
 800764a:	2340      	movs	r3, #64	; 0x40
 800764c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8007650:	4318      	orrs	r0, r3
 8007652:	4770      	bx	lr
 8007654:	4a17      	ldr	r2, [pc, #92]	; (80076b4 <ai_array_to_buffer_fmt+0x9c>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d0f8      	beq.n	800764c <ai_array_to_buffer_fmt+0x34>
 800765a:	dd1e      	ble.n	800769a <ai_array_to_buffer_fmt+0x82>
 800765c:	4a16      	ldr	r2, [pc, #88]	; (80076b8 <ai_array_to_buffer_fmt+0xa0>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d0f4      	beq.n	800764c <ai_array_to_buffer_fmt+0x34>
 8007662:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 8007666:	4293      	cmp	r3, r2
 8007668:	d0f0      	beq.n	800764c <ai_array_to_buffer_fmt+0x34>
 800766a:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800766e:	4293      	cmp	r3, r2
 8007670:	d1eb      	bne.n	800764a <ai_array_to_buffer_fmt+0x32>
 8007672:	e7eb      	b.n	800764c <ai_array_to_buffer_fmt+0x34>
 8007674:	4b11      	ldr	r3, [pc, #68]	; (80076bc <ai_array_to_buffer_fmt+0xa4>)
 8007676:	4003      	ands	r3, r0
 8007678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800767c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8007680:	4318      	orrs	r0, r3
 8007682:	4770      	bx	lr
 8007684:	4a0e      	ldr	r2, [pc, #56]	; (80076c0 <ai_array_to_buffer_fmt+0xa8>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d0e0      	beq.n	800764c <ai_array_to_buffer_fmt+0x34>
 800768a:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 800768e:	4293      	cmp	r3, r2
 8007690:	d0dc      	beq.n	800764c <ai_array_to_buffer_fmt+0x34>
 8007692:	4a0c      	ldr	r2, [pc, #48]	; (80076c4 <ai_array_to_buffer_fmt+0xac>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d1d8      	bne.n	800764a <ai_array_to_buffer_fmt+0x32>
 8007698:	e7d8      	b.n	800764c <ai_array_to_buffer_fmt+0x34>
 800769a:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800769e:	4293      	cmp	r3, r2
 80076a0:	d0d4      	beq.n	800764c <ai_array_to_buffer_fmt+0x34>
 80076a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d0d0      	beq.n	800764c <ai_array_to_buffer_fmt+0x34>
 80076aa:	e7ce      	b.n	800764a <ai_array_to_buffer_fmt+0x32>
 80076ac:	00060440 	.word	0x00060440
 80076b0:	00840840 	.word	0x00840840
 80076b4:	00040447 	.word	0x00040447
 80076b8:	0004084f 	.word	0x0004084f
 80076bc:	00803fff 	.word	0x00803fff
 80076c0:	00841040 	.word	0x00841040
 80076c4:	0084084f 	.word	0x0084084f

080076c8 <ai_array_get_byte_size>:
 80076c8:	b1c1      	cbz	r1, 80076fc <ai_array_get_byte_size+0x34>
 80076ca:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80076ce:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80076d2:	4413      	add	r3, r2
 80076d4:	fb01 f103 	mul.w	r1, r1, r3
 80076d8:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80076dc:	3107      	adds	r1, #7
 80076de:	f3c0 4043 	ubfx	r0, r0, #17, #4
 80076e2:	f021 0107 	bic.w	r1, r1, #7
 80076e6:	2804      	cmp	r0, #4
 80076e8:	fa21 f102 	lsr.w	r1, r1, r2
 80076ec:	d008      	beq.n	8007700 <ai_array_get_byte_size+0x38>
 80076ee:	2808      	cmp	r0, #8
 80076f0:	d101      	bne.n	80076f6 <ai_array_get_byte_size+0x2e>
 80076f2:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80076f6:	3107      	adds	r1, #7
 80076f8:	08c8      	lsrs	r0, r1, #3
 80076fa:	4770      	bx	lr
 80076fc:	4608      	mov	r0, r1
 80076fe:	4770      	bx	lr
 8007700:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8007704:	3107      	adds	r1, #7
 8007706:	08c8      	lsrs	r0, r1, #3
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop

0800770c <__errno>:
 800770c:	4b01      	ldr	r3, [pc, #4]	; (8007714 <__errno+0x8>)
 800770e:	6818      	ldr	r0, [r3, #0]
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	20000724 	.word	0x20000724

08007718 <__sflush_r>:
 8007718:	898a      	ldrh	r2, [r1, #12]
 800771a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800771e:	4605      	mov	r5, r0
 8007720:	0710      	lsls	r0, r2, #28
 8007722:	460c      	mov	r4, r1
 8007724:	d458      	bmi.n	80077d8 <__sflush_r+0xc0>
 8007726:	684b      	ldr	r3, [r1, #4]
 8007728:	2b00      	cmp	r3, #0
 800772a:	dc05      	bgt.n	8007738 <__sflush_r+0x20>
 800772c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800772e:	2b00      	cmp	r3, #0
 8007730:	dc02      	bgt.n	8007738 <__sflush_r+0x20>
 8007732:	2000      	movs	r0, #0
 8007734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007738:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800773a:	2e00      	cmp	r6, #0
 800773c:	d0f9      	beq.n	8007732 <__sflush_r+0x1a>
 800773e:	2300      	movs	r3, #0
 8007740:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007744:	682f      	ldr	r7, [r5, #0]
 8007746:	602b      	str	r3, [r5, #0]
 8007748:	d032      	beq.n	80077b0 <__sflush_r+0x98>
 800774a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800774c:	89a3      	ldrh	r3, [r4, #12]
 800774e:	075a      	lsls	r2, r3, #29
 8007750:	d505      	bpl.n	800775e <__sflush_r+0x46>
 8007752:	6863      	ldr	r3, [r4, #4]
 8007754:	1ac0      	subs	r0, r0, r3
 8007756:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007758:	b10b      	cbz	r3, 800775e <__sflush_r+0x46>
 800775a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800775c:	1ac0      	subs	r0, r0, r3
 800775e:	2300      	movs	r3, #0
 8007760:	4602      	mov	r2, r0
 8007762:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007764:	6a21      	ldr	r1, [r4, #32]
 8007766:	4628      	mov	r0, r5
 8007768:	47b0      	blx	r6
 800776a:	1c43      	adds	r3, r0, #1
 800776c:	89a3      	ldrh	r3, [r4, #12]
 800776e:	d106      	bne.n	800777e <__sflush_r+0x66>
 8007770:	6829      	ldr	r1, [r5, #0]
 8007772:	291d      	cmp	r1, #29
 8007774:	d82c      	bhi.n	80077d0 <__sflush_r+0xb8>
 8007776:	4a2a      	ldr	r2, [pc, #168]	; (8007820 <__sflush_r+0x108>)
 8007778:	40ca      	lsrs	r2, r1
 800777a:	07d6      	lsls	r6, r2, #31
 800777c:	d528      	bpl.n	80077d0 <__sflush_r+0xb8>
 800777e:	2200      	movs	r2, #0
 8007780:	6062      	str	r2, [r4, #4]
 8007782:	04d9      	lsls	r1, r3, #19
 8007784:	6922      	ldr	r2, [r4, #16]
 8007786:	6022      	str	r2, [r4, #0]
 8007788:	d504      	bpl.n	8007794 <__sflush_r+0x7c>
 800778a:	1c42      	adds	r2, r0, #1
 800778c:	d101      	bne.n	8007792 <__sflush_r+0x7a>
 800778e:	682b      	ldr	r3, [r5, #0]
 8007790:	b903      	cbnz	r3, 8007794 <__sflush_r+0x7c>
 8007792:	6560      	str	r0, [r4, #84]	; 0x54
 8007794:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007796:	602f      	str	r7, [r5, #0]
 8007798:	2900      	cmp	r1, #0
 800779a:	d0ca      	beq.n	8007732 <__sflush_r+0x1a>
 800779c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077a0:	4299      	cmp	r1, r3
 80077a2:	d002      	beq.n	80077aa <__sflush_r+0x92>
 80077a4:	4628      	mov	r0, r5
 80077a6:	f000 f9b5 	bl	8007b14 <_free_r>
 80077aa:	2000      	movs	r0, #0
 80077ac:	6360      	str	r0, [r4, #52]	; 0x34
 80077ae:	e7c1      	b.n	8007734 <__sflush_r+0x1c>
 80077b0:	6a21      	ldr	r1, [r4, #32]
 80077b2:	2301      	movs	r3, #1
 80077b4:	4628      	mov	r0, r5
 80077b6:	47b0      	blx	r6
 80077b8:	1c41      	adds	r1, r0, #1
 80077ba:	d1c7      	bne.n	800774c <__sflush_r+0x34>
 80077bc:	682b      	ldr	r3, [r5, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d0c4      	beq.n	800774c <__sflush_r+0x34>
 80077c2:	2b1d      	cmp	r3, #29
 80077c4:	d001      	beq.n	80077ca <__sflush_r+0xb2>
 80077c6:	2b16      	cmp	r3, #22
 80077c8:	d101      	bne.n	80077ce <__sflush_r+0xb6>
 80077ca:	602f      	str	r7, [r5, #0]
 80077cc:	e7b1      	b.n	8007732 <__sflush_r+0x1a>
 80077ce:	89a3      	ldrh	r3, [r4, #12]
 80077d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077d4:	81a3      	strh	r3, [r4, #12]
 80077d6:	e7ad      	b.n	8007734 <__sflush_r+0x1c>
 80077d8:	690f      	ldr	r7, [r1, #16]
 80077da:	2f00      	cmp	r7, #0
 80077dc:	d0a9      	beq.n	8007732 <__sflush_r+0x1a>
 80077de:	0793      	lsls	r3, r2, #30
 80077e0:	680e      	ldr	r6, [r1, #0]
 80077e2:	bf08      	it	eq
 80077e4:	694b      	ldreq	r3, [r1, #20]
 80077e6:	600f      	str	r7, [r1, #0]
 80077e8:	bf18      	it	ne
 80077ea:	2300      	movne	r3, #0
 80077ec:	eba6 0807 	sub.w	r8, r6, r7
 80077f0:	608b      	str	r3, [r1, #8]
 80077f2:	f1b8 0f00 	cmp.w	r8, #0
 80077f6:	dd9c      	ble.n	8007732 <__sflush_r+0x1a>
 80077f8:	6a21      	ldr	r1, [r4, #32]
 80077fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077fc:	4643      	mov	r3, r8
 80077fe:	463a      	mov	r2, r7
 8007800:	4628      	mov	r0, r5
 8007802:	47b0      	blx	r6
 8007804:	2800      	cmp	r0, #0
 8007806:	dc06      	bgt.n	8007816 <__sflush_r+0xfe>
 8007808:	89a3      	ldrh	r3, [r4, #12]
 800780a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800780e:	81a3      	strh	r3, [r4, #12]
 8007810:	f04f 30ff 	mov.w	r0, #4294967295
 8007814:	e78e      	b.n	8007734 <__sflush_r+0x1c>
 8007816:	4407      	add	r7, r0
 8007818:	eba8 0800 	sub.w	r8, r8, r0
 800781c:	e7e9      	b.n	80077f2 <__sflush_r+0xda>
 800781e:	bf00      	nop
 8007820:	20400001 	.word	0x20400001

08007824 <_fflush_r>:
 8007824:	b538      	push	{r3, r4, r5, lr}
 8007826:	690b      	ldr	r3, [r1, #16]
 8007828:	4605      	mov	r5, r0
 800782a:	460c      	mov	r4, r1
 800782c:	b913      	cbnz	r3, 8007834 <_fflush_r+0x10>
 800782e:	2500      	movs	r5, #0
 8007830:	4628      	mov	r0, r5
 8007832:	bd38      	pop	{r3, r4, r5, pc}
 8007834:	b118      	cbz	r0, 800783e <_fflush_r+0x1a>
 8007836:	6983      	ldr	r3, [r0, #24]
 8007838:	b90b      	cbnz	r3, 800783e <_fflush_r+0x1a>
 800783a:	f000 f887 	bl	800794c <__sinit>
 800783e:	4b14      	ldr	r3, [pc, #80]	; (8007890 <_fflush_r+0x6c>)
 8007840:	429c      	cmp	r4, r3
 8007842:	d11b      	bne.n	800787c <_fflush_r+0x58>
 8007844:	686c      	ldr	r4, [r5, #4]
 8007846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d0ef      	beq.n	800782e <_fflush_r+0xa>
 800784e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007850:	07d0      	lsls	r0, r2, #31
 8007852:	d404      	bmi.n	800785e <_fflush_r+0x3a>
 8007854:	0599      	lsls	r1, r3, #22
 8007856:	d402      	bmi.n	800785e <_fflush_r+0x3a>
 8007858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800785a:	f000 f93a 	bl	8007ad2 <__retarget_lock_acquire_recursive>
 800785e:	4628      	mov	r0, r5
 8007860:	4621      	mov	r1, r4
 8007862:	f7ff ff59 	bl	8007718 <__sflush_r>
 8007866:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007868:	07da      	lsls	r2, r3, #31
 800786a:	4605      	mov	r5, r0
 800786c:	d4e0      	bmi.n	8007830 <_fflush_r+0xc>
 800786e:	89a3      	ldrh	r3, [r4, #12]
 8007870:	059b      	lsls	r3, r3, #22
 8007872:	d4dd      	bmi.n	8007830 <_fflush_r+0xc>
 8007874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007876:	f000 f92d 	bl	8007ad4 <__retarget_lock_release_recursive>
 800787a:	e7d9      	b.n	8007830 <_fflush_r+0xc>
 800787c:	4b05      	ldr	r3, [pc, #20]	; (8007894 <_fflush_r+0x70>)
 800787e:	429c      	cmp	r4, r3
 8007880:	d101      	bne.n	8007886 <_fflush_r+0x62>
 8007882:	68ac      	ldr	r4, [r5, #8]
 8007884:	e7df      	b.n	8007846 <_fflush_r+0x22>
 8007886:	4b04      	ldr	r3, [pc, #16]	; (8007898 <_fflush_r+0x74>)
 8007888:	429c      	cmp	r4, r3
 800788a:	bf08      	it	eq
 800788c:	68ec      	ldreq	r4, [r5, #12]
 800788e:	e7da      	b.n	8007846 <_fflush_r+0x22>
 8007890:	0800e058 	.word	0x0800e058
 8007894:	0800e078 	.word	0x0800e078
 8007898:	0800e038 	.word	0x0800e038

0800789c <std>:
 800789c:	2300      	movs	r3, #0
 800789e:	b510      	push	{r4, lr}
 80078a0:	4604      	mov	r4, r0
 80078a2:	e9c0 3300 	strd	r3, r3, [r0]
 80078a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078aa:	6083      	str	r3, [r0, #8]
 80078ac:	8181      	strh	r1, [r0, #12]
 80078ae:	6643      	str	r3, [r0, #100]	; 0x64
 80078b0:	81c2      	strh	r2, [r0, #14]
 80078b2:	6183      	str	r3, [r0, #24]
 80078b4:	4619      	mov	r1, r3
 80078b6:	2208      	movs	r2, #8
 80078b8:	305c      	adds	r0, #92	; 0x5c
 80078ba:	f000 f923 	bl	8007b04 <memset>
 80078be:	4b05      	ldr	r3, [pc, #20]	; (80078d4 <std+0x38>)
 80078c0:	6263      	str	r3, [r4, #36]	; 0x24
 80078c2:	4b05      	ldr	r3, [pc, #20]	; (80078d8 <std+0x3c>)
 80078c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80078c6:	4b05      	ldr	r3, [pc, #20]	; (80078dc <std+0x40>)
 80078c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078ca:	4b05      	ldr	r3, [pc, #20]	; (80078e0 <std+0x44>)
 80078cc:	6224      	str	r4, [r4, #32]
 80078ce:	6323      	str	r3, [r4, #48]	; 0x30
 80078d0:	bd10      	pop	{r4, pc}
 80078d2:	bf00      	nop
 80078d4:	08008741 	.word	0x08008741
 80078d8:	08008763 	.word	0x08008763
 80078dc:	0800879b 	.word	0x0800879b
 80078e0:	080087bf 	.word	0x080087bf

080078e4 <_cleanup_r>:
 80078e4:	4901      	ldr	r1, [pc, #4]	; (80078ec <_cleanup_r+0x8>)
 80078e6:	f000 b8af 	b.w	8007a48 <_fwalk_reent>
 80078ea:	bf00      	nop
 80078ec:	08007825 	.word	0x08007825

080078f0 <__sfmoreglue>:
 80078f0:	b570      	push	{r4, r5, r6, lr}
 80078f2:	2268      	movs	r2, #104	; 0x68
 80078f4:	1e4d      	subs	r5, r1, #1
 80078f6:	4355      	muls	r5, r2
 80078f8:	460e      	mov	r6, r1
 80078fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80078fe:	f000 f975 	bl	8007bec <_malloc_r>
 8007902:	4604      	mov	r4, r0
 8007904:	b140      	cbz	r0, 8007918 <__sfmoreglue+0x28>
 8007906:	2100      	movs	r1, #0
 8007908:	e9c0 1600 	strd	r1, r6, [r0]
 800790c:	300c      	adds	r0, #12
 800790e:	60a0      	str	r0, [r4, #8]
 8007910:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007914:	f000 f8f6 	bl	8007b04 <memset>
 8007918:	4620      	mov	r0, r4
 800791a:	bd70      	pop	{r4, r5, r6, pc}

0800791c <__sfp_lock_acquire>:
 800791c:	4801      	ldr	r0, [pc, #4]	; (8007924 <__sfp_lock_acquire+0x8>)
 800791e:	f000 b8d8 	b.w	8007ad2 <__retarget_lock_acquire_recursive>
 8007922:	bf00      	nop
 8007924:	20001a75 	.word	0x20001a75

08007928 <__sfp_lock_release>:
 8007928:	4801      	ldr	r0, [pc, #4]	; (8007930 <__sfp_lock_release+0x8>)
 800792a:	f000 b8d3 	b.w	8007ad4 <__retarget_lock_release_recursive>
 800792e:	bf00      	nop
 8007930:	20001a75 	.word	0x20001a75

08007934 <__sinit_lock_acquire>:
 8007934:	4801      	ldr	r0, [pc, #4]	; (800793c <__sinit_lock_acquire+0x8>)
 8007936:	f000 b8cc 	b.w	8007ad2 <__retarget_lock_acquire_recursive>
 800793a:	bf00      	nop
 800793c:	20001a76 	.word	0x20001a76

08007940 <__sinit_lock_release>:
 8007940:	4801      	ldr	r0, [pc, #4]	; (8007948 <__sinit_lock_release+0x8>)
 8007942:	f000 b8c7 	b.w	8007ad4 <__retarget_lock_release_recursive>
 8007946:	bf00      	nop
 8007948:	20001a76 	.word	0x20001a76

0800794c <__sinit>:
 800794c:	b510      	push	{r4, lr}
 800794e:	4604      	mov	r4, r0
 8007950:	f7ff fff0 	bl	8007934 <__sinit_lock_acquire>
 8007954:	69a3      	ldr	r3, [r4, #24]
 8007956:	b11b      	cbz	r3, 8007960 <__sinit+0x14>
 8007958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800795c:	f7ff bff0 	b.w	8007940 <__sinit_lock_release>
 8007960:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007964:	6523      	str	r3, [r4, #80]	; 0x50
 8007966:	4b13      	ldr	r3, [pc, #76]	; (80079b4 <__sinit+0x68>)
 8007968:	4a13      	ldr	r2, [pc, #76]	; (80079b8 <__sinit+0x6c>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	62a2      	str	r2, [r4, #40]	; 0x28
 800796e:	42a3      	cmp	r3, r4
 8007970:	bf04      	itt	eq
 8007972:	2301      	moveq	r3, #1
 8007974:	61a3      	streq	r3, [r4, #24]
 8007976:	4620      	mov	r0, r4
 8007978:	f000 f820 	bl	80079bc <__sfp>
 800797c:	6060      	str	r0, [r4, #4]
 800797e:	4620      	mov	r0, r4
 8007980:	f000 f81c 	bl	80079bc <__sfp>
 8007984:	60a0      	str	r0, [r4, #8]
 8007986:	4620      	mov	r0, r4
 8007988:	f000 f818 	bl	80079bc <__sfp>
 800798c:	2200      	movs	r2, #0
 800798e:	60e0      	str	r0, [r4, #12]
 8007990:	2104      	movs	r1, #4
 8007992:	6860      	ldr	r0, [r4, #4]
 8007994:	f7ff ff82 	bl	800789c <std>
 8007998:	68a0      	ldr	r0, [r4, #8]
 800799a:	2201      	movs	r2, #1
 800799c:	2109      	movs	r1, #9
 800799e:	f7ff ff7d 	bl	800789c <std>
 80079a2:	68e0      	ldr	r0, [r4, #12]
 80079a4:	2202      	movs	r2, #2
 80079a6:	2112      	movs	r1, #18
 80079a8:	f7ff ff78 	bl	800789c <std>
 80079ac:	2301      	movs	r3, #1
 80079ae:	61a3      	str	r3, [r4, #24]
 80079b0:	e7d2      	b.n	8007958 <__sinit+0xc>
 80079b2:	bf00      	nop
 80079b4:	0800e098 	.word	0x0800e098
 80079b8:	080078e5 	.word	0x080078e5

080079bc <__sfp>:
 80079bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079be:	4607      	mov	r7, r0
 80079c0:	f7ff ffac 	bl	800791c <__sfp_lock_acquire>
 80079c4:	4b1e      	ldr	r3, [pc, #120]	; (8007a40 <__sfp+0x84>)
 80079c6:	681e      	ldr	r6, [r3, #0]
 80079c8:	69b3      	ldr	r3, [r6, #24]
 80079ca:	b913      	cbnz	r3, 80079d2 <__sfp+0x16>
 80079cc:	4630      	mov	r0, r6
 80079ce:	f7ff ffbd 	bl	800794c <__sinit>
 80079d2:	3648      	adds	r6, #72	; 0x48
 80079d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80079d8:	3b01      	subs	r3, #1
 80079da:	d503      	bpl.n	80079e4 <__sfp+0x28>
 80079dc:	6833      	ldr	r3, [r6, #0]
 80079de:	b30b      	cbz	r3, 8007a24 <__sfp+0x68>
 80079e0:	6836      	ldr	r6, [r6, #0]
 80079e2:	e7f7      	b.n	80079d4 <__sfp+0x18>
 80079e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80079e8:	b9d5      	cbnz	r5, 8007a20 <__sfp+0x64>
 80079ea:	4b16      	ldr	r3, [pc, #88]	; (8007a44 <__sfp+0x88>)
 80079ec:	60e3      	str	r3, [r4, #12]
 80079ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80079f2:	6665      	str	r5, [r4, #100]	; 0x64
 80079f4:	f000 f86c 	bl	8007ad0 <__retarget_lock_init_recursive>
 80079f8:	f7ff ff96 	bl	8007928 <__sfp_lock_release>
 80079fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a04:	6025      	str	r5, [r4, #0]
 8007a06:	61a5      	str	r5, [r4, #24]
 8007a08:	2208      	movs	r2, #8
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a10:	f000 f878 	bl	8007b04 <memset>
 8007a14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a20:	3468      	adds	r4, #104	; 0x68
 8007a22:	e7d9      	b.n	80079d8 <__sfp+0x1c>
 8007a24:	2104      	movs	r1, #4
 8007a26:	4638      	mov	r0, r7
 8007a28:	f7ff ff62 	bl	80078f0 <__sfmoreglue>
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	6030      	str	r0, [r6, #0]
 8007a30:	2800      	cmp	r0, #0
 8007a32:	d1d5      	bne.n	80079e0 <__sfp+0x24>
 8007a34:	f7ff ff78 	bl	8007928 <__sfp_lock_release>
 8007a38:	230c      	movs	r3, #12
 8007a3a:	603b      	str	r3, [r7, #0]
 8007a3c:	e7ee      	b.n	8007a1c <__sfp+0x60>
 8007a3e:	bf00      	nop
 8007a40:	0800e098 	.word	0x0800e098
 8007a44:	ffff0001 	.word	0xffff0001

08007a48 <_fwalk_reent>:
 8007a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a4c:	4606      	mov	r6, r0
 8007a4e:	4688      	mov	r8, r1
 8007a50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a54:	2700      	movs	r7, #0
 8007a56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a5a:	f1b9 0901 	subs.w	r9, r9, #1
 8007a5e:	d505      	bpl.n	8007a6c <_fwalk_reent+0x24>
 8007a60:	6824      	ldr	r4, [r4, #0]
 8007a62:	2c00      	cmp	r4, #0
 8007a64:	d1f7      	bne.n	8007a56 <_fwalk_reent+0xe>
 8007a66:	4638      	mov	r0, r7
 8007a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a6c:	89ab      	ldrh	r3, [r5, #12]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d907      	bls.n	8007a82 <_fwalk_reent+0x3a>
 8007a72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a76:	3301      	adds	r3, #1
 8007a78:	d003      	beq.n	8007a82 <_fwalk_reent+0x3a>
 8007a7a:	4629      	mov	r1, r5
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	47c0      	blx	r8
 8007a80:	4307      	orrs	r7, r0
 8007a82:	3568      	adds	r5, #104	; 0x68
 8007a84:	e7e9      	b.n	8007a5a <_fwalk_reent+0x12>
	...

08007a88 <__libc_init_array>:
 8007a88:	b570      	push	{r4, r5, r6, lr}
 8007a8a:	4d0d      	ldr	r5, [pc, #52]	; (8007ac0 <__libc_init_array+0x38>)
 8007a8c:	4c0d      	ldr	r4, [pc, #52]	; (8007ac4 <__libc_init_array+0x3c>)
 8007a8e:	1b64      	subs	r4, r4, r5
 8007a90:	10a4      	asrs	r4, r4, #2
 8007a92:	2600      	movs	r6, #0
 8007a94:	42a6      	cmp	r6, r4
 8007a96:	d109      	bne.n	8007aac <__libc_init_array+0x24>
 8007a98:	4d0b      	ldr	r5, [pc, #44]	; (8007ac8 <__libc_init_array+0x40>)
 8007a9a:	4c0c      	ldr	r4, [pc, #48]	; (8007acc <__libc_init_array+0x44>)
 8007a9c:	f002 fdbe 	bl	800a61c <_init>
 8007aa0:	1b64      	subs	r4, r4, r5
 8007aa2:	10a4      	asrs	r4, r4, #2
 8007aa4:	2600      	movs	r6, #0
 8007aa6:	42a6      	cmp	r6, r4
 8007aa8:	d105      	bne.n	8007ab6 <__libc_init_array+0x2e>
 8007aaa:	bd70      	pop	{r4, r5, r6, pc}
 8007aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ab0:	4798      	blx	r3
 8007ab2:	3601      	adds	r6, #1
 8007ab4:	e7ee      	b.n	8007a94 <__libc_init_array+0xc>
 8007ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aba:	4798      	blx	r3
 8007abc:	3601      	adds	r6, #1
 8007abe:	e7f2      	b.n	8007aa6 <__libc_init_array+0x1e>
 8007ac0:	0800e490 	.word	0x0800e490
 8007ac4:	0800e490 	.word	0x0800e490
 8007ac8:	0800e490 	.word	0x0800e490
 8007acc:	0800e494 	.word	0x0800e494

08007ad0 <__retarget_lock_init_recursive>:
 8007ad0:	4770      	bx	lr

08007ad2 <__retarget_lock_acquire_recursive>:
 8007ad2:	4770      	bx	lr

08007ad4 <__retarget_lock_release_recursive>:
 8007ad4:	4770      	bx	lr
	...

08007ad8 <malloc>:
 8007ad8:	4b02      	ldr	r3, [pc, #8]	; (8007ae4 <malloc+0xc>)
 8007ada:	4601      	mov	r1, r0
 8007adc:	6818      	ldr	r0, [r3, #0]
 8007ade:	f000 b885 	b.w	8007bec <_malloc_r>
 8007ae2:	bf00      	nop
 8007ae4:	20000724 	.word	0x20000724

08007ae8 <memcpy>:
 8007ae8:	440a      	add	r2, r1
 8007aea:	4291      	cmp	r1, r2
 8007aec:	f100 33ff 	add.w	r3, r0, #4294967295
 8007af0:	d100      	bne.n	8007af4 <memcpy+0xc>
 8007af2:	4770      	bx	lr
 8007af4:	b510      	push	{r4, lr}
 8007af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007afa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007afe:	4291      	cmp	r1, r2
 8007b00:	d1f9      	bne.n	8007af6 <memcpy+0xe>
 8007b02:	bd10      	pop	{r4, pc}

08007b04 <memset>:
 8007b04:	4402      	add	r2, r0
 8007b06:	4603      	mov	r3, r0
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d100      	bne.n	8007b0e <memset+0xa>
 8007b0c:	4770      	bx	lr
 8007b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b12:	e7f9      	b.n	8007b08 <memset+0x4>

08007b14 <_free_r>:
 8007b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b16:	2900      	cmp	r1, #0
 8007b18:	d044      	beq.n	8007ba4 <_free_r+0x90>
 8007b1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b1e:	9001      	str	r0, [sp, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f1a1 0404 	sub.w	r4, r1, #4
 8007b26:	bfb8      	it	lt
 8007b28:	18e4      	addlt	r4, r4, r3
 8007b2a:	f001 fe69 	bl	8009800 <__malloc_lock>
 8007b2e:	4a1e      	ldr	r2, [pc, #120]	; (8007ba8 <_free_r+0x94>)
 8007b30:	9801      	ldr	r0, [sp, #4]
 8007b32:	6813      	ldr	r3, [r2, #0]
 8007b34:	b933      	cbnz	r3, 8007b44 <_free_r+0x30>
 8007b36:	6063      	str	r3, [r4, #4]
 8007b38:	6014      	str	r4, [r2, #0]
 8007b3a:	b003      	add	sp, #12
 8007b3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b40:	f001 be64 	b.w	800980c <__malloc_unlock>
 8007b44:	42a3      	cmp	r3, r4
 8007b46:	d908      	bls.n	8007b5a <_free_r+0x46>
 8007b48:	6825      	ldr	r5, [r4, #0]
 8007b4a:	1961      	adds	r1, r4, r5
 8007b4c:	428b      	cmp	r3, r1
 8007b4e:	bf01      	itttt	eq
 8007b50:	6819      	ldreq	r1, [r3, #0]
 8007b52:	685b      	ldreq	r3, [r3, #4]
 8007b54:	1949      	addeq	r1, r1, r5
 8007b56:	6021      	streq	r1, [r4, #0]
 8007b58:	e7ed      	b.n	8007b36 <_free_r+0x22>
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	b10b      	cbz	r3, 8007b64 <_free_r+0x50>
 8007b60:	42a3      	cmp	r3, r4
 8007b62:	d9fa      	bls.n	8007b5a <_free_r+0x46>
 8007b64:	6811      	ldr	r1, [r2, #0]
 8007b66:	1855      	adds	r5, r2, r1
 8007b68:	42a5      	cmp	r5, r4
 8007b6a:	d10b      	bne.n	8007b84 <_free_r+0x70>
 8007b6c:	6824      	ldr	r4, [r4, #0]
 8007b6e:	4421      	add	r1, r4
 8007b70:	1854      	adds	r4, r2, r1
 8007b72:	42a3      	cmp	r3, r4
 8007b74:	6011      	str	r1, [r2, #0]
 8007b76:	d1e0      	bne.n	8007b3a <_free_r+0x26>
 8007b78:	681c      	ldr	r4, [r3, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	6053      	str	r3, [r2, #4]
 8007b7e:	4421      	add	r1, r4
 8007b80:	6011      	str	r1, [r2, #0]
 8007b82:	e7da      	b.n	8007b3a <_free_r+0x26>
 8007b84:	d902      	bls.n	8007b8c <_free_r+0x78>
 8007b86:	230c      	movs	r3, #12
 8007b88:	6003      	str	r3, [r0, #0]
 8007b8a:	e7d6      	b.n	8007b3a <_free_r+0x26>
 8007b8c:	6825      	ldr	r5, [r4, #0]
 8007b8e:	1961      	adds	r1, r4, r5
 8007b90:	428b      	cmp	r3, r1
 8007b92:	bf04      	itt	eq
 8007b94:	6819      	ldreq	r1, [r3, #0]
 8007b96:	685b      	ldreq	r3, [r3, #4]
 8007b98:	6063      	str	r3, [r4, #4]
 8007b9a:	bf04      	itt	eq
 8007b9c:	1949      	addeq	r1, r1, r5
 8007b9e:	6021      	streq	r1, [r4, #0]
 8007ba0:	6054      	str	r4, [r2, #4]
 8007ba2:	e7ca      	b.n	8007b3a <_free_r+0x26>
 8007ba4:	b003      	add	sp, #12
 8007ba6:	bd30      	pop	{r4, r5, pc}
 8007ba8:	20001a78 	.word	0x20001a78

08007bac <sbrk_aligned>:
 8007bac:	b570      	push	{r4, r5, r6, lr}
 8007bae:	4e0e      	ldr	r6, [pc, #56]	; (8007be8 <sbrk_aligned+0x3c>)
 8007bb0:	460c      	mov	r4, r1
 8007bb2:	6831      	ldr	r1, [r6, #0]
 8007bb4:	4605      	mov	r5, r0
 8007bb6:	b911      	cbnz	r1, 8007bbe <sbrk_aligned+0x12>
 8007bb8:	f000 fdb2 	bl	8008720 <_sbrk_r>
 8007bbc:	6030      	str	r0, [r6, #0]
 8007bbe:	4621      	mov	r1, r4
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	f000 fdad 	bl	8008720 <_sbrk_r>
 8007bc6:	1c43      	adds	r3, r0, #1
 8007bc8:	d00a      	beq.n	8007be0 <sbrk_aligned+0x34>
 8007bca:	1cc4      	adds	r4, r0, #3
 8007bcc:	f024 0403 	bic.w	r4, r4, #3
 8007bd0:	42a0      	cmp	r0, r4
 8007bd2:	d007      	beq.n	8007be4 <sbrk_aligned+0x38>
 8007bd4:	1a21      	subs	r1, r4, r0
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	f000 fda2 	bl	8008720 <_sbrk_r>
 8007bdc:	3001      	adds	r0, #1
 8007bde:	d101      	bne.n	8007be4 <sbrk_aligned+0x38>
 8007be0:	f04f 34ff 	mov.w	r4, #4294967295
 8007be4:	4620      	mov	r0, r4
 8007be6:	bd70      	pop	{r4, r5, r6, pc}
 8007be8:	20001a7c 	.word	0x20001a7c

08007bec <_malloc_r>:
 8007bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf0:	1ccd      	adds	r5, r1, #3
 8007bf2:	f025 0503 	bic.w	r5, r5, #3
 8007bf6:	3508      	adds	r5, #8
 8007bf8:	2d0c      	cmp	r5, #12
 8007bfa:	bf38      	it	cc
 8007bfc:	250c      	movcc	r5, #12
 8007bfe:	2d00      	cmp	r5, #0
 8007c00:	4607      	mov	r7, r0
 8007c02:	db01      	blt.n	8007c08 <_malloc_r+0x1c>
 8007c04:	42a9      	cmp	r1, r5
 8007c06:	d905      	bls.n	8007c14 <_malloc_r+0x28>
 8007c08:	230c      	movs	r3, #12
 8007c0a:	603b      	str	r3, [r7, #0]
 8007c0c:	2600      	movs	r6, #0
 8007c0e:	4630      	mov	r0, r6
 8007c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c14:	4e2e      	ldr	r6, [pc, #184]	; (8007cd0 <_malloc_r+0xe4>)
 8007c16:	f001 fdf3 	bl	8009800 <__malloc_lock>
 8007c1a:	6833      	ldr	r3, [r6, #0]
 8007c1c:	461c      	mov	r4, r3
 8007c1e:	bb34      	cbnz	r4, 8007c6e <_malloc_r+0x82>
 8007c20:	4629      	mov	r1, r5
 8007c22:	4638      	mov	r0, r7
 8007c24:	f7ff ffc2 	bl	8007bac <sbrk_aligned>
 8007c28:	1c43      	adds	r3, r0, #1
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	d14d      	bne.n	8007cca <_malloc_r+0xde>
 8007c2e:	6834      	ldr	r4, [r6, #0]
 8007c30:	4626      	mov	r6, r4
 8007c32:	2e00      	cmp	r6, #0
 8007c34:	d140      	bne.n	8007cb8 <_malloc_r+0xcc>
 8007c36:	6823      	ldr	r3, [r4, #0]
 8007c38:	4631      	mov	r1, r6
 8007c3a:	4638      	mov	r0, r7
 8007c3c:	eb04 0803 	add.w	r8, r4, r3
 8007c40:	f000 fd6e 	bl	8008720 <_sbrk_r>
 8007c44:	4580      	cmp	r8, r0
 8007c46:	d13a      	bne.n	8007cbe <_malloc_r+0xd2>
 8007c48:	6821      	ldr	r1, [r4, #0]
 8007c4a:	3503      	adds	r5, #3
 8007c4c:	1a6d      	subs	r5, r5, r1
 8007c4e:	f025 0503 	bic.w	r5, r5, #3
 8007c52:	3508      	adds	r5, #8
 8007c54:	2d0c      	cmp	r5, #12
 8007c56:	bf38      	it	cc
 8007c58:	250c      	movcc	r5, #12
 8007c5a:	4629      	mov	r1, r5
 8007c5c:	4638      	mov	r0, r7
 8007c5e:	f7ff ffa5 	bl	8007bac <sbrk_aligned>
 8007c62:	3001      	adds	r0, #1
 8007c64:	d02b      	beq.n	8007cbe <_malloc_r+0xd2>
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	442b      	add	r3, r5
 8007c6a:	6023      	str	r3, [r4, #0]
 8007c6c:	e00e      	b.n	8007c8c <_malloc_r+0xa0>
 8007c6e:	6822      	ldr	r2, [r4, #0]
 8007c70:	1b52      	subs	r2, r2, r5
 8007c72:	d41e      	bmi.n	8007cb2 <_malloc_r+0xc6>
 8007c74:	2a0b      	cmp	r2, #11
 8007c76:	d916      	bls.n	8007ca6 <_malloc_r+0xba>
 8007c78:	1961      	adds	r1, r4, r5
 8007c7a:	42a3      	cmp	r3, r4
 8007c7c:	6025      	str	r5, [r4, #0]
 8007c7e:	bf18      	it	ne
 8007c80:	6059      	strne	r1, [r3, #4]
 8007c82:	6863      	ldr	r3, [r4, #4]
 8007c84:	bf08      	it	eq
 8007c86:	6031      	streq	r1, [r6, #0]
 8007c88:	5162      	str	r2, [r4, r5]
 8007c8a:	604b      	str	r3, [r1, #4]
 8007c8c:	4638      	mov	r0, r7
 8007c8e:	f104 060b 	add.w	r6, r4, #11
 8007c92:	f001 fdbb 	bl	800980c <__malloc_unlock>
 8007c96:	f026 0607 	bic.w	r6, r6, #7
 8007c9a:	1d23      	adds	r3, r4, #4
 8007c9c:	1af2      	subs	r2, r6, r3
 8007c9e:	d0b6      	beq.n	8007c0e <_malloc_r+0x22>
 8007ca0:	1b9b      	subs	r3, r3, r6
 8007ca2:	50a3      	str	r3, [r4, r2]
 8007ca4:	e7b3      	b.n	8007c0e <_malloc_r+0x22>
 8007ca6:	6862      	ldr	r2, [r4, #4]
 8007ca8:	42a3      	cmp	r3, r4
 8007caa:	bf0c      	ite	eq
 8007cac:	6032      	streq	r2, [r6, #0]
 8007cae:	605a      	strne	r2, [r3, #4]
 8007cb0:	e7ec      	b.n	8007c8c <_malloc_r+0xa0>
 8007cb2:	4623      	mov	r3, r4
 8007cb4:	6864      	ldr	r4, [r4, #4]
 8007cb6:	e7b2      	b.n	8007c1e <_malloc_r+0x32>
 8007cb8:	4634      	mov	r4, r6
 8007cba:	6876      	ldr	r6, [r6, #4]
 8007cbc:	e7b9      	b.n	8007c32 <_malloc_r+0x46>
 8007cbe:	230c      	movs	r3, #12
 8007cc0:	603b      	str	r3, [r7, #0]
 8007cc2:	4638      	mov	r0, r7
 8007cc4:	f001 fda2 	bl	800980c <__malloc_unlock>
 8007cc8:	e7a1      	b.n	8007c0e <_malloc_r+0x22>
 8007cca:	6025      	str	r5, [r4, #0]
 8007ccc:	e7de      	b.n	8007c8c <_malloc_r+0xa0>
 8007cce:	bf00      	nop
 8007cd0:	20001a78 	.word	0x20001a78

08007cd4 <__cvt>:
 8007cd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd8:	ec55 4b10 	vmov	r4, r5, d0
 8007cdc:	2d00      	cmp	r5, #0
 8007cde:	460e      	mov	r6, r1
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	462b      	mov	r3, r5
 8007ce4:	bfbb      	ittet	lt
 8007ce6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007cea:	461d      	movlt	r5, r3
 8007cec:	2300      	movge	r3, #0
 8007cee:	232d      	movlt	r3, #45	; 0x2d
 8007cf0:	700b      	strb	r3, [r1, #0]
 8007cf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cf4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007cf8:	4691      	mov	r9, r2
 8007cfa:	f023 0820 	bic.w	r8, r3, #32
 8007cfe:	bfbc      	itt	lt
 8007d00:	4622      	movlt	r2, r4
 8007d02:	4614      	movlt	r4, r2
 8007d04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d08:	d005      	beq.n	8007d16 <__cvt+0x42>
 8007d0a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007d0e:	d100      	bne.n	8007d12 <__cvt+0x3e>
 8007d10:	3601      	adds	r6, #1
 8007d12:	2102      	movs	r1, #2
 8007d14:	e000      	b.n	8007d18 <__cvt+0x44>
 8007d16:	2103      	movs	r1, #3
 8007d18:	ab03      	add	r3, sp, #12
 8007d1a:	9301      	str	r3, [sp, #4]
 8007d1c:	ab02      	add	r3, sp, #8
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	ec45 4b10 	vmov	d0, r4, r5
 8007d24:	4653      	mov	r3, sl
 8007d26:	4632      	mov	r2, r6
 8007d28:	f000 feee 	bl	8008b08 <_dtoa_r>
 8007d2c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007d30:	4607      	mov	r7, r0
 8007d32:	d102      	bne.n	8007d3a <__cvt+0x66>
 8007d34:	f019 0f01 	tst.w	r9, #1
 8007d38:	d022      	beq.n	8007d80 <__cvt+0xac>
 8007d3a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d3e:	eb07 0906 	add.w	r9, r7, r6
 8007d42:	d110      	bne.n	8007d66 <__cvt+0x92>
 8007d44:	783b      	ldrb	r3, [r7, #0]
 8007d46:	2b30      	cmp	r3, #48	; 0x30
 8007d48:	d10a      	bne.n	8007d60 <__cvt+0x8c>
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	4620      	mov	r0, r4
 8007d50:	4629      	mov	r1, r5
 8007d52:	f7f8 feb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d56:	b918      	cbnz	r0, 8007d60 <__cvt+0x8c>
 8007d58:	f1c6 0601 	rsb	r6, r6, #1
 8007d5c:	f8ca 6000 	str.w	r6, [sl]
 8007d60:	f8da 3000 	ldr.w	r3, [sl]
 8007d64:	4499      	add	r9, r3
 8007d66:	2200      	movs	r2, #0
 8007d68:	2300      	movs	r3, #0
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	4629      	mov	r1, r5
 8007d6e:	f7f8 feab 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d72:	b108      	cbz	r0, 8007d78 <__cvt+0xa4>
 8007d74:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d78:	2230      	movs	r2, #48	; 0x30
 8007d7a:	9b03      	ldr	r3, [sp, #12]
 8007d7c:	454b      	cmp	r3, r9
 8007d7e:	d307      	bcc.n	8007d90 <__cvt+0xbc>
 8007d80:	9b03      	ldr	r3, [sp, #12]
 8007d82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d84:	1bdb      	subs	r3, r3, r7
 8007d86:	4638      	mov	r0, r7
 8007d88:	6013      	str	r3, [r2, #0]
 8007d8a:	b004      	add	sp, #16
 8007d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d90:	1c59      	adds	r1, r3, #1
 8007d92:	9103      	str	r1, [sp, #12]
 8007d94:	701a      	strb	r2, [r3, #0]
 8007d96:	e7f0      	b.n	8007d7a <__cvt+0xa6>

08007d98 <__exponent>:
 8007d98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2900      	cmp	r1, #0
 8007d9e:	bfb8      	it	lt
 8007da0:	4249      	neglt	r1, r1
 8007da2:	f803 2b02 	strb.w	r2, [r3], #2
 8007da6:	bfb4      	ite	lt
 8007da8:	222d      	movlt	r2, #45	; 0x2d
 8007daa:	222b      	movge	r2, #43	; 0x2b
 8007dac:	2909      	cmp	r1, #9
 8007dae:	7042      	strb	r2, [r0, #1]
 8007db0:	dd2a      	ble.n	8007e08 <__exponent+0x70>
 8007db2:	f10d 0407 	add.w	r4, sp, #7
 8007db6:	46a4      	mov	ip, r4
 8007db8:	270a      	movs	r7, #10
 8007dba:	46a6      	mov	lr, r4
 8007dbc:	460a      	mov	r2, r1
 8007dbe:	fb91 f6f7 	sdiv	r6, r1, r7
 8007dc2:	fb07 1516 	mls	r5, r7, r6, r1
 8007dc6:	3530      	adds	r5, #48	; 0x30
 8007dc8:	2a63      	cmp	r2, #99	; 0x63
 8007dca:	f104 34ff 	add.w	r4, r4, #4294967295
 8007dce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007dd2:	4631      	mov	r1, r6
 8007dd4:	dcf1      	bgt.n	8007dba <__exponent+0x22>
 8007dd6:	3130      	adds	r1, #48	; 0x30
 8007dd8:	f1ae 0502 	sub.w	r5, lr, #2
 8007ddc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007de0:	1c44      	adds	r4, r0, #1
 8007de2:	4629      	mov	r1, r5
 8007de4:	4561      	cmp	r1, ip
 8007de6:	d30a      	bcc.n	8007dfe <__exponent+0x66>
 8007de8:	f10d 0209 	add.w	r2, sp, #9
 8007dec:	eba2 020e 	sub.w	r2, r2, lr
 8007df0:	4565      	cmp	r5, ip
 8007df2:	bf88      	it	hi
 8007df4:	2200      	movhi	r2, #0
 8007df6:	4413      	add	r3, r2
 8007df8:	1a18      	subs	r0, r3, r0
 8007dfa:	b003      	add	sp, #12
 8007dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e02:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007e06:	e7ed      	b.n	8007de4 <__exponent+0x4c>
 8007e08:	2330      	movs	r3, #48	; 0x30
 8007e0a:	3130      	adds	r1, #48	; 0x30
 8007e0c:	7083      	strb	r3, [r0, #2]
 8007e0e:	70c1      	strb	r1, [r0, #3]
 8007e10:	1d03      	adds	r3, r0, #4
 8007e12:	e7f1      	b.n	8007df8 <__exponent+0x60>

08007e14 <_printf_float>:
 8007e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e18:	ed2d 8b02 	vpush	{d8}
 8007e1c:	b08d      	sub	sp, #52	; 0x34
 8007e1e:	460c      	mov	r4, r1
 8007e20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007e24:	4616      	mov	r6, r2
 8007e26:	461f      	mov	r7, r3
 8007e28:	4605      	mov	r5, r0
 8007e2a:	f001 fc6d 	bl	8009708 <_localeconv_r>
 8007e2e:	f8d0 a000 	ldr.w	sl, [r0]
 8007e32:	4650      	mov	r0, sl
 8007e34:	f7f8 f9cc 	bl	80001d0 <strlen>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	930a      	str	r3, [sp, #40]	; 0x28
 8007e3c:	6823      	ldr	r3, [r4, #0]
 8007e3e:	9305      	str	r3, [sp, #20]
 8007e40:	f8d8 3000 	ldr.w	r3, [r8]
 8007e44:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007e48:	3307      	adds	r3, #7
 8007e4a:	f023 0307 	bic.w	r3, r3, #7
 8007e4e:	f103 0208 	add.w	r2, r3, #8
 8007e52:	f8c8 2000 	str.w	r2, [r8]
 8007e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007e5e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007e62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e66:	9307      	str	r3, [sp, #28]
 8007e68:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e6c:	ee08 0a10 	vmov	s16, r0
 8007e70:	4b9f      	ldr	r3, [pc, #636]	; (80080f0 <_printf_float+0x2dc>)
 8007e72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e76:	f04f 32ff 	mov.w	r2, #4294967295
 8007e7a:	f7f8 fe57 	bl	8000b2c <__aeabi_dcmpun>
 8007e7e:	bb88      	cbnz	r0, 8007ee4 <_printf_float+0xd0>
 8007e80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e84:	4b9a      	ldr	r3, [pc, #616]	; (80080f0 <_printf_float+0x2dc>)
 8007e86:	f04f 32ff 	mov.w	r2, #4294967295
 8007e8a:	f7f8 fe31 	bl	8000af0 <__aeabi_dcmple>
 8007e8e:	bb48      	cbnz	r0, 8007ee4 <_printf_float+0xd0>
 8007e90:	2200      	movs	r2, #0
 8007e92:	2300      	movs	r3, #0
 8007e94:	4640      	mov	r0, r8
 8007e96:	4649      	mov	r1, r9
 8007e98:	f7f8 fe20 	bl	8000adc <__aeabi_dcmplt>
 8007e9c:	b110      	cbz	r0, 8007ea4 <_printf_float+0x90>
 8007e9e:	232d      	movs	r3, #45	; 0x2d
 8007ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ea4:	4b93      	ldr	r3, [pc, #588]	; (80080f4 <_printf_float+0x2e0>)
 8007ea6:	4894      	ldr	r0, [pc, #592]	; (80080f8 <_printf_float+0x2e4>)
 8007ea8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007eac:	bf94      	ite	ls
 8007eae:	4698      	movls	r8, r3
 8007eb0:	4680      	movhi	r8, r0
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	6123      	str	r3, [r4, #16]
 8007eb6:	9b05      	ldr	r3, [sp, #20]
 8007eb8:	f023 0204 	bic.w	r2, r3, #4
 8007ebc:	6022      	str	r2, [r4, #0]
 8007ebe:	f04f 0900 	mov.w	r9, #0
 8007ec2:	9700      	str	r7, [sp, #0]
 8007ec4:	4633      	mov	r3, r6
 8007ec6:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ec8:	4621      	mov	r1, r4
 8007eca:	4628      	mov	r0, r5
 8007ecc:	f000 f9d8 	bl	8008280 <_printf_common>
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	f040 8090 	bne.w	8007ff6 <_printf_float+0x1e2>
 8007ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eda:	b00d      	add	sp, #52	; 0x34
 8007edc:	ecbd 8b02 	vpop	{d8}
 8007ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee4:	4642      	mov	r2, r8
 8007ee6:	464b      	mov	r3, r9
 8007ee8:	4640      	mov	r0, r8
 8007eea:	4649      	mov	r1, r9
 8007eec:	f7f8 fe1e 	bl	8000b2c <__aeabi_dcmpun>
 8007ef0:	b140      	cbz	r0, 8007f04 <_printf_float+0xf0>
 8007ef2:	464b      	mov	r3, r9
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	bfbc      	itt	lt
 8007ef8:	232d      	movlt	r3, #45	; 0x2d
 8007efa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007efe:	487f      	ldr	r0, [pc, #508]	; (80080fc <_printf_float+0x2e8>)
 8007f00:	4b7f      	ldr	r3, [pc, #508]	; (8008100 <_printf_float+0x2ec>)
 8007f02:	e7d1      	b.n	8007ea8 <_printf_float+0x94>
 8007f04:	6863      	ldr	r3, [r4, #4]
 8007f06:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007f0a:	9206      	str	r2, [sp, #24]
 8007f0c:	1c5a      	adds	r2, r3, #1
 8007f0e:	d13f      	bne.n	8007f90 <_printf_float+0x17c>
 8007f10:	2306      	movs	r3, #6
 8007f12:	6063      	str	r3, [r4, #4]
 8007f14:	9b05      	ldr	r3, [sp, #20]
 8007f16:	6861      	ldr	r1, [r4, #4]
 8007f18:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	9303      	str	r3, [sp, #12]
 8007f20:	ab0a      	add	r3, sp, #40	; 0x28
 8007f22:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007f26:	ab09      	add	r3, sp, #36	; 0x24
 8007f28:	ec49 8b10 	vmov	d0, r8, r9
 8007f2c:	9300      	str	r3, [sp, #0]
 8007f2e:	6022      	str	r2, [r4, #0]
 8007f30:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007f34:	4628      	mov	r0, r5
 8007f36:	f7ff fecd 	bl	8007cd4 <__cvt>
 8007f3a:	9b06      	ldr	r3, [sp, #24]
 8007f3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f3e:	2b47      	cmp	r3, #71	; 0x47
 8007f40:	4680      	mov	r8, r0
 8007f42:	d108      	bne.n	8007f56 <_printf_float+0x142>
 8007f44:	1cc8      	adds	r0, r1, #3
 8007f46:	db02      	blt.n	8007f4e <_printf_float+0x13a>
 8007f48:	6863      	ldr	r3, [r4, #4]
 8007f4a:	4299      	cmp	r1, r3
 8007f4c:	dd41      	ble.n	8007fd2 <_printf_float+0x1be>
 8007f4e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007f52:	fa5f fb8b 	uxtb.w	fp, fp
 8007f56:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f5a:	d820      	bhi.n	8007f9e <_printf_float+0x18a>
 8007f5c:	3901      	subs	r1, #1
 8007f5e:	465a      	mov	r2, fp
 8007f60:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f64:	9109      	str	r1, [sp, #36]	; 0x24
 8007f66:	f7ff ff17 	bl	8007d98 <__exponent>
 8007f6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f6c:	1813      	adds	r3, r2, r0
 8007f6e:	2a01      	cmp	r2, #1
 8007f70:	4681      	mov	r9, r0
 8007f72:	6123      	str	r3, [r4, #16]
 8007f74:	dc02      	bgt.n	8007f7c <_printf_float+0x168>
 8007f76:	6822      	ldr	r2, [r4, #0]
 8007f78:	07d2      	lsls	r2, r2, #31
 8007f7a:	d501      	bpl.n	8007f80 <_printf_float+0x16c>
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	6123      	str	r3, [r4, #16]
 8007f80:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d09c      	beq.n	8007ec2 <_printf_float+0xae>
 8007f88:	232d      	movs	r3, #45	; 0x2d
 8007f8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f8e:	e798      	b.n	8007ec2 <_printf_float+0xae>
 8007f90:	9a06      	ldr	r2, [sp, #24]
 8007f92:	2a47      	cmp	r2, #71	; 0x47
 8007f94:	d1be      	bne.n	8007f14 <_printf_float+0x100>
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1bc      	bne.n	8007f14 <_printf_float+0x100>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e7b9      	b.n	8007f12 <_printf_float+0xfe>
 8007f9e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007fa2:	d118      	bne.n	8007fd6 <_printf_float+0x1c2>
 8007fa4:	2900      	cmp	r1, #0
 8007fa6:	6863      	ldr	r3, [r4, #4]
 8007fa8:	dd0b      	ble.n	8007fc2 <_printf_float+0x1ae>
 8007faa:	6121      	str	r1, [r4, #16]
 8007fac:	b913      	cbnz	r3, 8007fb4 <_printf_float+0x1a0>
 8007fae:	6822      	ldr	r2, [r4, #0]
 8007fb0:	07d0      	lsls	r0, r2, #31
 8007fb2:	d502      	bpl.n	8007fba <_printf_float+0x1a6>
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	440b      	add	r3, r1
 8007fb8:	6123      	str	r3, [r4, #16]
 8007fba:	65a1      	str	r1, [r4, #88]	; 0x58
 8007fbc:	f04f 0900 	mov.w	r9, #0
 8007fc0:	e7de      	b.n	8007f80 <_printf_float+0x16c>
 8007fc2:	b913      	cbnz	r3, 8007fca <_printf_float+0x1b6>
 8007fc4:	6822      	ldr	r2, [r4, #0]
 8007fc6:	07d2      	lsls	r2, r2, #31
 8007fc8:	d501      	bpl.n	8007fce <_printf_float+0x1ba>
 8007fca:	3302      	adds	r3, #2
 8007fcc:	e7f4      	b.n	8007fb8 <_printf_float+0x1a4>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e7f2      	b.n	8007fb8 <_printf_float+0x1a4>
 8007fd2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fd8:	4299      	cmp	r1, r3
 8007fda:	db05      	blt.n	8007fe8 <_printf_float+0x1d4>
 8007fdc:	6823      	ldr	r3, [r4, #0]
 8007fde:	6121      	str	r1, [r4, #16]
 8007fe0:	07d8      	lsls	r0, r3, #31
 8007fe2:	d5ea      	bpl.n	8007fba <_printf_float+0x1a6>
 8007fe4:	1c4b      	adds	r3, r1, #1
 8007fe6:	e7e7      	b.n	8007fb8 <_printf_float+0x1a4>
 8007fe8:	2900      	cmp	r1, #0
 8007fea:	bfd4      	ite	le
 8007fec:	f1c1 0202 	rsble	r2, r1, #2
 8007ff0:	2201      	movgt	r2, #1
 8007ff2:	4413      	add	r3, r2
 8007ff4:	e7e0      	b.n	8007fb8 <_printf_float+0x1a4>
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	055a      	lsls	r2, r3, #21
 8007ffa:	d407      	bmi.n	800800c <_printf_float+0x1f8>
 8007ffc:	6923      	ldr	r3, [r4, #16]
 8007ffe:	4642      	mov	r2, r8
 8008000:	4631      	mov	r1, r6
 8008002:	4628      	mov	r0, r5
 8008004:	47b8      	blx	r7
 8008006:	3001      	adds	r0, #1
 8008008:	d12c      	bne.n	8008064 <_printf_float+0x250>
 800800a:	e764      	b.n	8007ed6 <_printf_float+0xc2>
 800800c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008010:	f240 80e0 	bls.w	80081d4 <_printf_float+0x3c0>
 8008014:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008018:	2200      	movs	r2, #0
 800801a:	2300      	movs	r3, #0
 800801c:	f7f8 fd54 	bl	8000ac8 <__aeabi_dcmpeq>
 8008020:	2800      	cmp	r0, #0
 8008022:	d034      	beq.n	800808e <_printf_float+0x27a>
 8008024:	4a37      	ldr	r2, [pc, #220]	; (8008104 <_printf_float+0x2f0>)
 8008026:	2301      	movs	r3, #1
 8008028:	4631      	mov	r1, r6
 800802a:	4628      	mov	r0, r5
 800802c:	47b8      	blx	r7
 800802e:	3001      	adds	r0, #1
 8008030:	f43f af51 	beq.w	8007ed6 <_printf_float+0xc2>
 8008034:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008038:	429a      	cmp	r2, r3
 800803a:	db02      	blt.n	8008042 <_printf_float+0x22e>
 800803c:	6823      	ldr	r3, [r4, #0]
 800803e:	07d8      	lsls	r0, r3, #31
 8008040:	d510      	bpl.n	8008064 <_printf_float+0x250>
 8008042:	ee18 3a10 	vmov	r3, s16
 8008046:	4652      	mov	r2, sl
 8008048:	4631      	mov	r1, r6
 800804a:	4628      	mov	r0, r5
 800804c:	47b8      	blx	r7
 800804e:	3001      	adds	r0, #1
 8008050:	f43f af41 	beq.w	8007ed6 <_printf_float+0xc2>
 8008054:	f04f 0800 	mov.w	r8, #0
 8008058:	f104 091a 	add.w	r9, r4, #26
 800805c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800805e:	3b01      	subs	r3, #1
 8008060:	4543      	cmp	r3, r8
 8008062:	dc09      	bgt.n	8008078 <_printf_float+0x264>
 8008064:	6823      	ldr	r3, [r4, #0]
 8008066:	079b      	lsls	r3, r3, #30
 8008068:	f100 8105 	bmi.w	8008276 <_printf_float+0x462>
 800806c:	68e0      	ldr	r0, [r4, #12]
 800806e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008070:	4298      	cmp	r0, r3
 8008072:	bfb8      	it	lt
 8008074:	4618      	movlt	r0, r3
 8008076:	e730      	b.n	8007eda <_printf_float+0xc6>
 8008078:	2301      	movs	r3, #1
 800807a:	464a      	mov	r2, r9
 800807c:	4631      	mov	r1, r6
 800807e:	4628      	mov	r0, r5
 8008080:	47b8      	blx	r7
 8008082:	3001      	adds	r0, #1
 8008084:	f43f af27 	beq.w	8007ed6 <_printf_float+0xc2>
 8008088:	f108 0801 	add.w	r8, r8, #1
 800808c:	e7e6      	b.n	800805c <_printf_float+0x248>
 800808e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008090:	2b00      	cmp	r3, #0
 8008092:	dc39      	bgt.n	8008108 <_printf_float+0x2f4>
 8008094:	4a1b      	ldr	r2, [pc, #108]	; (8008104 <_printf_float+0x2f0>)
 8008096:	2301      	movs	r3, #1
 8008098:	4631      	mov	r1, r6
 800809a:	4628      	mov	r0, r5
 800809c:	47b8      	blx	r7
 800809e:	3001      	adds	r0, #1
 80080a0:	f43f af19 	beq.w	8007ed6 <_printf_float+0xc2>
 80080a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080a8:	4313      	orrs	r3, r2
 80080aa:	d102      	bne.n	80080b2 <_printf_float+0x29e>
 80080ac:	6823      	ldr	r3, [r4, #0]
 80080ae:	07d9      	lsls	r1, r3, #31
 80080b0:	d5d8      	bpl.n	8008064 <_printf_float+0x250>
 80080b2:	ee18 3a10 	vmov	r3, s16
 80080b6:	4652      	mov	r2, sl
 80080b8:	4631      	mov	r1, r6
 80080ba:	4628      	mov	r0, r5
 80080bc:	47b8      	blx	r7
 80080be:	3001      	adds	r0, #1
 80080c0:	f43f af09 	beq.w	8007ed6 <_printf_float+0xc2>
 80080c4:	f04f 0900 	mov.w	r9, #0
 80080c8:	f104 0a1a 	add.w	sl, r4, #26
 80080cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ce:	425b      	negs	r3, r3
 80080d0:	454b      	cmp	r3, r9
 80080d2:	dc01      	bgt.n	80080d8 <_printf_float+0x2c4>
 80080d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080d6:	e792      	b.n	8007ffe <_printf_float+0x1ea>
 80080d8:	2301      	movs	r3, #1
 80080da:	4652      	mov	r2, sl
 80080dc:	4631      	mov	r1, r6
 80080de:	4628      	mov	r0, r5
 80080e0:	47b8      	blx	r7
 80080e2:	3001      	adds	r0, #1
 80080e4:	f43f aef7 	beq.w	8007ed6 <_printf_float+0xc2>
 80080e8:	f109 0901 	add.w	r9, r9, #1
 80080ec:	e7ee      	b.n	80080cc <_printf_float+0x2b8>
 80080ee:	bf00      	nop
 80080f0:	7fefffff 	.word	0x7fefffff
 80080f4:	0800e09c 	.word	0x0800e09c
 80080f8:	0800e0a0 	.word	0x0800e0a0
 80080fc:	0800e0a8 	.word	0x0800e0a8
 8008100:	0800e0a4 	.word	0x0800e0a4
 8008104:	0800ad94 	.word	0x0800ad94
 8008108:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800810a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800810c:	429a      	cmp	r2, r3
 800810e:	bfa8      	it	ge
 8008110:	461a      	movge	r2, r3
 8008112:	2a00      	cmp	r2, #0
 8008114:	4691      	mov	r9, r2
 8008116:	dc37      	bgt.n	8008188 <_printf_float+0x374>
 8008118:	f04f 0b00 	mov.w	fp, #0
 800811c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008120:	f104 021a 	add.w	r2, r4, #26
 8008124:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008126:	9305      	str	r3, [sp, #20]
 8008128:	eba3 0309 	sub.w	r3, r3, r9
 800812c:	455b      	cmp	r3, fp
 800812e:	dc33      	bgt.n	8008198 <_printf_float+0x384>
 8008130:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008134:	429a      	cmp	r2, r3
 8008136:	db3b      	blt.n	80081b0 <_printf_float+0x39c>
 8008138:	6823      	ldr	r3, [r4, #0]
 800813a:	07da      	lsls	r2, r3, #31
 800813c:	d438      	bmi.n	80081b0 <_printf_float+0x39c>
 800813e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008140:	9a05      	ldr	r2, [sp, #20]
 8008142:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008144:	1a9a      	subs	r2, r3, r2
 8008146:	eba3 0901 	sub.w	r9, r3, r1
 800814a:	4591      	cmp	r9, r2
 800814c:	bfa8      	it	ge
 800814e:	4691      	movge	r9, r2
 8008150:	f1b9 0f00 	cmp.w	r9, #0
 8008154:	dc35      	bgt.n	80081c2 <_printf_float+0x3ae>
 8008156:	f04f 0800 	mov.w	r8, #0
 800815a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800815e:	f104 0a1a 	add.w	sl, r4, #26
 8008162:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008166:	1a9b      	subs	r3, r3, r2
 8008168:	eba3 0309 	sub.w	r3, r3, r9
 800816c:	4543      	cmp	r3, r8
 800816e:	f77f af79 	ble.w	8008064 <_printf_float+0x250>
 8008172:	2301      	movs	r3, #1
 8008174:	4652      	mov	r2, sl
 8008176:	4631      	mov	r1, r6
 8008178:	4628      	mov	r0, r5
 800817a:	47b8      	blx	r7
 800817c:	3001      	adds	r0, #1
 800817e:	f43f aeaa 	beq.w	8007ed6 <_printf_float+0xc2>
 8008182:	f108 0801 	add.w	r8, r8, #1
 8008186:	e7ec      	b.n	8008162 <_printf_float+0x34e>
 8008188:	4613      	mov	r3, r2
 800818a:	4631      	mov	r1, r6
 800818c:	4642      	mov	r2, r8
 800818e:	4628      	mov	r0, r5
 8008190:	47b8      	blx	r7
 8008192:	3001      	adds	r0, #1
 8008194:	d1c0      	bne.n	8008118 <_printf_float+0x304>
 8008196:	e69e      	b.n	8007ed6 <_printf_float+0xc2>
 8008198:	2301      	movs	r3, #1
 800819a:	4631      	mov	r1, r6
 800819c:	4628      	mov	r0, r5
 800819e:	9205      	str	r2, [sp, #20]
 80081a0:	47b8      	blx	r7
 80081a2:	3001      	adds	r0, #1
 80081a4:	f43f ae97 	beq.w	8007ed6 <_printf_float+0xc2>
 80081a8:	9a05      	ldr	r2, [sp, #20]
 80081aa:	f10b 0b01 	add.w	fp, fp, #1
 80081ae:	e7b9      	b.n	8008124 <_printf_float+0x310>
 80081b0:	ee18 3a10 	vmov	r3, s16
 80081b4:	4652      	mov	r2, sl
 80081b6:	4631      	mov	r1, r6
 80081b8:	4628      	mov	r0, r5
 80081ba:	47b8      	blx	r7
 80081bc:	3001      	adds	r0, #1
 80081be:	d1be      	bne.n	800813e <_printf_float+0x32a>
 80081c0:	e689      	b.n	8007ed6 <_printf_float+0xc2>
 80081c2:	9a05      	ldr	r2, [sp, #20]
 80081c4:	464b      	mov	r3, r9
 80081c6:	4442      	add	r2, r8
 80081c8:	4631      	mov	r1, r6
 80081ca:	4628      	mov	r0, r5
 80081cc:	47b8      	blx	r7
 80081ce:	3001      	adds	r0, #1
 80081d0:	d1c1      	bne.n	8008156 <_printf_float+0x342>
 80081d2:	e680      	b.n	8007ed6 <_printf_float+0xc2>
 80081d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081d6:	2a01      	cmp	r2, #1
 80081d8:	dc01      	bgt.n	80081de <_printf_float+0x3ca>
 80081da:	07db      	lsls	r3, r3, #31
 80081dc:	d538      	bpl.n	8008250 <_printf_float+0x43c>
 80081de:	2301      	movs	r3, #1
 80081e0:	4642      	mov	r2, r8
 80081e2:	4631      	mov	r1, r6
 80081e4:	4628      	mov	r0, r5
 80081e6:	47b8      	blx	r7
 80081e8:	3001      	adds	r0, #1
 80081ea:	f43f ae74 	beq.w	8007ed6 <_printf_float+0xc2>
 80081ee:	ee18 3a10 	vmov	r3, s16
 80081f2:	4652      	mov	r2, sl
 80081f4:	4631      	mov	r1, r6
 80081f6:	4628      	mov	r0, r5
 80081f8:	47b8      	blx	r7
 80081fa:	3001      	adds	r0, #1
 80081fc:	f43f ae6b 	beq.w	8007ed6 <_printf_float+0xc2>
 8008200:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008204:	2200      	movs	r2, #0
 8008206:	2300      	movs	r3, #0
 8008208:	f7f8 fc5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800820c:	b9d8      	cbnz	r0, 8008246 <_printf_float+0x432>
 800820e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008210:	f108 0201 	add.w	r2, r8, #1
 8008214:	3b01      	subs	r3, #1
 8008216:	4631      	mov	r1, r6
 8008218:	4628      	mov	r0, r5
 800821a:	47b8      	blx	r7
 800821c:	3001      	adds	r0, #1
 800821e:	d10e      	bne.n	800823e <_printf_float+0x42a>
 8008220:	e659      	b.n	8007ed6 <_printf_float+0xc2>
 8008222:	2301      	movs	r3, #1
 8008224:	4652      	mov	r2, sl
 8008226:	4631      	mov	r1, r6
 8008228:	4628      	mov	r0, r5
 800822a:	47b8      	blx	r7
 800822c:	3001      	adds	r0, #1
 800822e:	f43f ae52 	beq.w	8007ed6 <_printf_float+0xc2>
 8008232:	f108 0801 	add.w	r8, r8, #1
 8008236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008238:	3b01      	subs	r3, #1
 800823a:	4543      	cmp	r3, r8
 800823c:	dcf1      	bgt.n	8008222 <_printf_float+0x40e>
 800823e:	464b      	mov	r3, r9
 8008240:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008244:	e6dc      	b.n	8008000 <_printf_float+0x1ec>
 8008246:	f04f 0800 	mov.w	r8, #0
 800824a:	f104 0a1a 	add.w	sl, r4, #26
 800824e:	e7f2      	b.n	8008236 <_printf_float+0x422>
 8008250:	2301      	movs	r3, #1
 8008252:	4642      	mov	r2, r8
 8008254:	e7df      	b.n	8008216 <_printf_float+0x402>
 8008256:	2301      	movs	r3, #1
 8008258:	464a      	mov	r2, r9
 800825a:	4631      	mov	r1, r6
 800825c:	4628      	mov	r0, r5
 800825e:	47b8      	blx	r7
 8008260:	3001      	adds	r0, #1
 8008262:	f43f ae38 	beq.w	8007ed6 <_printf_float+0xc2>
 8008266:	f108 0801 	add.w	r8, r8, #1
 800826a:	68e3      	ldr	r3, [r4, #12]
 800826c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800826e:	1a5b      	subs	r3, r3, r1
 8008270:	4543      	cmp	r3, r8
 8008272:	dcf0      	bgt.n	8008256 <_printf_float+0x442>
 8008274:	e6fa      	b.n	800806c <_printf_float+0x258>
 8008276:	f04f 0800 	mov.w	r8, #0
 800827a:	f104 0919 	add.w	r9, r4, #25
 800827e:	e7f4      	b.n	800826a <_printf_float+0x456>

08008280 <_printf_common>:
 8008280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008284:	4616      	mov	r6, r2
 8008286:	4699      	mov	r9, r3
 8008288:	688a      	ldr	r2, [r1, #8]
 800828a:	690b      	ldr	r3, [r1, #16]
 800828c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008290:	4293      	cmp	r3, r2
 8008292:	bfb8      	it	lt
 8008294:	4613      	movlt	r3, r2
 8008296:	6033      	str	r3, [r6, #0]
 8008298:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800829c:	4607      	mov	r7, r0
 800829e:	460c      	mov	r4, r1
 80082a0:	b10a      	cbz	r2, 80082a6 <_printf_common+0x26>
 80082a2:	3301      	adds	r3, #1
 80082a4:	6033      	str	r3, [r6, #0]
 80082a6:	6823      	ldr	r3, [r4, #0]
 80082a8:	0699      	lsls	r1, r3, #26
 80082aa:	bf42      	ittt	mi
 80082ac:	6833      	ldrmi	r3, [r6, #0]
 80082ae:	3302      	addmi	r3, #2
 80082b0:	6033      	strmi	r3, [r6, #0]
 80082b2:	6825      	ldr	r5, [r4, #0]
 80082b4:	f015 0506 	ands.w	r5, r5, #6
 80082b8:	d106      	bne.n	80082c8 <_printf_common+0x48>
 80082ba:	f104 0a19 	add.w	sl, r4, #25
 80082be:	68e3      	ldr	r3, [r4, #12]
 80082c0:	6832      	ldr	r2, [r6, #0]
 80082c2:	1a9b      	subs	r3, r3, r2
 80082c4:	42ab      	cmp	r3, r5
 80082c6:	dc26      	bgt.n	8008316 <_printf_common+0x96>
 80082c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082cc:	1e13      	subs	r3, r2, #0
 80082ce:	6822      	ldr	r2, [r4, #0]
 80082d0:	bf18      	it	ne
 80082d2:	2301      	movne	r3, #1
 80082d4:	0692      	lsls	r2, r2, #26
 80082d6:	d42b      	bmi.n	8008330 <_printf_common+0xb0>
 80082d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082dc:	4649      	mov	r1, r9
 80082de:	4638      	mov	r0, r7
 80082e0:	47c0      	blx	r8
 80082e2:	3001      	adds	r0, #1
 80082e4:	d01e      	beq.n	8008324 <_printf_common+0xa4>
 80082e6:	6823      	ldr	r3, [r4, #0]
 80082e8:	68e5      	ldr	r5, [r4, #12]
 80082ea:	6832      	ldr	r2, [r6, #0]
 80082ec:	f003 0306 	and.w	r3, r3, #6
 80082f0:	2b04      	cmp	r3, #4
 80082f2:	bf08      	it	eq
 80082f4:	1aad      	subeq	r5, r5, r2
 80082f6:	68a3      	ldr	r3, [r4, #8]
 80082f8:	6922      	ldr	r2, [r4, #16]
 80082fa:	bf0c      	ite	eq
 80082fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008300:	2500      	movne	r5, #0
 8008302:	4293      	cmp	r3, r2
 8008304:	bfc4      	itt	gt
 8008306:	1a9b      	subgt	r3, r3, r2
 8008308:	18ed      	addgt	r5, r5, r3
 800830a:	2600      	movs	r6, #0
 800830c:	341a      	adds	r4, #26
 800830e:	42b5      	cmp	r5, r6
 8008310:	d11a      	bne.n	8008348 <_printf_common+0xc8>
 8008312:	2000      	movs	r0, #0
 8008314:	e008      	b.n	8008328 <_printf_common+0xa8>
 8008316:	2301      	movs	r3, #1
 8008318:	4652      	mov	r2, sl
 800831a:	4649      	mov	r1, r9
 800831c:	4638      	mov	r0, r7
 800831e:	47c0      	blx	r8
 8008320:	3001      	adds	r0, #1
 8008322:	d103      	bne.n	800832c <_printf_common+0xac>
 8008324:	f04f 30ff 	mov.w	r0, #4294967295
 8008328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800832c:	3501      	adds	r5, #1
 800832e:	e7c6      	b.n	80082be <_printf_common+0x3e>
 8008330:	18e1      	adds	r1, r4, r3
 8008332:	1c5a      	adds	r2, r3, #1
 8008334:	2030      	movs	r0, #48	; 0x30
 8008336:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800833a:	4422      	add	r2, r4
 800833c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008340:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008344:	3302      	adds	r3, #2
 8008346:	e7c7      	b.n	80082d8 <_printf_common+0x58>
 8008348:	2301      	movs	r3, #1
 800834a:	4622      	mov	r2, r4
 800834c:	4649      	mov	r1, r9
 800834e:	4638      	mov	r0, r7
 8008350:	47c0      	blx	r8
 8008352:	3001      	adds	r0, #1
 8008354:	d0e6      	beq.n	8008324 <_printf_common+0xa4>
 8008356:	3601      	adds	r6, #1
 8008358:	e7d9      	b.n	800830e <_printf_common+0x8e>
	...

0800835c <_printf_i>:
 800835c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008360:	7e0f      	ldrb	r7, [r1, #24]
 8008362:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008364:	2f78      	cmp	r7, #120	; 0x78
 8008366:	4691      	mov	r9, r2
 8008368:	4680      	mov	r8, r0
 800836a:	460c      	mov	r4, r1
 800836c:	469a      	mov	sl, r3
 800836e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008372:	d807      	bhi.n	8008384 <_printf_i+0x28>
 8008374:	2f62      	cmp	r7, #98	; 0x62
 8008376:	d80a      	bhi.n	800838e <_printf_i+0x32>
 8008378:	2f00      	cmp	r7, #0
 800837a:	f000 80d8 	beq.w	800852e <_printf_i+0x1d2>
 800837e:	2f58      	cmp	r7, #88	; 0x58
 8008380:	f000 80a3 	beq.w	80084ca <_printf_i+0x16e>
 8008384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008388:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800838c:	e03a      	b.n	8008404 <_printf_i+0xa8>
 800838e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008392:	2b15      	cmp	r3, #21
 8008394:	d8f6      	bhi.n	8008384 <_printf_i+0x28>
 8008396:	a101      	add	r1, pc, #4	; (adr r1, 800839c <_printf_i+0x40>)
 8008398:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800839c:	080083f5 	.word	0x080083f5
 80083a0:	08008409 	.word	0x08008409
 80083a4:	08008385 	.word	0x08008385
 80083a8:	08008385 	.word	0x08008385
 80083ac:	08008385 	.word	0x08008385
 80083b0:	08008385 	.word	0x08008385
 80083b4:	08008409 	.word	0x08008409
 80083b8:	08008385 	.word	0x08008385
 80083bc:	08008385 	.word	0x08008385
 80083c0:	08008385 	.word	0x08008385
 80083c4:	08008385 	.word	0x08008385
 80083c8:	08008515 	.word	0x08008515
 80083cc:	08008439 	.word	0x08008439
 80083d0:	080084f7 	.word	0x080084f7
 80083d4:	08008385 	.word	0x08008385
 80083d8:	08008385 	.word	0x08008385
 80083dc:	08008537 	.word	0x08008537
 80083e0:	08008385 	.word	0x08008385
 80083e4:	08008439 	.word	0x08008439
 80083e8:	08008385 	.word	0x08008385
 80083ec:	08008385 	.word	0x08008385
 80083f0:	080084ff 	.word	0x080084ff
 80083f4:	682b      	ldr	r3, [r5, #0]
 80083f6:	1d1a      	adds	r2, r3, #4
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	602a      	str	r2, [r5, #0]
 80083fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008400:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008404:	2301      	movs	r3, #1
 8008406:	e0a3      	b.n	8008550 <_printf_i+0x1f4>
 8008408:	6820      	ldr	r0, [r4, #0]
 800840a:	6829      	ldr	r1, [r5, #0]
 800840c:	0606      	lsls	r6, r0, #24
 800840e:	f101 0304 	add.w	r3, r1, #4
 8008412:	d50a      	bpl.n	800842a <_printf_i+0xce>
 8008414:	680e      	ldr	r6, [r1, #0]
 8008416:	602b      	str	r3, [r5, #0]
 8008418:	2e00      	cmp	r6, #0
 800841a:	da03      	bge.n	8008424 <_printf_i+0xc8>
 800841c:	232d      	movs	r3, #45	; 0x2d
 800841e:	4276      	negs	r6, r6
 8008420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008424:	485e      	ldr	r0, [pc, #376]	; (80085a0 <_printf_i+0x244>)
 8008426:	230a      	movs	r3, #10
 8008428:	e019      	b.n	800845e <_printf_i+0x102>
 800842a:	680e      	ldr	r6, [r1, #0]
 800842c:	602b      	str	r3, [r5, #0]
 800842e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008432:	bf18      	it	ne
 8008434:	b236      	sxthne	r6, r6
 8008436:	e7ef      	b.n	8008418 <_printf_i+0xbc>
 8008438:	682b      	ldr	r3, [r5, #0]
 800843a:	6820      	ldr	r0, [r4, #0]
 800843c:	1d19      	adds	r1, r3, #4
 800843e:	6029      	str	r1, [r5, #0]
 8008440:	0601      	lsls	r1, r0, #24
 8008442:	d501      	bpl.n	8008448 <_printf_i+0xec>
 8008444:	681e      	ldr	r6, [r3, #0]
 8008446:	e002      	b.n	800844e <_printf_i+0xf2>
 8008448:	0646      	lsls	r6, r0, #25
 800844a:	d5fb      	bpl.n	8008444 <_printf_i+0xe8>
 800844c:	881e      	ldrh	r6, [r3, #0]
 800844e:	4854      	ldr	r0, [pc, #336]	; (80085a0 <_printf_i+0x244>)
 8008450:	2f6f      	cmp	r7, #111	; 0x6f
 8008452:	bf0c      	ite	eq
 8008454:	2308      	moveq	r3, #8
 8008456:	230a      	movne	r3, #10
 8008458:	2100      	movs	r1, #0
 800845a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800845e:	6865      	ldr	r5, [r4, #4]
 8008460:	60a5      	str	r5, [r4, #8]
 8008462:	2d00      	cmp	r5, #0
 8008464:	bfa2      	ittt	ge
 8008466:	6821      	ldrge	r1, [r4, #0]
 8008468:	f021 0104 	bicge.w	r1, r1, #4
 800846c:	6021      	strge	r1, [r4, #0]
 800846e:	b90e      	cbnz	r6, 8008474 <_printf_i+0x118>
 8008470:	2d00      	cmp	r5, #0
 8008472:	d04d      	beq.n	8008510 <_printf_i+0x1b4>
 8008474:	4615      	mov	r5, r2
 8008476:	fbb6 f1f3 	udiv	r1, r6, r3
 800847a:	fb03 6711 	mls	r7, r3, r1, r6
 800847e:	5dc7      	ldrb	r7, [r0, r7]
 8008480:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008484:	4637      	mov	r7, r6
 8008486:	42bb      	cmp	r3, r7
 8008488:	460e      	mov	r6, r1
 800848a:	d9f4      	bls.n	8008476 <_printf_i+0x11a>
 800848c:	2b08      	cmp	r3, #8
 800848e:	d10b      	bne.n	80084a8 <_printf_i+0x14c>
 8008490:	6823      	ldr	r3, [r4, #0]
 8008492:	07de      	lsls	r6, r3, #31
 8008494:	d508      	bpl.n	80084a8 <_printf_i+0x14c>
 8008496:	6923      	ldr	r3, [r4, #16]
 8008498:	6861      	ldr	r1, [r4, #4]
 800849a:	4299      	cmp	r1, r3
 800849c:	bfde      	ittt	le
 800849e:	2330      	movle	r3, #48	; 0x30
 80084a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80084a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80084a8:	1b52      	subs	r2, r2, r5
 80084aa:	6122      	str	r2, [r4, #16]
 80084ac:	f8cd a000 	str.w	sl, [sp]
 80084b0:	464b      	mov	r3, r9
 80084b2:	aa03      	add	r2, sp, #12
 80084b4:	4621      	mov	r1, r4
 80084b6:	4640      	mov	r0, r8
 80084b8:	f7ff fee2 	bl	8008280 <_printf_common>
 80084bc:	3001      	adds	r0, #1
 80084be:	d14c      	bne.n	800855a <_printf_i+0x1fe>
 80084c0:	f04f 30ff 	mov.w	r0, #4294967295
 80084c4:	b004      	add	sp, #16
 80084c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ca:	4835      	ldr	r0, [pc, #212]	; (80085a0 <_printf_i+0x244>)
 80084cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80084d0:	6829      	ldr	r1, [r5, #0]
 80084d2:	6823      	ldr	r3, [r4, #0]
 80084d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80084d8:	6029      	str	r1, [r5, #0]
 80084da:	061d      	lsls	r5, r3, #24
 80084dc:	d514      	bpl.n	8008508 <_printf_i+0x1ac>
 80084de:	07df      	lsls	r7, r3, #31
 80084e0:	bf44      	itt	mi
 80084e2:	f043 0320 	orrmi.w	r3, r3, #32
 80084e6:	6023      	strmi	r3, [r4, #0]
 80084e8:	b91e      	cbnz	r6, 80084f2 <_printf_i+0x196>
 80084ea:	6823      	ldr	r3, [r4, #0]
 80084ec:	f023 0320 	bic.w	r3, r3, #32
 80084f0:	6023      	str	r3, [r4, #0]
 80084f2:	2310      	movs	r3, #16
 80084f4:	e7b0      	b.n	8008458 <_printf_i+0xfc>
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	f043 0320 	orr.w	r3, r3, #32
 80084fc:	6023      	str	r3, [r4, #0]
 80084fe:	2378      	movs	r3, #120	; 0x78
 8008500:	4828      	ldr	r0, [pc, #160]	; (80085a4 <_printf_i+0x248>)
 8008502:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008506:	e7e3      	b.n	80084d0 <_printf_i+0x174>
 8008508:	0659      	lsls	r1, r3, #25
 800850a:	bf48      	it	mi
 800850c:	b2b6      	uxthmi	r6, r6
 800850e:	e7e6      	b.n	80084de <_printf_i+0x182>
 8008510:	4615      	mov	r5, r2
 8008512:	e7bb      	b.n	800848c <_printf_i+0x130>
 8008514:	682b      	ldr	r3, [r5, #0]
 8008516:	6826      	ldr	r6, [r4, #0]
 8008518:	6961      	ldr	r1, [r4, #20]
 800851a:	1d18      	adds	r0, r3, #4
 800851c:	6028      	str	r0, [r5, #0]
 800851e:	0635      	lsls	r5, r6, #24
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	d501      	bpl.n	8008528 <_printf_i+0x1cc>
 8008524:	6019      	str	r1, [r3, #0]
 8008526:	e002      	b.n	800852e <_printf_i+0x1d2>
 8008528:	0670      	lsls	r0, r6, #25
 800852a:	d5fb      	bpl.n	8008524 <_printf_i+0x1c8>
 800852c:	8019      	strh	r1, [r3, #0]
 800852e:	2300      	movs	r3, #0
 8008530:	6123      	str	r3, [r4, #16]
 8008532:	4615      	mov	r5, r2
 8008534:	e7ba      	b.n	80084ac <_printf_i+0x150>
 8008536:	682b      	ldr	r3, [r5, #0]
 8008538:	1d1a      	adds	r2, r3, #4
 800853a:	602a      	str	r2, [r5, #0]
 800853c:	681d      	ldr	r5, [r3, #0]
 800853e:	6862      	ldr	r2, [r4, #4]
 8008540:	2100      	movs	r1, #0
 8008542:	4628      	mov	r0, r5
 8008544:	f7f7 fe4c 	bl	80001e0 <memchr>
 8008548:	b108      	cbz	r0, 800854e <_printf_i+0x1f2>
 800854a:	1b40      	subs	r0, r0, r5
 800854c:	6060      	str	r0, [r4, #4]
 800854e:	6863      	ldr	r3, [r4, #4]
 8008550:	6123      	str	r3, [r4, #16]
 8008552:	2300      	movs	r3, #0
 8008554:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008558:	e7a8      	b.n	80084ac <_printf_i+0x150>
 800855a:	6923      	ldr	r3, [r4, #16]
 800855c:	462a      	mov	r2, r5
 800855e:	4649      	mov	r1, r9
 8008560:	4640      	mov	r0, r8
 8008562:	47d0      	blx	sl
 8008564:	3001      	adds	r0, #1
 8008566:	d0ab      	beq.n	80084c0 <_printf_i+0x164>
 8008568:	6823      	ldr	r3, [r4, #0]
 800856a:	079b      	lsls	r3, r3, #30
 800856c:	d413      	bmi.n	8008596 <_printf_i+0x23a>
 800856e:	68e0      	ldr	r0, [r4, #12]
 8008570:	9b03      	ldr	r3, [sp, #12]
 8008572:	4298      	cmp	r0, r3
 8008574:	bfb8      	it	lt
 8008576:	4618      	movlt	r0, r3
 8008578:	e7a4      	b.n	80084c4 <_printf_i+0x168>
 800857a:	2301      	movs	r3, #1
 800857c:	4632      	mov	r2, r6
 800857e:	4649      	mov	r1, r9
 8008580:	4640      	mov	r0, r8
 8008582:	47d0      	blx	sl
 8008584:	3001      	adds	r0, #1
 8008586:	d09b      	beq.n	80084c0 <_printf_i+0x164>
 8008588:	3501      	adds	r5, #1
 800858a:	68e3      	ldr	r3, [r4, #12]
 800858c:	9903      	ldr	r1, [sp, #12]
 800858e:	1a5b      	subs	r3, r3, r1
 8008590:	42ab      	cmp	r3, r5
 8008592:	dcf2      	bgt.n	800857a <_printf_i+0x21e>
 8008594:	e7eb      	b.n	800856e <_printf_i+0x212>
 8008596:	2500      	movs	r5, #0
 8008598:	f104 0619 	add.w	r6, r4, #25
 800859c:	e7f5      	b.n	800858a <_printf_i+0x22e>
 800859e:	bf00      	nop
 80085a0:	0800e0ac 	.word	0x0800e0ac
 80085a4:	0800e0bd 	.word	0x0800e0bd

080085a8 <iprintf>:
 80085a8:	b40f      	push	{r0, r1, r2, r3}
 80085aa:	4b0a      	ldr	r3, [pc, #40]	; (80085d4 <iprintf+0x2c>)
 80085ac:	b513      	push	{r0, r1, r4, lr}
 80085ae:	681c      	ldr	r4, [r3, #0]
 80085b0:	b124      	cbz	r4, 80085bc <iprintf+0x14>
 80085b2:	69a3      	ldr	r3, [r4, #24]
 80085b4:	b913      	cbnz	r3, 80085bc <iprintf+0x14>
 80085b6:	4620      	mov	r0, r4
 80085b8:	f7ff f9c8 	bl	800794c <__sinit>
 80085bc:	ab05      	add	r3, sp, #20
 80085be:	9a04      	ldr	r2, [sp, #16]
 80085c0:	68a1      	ldr	r1, [r4, #8]
 80085c2:	9301      	str	r3, [sp, #4]
 80085c4:	4620      	mov	r0, r4
 80085c6:	f001 fceb 	bl	8009fa0 <_vfiprintf_r>
 80085ca:	b002      	add	sp, #8
 80085cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085d0:	b004      	add	sp, #16
 80085d2:	4770      	bx	lr
 80085d4:	20000724 	.word	0x20000724

080085d8 <_puts_r>:
 80085d8:	b570      	push	{r4, r5, r6, lr}
 80085da:	460e      	mov	r6, r1
 80085dc:	4605      	mov	r5, r0
 80085de:	b118      	cbz	r0, 80085e8 <_puts_r+0x10>
 80085e0:	6983      	ldr	r3, [r0, #24]
 80085e2:	b90b      	cbnz	r3, 80085e8 <_puts_r+0x10>
 80085e4:	f7ff f9b2 	bl	800794c <__sinit>
 80085e8:	69ab      	ldr	r3, [r5, #24]
 80085ea:	68ac      	ldr	r4, [r5, #8]
 80085ec:	b913      	cbnz	r3, 80085f4 <_puts_r+0x1c>
 80085ee:	4628      	mov	r0, r5
 80085f0:	f7ff f9ac 	bl	800794c <__sinit>
 80085f4:	4b2c      	ldr	r3, [pc, #176]	; (80086a8 <_puts_r+0xd0>)
 80085f6:	429c      	cmp	r4, r3
 80085f8:	d120      	bne.n	800863c <_puts_r+0x64>
 80085fa:	686c      	ldr	r4, [r5, #4]
 80085fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085fe:	07db      	lsls	r3, r3, #31
 8008600:	d405      	bmi.n	800860e <_puts_r+0x36>
 8008602:	89a3      	ldrh	r3, [r4, #12]
 8008604:	0598      	lsls	r0, r3, #22
 8008606:	d402      	bmi.n	800860e <_puts_r+0x36>
 8008608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800860a:	f7ff fa62 	bl	8007ad2 <__retarget_lock_acquire_recursive>
 800860e:	89a3      	ldrh	r3, [r4, #12]
 8008610:	0719      	lsls	r1, r3, #28
 8008612:	d51d      	bpl.n	8008650 <_puts_r+0x78>
 8008614:	6923      	ldr	r3, [r4, #16]
 8008616:	b1db      	cbz	r3, 8008650 <_puts_r+0x78>
 8008618:	3e01      	subs	r6, #1
 800861a:	68a3      	ldr	r3, [r4, #8]
 800861c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008620:	3b01      	subs	r3, #1
 8008622:	60a3      	str	r3, [r4, #8]
 8008624:	bb39      	cbnz	r1, 8008676 <_puts_r+0x9e>
 8008626:	2b00      	cmp	r3, #0
 8008628:	da38      	bge.n	800869c <_puts_r+0xc4>
 800862a:	4622      	mov	r2, r4
 800862c:	210a      	movs	r1, #10
 800862e:	4628      	mov	r0, r5
 8008630:	f000 f8de 	bl	80087f0 <__swbuf_r>
 8008634:	3001      	adds	r0, #1
 8008636:	d011      	beq.n	800865c <_puts_r+0x84>
 8008638:	250a      	movs	r5, #10
 800863a:	e011      	b.n	8008660 <_puts_r+0x88>
 800863c:	4b1b      	ldr	r3, [pc, #108]	; (80086ac <_puts_r+0xd4>)
 800863e:	429c      	cmp	r4, r3
 8008640:	d101      	bne.n	8008646 <_puts_r+0x6e>
 8008642:	68ac      	ldr	r4, [r5, #8]
 8008644:	e7da      	b.n	80085fc <_puts_r+0x24>
 8008646:	4b1a      	ldr	r3, [pc, #104]	; (80086b0 <_puts_r+0xd8>)
 8008648:	429c      	cmp	r4, r3
 800864a:	bf08      	it	eq
 800864c:	68ec      	ldreq	r4, [r5, #12]
 800864e:	e7d5      	b.n	80085fc <_puts_r+0x24>
 8008650:	4621      	mov	r1, r4
 8008652:	4628      	mov	r0, r5
 8008654:	f000 f930 	bl	80088b8 <__swsetup_r>
 8008658:	2800      	cmp	r0, #0
 800865a:	d0dd      	beq.n	8008618 <_puts_r+0x40>
 800865c:	f04f 35ff 	mov.w	r5, #4294967295
 8008660:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008662:	07da      	lsls	r2, r3, #31
 8008664:	d405      	bmi.n	8008672 <_puts_r+0x9a>
 8008666:	89a3      	ldrh	r3, [r4, #12]
 8008668:	059b      	lsls	r3, r3, #22
 800866a:	d402      	bmi.n	8008672 <_puts_r+0x9a>
 800866c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800866e:	f7ff fa31 	bl	8007ad4 <__retarget_lock_release_recursive>
 8008672:	4628      	mov	r0, r5
 8008674:	bd70      	pop	{r4, r5, r6, pc}
 8008676:	2b00      	cmp	r3, #0
 8008678:	da04      	bge.n	8008684 <_puts_r+0xac>
 800867a:	69a2      	ldr	r2, [r4, #24]
 800867c:	429a      	cmp	r2, r3
 800867e:	dc06      	bgt.n	800868e <_puts_r+0xb6>
 8008680:	290a      	cmp	r1, #10
 8008682:	d004      	beq.n	800868e <_puts_r+0xb6>
 8008684:	6823      	ldr	r3, [r4, #0]
 8008686:	1c5a      	adds	r2, r3, #1
 8008688:	6022      	str	r2, [r4, #0]
 800868a:	7019      	strb	r1, [r3, #0]
 800868c:	e7c5      	b.n	800861a <_puts_r+0x42>
 800868e:	4622      	mov	r2, r4
 8008690:	4628      	mov	r0, r5
 8008692:	f000 f8ad 	bl	80087f0 <__swbuf_r>
 8008696:	3001      	adds	r0, #1
 8008698:	d1bf      	bne.n	800861a <_puts_r+0x42>
 800869a:	e7df      	b.n	800865c <_puts_r+0x84>
 800869c:	6823      	ldr	r3, [r4, #0]
 800869e:	250a      	movs	r5, #10
 80086a0:	1c5a      	adds	r2, r3, #1
 80086a2:	6022      	str	r2, [r4, #0]
 80086a4:	701d      	strb	r5, [r3, #0]
 80086a6:	e7db      	b.n	8008660 <_puts_r+0x88>
 80086a8:	0800e058 	.word	0x0800e058
 80086ac:	0800e078 	.word	0x0800e078
 80086b0:	0800e038 	.word	0x0800e038

080086b4 <puts>:
 80086b4:	4b02      	ldr	r3, [pc, #8]	; (80086c0 <puts+0xc>)
 80086b6:	4601      	mov	r1, r0
 80086b8:	6818      	ldr	r0, [r3, #0]
 80086ba:	f7ff bf8d 	b.w	80085d8 <_puts_r>
 80086be:	bf00      	nop
 80086c0:	20000724 	.word	0x20000724

080086c4 <srand>:
 80086c4:	b538      	push	{r3, r4, r5, lr}
 80086c6:	4b10      	ldr	r3, [pc, #64]	; (8008708 <srand+0x44>)
 80086c8:	681d      	ldr	r5, [r3, #0]
 80086ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80086cc:	4604      	mov	r4, r0
 80086ce:	b9b3      	cbnz	r3, 80086fe <srand+0x3a>
 80086d0:	2018      	movs	r0, #24
 80086d2:	f7fb f8c9 	bl	8003868 <__wrap_malloc>
 80086d6:	4602      	mov	r2, r0
 80086d8:	63a8      	str	r0, [r5, #56]	; 0x38
 80086da:	b920      	cbnz	r0, 80086e6 <srand+0x22>
 80086dc:	4b0b      	ldr	r3, [pc, #44]	; (800870c <srand+0x48>)
 80086de:	480c      	ldr	r0, [pc, #48]	; (8008710 <srand+0x4c>)
 80086e0:	2142      	movs	r1, #66	; 0x42
 80086e2:	f000 f957 	bl	8008994 <__assert_func>
 80086e6:	490b      	ldr	r1, [pc, #44]	; (8008714 <srand+0x50>)
 80086e8:	4b0b      	ldr	r3, [pc, #44]	; (8008718 <srand+0x54>)
 80086ea:	e9c0 1300 	strd	r1, r3, [r0]
 80086ee:	4b0b      	ldr	r3, [pc, #44]	; (800871c <srand+0x58>)
 80086f0:	6083      	str	r3, [r0, #8]
 80086f2:	230b      	movs	r3, #11
 80086f4:	8183      	strh	r3, [r0, #12]
 80086f6:	2100      	movs	r1, #0
 80086f8:	2001      	movs	r0, #1
 80086fa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80086fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008700:	2200      	movs	r2, #0
 8008702:	611c      	str	r4, [r3, #16]
 8008704:	615a      	str	r2, [r3, #20]
 8008706:	bd38      	pop	{r3, r4, r5, pc}
 8008708:	20000724 	.word	0x20000724
 800870c:	0800e0ce 	.word	0x0800e0ce
 8008710:	0800e0e5 	.word	0x0800e0e5
 8008714:	abcd330e 	.word	0xabcd330e
 8008718:	e66d1234 	.word	0xe66d1234
 800871c:	0005deec 	.word	0x0005deec

08008720 <_sbrk_r>:
 8008720:	b538      	push	{r3, r4, r5, lr}
 8008722:	4d06      	ldr	r5, [pc, #24]	; (800873c <_sbrk_r+0x1c>)
 8008724:	2300      	movs	r3, #0
 8008726:	4604      	mov	r4, r0
 8008728:	4608      	mov	r0, r1
 800872a:	602b      	str	r3, [r5, #0]
 800872c:	f7f8 fef4 	bl	8001518 <_sbrk>
 8008730:	1c43      	adds	r3, r0, #1
 8008732:	d102      	bne.n	800873a <_sbrk_r+0x1a>
 8008734:	682b      	ldr	r3, [r5, #0]
 8008736:	b103      	cbz	r3, 800873a <_sbrk_r+0x1a>
 8008738:	6023      	str	r3, [r4, #0]
 800873a:	bd38      	pop	{r3, r4, r5, pc}
 800873c:	20001a80 	.word	0x20001a80

08008740 <__sread>:
 8008740:	b510      	push	{r4, lr}
 8008742:	460c      	mov	r4, r1
 8008744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008748:	f001 fd5a 	bl	800a200 <_read_r>
 800874c:	2800      	cmp	r0, #0
 800874e:	bfab      	itete	ge
 8008750:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008752:	89a3      	ldrhlt	r3, [r4, #12]
 8008754:	181b      	addge	r3, r3, r0
 8008756:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800875a:	bfac      	ite	ge
 800875c:	6563      	strge	r3, [r4, #84]	; 0x54
 800875e:	81a3      	strhlt	r3, [r4, #12]
 8008760:	bd10      	pop	{r4, pc}

08008762 <__swrite>:
 8008762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008766:	461f      	mov	r7, r3
 8008768:	898b      	ldrh	r3, [r1, #12]
 800876a:	05db      	lsls	r3, r3, #23
 800876c:	4605      	mov	r5, r0
 800876e:	460c      	mov	r4, r1
 8008770:	4616      	mov	r6, r2
 8008772:	d505      	bpl.n	8008780 <__swrite+0x1e>
 8008774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008778:	2302      	movs	r3, #2
 800877a:	2200      	movs	r2, #0
 800877c:	f000 ffc8 	bl	8009710 <_lseek_r>
 8008780:	89a3      	ldrh	r3, [r4, #12]
 8008782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800878a:	81a3      	strh	r3, [r4, #12]
 800878c:	4632      	mov	r2, r6
 800878e:	463b      	mov	r3, r7
 8008790:	4628      	mov	r0, r5
 8008792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008796:	f000 b87d 	b.w	8008894 <_write_r>

0800879a <__sseek>:
 800879a:	b510      	push	{r4, lr}
 800879c:	460c      	mov	r4, r1
 800879e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087a2:	f000 ffb5 	bl	8009710 <_lseek_r>
 80087a6:	1c43      	adds	r3, r0, #1
 80087a8:	89a3      	ldrh	r3, [r4, #12]
 80087aa:	bf15      	itete	ne
 80087ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80087ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087b6:	81a3      	strheq	r3, [r4, #12]
 80087b8:	bf18      	it	ne
 80087ba:	81a3      	strhne	r3, [r4, #12]
 80087bc:	bd10      	pop	{r4, pc}

080087be <__sclose>:
 80087be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087c2:	f000 b905 	b.w	80089d0 <_close_r>

080087c6 <strncmp>:
 80087c6:	b510      	push	{r4, lr}
 80087c8:	b17a      	cbz	r2, 80087ea <strncmp+0x24>
 80087ca:	4603      	mov	r3, r0
 80087cc:	3901      	subs	r1, #1
 80087ce:	1884      	adds	r4, r0, r2
 80087d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80087d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80087d8:	4290      	cmp	r0, r2
 80087da:	d101      	bne.n	80087e0 <strncmp+0x1a>
 80087dc:	42a3      	cmp	r3, r4
 80087de:	d101      	bne.n	80087e4 <strncmp+0x1e>
 80087e0:	1a80      	subs	r0, r0, r2
 80087e2:	bd10      	pop	{r4, pc}
 80087e4:	2800      	cmp	r0, #0
 80087e6:	d1f3      	bne.n	80087d0 <strncmp+0xa>
 80087e8:	e7fa      	b.n	80087e0 <strncmp+0x1a>
 80087ea:	4610      	mov	r0, r2
 80087ec:	e7f9      	b.n	80087e2 <strncmp+0x1c>
	...

080087f0 <__swbuf_r>:
 80087f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f2:	460e      	mov	r6, r1
 80087f4:	4614      	mov	r4, r2
 80087f6:	4605      	mov	r5, r0
 80087f8:	b118      	cbz	r0, 8008802 <__swbuf_r+0x12>
 80087fa:	6983      	ldr	r3, [r0, #24]
 80087fc:	b90b      	cbnz	r3, 8008802 <__swbuf_r+0x12>
 80087fe:	f7ff f8a5 	bl	800794c <__sinit>
 8008802:	4b21      	ldr	r3, [pc, #132]	; (8008888 <__swbuf_r+0x98>)
 8008804:	429c      	cmp	r4, r3
 8008806:	d12b      	bne.n	8008860 <__swbuf_r+0x70>
 8008808:	686c      	ldr	r4, [r5, #4]
 800880a:	69a3      	ldr	r3, [r4, #24]
 800880c:	60a3      	str	r3, [r4, #8]
 800880e:	89a3      	ldrh	r3, [r4, #12]
 8008810:	071a      	lsls	r2, r3, #28
 8008812:	d52f      	bpl.n	8008874 <__swbuf_r+0x84>
 8008814:	6923      	ldr	r3, [r4, #16]
 8008816:	b36b      	cbz	r3, 8008874 <__swbuf_r+0x84>
 8008818:	6923      	ldr	r3, [r4, #16]
 800881a:	6820      	ldr	r0, [r4, #0]
 800881c:	1ac0      	subs	r0, r0, r3
 800881e:	6963      	ldr	r3, [r4, #20]
 8008820:	b2f6      	uxtb	r6, r6
 8008822:	4283      	cmp	r3, r0
 8008824:	4637      	mov	r7, r6
 8008826:	dc04      	bgt.n	8008832 <__swbuf_r+0x42>
 8008828:	4621      	mov	r1, r4
 800882a:	4628      	mov	r0, r5
 800882c:	f7fe fffa 	bl	8007824 <_fflush_r>
 8008830:	bb30      	cbnz	r0, 8008880 <__swbuf_r+0x90>
 8008832:	68a3      	ldr	r3, [r4, #8]
 8008834:	3b01      	subs	r3, #1
 8008836:	60a3      	str	r3, [r4, #8]
 8008838:	6823      	ldr	r3, [r4, #0]
 800883a:	1c5a      	adds	r2, r3, #1
 800883c:	6022      	str	r2, [r4, #0]
 800883e:	701e      	strb	r6, [r3, #0]
 8008840:	6963      	ldr	r3, [r4, #20]
 8008842:	3001      	adds	r0, #1
 8008844:	4283      	cmp	r3, r0
 8008846:	d004      	beq.n	8008852 <__swbuf_r+0x62>
 8008848:	89a3      	ldrh	r3, [r4, #12]
 800884a:	07db      	lsls	r3, r3, #31
 800884c:	d506      	bpl.n	800885c <__swbuf_r+0x6c>
 800884e:	2e0a      	cmp	r6, #10
 8008850:	d104      	bne.n	800885c <__swbuf_r+0x6c>
 8008852:	4621      	mov	r1, r4
 8008854:	4628      	mov	r0, r5
 8008856:	f7fe ffe5 	bl	8007824 <_fflush_r>
 800885a:	b988      	cbnz	r0, 8008880 <__swbuf_r+0x90>
 800885c:	4638      	mov	r0, r7
 800885e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008860:	4b0a      	ldr	r3, [pc, #40]	; (800888c <__swbuf_r+0x9c>)
 8008862:	429c      	cmp	r4, r3
 8008864:	d101      	bne.n	800886a <__swbuf_r+0x7a>
 8008866:	68ac      	ldr	r4, [r5, #8]
 8008868:	e7cf      	b.n	800880a <__swbuf_r+0x1a>
 800886a:	4b09      	ldr	r3, [pc, #36]	; (8008890 <__swbuf_r+0xa0>)
 800886c:	429c      	cmp	r4, r3
 800886e:	bf08      	it	eq
 8008870:	68ec      	ldreq	r4, [r5, #12]
 8008872:	e7ca      	b.n	800880a <__swbuf_r+0x1a>
 8008874:	4621      	mov	r1, r4
 8008876:	4628      	mov	r0, r5
 8008878:	f000 f81e 	bl	80088b8 <__swsetup_r>
 800887c:	2800      	cmp	r0, #0
 800887e:	d0cb      	beq.n	8008818 <__swbuf_r+0x28>
 8008880:	f04f 37ff 	mov.w	r7, #4294967295
 8008884:	e7ea      	b.n	800885c <__swbuf_r+0x6c>
 8008886:	bf00      	nop
 8008888:	0800e058 	.word	0x0800e058
 800888c:	0800e078 	.word	0x0800e078
 8008890:	0800e038 	.word	0x0800e038

08008894 <_write_r>:
 8008894:	b538      	push	{r3, r4, r5, lr}
 8008896:	4d07      	ldr	r5, [pc, #28]	; (80088b4 <_write_r+0x20>)
 8008898:	4604      	mov	r4, r0
 800889a:	4608      	mov	r0, r1
 800889c:	4611      	mov	r1, r2
 800889e:	2200      	movs	r2, #0
 80088a0:	602a      	str	r2, [r5, #0]
 80088a2:	461a      	mov	r2, r3
 80088a4:	f7fa ffc0 	bl	8003828 <_write>
 80088a8:	1c43      	adds	r3, r0, #1
 80088aa:	d102      	bne.n	80088b2 <_write_r+0x1e>
 80088ac:	682b      	ldr	r3, [r5, #0]
 80088ae:	b103      	cbz	r3, 80088b2 <_write_r+0x1e>
 80088b0:	6023      	str	r3, [r4, #0]
 80088b2:	bd38      	pop	{r3, r4, r5, pc}
 80088b4:	20001a80 	.word	0x20001a80

080088b8 <__swsetup_r>:
 80088b8:	4b32      	ldr	r3, [pc, #200]	; (8008984 <__swsetup_r+0xcc>)
 80088ba:	b570      	push	{r4, r5, r6, lr}
 80088bc:	681d      	ldr	r5, [r3, #0]
 80088be:	4606      	mov	r6, r0
 80088c0:	460c      	mov	r4, r1
 80088c2:	b125      	cbz	r5, 80088ce <__swsetup_r+0x16>
 80088c4:	69ab      	ldr	r3, [r5, #24]
 80088c6:	b913      	cbnz	r3, 80088ce <__swsetup_r+0x16>
 80088c8:	4628      	mov	r0, r5
 80088ca:	f7ff f83f 	bl	800794c <__sinit>
 80088ce:	4b2e      	ldr	r3, [pc, #184]	; (8008988 <__swsetup_r+0xd0>)
 80088d0:	429c      	cmp	r4, r3
 80088d2:	d10f      	bne.n	80088f4 <__swsetup_r+0x3c>
 80088d4:	686c      	ldr	r4, [r5, #4]
 80088d6:	89a3      	ldrh	r3, [r4, #12]
 80088d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088dc:	0719      	lsls	r1, r3, #28
 80088de:	d42c      	bmi.n	800893a <__swsetup_r+0x82>
 80088e0:	06dd      	lsls	r5, r3, #27
 80088e2:	d411      	bmi.n	8008908 <__swsetup_r+0x50>
 80088e4:	2309      	movs	r3, #9
 80088e6:	6033      	str	r3, [r6, #0]
 80088e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088ec:	81a3      	strh	r3, [r4, #12]
 80088ee:	f04f 30ff 	mov.w	r0, #4294967295
 80088f2:	e03e      	b.n	8008972 <__swsetup_r+0xba>
 80088f4:	4b25      	ldr	r3, [pc, #148]	; (800898c <__swsetup_r+0xd4>)
 80088f6:	429c      	cmp	r4, r3
 80088f8:	d101      	bne.n	80088fe <__swsetup_r+0x46>
 80088fa:	68ac      	ldr	r4, [r5, #8]
 80088fc:	e7eb      	b.n	80088d6 <__swsetup_r+0x1e>
 80088fe:	4b24      	ldr	r3, [pc, #144]	; (8008990 <__swsetup_r+0xd8>)
 8008900:	429c      	cmp	r4, r3
 8008902:	bf08      	it	eq
 8008904:	68ec      	ldreq	r4, [r5, #12]
 8008906:	e7e6      	b.n	80088d6 <__swsetup_r+0x1e>
 8008908:	0758      	lsls	r0, r3, #29
 800890a:	d512      	bpl.n	8008932 <__swsetup_r+0x7a>
 800890c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800890e:	b141      	cbz	r1, 8008922 <__swsetup_r+0x6a>
 8008910:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008914:	4299      	cmp	r1, r3
 8008916:	d002      	beq.n	800891e <__swsetup_r+0x66>
 8008918:	4630      	mov	r0, r6
 800891a:	f7ff f8fb 	bl	8007b14 <_free_r>
 800891e:	2300      	movs	r3, #0
 8008920:	6363      	str	r3, [r4, #52]	; 0x34
 8008922:	89a3      	ldrh	r3, [r4, #12]
 8008924:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008928:	81a3      	strh	r3, [r4, #12]
 800892a:	2300      	movs	r3, #0
 800892c:	6063      	str	r3, [r4, #4]
 800892e:	6923      	ldr	r3, [r4, #16]
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	89a3      	ldrh	r3, [r4, #12]
 8008934:	f043 0308 	orr.w	r3, r3, #8
 8008938:	81a3      	strh	r3, [r4, #12]
 800893a:	6923      	ldr	r3, [r4, #16]
 800893c:	b94b      	cbnz	r3, 8008952 <__swsetup_r+0x9a>
 800893e:	89a3      	ldrh	r3, [r4, #12]
 8008940:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008948:	d003      	beq.n	8008952 <__swsetup_r+0x9a>
 800894a:	4621      	mov	r1, r4
 800894c:	4630      	mov	r0, r6
 800894e:	f000 ff17 	bl	8009780 <__smakebuf_r>
 8008952:	89a0      	ldrh	r0, [r4, #12]
 8008954:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008958:	f010 0301 	ands.w	r3, r0, #1
 800895c:	d00a      	beq.n	8008974 <__swsetup_r+0xbc>
 800895e:	2300      	movs	r3, #0
 8008960:	60a3      	str	r3, [r4, #8]
 8008962:	6963      	ldr	r3, [r4, #20]
 8008964:	425b      	negs	r3, r3
 8008966:	61a3      	str	r3, [r4, #24]
 8008968:	6923      	ldr	r3, [r4, #16]
 800896a:	b943      	cbnz	r3, 800897e <__swsetup_r+0xc6>
 800896c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008970:	d1ba      	bne.n	80088e8 <__swsetup_r+0x30>
 8008972:	bd70      	pop	{r4, r5, r6, pc}
 8008974:	0781      	lsls	r1, r0, #30
 8008976:	bf58      	it	pl
 8008978:	6963      	ldrpl	r3, [r4, #20]
 800897a:	60a3      	str	r3, [r4, #8]
 800897c:	e7f4      	b.n	8008968 <__swsetup_r+0xb0>
 800897e:	2000      	movs	r0, #0
 8008980:	e7f7      	b.n	8008972 <__swsetup_r+0xba>
 8008982:	bf00      	nop
 8008984:	20000724 	.word	0x20000724
 8008988:	0800e058 	.word	0x0800e058
 800898c:	0800e078 	.word	0x0800e078
 8008990:	0800e038 	.word	0x0800e038

08008994 <__assert_func>:
 8008994:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008996:	4614      	mov	r4, r2
 8008998:	461a      	mov	r2, r3
 800899a:	4b09      	ldr	r3, [pc, #36]	; (80089c0 <__assert_func+0x2c>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4605      	mov	r5, r0
 80089a0:	68d8      	ldr	r0, [r3, #12]
 80089a2:	b14c      	cbz	r4, 80089b8 <__assert_func+0x24>
 80089a4:	4b07      	ldr	r3, [pc, #28]	; (80089c4 <__assert_func+0x30>)
 80089a6:	9100      	str	r1, [sp, #0]
 80089a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80089ac:	4906      	ldr	r1, [pc, #24]	; (80089c8 <__assert_func+0x34>)
 80089ae:	462b      	mov	r3, r5
 80089b0:	f000 fe98 	bl	80096e4 <fiprintf>
 80089b4:	f001 fc36 	bl	800a224 <abort>
 80089b8:	4b04      	ldr	r3, [pc, #16]	; (80089cc <__assert_func+0x38>)
 80089ba:	461c      	mov	r4, r3
 80089bc:	e7f3      	b.n	80089a6 <__assert_func+0x12>
 80089be:	bf00      	nop
 80089c0:	20000724 	.word	0x20000724
 80089c4:	0800e140 	.word	0x0800e140
 80089c8:	0800e14d 	.word	0x0800e14d
 80089cc:	0800a7cd 	.word	0x0800a7cd

080089d0 <_close_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	4d06      	ldr	r5, [pc, #24]	; (80089ec <_close_r+0x1c>)
 80089d4:	2300      	movs	r3, #0
 80089d6:	4604      	mov	r4, r0
 80089d8:	4608      	mov	r0, r1
 80089da:	602b      	str	r3, [r5, #0]
 80089dc:	f001 fde4 	bl	800a5a8 <_close>
 80089e0:	1c43      	adds	r3, r0, #1
 80089e2:	d102      	bne.n	80089ea <_close_r+0x1a>
 80089e4:	682b      	ldr	r3, [r5, #0]
 80089e6:	b103      	cbz	r3, 80089ea <_close_r+0x1a>
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	bd38      	pop	{r3, r4, r5, pc}
 80089ec:	20001a80 	.word	0x20001a80

080089f0 <quorem>:
 80089f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f4:	6903      	ldr	r3, [r0, #16]
 80089f6:	690c      	ldr	r4, [r1, #16]
 80089f8:	42a3      	cmp	r3, r4
 80089fa:	4607      	mov	r7, r0
 80089fc:	f2c0 8081 	blt.w	8008b02 <quorem+0x112>
 8008a00:	3c01      	subs	r4, #1
 8008a02:	f101 0814 	add.w	r8, r1, #20
 8008a06:	f100 0514 	add.w	r5, r0, #20
 8008a0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a0e:	9301      	str	r3, [sp, #4]
 8008a10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a24:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a28:	d331      	bcc.n	8008a8e <quorem+0x9e>
 8008a2a:	f04f 0e00 	mov.w	lr, #0
 8008a2e:	4640      	mov	r0, r8
 8008a30:	46ac      	mov	ip, r5
 8008a32:	46f2      	mov	sl, lr
 8008a34:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a38:	b293      	uxth	r3, r2
 8008a3a:	fb06 e303 	mla	r3, r6, r3, lr
 8008a3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	ebaa 0303 	sub.w	r3, sl, r3
 8008a48:	f8dc a000 	ldr.w	sl, [ip]
 8008a4c:	0c12      	lsrs	r2, r2, #16
 8008a4e:	fa13 f38a 	uxtah	r3, r3, sl
 8008a52:	fb06 e202 	mla	r2, r6, r2, lr
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	9b00      	ldr	r3, [sp, #0]
 8008a5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a5e:	b292      	uxth	r2, r2
 8008a60:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008a64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a68:	f8bd 3000 	ldrh.w	r3, [sp]
 8008a6c:	4581      	cmp	r9, r0
 8008a6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a72:	f84c 3b04 	str.w	r3, [ip], #4
 8008a76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a7a:	d2db      	bcs.n	8008a34 <quorem+0x44>
 8008a7c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a80:	b92b      	cbnz	r3, 8008a8e <quorem+0x9e>
 8008a82:	9b01      	ldr	r3, [sp, #4]
 8008a84:	3b04      	subs	r3, #4
 8008a86:	429d      	cmp	r5, r3
 8008a88:	461a      	mov	r2, r3
 8008a8a:	d32e      	bcc.n	8008aea <quorem+0xfa>
 8008a8c:	613c      	str	r4, [r7, #16]
 8008a8e:	4638      	mov	r0, r7
 8008a90:	f001 f944 	bl	8009d1c <__mcmp>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	db24      	blt.n	8008ae2 <quorem+0xf2>
 8008a98:	3601      	adds	r6, #1
 8008a9a:	4628      	mov	r0, r5
 8008a9c:	f04f 0c00 	mov.w	ip, #0
 8008aa0:	f858 2b04 	ldr.w	r2, [r8], #4
 8008aa4:	f8d0 e000 	ldr.w	lr, [r0]
 8008aa8:	b293      	uxth	r3, r2
 8008aaa:	ebac 0303 	sub.w	r3, ip, r3
 8008aae:	0c12      	lsrs	r2, r2, #16
 8008ab0:	fa13 f38e 	uxtah	r3, r3, lr
 8008ab4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008ab8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ac2:	45c1      	cmp	r9, r8
 8008ac4:	f840 3b04 	str.w	r3, [r0], #4
 8008ac8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008acc:	d2e8      	bcs.n	8008aa0 <quorem+0xb0>
 8008ace:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ad2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ad6:	b922      	cbnz	r2, 8008ae2 <quorem+0xf2>
 8008ad8:	3b04      	subs	r3, #4
 8008ada:	429d      	cmp	r5, r3
 8008adc:	461a      	mov	r2, r3
 8008ade:	d30a      	bcc.n	8008af6 <quorem+0x106>
 8008ae0:	613c      	str	r4, [r7, #16]
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	b003      	add	sp, #12
 8008ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aea:	6812      	ldr	r2, [r2, #0]
 8008aec:	3b04      	subs	r3, #4
 8008aee:	2a00      	cmp	r2, #0
 8008af0:	d1cc      	bne.n	8008a8c <quorem+0x9c>
 8008af2:	3c01      	subs	r4, #1
 8008af4:	e7c7      	b.n	8008a86 <quorem+0x96>
 8008af6:	6812      	ldr	r2, [r2, #0]
 8008af8:	3b04      	subs	r3, #4
 8008afa:	2a00      	cmp	r2, #0
 8008afc:	d1f0      	bne.n	8008ae0 <quorem+0xf0>
 8008afe:	3c01      	subs	r4, #1
 8008b00:	e7eb      	b.n	8008ada <quorem+0xea>
 8008b02:	2000      	movs	r0, #0
 8008b04:	e7ee      	b.n	8008ae4 <quorem+0xf4>
	...

08008b08 <_dtoa_r>:
 8008b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b0c:	ed2d 8b04 	vpush	{d8-d9}
 8008b10:	ec57 6b10 	vmov	r6, r7, d0
 8008b14:	b093      	sub	sp, #76	; 0x4c
 8008b16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b1c:	9106      	str	r1, [sp, #24]
 8008b1e:	ee10 aa10 	vmov	sl, s0
 8008b22:	4604      	mov	r4, r0
 8008b24:	9209      	str	r2, [sp, #36]	; 0x24
 8008b26:	930c      	str	r3, [sp, #48]	; 0x30
 8008b28:	46bb      	mov	fp, r7
 8008b2a:	b975      	cbnz	r5, 8008b4a <_dtoa_r+0x42>
 8008b2c:	2010      	movs	r0, #16
 8008b2e:	f7fa fe9b 	bl	8003868 <__wrap_malloc>
 8008b32:	4602      	mov	r2, r0
 8008b34:	6260      	str	r0, [r4, #36]	; 0x24
 8008b36:	b920      	cbnz	r0, 8008b42 <_dtoa_r+0x3a>
 8008b38:	4ba7      	ldr	r3, [pc, #668]	; (8008dd8 <_dtoa_r+0x2d0>)
 8008b3a:	21ea      	movs	r1, #234	; 0xea
 8008b3c:	48a7      	ldr	r0, [pc, #668]	; (8008ddc <_dtoa_r+0x2d4>)
 8008b3e:	f7ff ff29 	bl	8008994 <__assert_func>
 8008b42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b46:	6005      	str	r5, [r0, #0]
 8008b48:	60c5      	str	r5, [r0, #12]
 8008b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b4c:	6819      	ldr	r1, [r3, #0]
 8008b4e:	b151      	cbz	r1, 8008b66 <_dtoa_r+0x5e>
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	604a      	str	r2, [r1, #4]
 8008b54:	2301      	movs	r3, #1
 8008b56:	4093      	lsls	r3, r2
 8008b58:	608b      	str	r3, [r1, #8]
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f000 fe9c 	bl	8009898 <_Bfree>
 8008b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b62:	2200      	movs	r2, #0
 8008b64:	601a      	str	r2, [r3, #0]
 8008b66:	1e3b      	subs	r3, r7, #0
 8008b68:	bfaa      	itet	ge
 8008b6a:	2300      	movge	r3, #0
 8008b6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008b70:	f8c8 3000 	strge.w	r3, [r8]
 8008b74:	4b9a      	ldr	r3, [pc, #616]	; (8008de0 <_dtoa_r+0x2d8>)
 8008b76:	bfbc      	itt	lt
 8008b78:	2201      	movlt	r2, #1
 8008b7a:	f8c8 2000 	strlt.w	r2, [r8]
 8008b7e:	ea33 030b 	bics.w	r3, r3, fp
 8008b82:	d11b      	bne.n	8008bbc <_dtoa_r+0xb4>
 8008b84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b86:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b8a:	6013      	str	r3, [r2, #0]
 8008b8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b90:	4333      	orrs	r3, r6
 8008b92:	f000 8592 	beq.w	80096ba <_dtoa_r+0xbb2>
 8008b96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b98:	b963      	cbnz	r3, 8008bb4 <_dtoa_r+0xac>
 8008b9a:	4b92      	ldr	r3, [pc, #584]	; (8008de4 <_dtoa_r+0x2dc>)
 8008b9c:	e022      	b.n	8008be4 <_dtoa_r+0xdc>
 8008b9e:	4b92      	ldr	r3, [pc, #584]	; (8008de8 <_dtoa_r+0x2e0>)
 8008ba0:	9301      	str	r3, [sp, #4]
 8008ba2:	3308      	adds	r3, #8
 8008ba4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ba6:	6013      	str	r3, [r2, #0]
 8008ba8:	9801      	ldr	r0, [sp, #4]
 8008baa:	b013      	add	sp, #76	; 0x4c
 8008bac:	ecbd 8b04 	vpop	{d8-d9}
 8008bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb4:	4b8b      	ldr	r3, [pc, #556]	; (8008de4 <_dtoa_r+0x2dc>)
 8008bb6:	9301      	str	r3, [sp, #4]
 8008bb8:	3303      	adds	r3, #3
 8008bba:	e7f3      	b.n	8008ba4 <_dtoa_r+0x9c>
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	4650      	mov	r0, sl
 8008bc2:	4659      	mov	r1, fp
 8008bc4:	f7f7 ff80 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bc8:	ec4b ab19 	vmov	d9, sl, fp
 8008bcc:	4680      	mov	r8, r0
 8008bce:	b158      	cbz	r0, 8008be8 <_dtoa_r+0xe0>
 8008bd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	6013      	str	r3, [r2, #0]
 8008bd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 856b 	beq.w	80096b4 <_dtoa_r+0xbac>
 8008bde:	4883      	ldr	r0, [pc, #524]	; (8008dec <_dtoa_r+0x2e4>)
 8008be0:	6018      	str	r0, [r3, #0]
 8008be2:	1e43      	subs	r3, r0, #1
 8008be4:	9301      	str	r3, [sp, #4]
 8008be6:	e7df      	b.n	8008ba8 <_dtoa_r+0xa0>
 8008be8:	ec4b ab10 	vmov	d0, sl, fp
 8008bec:	aa10      	add	r2, sp, #64	; 0x40
 8008bee:	a911      	add	r1, sp, #68	; 0x44
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f001 f939 	bl	8009e68 <__d2b>
 8008bf6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008bfa:	ee08 0a10 	vmov	s16, r0
 8008bfe:	2d00      	cmp	r5, #0
 8008c00:	f000 8084 	beq.w	8008d0c <_dtoa_r+0x204>
 8008c04:	ee19 3a90 	vmov	r3, s19
 8008c08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008c10:	4656      	mov	r6, sl
 8008c12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008c16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008c1e:	4b74      	ldr	r3, [pc, #464]	; (8008df0 <_dtoa_r+0x2e8>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	4630      	mov	r0, r6
 8008c24:	4639      	mov	r1, r7
 8008c26:	f7f7 fb2f 	bl	8000288 <__aeabi_dsub>
 8008c2a:	a365      	add	r3, pc, #404	; (adr r3, 8008dc0 <_dtoa_r+0x2b8>)
 8008c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c30:	f7f7 fce2 	bl	80005f8 <__aeabi_dmul>
 8008c34:	a364      	add	r3, pc, #400	; (adr r3, 8008dc8 <_dtoa_r+0x2c0>)
 8008c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3a:	f7f7 fb27 	bl	800028c <__adddf3>
 8008c3e:	4606      	mov	r6, r0
 8008c40:	4628      	mov	r0, r5
 8008c42:	460f      	mov	r7, r1
 8008c44:	f7f7 fc6e 	bl	8000524 <__aeabi_i2d>
 8008c48:	a361      	add	r3, pc, #388	; (adr r3, 8008dd0 <_dtoa_r+0x2c8>)
 8008c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4e:	f7f7 fcd3 	bl	80005f8 <__aeabi_dmul>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	4630      	mov	r0, r6
 8008c58:	4639      	mov	r1, r7
 8008c5a:	f7f7 fb17 	bl	800028c <__adddf3>
 8008c5e:	4606      	mov	r6, r0
 8008c60:	460f      	mov	r7, r1
 8008c62:	f7f7 ff79 	bl	8000b58 <__aeabi_d2iz>
 8008c66:	2200      	movs	r2, #0
 8008c68:	9000      	str	r0, [sp, #0]
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	4639      	mov	r1, r7
 8008c70:	f7f7 ff34 	bl	8000adc <__aeabi_dcmplt>
 8008c74:	b150      	cbz	r0, 8008c8c <_dtoa_r+0x184>
 8008c76:	9800      	ldr	r0, [sp, #0]
 8008c78:	f7f7 fc54 	bl	8000524 <__aeabi_i2d>
 8008c7c:	4632      	mov	r2, r6
 8008c7e:	463b      	mov	r3, r7
 8008c80:	f7f7 ff22 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c84:	b910      	cbnz	r0, 8008c8c <_dtoa_r+0x184>
 8008c86:	9b00      	ldr	r3, [sp, #0]
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	9b00      	ldr	r3, [sp, #0]
 8008c8e:	2b16      	cmp	r3, #22
 8008c90:	d85a      	bhi.n	8008d48 <_dtoa_r+0x240>
 8008c92:	9a00      	ldr	r2, [sp, #0]
 8008c94:	4b57      	ldr	r3, [pc, #348]	; (8008df4 <_dtoa_r+0x2ec>)
 8008c96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9e:	ec51 0b19 	vmov	r0, r1, d9
 8008ca2:	f7f7 ff1b 	bl	8000adc <__aeabi_dcmplt>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d050      	beq.n	8008d4c <_dtoa_r+0x244>
 8008caa:	9b00      	ldr	r3, [sp, #0]
 8008cac:	3b01      	subs	r3, #1
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008cb6:	1b5d      	subs	r5, r3, r5
 8008cb8:	1e6b      	subs	r3, r5, #1
 8008cba:	9305      	str	r3, [sp, #20]
 8008cbc:	bf45      	ittet	mi
 8008cbe:	f1c5 0301 	rsbmi	r3, r5, #1
 8008cc2:	9304      	strmi	r3, [sp, #16]
 8008cc4:	2300      	movpl	r3, #0
 8008cc6:	2300      	movmi	r3, #0
 8008cc8:	bf4c      	ite	mi
 8008cca:	9305      	strmi	r3, [sp, #20]
 8008ccc:	9304      	strpl	r3, [sp, #16]
 8008cce:	9b00      	ldr	r3, [sp, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	db3d      	blt.n	8008d50 <_dtoa_r+0x248>
 8008cd4:	9b05      	ldr	r3, [sp, #20]
 8008cd6:	9a00      	ldr	r2, [sp, #0]
 8008cd8:	920a      	str	r2, [sp, #40]	; 0x28
 8008cda:	4413      	add	r3, r2
 8008cdc:	9305      	str	r3, [sp, #20]
 8008cde:	2300      	movs	r3, #0
 8008ce0:	9307      	str	r3, [sp, #28]
 8008ce2:	9b06      	ldr	r3, [sp, #24]
 8008ce4:	2b09      	cmp	r3, #9
 8008ce6:	f200 8089 	bhi.w	8008dfc <_dtoa_r+0x2f4>
 8008cea:	2b05      	cmp	r3, #5
 8008cec:	bfc4      	itt	gt
 8008cee:	3b04      	subgt	r3, #4
 8008cf0:	9306      	strgt	r3, [sp, #24]
 8008cf2:	9b06      	ldr	r3, [sp, #24]
 8008cf4:	f1a3 0302 	sub.w	r3, r3, #2
 8008cf8:	bfcc      	ite	gt
 8008cfa:	2500      	movgt	r5, #0
 8008cfc:	2501      	movle	r5, #1
 8008cfe:	2b03      	cmp	r3, #3
 8008d00:	f200 8087 	bhi.w	8008e12 <_dtoa_r+0x30a>
 8008d04:	e8df f003 	tbb	[pc, r3]
 8008d08:	59383a2d 	.word	0x59383a2d
 8008d0c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008d10:	441d      	add	r5, r3
 8008d12:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008d16:	2b20      	cmp	r3, #32
 8008d18:	bfc1      	itttt	gt
 8008d1a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d1e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008d22:	fa0b f303 	lslgt.w	r3, fp, r3
 8008d26:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008d2a:	bfda      	itte	le
 8008d2c:	f1c3 0320 	rsble	r3, r3, #32
 8008d30:	fa06 f003 	lslle.w	r0, r6, r3
 8008d34:	4318      	orrgt	r0, r3
 8008d36:	f7f7 fbe5 	bl	8000504 <__aeabi_ui2d>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	4606      	mov	r6, r0
 8008d3e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008d42:	3d01      	subs	r5, #1
 8008d44:	930e      	str	r3, [sp, #56]	; 0x38
 8008d46:	e76a      	b.n	8008c1e <_dtoa_r+0x116>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e7b2      	b.n	8008cb2 <_dtoa_r+0x1aa>
 8008d4c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008d4e:	e7b1      	b.n	8008cb4 <_dtoa_r+0x1ac>
 8008d50:	9b04      	ldr	r3, [sp, #16]
 8008d52:	9a00      	ldr	r2, [sp, #0]
 8008d54:	1a9b      	subs	r3, r3, r2
 8008d56:	9304      	str	r3, [sp, #16]
 8008d58:	4253      	negs	r3, r2
 8008d5a:	9307      	str	r3, [sp, #28]
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8008d60:	e7bf      	b.n	8008ce2 <_dtoa_r+0x1da>
 8008d62:	2300      	movs	r3, #0
 8008d64:	9308      	str	r3, [sp, #32]
 8008d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	dc55      	bgt.n	8008e18 <_dtoa_r+0x310>
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d72:	461a      	mov	r2, r3
 8008d74:	9209      	str	r2, [sp, #36]	; 0x24
 8008d76:	e00c      	b.n	8008d92 <_dtoa_r+0x28a>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e7f3      	b.n	8008d64 <_dtoa_r+0x25c>
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d80:	9308      	str	r3, [sp, #32]
 8008d82:	9b00      	ldr	r3, [sp, #0]
 8008d84:	4413      	add	r3, r2
 8008d86:	9302      	str	r3, [sp, #8]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	9303      	str	r3, [sp, #12]
 8008d8e:	bfb8      	it	lt
 8008d90:	2301      	movlt	r3, #1
 8008d92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008d94:	2200      	movs	r2, #0
 8008d96:	6042      	str	r2, [r0, #4]
 8008d98:	2204      	movs	r2, #4
 8008d9a:	f102 0614 	add.w	r6, r2, #20
 8008d9e:	429e      	cmp	r6, r3
 8008da0:	6841      	ldr	r1, [r0, #4]
 8008da2:	d93d      	bls.n	8008e20 <_dtoa_r+0x318>
 8008da4:	4620      	mov	r0, r4
 8008da6:	f000 fd37 	bl	8009818 <_Balloc>
 8008daa:	9001      	str	r0, [sp, #4]
 8008dac:	2800      	cmp	r0, #0
 8008dae:	d13b      	bne.n	8008e28 <_dtoa_r+0x320>
 8008db0:	4b11      	ldr	r3, [pc, #68]	; (8008df8 <_dtoa_r+0x2f0>)
 8008db2:	4602      	mov	r2, r0
 8008db4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008db8:	e6c0      	b.n	8008b3c <_dtoa_r+0x34>
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e7df      	b.n	8008d7e <_dtoa_r+0x276>
 8008dbe:	bf00      	nop
 8008dc0:	636f4361 	.word	0x636f4361
 8008dc4:	3fd287a7 	.word	0x3fd287a7
 8008dc8:	8b60c8b3 	.word	0x8b60c8b3
 8008dcc:	3fc68a28 	.word	0x3fc68a28
 8008dd0:	509f79fb 	.word	0x509f79fb
 8008dd4:	3fd34413 	.word	0x3fd34413
 8008dd8:	0800e0ce 	.word	0x0800e0ce
 8008ddc:	0800e189 	.word	0x0800e189
 8008de0:	7ff00000 	.word	0x7ff00000
 8008de4:	0800e185 	.word	0x0800e185
 8008de8:	0800e17c 	.word	0x0800e17c
 8008dec:	0800ad95 	.word	0x0800ad95
 8008df0:	3ff80000 	.word	0x3ff80000
 8008df4:	0800e280 	.word	0x0800e280
 8008df8:	0800e1e4 	.word	0x0800e1e4
 8008dfc:	2501      	movs	r5, #1
 8008dfe:	2300      	movs	r3, #0
 8008e00:	9306      	str	r3, [sp, #24]
 8008e02:	9508      	str	r5, [sp, #32]
 8008e04:	f04f 33ff 	mov.w	r3, #4294967295
 8008e08:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	2312      	movs	r3, #18
 8008e10:	e7b0      	b.n	8008d74 <_dtoa_r+0x26c>
 8008e12:	2301      	movs	r3, #1
 8008e14:	9308      	str	r3, [sp, #32]
 8008e16:	e7f5      	b.n	8008e04 <_dtoa_r+0x2fc>
 8008e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e1e:	e7b8      	b.n	8008d92 <_dtoa_r+0x28a>
 8008e20:	3101      	adds	r1, #1
 8008e22:	6041      	str	r1, [r0, #4]
 8008e24:	0052      	lsls	r2, r2, #1
 8008e26:	e7b8      	b.n	8008d9a <_dtoa_r+0x292>
 8008e28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e2a:	9a01      	ldr	r2, [sp, #4]
 8008e2c:	601a      	str	r2, [r3, #0]
 8008e2e:	9b03      	ldr	r3, [sp, #12]
 8008e30:	2b0e      	cmp	r3, #14
 8008e32:	f200 809d 	bhi.w	8008f70 <_dtoa_r+0x468>
 8008e36:	2d00      	cmp	r5, #0
 8008e38:	f000 809a 	beq.w	8008f70 <_dtoa_r+0x468>
 8008e3c:	9b00      	ldr	r3, [sp, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	dd32      	ble.n	8008ea8 <_dtoa_r+0x3a0>
 8008e42:	4ab7      	ldr	r2, [pc, #732]	; (8009120 <_dtoa_r+0x618>)
 8008e44:	f003 030f 	and.w	r3, r3, #15
 8008e48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008e4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e50:	9b00      	ldr	r3, [sp, #0]
 8008e52:	05d8      	lsls	r0, r3, #23
 8008e54:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008e58:	d516      	bpl.n	8008e88 <_dtoa_r+0x380>
 8008e5a:	4bb2      	ldr	r3, [pc, #712]	; (8009124 <_dtoa_r+0x61c>)
 8008e5c:	ec51 0b19 	vmov	r0, r1, d9
 8008e60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e64:	f7f7 fcf2 	bl	800084c <__aeabi_ddiv>
 8008e68:	f007 070f 	and.w	r7, r7, #15
 8008e6c:	4682      	mov	sl, r0
 8008e6e:	468b      	mov	fp, r1
 8008e70:	2503      	movs	r5, #3
 8008e72:	4eac      	ldr	r6, [pc, #688]	; (8009124 <_dtoa_r+0x61c>)
 8008e74:	b957      	cbnz	r7, 8008e8c <_dtoa_r+0x384>
 8008e76:	4642      	mov	r2, r8
 8008e78:	464b      	mov	r3, r9
 8008e7a:	4650      	mov	r0, sl
 8008e7c:	4659      	mov	r1, fp
 8008e7e:	f7f7 fce5 	bl	800084c <__aeabi_ddiv>
 8008e82:	4682      	mov	sl, r0
 8008e84:	468b      	mov	fp, r1
 8008e86:	e028      	b.n	8008eda <_dtoa_r+0x3d2>
 8008e88:	2502      	movs	r5, #2
 8008e8a:	e7f2      	b.n	8008e72 <_dtoa_r+0x36a>
 8008e8c:	07f9      	lsls	r1, r7, #31
 8008e8e:	d508      	bpl.n	8008ea2 <_dtoa_r+0x39a>
 8008e90:	4640      	mov	r0, r8
 8008e92:	4649      	mov	r1, r9
 8008e94:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e98:	f7f7 fbae 	bl	80005f8 <__aeabi_dmul>
 8008e9c:	3501      	adds	r5, #1
 8008e9e:	4680      	mov	r8, r0
 8008ea0:	4689      	mov	r9, r1
 8008ea2:	107f      	asrs	r7, r7, #1
 8008ea4:	3608      	adds	r6, #8
 8008ea6:	e7e5      	b.n	8008e74 <_dtoa_r+0x36c>
 8008ea8:	f000 809b 	beq.w	8008fe2 <_dtoa_r+0x4da>
 8008eac:	9b00      	ldr	r3, [sp, #0]
 8008eae:	4f9d      	ldr	r7, [pc, #628]	; (8009124 <_dtoa_r+0x61c>)
 8008eb0:	425e      	negs	r6, r3
 8008eb2:	4b9b      	ldr	r3, [pc, #620]	; (8009120 <_dtoa_r+0x618>)
 8008eb4:	f006 020f 	and.w	r2, r6, #15
 8008eb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec0:	ec51 0b19 	vmov	r0, r1, d9
 8008ec4:	f7f7 fb98 	bl	80005f8 <__aeabi_dmul>
 8008ec8:	1136      	asrs	r6, r6, #4
 8008eca:	4682      	mov	sl, r0
 8008ecc:	468b      	mov	fp, r1
 8008ece:	2300      	movs	r3, #0
 8008ed0:	2502      	movs	r5, #2
 8008ed2:	2e00      	cmp	r6, #0
 8008ed4:	d17a      	bne.n	8008fcc <_dtoa_r+0x4c4>
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1d3      	bne.n	8008e82 <_dtoa_r+0x37a>
 8008eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f000 8082 	beq.w	8008fe6 <_dtoa_r+0x4de>
 8008ee2:	4b91      	ldr	r3, [pc, #580]	; (8009128 <_dtoa_r+0x620>)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	4650      	mov	r0, sl
 8008ee8:	4659      	mov	r1, fp
 8008eea:	f7f7 fdf7 	bl	8000adc <__aeabi_dcmplt>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d079      	beq.n	8008fe6 <_dtoa_r+0x4de>
 8008ef2:	9b03      	ldr	r3, [sp, #12]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d076      	beq.n	8008fe6 <_dtoa_r+0x4de>
 8008ef8:	9b02      	ldr	r3, [sp, #8]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	dd36      	ble.n	8008f6c <_dtoa_r+0x464>
 8008efe:	9b00      	ldr	r3, [sp, #0]
 8008f00:	4650      	mov	r0, sl
 8008f02:	4659      	mov	r1, fp
 8008f04:	1e5f      	subs	r7, r3, #1
 8008f06:	2200      	movs	r2, #0
 8008f08:	4b88      	ldr	r3, [pc, #544]	; (800912c <_dtoa_r+0x624>)
 8008f0a:	f7f7 fb75 	bl	80005f8 <__aeabi_dmul>
 8008f0e:	9e02      	ldr	r6, [sp, #8]
 8008f10:	4682      	mov	sl, r0
 8008f12:	468b      	mov	fp, r1
 8008f14:	3501      	adds	r5, #1
 8008f16:	4628      	mov	r0, r5
 8008f18:	f7f7 fb04 	bl	8000524 <__aeabi_i2d>
 8008f1c:	4652      	mov	r2, sl
 8008f1e:	465b      	mov	r3, fp
 8008f20:	f7f7 fb6a 	bl	80005f8 <__aeabi_dmul>
 8008f24:	4b82      	ldr	r3, [pc, #520]	; (8009130 <_dtoa_r+0x628>)
 8008f26:	2200      	movs	r2, #0
 8008f28:	f7f7 f9b0 	bl	800028c <__adddf3>
 8008f2c:	46d0      	mov	r8, sl
 8008f2e:	46d9      	mov	r9, fp
 8008f30:	4682      	mov	sl, r0
 8008f32:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008f36:	2e00      	cmp	r6, #0
 8008f38:	d158      	bne.n	8008fec <_dtoa_r+0x4e4>
 8008f3a:	4b7e      	ldr	r3, [pc, #504]	; (8009134 <_dtoa_r+0x62c>)
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	4640      	mov	r0, r8
 8008f40:	4649      	mov	r1, r9
 8008f42:	f7f7 f9a1 	bl	8000288 <__aeabi_dsub>
 8008f46:	4652      	mov	r2, sl
 8008f48:	465b      	mov	r3, fp
 8008f4a:	4680      	mov	r8, r0
 8008f4c:	4689      	mov	r9, r1
 8008f4e:	f7f7 fde3 	bl	8000b18 <__aeabi_dcmpgt>
 8008f52:	2800      	cmp	r0, #0
 8008f54:	f040 8295 	bne.w	8009482 <_dtoa_r+0x97a>
 8008f58:	4652      	mov	r2, sl
 8008f5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008f5e:	4640      	mov	r0, r8
 8008f60:	4649      	mov	r1, r9
 8008f62:	f7f7 fdbb 	bl	8000adc <__aeabi_dcmplt>
 8008f66:	2800      	cmp	r0, #0
 8008f68:	f040 8289 	bne.w	800947e <_dtoa_r+0x976>
 8008f6c:	ec5b ab19 	vmov	sl, fp, d9
 8008f70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f2c0 8148 	blt.w	8009208 <_dtoa_r+0x700>
 8008f78:	9a00      	ldr	r2, [sp, #0]
 8008f7a:	2a0e      	cmp	r2, #14
 8008f7c:	f300 8144 	bgt.w	8009208 <_dtoa_r+0x700>
 8008f80:	4b67      	ldr	r3, [pc, #412]	; (8009120 <_dtoa_r+0x618>)
 8008f82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f280 80d5 	bge.w	800913c <_dtoa_r+0x634>
 8008f92:	9b03      	ldr	r3, [sp, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f300 80d1 	bgt.w	800913c <_dtoa_r+0x634>
 8008f9a:	f040 826f 	bne.w	800947c <_dtoa_r+0x974>
 8008f9e:	4b65      	ldr	r3, [pc, #404]	; (8009134 <_dtoa_r+0x62c>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	4640      	mov	r0, r8
 8008fa4:	4649      	mov	r1, r9
 8008fa6:	f7f7 fb27 	bl	80005f8 <__aeabi_dmul>
 8008faa:	4652      	mov	r2, sl
 8008fac:	465b      	mov	r3, fp
 8008fae:	f7f7 fda9 	bl	8000b04 <__aeabi_dcmpge>
 8008fb2:	9e03      	ldr	r6, [sp, #12]
 8008fb4:	4637      	mov	r7, r6
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	f040 8245 	bne.w	8009446 <_dtoa_r+0x93e>
 8008fbc:	9d01      	ldr	r5, [sp, #4]
 8008fbe:	2331      	movs	r3, #49	; 0x31
 8008fc0:	f805 3b01 	strb.w	r3, [r5], #1
 8008fc4:	9b00      	ldr	r3, [sp, #0]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	9300      	str	r3, [sp, #0]
 8008fca:	e240      	b.n	800944e <_dtoa_r+0x946>
 8008fcc:	07f2      	lsls	r2, r6, #31
 8008fce:	d505      	bpl.n	8008fdc <_dtoa_r+0x4d4>
 8008fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fd4:	f7f7 fb10 	bl	80005f8 <__aeabi_dmul>
 8008fd8:	3501      	adds	r5, #1
 8008fda:	2301      	movs	r3, #1
 8008fdc:	1076      	asrs	r6, r6, #1
 8008fde:	3708      	adds	r7, #8
 8008fe0:	e777      	b.n	8008ed2 <_dtoa_r+0x3ca>
 8008fe2:	2502      	movs	r5, #2
 8008fe4:	e779      	b.n	8008eda <_dtoa_r+0x3d2>
 8008fe6:	9f00      	ldr	r7, [sp, #0]
 8008fe8:	9e03      	ldr	r6, [sp, #12]
 8008fea:	e794      	b.n	8008f16 <_dtoa_r+0x40e>
 8008fec:	9901      	ldr	r1, [sp, #4]
 8008fee:	4b4c      	ldr	r3, [pc, #304]	; (8009120 <_dtoa_r+0x618>)
 8008ff0:	4431      	add	r1, r6
 8008ff2:	910d      	str	r1, [sp, #52]	; 0x34
 8008ff4:	9908      	ldr	r1, [sp, #32]
 8008ff6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008ffa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ffe:	2900      	cmp	r1, #0
 8009000:	d043      	beq.n	800908a <_dtoa_r+0x582>
 8009002:	494d      	ldr	r1, [pc, #308]	; (8009138 <_dtoa_r+0x630>)
 8009004:	2000      	movs	r0, #0
 8009006:	f7f7 fc21 	bl	800084c <__aeabi_ddiv>
 800900a:	4652      	mov	r2, sl
 800900c:	465b      	mov	r3, fp
 800900e:	f7f7 f93b 	bl	8000288 <__aeabi_dsub>
 8009012:	9d01      	ldr	r5, [sp, #4]
 8009014:	4682      	mov	sl, r0
 8009016:	468b      	mov	fp, r1
 8009018:	4649      	mov	r1, r9
 800901a:	4640      	mov	r0, r8
 800901c:	f7f7 fd9c 	bl	8000b58 <__aeabi_d2iz>
 8009020:	4606      	mov	r6, r0
 8009022:	f7f7 fa7f 	bl	8000524 <__aeabi_i2d>
 8009026:	4602      	mov	r2, r0
 8009028:	460b      	mov	r3, r1
 800902a:	4640      	mov	r0, r8
 800902c:	4649      	mov	r1, r9
 800902e:	f7f7 f92b 	bl	8000288 <__aeabi_dsub>
 8009032:	3630      	adds	r6, #48	; 0x30
 8009034:	f805 6b01 	strb.w	r6, [r5], #1
 8009038:	4652      	mov	r2, sl
 800903a:	465b      	mov	r3, fp
 800903c:	4680      	mov	r8, r0
 800903e:	4689      	mov	r9, r1
 8009040:	f7f7 fd4c 	bl	8000adc <__aeabi_dcmplt>
 8009044:	2800      	cmp	r0, #0
 8009046:	d163      	bne.n	8009110 <_dtoa_r+0x608>
 8009048:	4642      	mov	r2, r8
 800904a:	464b      	mov	r3, r9
 800904c:	4936      	ldr	r1, [pc, #216]	; (8009128 <_dtoa_r+0x620>)
 800904e:	2000      	movs	r0, #0
 8009050:	f7f7 f91a 	bl	8000288 <__aeabi_dsub>
 8009054:	4652      	mov	r2, sl
 8009056:	465b      	mov	r3, fp
 8009058:	f7f7 fd40 	bl	8000adc <__aeabi_dcmplt>
 800905c:	2800      	cmp	r0, #0
 800905e:	f040 80b5 	bne.w	80091cc <_dtoa_r+0x6c4>
 8009062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009064:	429d      	cmp	r5, r3
 8009066:	d081      	beq.n	8008f6c <_dtoa_r+0x464>
 8009068:	4b30      	ldr	r3, [pc, #192]	; (800912c <_dtoa_r+0x624>)
 800906a:	2200      	movs	r2, #0
 800906c:	4650      	mov	r0, sl
 800906e:	4659      	mov	r1, fp
 8009070:	f7f7 fac2 	bl	80005f8 <__aeabi_dmul>
 8009074:	4b2d      	ldr	r3, [pc, #180]	; (800912c <_dtoa_r+0x624>)
 8009076:	4682      	mov	sl, r0
 8009078:	468b      	mov	fp, r1
 800907a:	4640      	mov	r0, r8
 800907c:	4649      	mov	r1, r9
 800907e:	2200      	movs	r2, #0
 8009080:	f7f7 faba 	bl	80005f8 <__aeabi_dmul>
 8009084:	4680      	mov	r8, r0
 8009086:	4689      	mov	r9, r1
 8009088:	e7c6      	b.n	8009018 <_dtoa_r+0x510>
 800908a:	4650      	mov	r0, sl
 800908c:	4659      	mov	r1, fp
 800908e:	f7f7 fab3 	bl	80005f8 <__aeabi_dmul>
 8009092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009094:	9d01      	ldr	r5, [sp, #4]
 8009096:	930f      	str	r3, [sp, #60]	; 0x3c
 8009098:	4682      	mov	sl, r0
 800909a:	468b      	mov	fp, r1
 800909c:	4649      	mov	r1, r9
 800909e:	4640      	mov	r0, r8
 80090a0:	f7f7 fd5a 	bl	8000b58 <__aeabi_d2iz>
 80090a4:	4606      	mov	r6, r0
 80090a6:	f7f7 fa3d 	bl	8000524 <__aeabi_i2d>
 80090aa:	3630      	adds	r6, #48	; 0x30
 80090ac:	4602      	mov	r2, r0
 80090ae:	460b      	mov	r3, r1
 80090b0:	4640      	mov	r0, r8
 80090b2:	4649      	mov	r1, r9
 80090b4:	f7f7 f8e8 	bl	8000288 <__aeabi_dsub>
 80090b8:	f805 6b01 	strb.w	r6, [r5], #1
 80090bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090be:	429d      	cmp	r5, r3
 80090c0:	4680      	mov	r8, r0
 80090c2:	4689      	mov	r9, r1
 80090c4:	f04f 0200 	mov.w	r2, #0
 80090c8:	d124      	bne.n	8009114 <_dtoa_r+0x60c>
 80090ca:	4b1b      	ldr	r3, [pc, #108]	; (8009138 <_dtoa_r+0x630>)
 80090cc:	4650      	mov	r0, sl
 80090ce:	4659      	mov	r1, fp
 80090d0:	f7f7 f8dc 	bl	800028c <__adddf3>
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	4640      	mov	r0, r8
 80090da:	4649      	mov	r1, r9
 80090dc:	f7f7 fd1c 	bl	8000b18 <__aeabi_dcmpgt>
 80090e0:	2800      	cmp	r0, #0
 80090e2:	d173      	bne.n	80091cc <_dtoa_r+0x6c4>
 80090e4:	4652      	mov	r2, sl
 80090e6:	465b      	mov	r3, fp
 80090e8:	4913      	ldr	r1, [pc, #76]	; (8009138 <_dtoa_r+0x630>)
 80090ea:	2000      	movs	r0, #0
 80090ec:	f7f7 f8cc 	bl	8000288 <__aeabi_dsub>
 80090f0:	4602      	mov	r2, r0
 80090f2:	460b      	mov	r3, r1
 80090f4:	4640      	mov	r0, r8
 80090f6:	4649      	mov	r1, r9
 80090f8:	f7f7 fcf0 	bl	8000adc <__aeabi_dcmplt>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	f43f af35 	beq.w	8008f6c <_dtoa_r+0x464>
 8009102:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009104:	1e6b      	subs	r3, r5, #1
 8009106:	930f      	str	r3, [sp, #60]	; 0x3c
 8009108:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800910c:	2b30      	cmp	r3, #48	; 0x30
 800910e:	d0f8      	beq.n	8009102 <_dtoa_r+0x5fa>
 8009110:	9700      	str	r7, [sp, #0]
 8009112:	e049      	b.n	80091a8 <_dtoa_r+0x6a0>
 8009114:	4b05      	ldr	r3, [pc, #20]	; (800912c <_dtoa_r+0x624>)
 8009116:	f7f7 fa6f 	bl	80005f8 <__aeabi_dmul>
 800911a:	4680      	mov	r8, r0
 800911c:	4689      	mov	r9, r1
 800911e:	e7bd      	b.n	800909c <_dtoa_r+0x594>
 8009120:	0800e280 	.word	0x0800e280
 8009124:	0800e258 	.word	0x0800e258
 8009128:	3ff00000 	.word	0x3ff00000
 800912c:	40240000 	.word	0x40240000
 8009130:	401c0000 	.word	0x401c0000
 8009134:	40140000 	.word	0x40140000
 8009138:	3fe00000 	.word	0x3fe00000
 800913c:	9d01      	ldr	r5, [sp, #4]
 800913e:	4656      	mov	r6, sl
 8009140:	465f      	mov	r7, fp
 8009142:	4642      	mov	r2, r8
 8009144:	464b      	mov	r3, r9
 8009146:	4630      	mov	r0, r6
 8009148:	4639      	mov	r1, r7
 800914a:	f7f7 fb7f 	bl	800084c <__aeabi_ddiv>
 800914e:	f7f7 fd03 	bl	8000b58 <__aeabi_d2iz>
 8009152:	4682      	mov	sl, r0
 8009154:	f7f7 f9e6 	bl	8000524 <__aeabi_i2d>
 8009158:	4642      	mov	r2, r8
 800915a:	464b      	mov	r3, r9
 800915c:	f7f7 fa4c 	bl	80005f8 <__aeabi_dmul>
 8009160:	4602      	mov	r2, r0
 8009162:	460b      	mov	r3, r1
 8009164:	4630      	mov	r0, r6
 8009166:	4639      	mov	r1, r7
 8009168:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800916c:	f7f7 f88c 	bl	8000288 <__aeabi_dsub>
 8009170:	f805 6b01 	strb.w	r6, [r5], #1
 8009174:	9e01      	ldr	r6, [sp, #4]
 8009176:	9f03      	ldr	r7, [sp, #12]
 8009178:	1bae      	subs	r6, r5, r6
 800917a:	42b7      	cmp	r7, r6
 800917c:	4602      	mov	r2, r0
 800917e:	460b      	mov	r3, r1
 8009180:	d135      	bne.n	80091ee <_dtoa_r+0x6e6>
 8009182:	f7f7 f883 	bl	800028c <__adddf3>
 8009186:	4642      	mov	r2, r8
 8009188:	464b      	mov	r3, r9
 800918a:	4606      	mov	r6, r0
 800918c:	460f      	mov	r7, r1
 800918e:	f7f7 fcc3 	bl	8000b18 <__aeabi_dcmpgt>
 8009192:	b9d0      	cbnz	r0, 80091ca <_dtoa_r+0x6c2>
 8009194:	4642      	mov	r2, r8
 8009196:	464b      	mov	r3, r9
 8009198:	4630      	mov	r0, r6
 800919a:	4639      	mov	r1, r7
 800919c:	f7f7 fc94 	bl	8000ac8 <__aeabi_dcmpeq>
 80091a0:	b110      	cbz	r0, 80091a8 <_dtoa_r+0x6a0>
 80091a2:	f01a 0f01 	tst.w	sl, #1
 80091a6:	d110      	bne.n	80091ca <_dtoa_r+0x6c2>
 80091a8:	4620      	mov	r0, r4
 80091aa:	ee18 1a10 	vmov	r1, s16
 80091ae:	f000 fb73 	bl	8009898 <_Bfree>
 80091b2:	2300      	movs	r3, #0
 80091b4:	9800      	ldr	r0, [sp, #0]
 80091b6:	702b      	strb	r3, [r5, #0]
 80091b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091ba:	3001      	adds	r0, #1
 80091bc:	6018      	str	r0, [r3, #0]
 80091be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f43f acf1 	beq.w	8008ba8 <_dtoa_r+0xa0>
 80091c6:	601d      	str	r5, [r3, #0]
 80091c8:	e4ee      	b.n	8008ba8 <_dtoa_r+0xa0>
 80091ca:	9f00      	ldr	r7, [sp, #0]
 80091cc:	462b      	mov	r3, r5
 80091ce:	461d      	mov	r5, r3
 80091d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091d4:	2a39      	cmp	r2, #57	; 0x39
 80091d6:	d106      	bne.n	80091e6 <_dtoa_r+0x6de>
 80091d8:	9a01      	ldr	r2, [sp, #4]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d1f7      	bne.n	80091ce <_dtoa_r+0x6c6>
 80091de:	9901      	ldr	r1, [sp, #4]
 80091e0:	2230      	movs	r2, #48	; 0x30
 80091e2:	3701      	adds	r7, #1
 80091e4:	700a      	strb	r2, [r1, #0]
 80091e6:	781a      	ldrb	r2, [r3, #0]
 80091e8:	3201      	adds	r2, #1
 80091ea:	701a      	strb	r2, [r3, #0]
 80091ec:	e790      	b.n	8009110 <_dtoa_r+0x608>
 80091ee:	4ba6      	ldr	r3, [pc, #664]	; (8009488 <_dtoa_r+0x980>)
 80091f0:	2200      	movs	r2, #0
 80091f2:	f7f7 fa01 	bl	80005f8 <__aeabi_dmul>
 80091f6:	2200      	movs	r2, #0
 80091f8:	2300      	movs	r3, #0
 80091fa:	4606      	mov	r6, r0
 80091fc:	460f      	mov	r7, r1
 80091fe:	f7f7 fc63 	bl	8000ac8 <__aeabi_dcmpeq>
 8009202:	2800      	cmp	r0, #0
 8009204:	d09d      	beq.n	8009142 <_dtoa_r+0x63a>
 8009206:	e7cf      	b.n	80091a8 <_dtoa_r+0x6a0>
 8009208:	9a08      	ldr	r2, [sp, #32]
 800920a:	2a00      	cmp	r2, #0
 800920c:	f000 80d7 	beq.w	80093be <_dtoa_r+0x8b6>
 8009210:	9a06      	ldr	r2, [sp, #24]
 8009212:	2a01      	cmp	r2, #1
 8009214:	f300 80ba 	bgt.w	800938c <_dtoa_r+0x884>
 8009218:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800921a:	2a00      	cmp	r2, #0
 800921c:	f000 80b2 	beq.w	8009384 <_dtoa_r+0x87c>
 8009220:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009224:	9e07      	ldr	r6, [sp, #28]
 8009226:	9d04      	ldr	r5, [sp, #16]
 8009228:	9a04      	ldr	r2, [sp, #16]
 800922a:	441a      	add	r2, r3
 800922c:	9204      	str	r2, [sp, #16]
 800922e:	9a05      	ldr	r2, [sp, #20]
 8009230:	2101      	movs	r1, #1
 8009232:	441a      	add	r2, r3
 8009234:	4620      	mov	r0, r4
 8009236:	9205      	str	r2, [sp, #20]
 8009238:	f000 fbe6 	bl	8009a08 <__i2b>
 800923c:	4607      	mov	r7, r0
 800923e:	2d00      	cmp	r5, #0
 8009240:	dd0c      	ble.n	800925c <_dtoa_r+0x754>
 8009242:	9b05      	ldr	r3, [sp, #20]
 8009244:	2b00      	cmp	r3, #0
 8009246:	dd09      	ble.n	800925c <_dtoa_r+0x754>
 8009248:	42ab      	cmp	r3, r5
 800924a:	9a04      	ldr	r2, [sp, #16]
 800924c:	bfa8      	it	ge
 800924e:	462b      	movge	r3, r5
 8009250:	1ad2      	subs	r2, r2, r3
 8009252:	9204      	str	r2, [sp, #16]
 8009254:	9a05      	ldr	r2, [sp, #20]
 8009256:	1aed      	subs	r5, r5, r3
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	9305      	str	r3, [sp, #20]
 800925c:	9b07      	ldr	r3, [sp, #28]
 800925e:	b31b      	cbz	r3, 80092a8 <_dtoa_r+0x7a0>
 8009260:	9b08      	ldr	r3, [sp, #32]
 8009262:	2b00      	cmp	r3, #0
 8009264:	f000 80af 	beq.w	80093c6 <_dtoa_r+0x8be>
 8009268:	2e00      	cmp	r6, #0
 800926a:	dd13      	ble.n	8009294 <_dtoa_r+0x78c>
 800926c:	4639      	mov	r1, r7
 800926e:	4632      	mov	r2, r6
 8009270:	4620      	mov	r0, r4
 8009272:	f000 fc89 	bl	8009b88 <__pow5mult>
 8009276:	ee18 2a10 	vmov	r2, s16
 800927a:	4601      	mov	r1, r0
 800927c:	4607      	mov	r7, r0
 800927e:	4620      	mov	r0, r4
 8009280:	f000 fbd8 	bl	8009a34 <__multiply>
 8009284:	ee18 1a10 	vmov	r1, s16
 8009288:	4680      	mov	r8, r0
 800928a:	4620      	mov	r0, r4
 800928c:	f000 fb04 	bl	8009898 <_Bfree>
 8009290:	ee08 8a10 	vmov	s16, r8
 8009294:	9b07      	ldr	r3, [sp, #28]
 8009296:	1b9a      	subs	r2, r3, r6
 8009298:	d006      	beq.n	80092a8 <_dtoa_r+0x7a0>
 800929a:	ee18 1a10 	vmov	r1, s16
 800929e:	4620      	mov	r0, r4
 80092a0:	f000 fc72 	bl	8009b88 <__pow5mult>
 80092a4:	ee08 0a10 	vmov	s16, r0
 80092a8:	2101      	movs	r1, #1
 80092aa:	4620      	mov	r0, r4
 80092ac:	f000 fbac 	bl	8009a08 <__i2b>
 80092b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	4606      	mov	r6, r0
 80092b6:	f340 8088 	ble.w	80093ca <_dtoa_r+0x8c2>
 80092ba:	461a      	mov	r2, r3
 80092bc:	4601      	mov	r1, r0
 80092be:	4620      	mov	r0, r4
 80092c0:	f000 fc62 	bl	8009b88 <__pow5mult>
 80092c4:	9b06      	ldr	r3, [sp, #24]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	4606      	mov	r6, r0
 80092ca:	f340 8081 	ble.w	80093d0 <_dtoa_r+0x8c8>
 80092ce:	f04f 0800 	mov.w	r8, #0
 80092d2:	6933      	ldr	r3, [r6, #16]
 80092d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80092d8:	6918      	ldr	r0, [r3, #16]
 80092da:	f000 fb45 	bl	8009968 <__hi0bits>
 80092de:	f1c0 0020 	rsb	r0, r0, #32
 80092e2:	9b05      	ldr	r3, [sp, #20]
 80092e4:	4418      	add	r0, r3
 80092e6:	f010 001f 	ands.w	r0, r0, #31
 80092ea:	f000 8092 	beq.w	8009412 <_dtoa_r+0x90a>
 80092ee:	f1c0 0320 	rsb	r3, r0, #32
 80092f2:	2b04      	cmp	r3, #4
 80092f4:	f340 808a 	ble.w	800940c <_dtoa_r+0x904>
 80092f8:	f1c0 001c 	rsb	r0, r0, #28
 80092fc:	9b04      	ldr	r3, [sp, #16]
 80092fe:	4403      	add	r3, r0
 8009300:	9304      	str	r3, [sp, #16]
 8009302:	9b05      	ldr	r3, [sp, #20]
 8009304:	4403      	add	r3, r0
 8009306:	4405      	add	r5, r0
 8009308:	9305      	str	r3, [sp, #20]
 800930a:	9b04      	ldr	r3, [sp, #16]
 800930c:	2b00      	cmp	r3, #0
 800930e:	dd07      	ble.n	8009320 <_dtoa_r+0x818>
 8009310:	ee18 1a10 	vmov	r1, s16
 8009314:	461a      	mov	r2, r3
 8009316:	4620      	mov	r0, r4
 8009318:	f000 fc90 	bl	8009c3c <__lshift>
 800931c:	ee08 0a10 	vmov	s16, r0
 8009320:	9b05      	ldr	r3, [sp, #20]
 8009322:	2b00      	cmp	r3, #0
 8009324:	dd05      	ble.n	8009332 <_dtoa_r+0x82a>
 8009326:	4631      	mov	r1, r6
 8009328:	461a      	mov	r2, r3
 800932a:	4620      	mov	r0, r4
 800932c:	f000 fc86 	bl	8009c3c <__lshift>
 8009330:	4606      	mov	r6, r0
 8009332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009334:	2b00      	cmp	r3, #0
 8009336:	d06e      	beq.n	8009416 <_dtoa_r+0x90e>
 8009338:	ee18 0a10 	vmov	r0, s16
 800933c:	4631      	mov	r1, r6
 800933e:	f000 fced 	bl	8009d1c <__mcmp>
 8009342:	2800      	cmp	r0, #0
 8009344:	da67      	bge.n	8009416 <_dtoa_r+0x90e>
 8009346:	9b00      	ldr	r3, [sp, #0]
 8009348:	3b01      	subs	r3, #1
 800934a:	ee18 1a10 	vmov	r1, s16
 800934e:	9300      	str	r3, [sp, #0]
 8009350:	220a      	movs	r2, #10
 8009352:	2300      	movs	r3, #0
 8009354:	4620      	mov	r0, r4
 8009356:	f000 fac1 	bl	80098dc <__multadd>
 800935a:	9b08      	ldr	r3, [sp, #32]
 800935c:	ee08 0a10 	vmov	s16, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 81b1 	beq.w	80096c8 <_dtoa_r+0xbc0>
 8009366:	2300      	movs	r3, #0
 8009368:	4639      	mov	r1, r7
 800936a:	220a      	movs	r2, #10
 800936c:	4620      	mov	r0, r4
 800936e:	f000 fab5 	bl	80098dc <__multadd>
 8009372:	9b02      	ldr	r3, [sp, #8]
 8009374:	2b00      	cmp	r3, #0
 8009376:	4607      	mov	r7, r0
 8009378:	f300 808e 	bgt.w	8009498 <_dtoa_r+0x990>
 800937c:	9b06      	ldr	r3, [sp, #24]
 800937e:	2b02      	cmp	r3, #2
 8009380:	dc51      	bgt.n	8009426 <_dtoa_r+0x91e>
 8009382:	e089      	b.n	8009498 <_dtoa_r+0x990>
 8009384:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009386:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800938a:	e74b      	b.n	8009224 <_dtoa_r+0x71c>
 800938c:	9b03      	ldr	r3, [sp, #12]
 800938e:	1e5e      	subs	r6, r3, #1
 8009390:	9b07      	ldr	r3, [sp, #28]
 8009392:	42b3      	cmp	r3, r6
 8009394:	bfbf      	itttt	lt
 8009396:	9b07      	ldrlt	r3, [sp, #28]
 8009398:	9607      	strlt	r6, [sp, #28]
 800939a:	1af2      	sublt	r2, r6, r3
 800939c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800939e:	bfb6      	itet	lt
 80093a0:	189b      	addlt	r3, r3, r2
 80093a2:	1b9e      	subge	r6, r3, r6
 80093a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80093a6:	9b03      	ldr	r3, [sp, #12]
 80093a8:	bfb8      	it	lt
 80093aa:	2600      	movlt	r6, #0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	bfb7      	itett	lt
 80093b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80093b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80093b8:	1a9d      	sublt	r5, r3, r2
 80093ba:	2300      	movlt	r3, #0
 80093bc:	e734      	b.n	8009228 <_dtoa_r+0x720>
 80093be:	9e07      	ldr	r6, [sp, #28]
 80093c0:	9d04      	ldr	r5, [sp, #16]
 80093c2:	9f08      	ldr	r7, [sp, #32]
 80093c4:	e73b      	b.n	800923e <_dtoa_r+0x736>
 80093c6:	9a07      	ldr	r2, [sp, #28]
 80093c8:	e767      	b.n	800929a <_dtoa_r+0x792>
 80093ca:	9b06      	ldr	r3, [sp, #24]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	dc18      	bgt.n	8009402 <_dtoa_r+0x8fa>
 80093d0:	f1ba 0f00 	cmp.w	sl, #0
 80093d4:	d115      	bne.n	8009402 <_dtoa_r+0x8fa>
 80093d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093da:	b993      	cbnz	r3, 8009402 <_dtoa_r+0x8fa>
 80093dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80093e0:	0d1b      	lsrs	r3, r3, #20
 80093e2:	051b      	lsls	r3, r3, #20
 80093e4:	b183      	cbz	r3, 8009408 <_dtoa_r+0x900>
 80093e6:	9b04      	ldr	r3, [sp, #16]
 80093e8:	3301      	adds	r3, #1
 80093ea:	9304      	str	r3, [sp, #16]
 80093ec:	9b05      	ldr	r3, [sp, #20]
 80093ee:	3301      	adds	r3, #1
 80093f0:	9305      	str	r3, [sp, #20]
 80093f2:	f04f 0801 	mov.w	r8, #1
 80093f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f47f af6a 	bne.w	80092d2 <_dtoa_r+0x7ca>
 80093fe:	2001      	movs	r0, #1
 8009400:	e76f      	b.n	80092e2 <_dtoa_r+0x7da>
 8009402:	f04f 0800 	mov.w	r8, #0
 8009406:	e7f6      	b.n	80093f6 <_dtoa_r+0x8ee>
 8009408:	4698      	mov	r8, r3
 800940a:	e7f4      	b.n	80093f6 <_dtoa_r+0x8ee>
 800940c:	f43f af7d 	beq.w	800930a <_dtoa_r+0x802>
 8009410:	4618      	mov	r0, r3
 8009412:	301c      	adds	r0, #28
 8009414:	e772      	b.n	80092fc <_dtoa_r+0x7f4>
 8009416:	9b03      	ldr	r3, [sp, #12]
 8009418:	2b00      	cmp	r3, #0
 800941a:	dc37      	bgt.n	800948c <_dtoa_r+0x984>
 800941c:	9b06      	ldr	r3, [sp, #24]
 800941e:	2b02      	cmp	r3, #2
 8009420:	dd34      	ble.n	800948c <_dtoa_r+0x984>
 8009422:	9b03      	ldr	r3, [sp, #12]
 8009424:	9302      	str	r3, [sp, #8]
 8009426:	9b02      	ldr	r3, [sp, #8]
 8009428:	b96b      	cbnz	r3, 8009446 <_dtoa_r+0x93e>
 800942a:	4631      	mov	r1, r6
 800942c:	2205      	movs	r2, #5
 800942e:	4620      	mov	r0, r4
 8009430:	f000 fa54 	bl	80098dc <__multadd>
 8009434:	4601      	mov	r1, r0
 8009436:	4606      	mov	r6, r0
 8009438:	ee18 0a10 	vmov	r0, s16
 800943c:	f000 fc6e 	bl	8009d1c <__mcmp>
 8009440:	2800      	cmp	r0, #0
 8009442:	f73f adbb 	bgt.w	8008fbc <_dtoa_r+0x4b4>
 8009446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009448:	9d01      	ldr	r5, [sp, #4]
 800944a:	43db      	mvns	r3, r3
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	f04f 0800 	mov.w	r8, #0
 8009452:	4631      	mov	r1, r6
 8009454:	4620      	mov	r0, r4
 8009456:	f000 fa1f 	bl	8009898 <_Bfree>
 800945a:	2f00      	cmp	r7, #0
 800945c:	f43f aea4 	beq.w	80091a8 <_dtoa_r+0x6a0>
 8009460:	f1b8 0f00 	cmp.w	r8, #0
 8009464:	d005      	beq.n	8009472 <_dtoa_r+0x96a>
 8009466:	45b8      	cmp	r8, r7
 8009468:	d003      	beq.n	8009472 <_dtoa_r+0x96a>
 800946a:	4641      	mov	r1, r8
 800946c:	4620      	mov	r0, r4
 800946e:	f000 fa13 	bl	8009898 <_Bfree>
 8009472:	4639      	mov	r1, r7
 8009474:	4620      	mov	r0, r4
 8009476:	f000 fa0f 	bl	8009898 <_Bfree>
 800947a:	e695      	b.n	80091a8 <_dtoa_r+0x6a0>
 800947c:	2600      	movs	r6, #0
 800947e:	4637      	mov	r7, r6
 8009480:	e7e1      	b.n	8009446 <_dtoa_r+0x93e>
 8009482:	9700      	str	r7, [sp, #0]
 8009484:	4637      	mov	r7, r6
 8009486:	e599      	b.n	8008fbc <_dtoa_r+0x4b4>
 8009488:	40240000 	.word	0x40240000
 800948c:	9b08      	ldr	r3, [sp, #32]
 800948e:	2b00      	cmp	r3, #0
 8009490:	f000 80ca 	beq.w	8009628 <_dtoa_r+0xb20>
 8009494:	9b03      	ldr	r3, [sp, #12]
 8009496:	9302      	str	r3, [sp, #8]
 8009498:	2d00      	cmp	r5, #0
 800949a:	dd05      	ble.n	80094a8 <_dtoa_r+0x9a0>
 800949c:	4639      	mov	r1, r7
 800949e:	462a      	mov	r2, r5
 80094a0:	4620      	mov	r0, r4
 80094a2:	f000 fbcb 	bl	8009c3c <__lshift>
 80094a6:	4607      	mov	r7, r0
 80094a8:	f1b8 0f00 	cmp.w	r8, #0
 80094ac:	d05b      	beq.n	8009566 <_dtoa_r+0xa5e>
 80094ae:	6879      	ldr	r1, [r7, #4]
 80094b0:	4620      	mov	r0, r4
 80094b2:	f000 f9b1 	bl	8009818 <_Balloc>
 80094b6:	4605      	mov	r5, r0
 80094b8:	b928      	cbnz	r0, 80094c6 <_dtoa_r+0x9be>
 80094ba:	4b87      	ldr	r3, [pc, #540]	; (80096d8 <_dtoa_r+0xbd0>)
 80094bc:	4602      	mov	r2, r0
 80094be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80094c2:	f7ff bb3b 	b.w	8008b3c <_dtoa_r+0x34>
 80094c6:	693a      	ldr	r2, [r7, #16]
 80094c8:	3202      	adds	r2, #2
 80094ca:	0092      	lsls	r2, r2, #2
 80094cc:	f107 010c 	add.w	r1, r7, #12
 80094d0:	300c      	adds	r0, #12
 80094d2:	f7fe fb09 	bl	8007ae8 <memcpy>
 80094d6:	2201      	movs	r2, #1
 80094d8:	4629      	mov	r1, r5
 80094da:	4620      	mov	r0, r4
 80094dc:	f000 fbae 	bl	8009c3c <__lshift>
 80094e0:	9b01      	ldr	r3, [sp, #4]
 80094e2:	f103 0901 	add.w	r9, r3, #1
 80094e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80094ea:	4413      	add	r3, r2
 80094ec:	9305      	str	r3, [sp, #20]
 80094ee:	f00a 0301 	and.w	r3, sl, #1
 80094f2:	46b8      	mov	r8, r7
 80094f4:	9304      	str	r3, [sp, #16]
 80094f6:	4607      	mov	r7, r0
 80094f8:	4631      	mov	r1, r6
 80094fa:	ee18 0a10 	vmov	r0, s16
 80094fe:	f7ff fa77 	bl	80089f0 <quorem>
 8009502:	4641      	mov	r1, r8
 8009504:	9002      	str	r0, [sp, #8]
 8009506:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800950a:	ee18 0a10 	vmov	r0, s16
 800950e:	f000 fc05 	bl	8009d1c <__mcmp>
 8009512:	463a      	mov	r2, r7
 8009514:	9003      	str	r0, [sp, #12]
 8009516:	4631      	mov	r1, r6
 8009518:	4620      	mov	r0, r4
 800951a:	f000 fc1b 	bl	8009d54 <__mdiff>
 800951e:	68c2      	ldr	r2, [r0, #12]
 8009520:	f109 3bff 	add.w	fp, r9, #4294967295
 8009524:	4605      	mov	r5, r0
 8009526:	bb02      	cbnz	r2, 800956a <_dtoa_r+0xa62>
 8009528:	4601      	mov	r1, r0
 800952a:	ee18 0a10 	vmov	r0, s16
 800952e:	f000 fbf5 	bl	8009d1c <__mcmp>
 8009532:	4602      	mov	r2, r0
 8009534:	4629      	mov	r1, r5
 8009536:	4620      	mov	r0, r4
 8009538:	9207      	str	r2, [sp, #28]
 800953a:	f000 f9ad 	bl	8009898 <_Bfree>
 800953e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009542:	ea43 0102 	orr.w	r1, r3, r2
 8009546:	9b04      	ldr	r3, [sp, #16]
 8009548:	430b      	orrs	r3, r1
 800954a:	464d      	mov	r5, r9
 800954c:	d10f      	bne.n	800956e <_dtoa_r+0xa66>
 800954e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009552:	d02a      	beq.n	80095aa <_dtoa_r+0xaa2>
 8009554:	9b03      	ldr	r3, [sp, #12]
 8009556:	2b00      	cmp	r3, #0
 8009558:	dd02      	ble.n	8009560 <_dtoa_r+0xa58>
 800955a:	9b02      	ldr	r3, [sp, #8]
 800955c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009560:	f88b a000 	strb.w	sl, [fp]
 8009564:	e775      	b.n	8009452 <_dtoa_r+0x94a>
 8009566:	4638      	mov	r0, r7
 8009568:	e7ba      	b.n	80094e0 <_dtoa_r+0x9d8>
 800956a:	2201      	movs	r2, #1
 800956c:	e7e2      	b.n	8009534 <_dtoa_r+0xa2c>
 800956e:	9b03      	ldr	r3, [sp, #12]
 8009570:	2b00      	cmp	r3, #0
 8009572:	db04      	blt.n	800957e <_dtoa_r+0xa76>
 8009574:	9906      	ldr	r1, [sp, #24]
 8009576:	430b      	orrs	r3, r1
 8009578:	9904      	ldr	r1, [sp, #16]
 800957a:	430b      	orrs	r3, r1
 800957c:	d122      	bne.n	80095c4 <_dtoa_r+0xabc>
 800957e:	2a00      	cmp	r2, #0
 8009580:	ddee      	ble.n	8009560 <_dtoa_r+0xa58>
 8009582:	ee18 1a10 	vmov	r1, s16
 8009586:	2201      	movs	r2, #1
 8009588:	4620      	mov	r0, r4
 800958a:	f000 fb57 	bl	8009c3c <__lshift>
 800958e:	4631      	mov	r1, r6
 8009590:	ee08 0a10 	vmov	s16, r0
 8009594:	f000 fbc2 	bl	8009d1c <__mcmp>
 8009598:	2800      	cmp	r0, #0
 800959a:	dc03      	bgt.n	80095a4 <_dtoa_r+0xa9c>
 800959c:	d1e0      	bne.n	8009560 <_dtoa_r+0xa58>
 800959e:	f01a 0f01 	tst.w	sl, #1
 80095a2:	d0dd      	beq.n	8009560 <_dtoa_r+0xa58>
 80095a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80095a8:	d1d7      	bne.n	800955a <_dtoa_r+0xa52>
 80095aa:	2339      	movs	r3, #57	; 0x39
 80095ac:	f88b 3000 	strb.w	r3, [fp]
 80095b0:	462b      	mov	r3, r5
 80095b2:	461d      	mov	r5, r3
 80095b4:	3b01      	subs	r3, #1
 80095b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80095ba:	2a39      	cmp	r2, #57	; 0x39
 80095bc:	d071      	beq.n	80096a2 <_dtoa_r+0xb9a>
 80095be:	3201      	adds	r2, #1
 80095c0:	701a      	strb	r2, [r3, #0]
 80095c2:	e746      	b.n	8009452 <_dtoa_r+0x94a>
 80095c4:	2a00      	cmp	r2, #0
 80095c6:	dd07      	ble.n	80095d8 <_dtoa_r+0xad0>
 80095c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80095cc:	d0ed      	beq.n	80095aa <_dtoa_r+0xaa2>
 80095ce:	f10a 0301 	add.w	r3, sl, #1
 80095d2:	f88b 3000 	strb.w	r3, [fp]
 80095d6:	e73c      	b.n	8009452 <_dtoa_r+0x94a>
 80095d8:	9b05      	ldr	r3, [sp, #20]
 80095da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80095de:	4599      	cmp	r9, r3
 80095e0:	d047      	beq.n	8009672 <_dtoa_r+0xb6a>
 80095e2:	ee18 1a10 	vmov	r1, s16
 80095e6:	2300      	movs	r3, #0
 80095e8:	220a      	movs	r2, #10
 80095ea:	4620      	mov	r0, r4
 80095ec:	f000 f976 	bl	80098dc <__multadd>
 80095f0:	45b8      	cmp	r8, r7
 80095f2:	ee08 0a10 	vmov	s16, r0
 80095f6:	f04f 0300 	mov.w	r3, #0
 80095fa:	f04f 020a 	mov.w	r2, #10
 80095fe:	4641      	mov	r1, r8
 8009600:	4620      	mov	r0, r4
 8009602:	d106      	bne.n	8009612 <_dtoa_r+0xb0a>
 8009604:	f000 f96a 	bl	80098dc <__multadd>
 8009608:	4680      	mov	r8, r0
 800960a:	4607      	mov	r7, r0
 800960c:	f109 0901 	add.w	r9, r9, #1
 8009610:	e772      	b.n	80094f8 <_dtoa_r+0x9f0>
 8009612:	f000 f963 	bl	80098dc <__multadd>
 8009616:	4639      	mov	r1, r7
 8009618:	4680      	mov	r8, r0
 800961a:	2300      	movs	r3, #0
 800961c:	220a      	movs	r2, #10
 800961e:	4620      	mov	r0, r4
 8009620:	f000 f95c 	bl	80098dc <__multadd>
 8009624:	4607      	mov	r7, r0
 8009626:	e7f1      	b.n	800960c <_dtoa_r+0xb04>
 8009628:	9b03      	ldr	r3, [sp, #12]
 800962a:	9302      	str	r3, [sp, #8]
 800962c:	9d01      	ldr	r5, [sp, #4]
 800962e:	ee18 0a10 	vmov	r0, s16
 8009632:	4631      	mov	r1, r6
 8009634:	f7ff f9dc 	bl	80089f0 <quorem>
 8009638:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800963c:	9b01      	ldr	r3, [sp, #4]
 800963e:	f805 ab01 	strb.w	sl, [r5], #1
 8009642:	1aea      	subs	r2, r5, r3
 8009644:	9b02      	ldr	r3, [sp, #8]
 8009646:	4293      	cmp	r3, r2
 8009648:	dd09      	ble.n	800965e <_dtoa_r+0xb56>
 800964a:	ee18 1a10 	vmov	r1, s16
 800964e:	2300      	movs	r3, #0
 8009650:	220a      	movs	r2, #10
 8009652:	4620      	mov	r0, r4
 8009654:	f000 f942 	bl	80098dc <__multadd>
 8009658:	ee08 0a10 	vmov	s16, r0
 800965c:	e7e7      	b.n	800962e <_dtoa_r+0xb26>
 800965e:	9b02      	ldr	r3, [sp, #8]
 8009660:	2b00      	cmp	r3, #0
 8009662:	bfc8      	it	gt
 8009664:	461d      	movgt	r5, r3
 8009666:	9b01      	ldr	r3, [sp, #4]
 8009668:	bfd8      	it	le
 800966a:	2501      	movle	r5, #1
 800966c:	441d      	add	r5, r3
 800966e:	f04f 0800 	mov.w	r8, #0
 8009672:	ee18 1a10 	vmov	r1, s16
 8009676:	2201      	movs	r2, #1
 8009678:	4620      	mov	r0, r4
 800967a:	f000 fadf 	bl	8009c3c <__lshift>
 800967e:	4631      	mov	r1, r6
 8009680:	ee08 0a10 	vmov	s16, r0
 8009684:	f000 fb4a 	bl	8009d1c <__mcmp>
 8009688:	2800      	cmp	r0, #0
 800968a:	dc91      	bgt.n	80095b0 <_dtoa_r+0xaa8>
 800968c:	d102      	bne.n	8009694 <_dtoa_r+0xb8c>
 800968e:	f01a 0f01 	tst.w	sl, #1
 8009692:	d18d      	bne.n	80095b0 <_dtoa_r+0xaa8>
 8009694:	462b      	mov	r3, r5
 8009696:	461d      	mov	r5, r3
 8009698:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800969c:	2a30      	cmp	r2, #48	; 0x30
 800969e:	d0fa      	beq.n	8009696 <_dtoa_r+0xb8e>
 80096a0:	e6d7      	b.n	8009452 <_dtoa_r+0x94a>
 80096a2:	9a01      	ldr	r2, [sp, #4]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d184      	bne.n	80095b2 <_dtoa_r+0xaaa>
 80096a8:	9b00      	ldr	r3, [sp, #0]
 80096aa:	3301      	adds	r3, #1
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	2331      	movs	r3, #49	; 0x31
 80096b0:	7013      	strb	r3, [r2, #0]
 80096b2:	e6ce      	b.n	8009452 <_dtoa_r+0x94a>
 80096b4:	4b09      	ldr	r3, [pc, #36]	; (80096dc <_dtoa_r+0xbd4>)
 80096b6:	f7ff ba95 	b.w	8008be4 <_dtoa_r+0xdc>
 80096ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f47f aa6e 	bne.w	8008b9e <_dtoa_r+0x96>
 80096c2:	4b07      	ldr	r3, [pc, #28]	; (80096e0 <_dtoa_r+0xbd8>)
 80096c4:	f7ff ba8e 	b.w	8008be4 <_dtoa_r+0xdc>
 80096c8:	9b02      	ldr	r3, [sp, #8]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	dcae      	bgt.n	800962c <_dtoa_r+0xb24>
 80096ce:	9b06      	ldr	r3, [sp, #24]
 80096d0:	2b02      	cmp	r3, #2
 80096d2:	f73f aea8 	bgt.w	8009426 <_dtoa_r+0x91e>
 80096d6:	e7a9      	b.n	800962c <_dtoa_r+0xb24>
 80096d8:	0800e1e4 	.word	0x0800e1e4
 80096dc:	0800ad94 	.word	0x0800ad94
 80096e0:	0800e17c 	.word	0x0800e17c

080096e4 <fiprintf>:
 80096e4:	b40e      	push	{r1, r2, r3}
 80096e6:	b503      	push	{r0, r1, lr}
 80096e8:	4601      	mov	r1, r0
 80096ea:	ab03      	add	r3, sp, #12
 80096ec:	4805      	ldr	r0, [pc, #20]	; (8009704 <fiprintf+0x20>)
 80096ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80096f2:	6800      	ldr	r0, [r0, #0]
 80096f4:	9301      	str	r3, [sp, #4]
 80096f6:	f000 fc53 	bl	8009fa0 <_vfiprintf_r>
 80096fa:	b002      	add	sp, #8
 80096fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009700:	b003      	add	sp, #12
 8009702:	4770      	bx	lr
 8009704:	20000724 	.word	0x20000724

08009708 <_localeconv_r>:
 8009708:	4800      	ldr	r0, [pc, #0]	; (800970c <_localeconv_r+0x4>)
 800970a:	4770      	bx	lr
 800970c:	20000878 	.word	0x20000878

08009710 <_lseek_r>:
 8009710:	b538      	push	{r3, r4, r5, lr}
 8009712:	4d07      	ldr	r5, [pc, #28]	; (8009730 <_lseek_r+0x20>)
 8009714:	4604      	mov	r4, r0
 8009716:	4608      	mov	r0, r1
 8009718:	4611      	mov	r1, r2
 800971a:	2200      	movs	r2, #0
 800971c:	602a      	str	r2, [r5, #0]
 800971e:	461a      	mov	r2, r3
 8009720:	f000 ff6a 	bl	800a5f8 <_lseek>
 8009724:	1c43      	adds	r3, r0, #1
 8009726:	d102      	bne.n	800972e <_lseek_r+0x1e>
 8009728:	682b      	ldr	r3, [r5, #0]
 800972a:	b103      	cbz	r3, 800972e <_lseek_r+0x1e>
 800972c:	6023      	str	r3, [r4, #0]
 800972e:	bd38      	pop	{r3, r4, r5, pc}
 8009730:	20001a80 	.word	0x20001a80

08009734 <__swhatbuf_r>:
 8009734:	b570      	push	{r4, r5, r6, lr}
 8009736:	460e      	mov	r6, r1
 8009738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800973c:	2900      	cmp	r1, #0
 800973e:	b096      	sub	sp, #88	; 0x58
 8009740:	4614      	mov	r4, r2
 8009742:	461d      	mov	r5, r3
 8009744:	da08      	bge.n	8009758 <__swhatbuf_r+0x24>
 8009746:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800974a:	2200      	movs	r2, #0
 800974c:	602a      	str	r2, [r5, #0]
 800974e:	061a      	lsls	r2, r3, #24
 8009750:	d410      	bmi.n	8009774 <__swhatbuf_r+0x40>
 8009752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009756:	e00e      	b.n	8009776 <__swhatbuf_r+0x42>
 8009758:	466a      	mov	r2, sp
 800975a:	f000 fd6b 	bl	800a234 <_fstat_r>
 800975e:	2800      	cmp	r0, #0
 8009760:	dbf1      	blt.n	8009746 <__swhatbuf_r+0x12>
 8009762:	9a01      	ldr	r2, [sp, #4]
 8009764:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009768:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800976c:	425a      	negs	r2, r3
 800976e:	415a      	adcs	r2, r3
 8009770:	602a      	str	r2, [r5, #0]
 8009772:	e7ee      	b.n	8009752 <__swhatbuf_r+0x1e>
 8009774:	2340      	movs	r3, #64	; 0x40
 8009776:	2000      	movs	r0, #0
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	b016      	add	sp, #88	; 0x58
 800977c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009780 <__smakebuf_r>:
 8009780:	898b      	ldrh	r3, [r1, #12]
 8009782:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009784:	079d      	lsls	r5, r3, #30
 8009786:	4606      	mov	r6, r0
 8009788:	460c      	mov	r4, r1
 800978a:	d507      	bpl.n	800979c <__smakebuf_r+0x1c>
 800978c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009790:	6023      	str	r3, [r4, #0]
 8009792:	6123      	str	r3, [r4, #16]
 8009794:	2301      	movs	r3, #1
 8009796:	6163      	str	r3, [r4, #20]
 8009798:	b002      	add	sp, #8
 800979a:	bd70      	pop	{r4, r5, r6, pc}
 800979c:	ab01      	add	r3, sp, #4
 800979e:	466a      	mov	r2, sp
 80097a0:	f7ff ffc8 	bl	8009734 <__swhatbuf_r>
 80097a4:	9900      	ldr	r1, [sp, #0]
 80097a6:	4605      	mov	r5, r0
 80097a8:	4630      	mov	r0, r6
 80097aa:	f7fe fa1f 	bl	8007bec <_malloc_r>
 80097ae:	b948      	cbnz	r0, 80097c4 <__smakebuf_r+0x44>
 80097b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097b4:	059a      	lsls	r2, r3, #22
 80097b6:	d4ef      	bmi.n	8009798 <__smakebuf_r+0x18>
 80097b8:	f023 0303 	bic.w	r3, r3, #3
 80097bc:	f043 0302 	orr.w	r3, r3, #2
 80097c0:	81a3      	strh	r3, [r4, #12]
 80097c2:	e7e3      	b.n	800978c <__smakebuf_r+0xc>
 80097c4:	4b0d      	ldr	r3, [pc, #52]	; (80097fc <__smakebuf_r+0x7c>)
 80097c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80097c8:	89a3      	ldrh	r3, [r4, #12]
 80097ca:	6020      	str	r0, [r4, #0]
 80097cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097d0:	81a3      	strh	r3, [r4, #12]
 80097d2:	9b00      	ldr	r3, [sp, #0]
 80097d4:	6163      	str	r3, [r4, #20]
 80097d6:	9b01      	ldr	r3, [sp, #4]
 80097d8:	6120      	str	r0, [r4, #16]
 80097da:	b15b      	cbz	r3, 80097f4 <__smakebuf_r+0x74>
 80097dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097e0:	4630      	mov	r0, r6
 80097e2:	f000 fd39 	bl	800a258 <_isatty_r>
 80097e6:	b128      	cbz	r0, 80097f4 <__smakebuf_r+0x74>
 80097e8:	89a3      	ldrh	r3, [r4, #12]
 80097ea:	f023 0303 	bic.w	r3, r3, #3
 80097ee:	f043 0301 	orr.w	r3, r3, #1
 80097f2:	81a3      	strh	r3, [r4, #12]
 80097f4:	89a0      	ldrh	r0, [r4, #12]
 80097f6:	4305      	orrs	r5, r0
 80097f8:	81a5      	strh	r5, [r4, #12]
 80097fa:	e7cd      	b.n	8009798 <__smakebuf_r+0x18>
 80097fc:	080078e5 	.word	0x080078e5

08009800 <__malloc_lock>:
 8009800:	4801      	ldr	r0, [pc, #4]	; (8009808 <__malloc_lock+0x8>)
 8009802:	f7fe b966 	b.w	8007ad2 <__retarget_lock_acquire_recursive>
 8009806:	bf00      	nop
 8009808:	20001a74 	.word	0x20001a74

0800980c <__malloc_unlock>:
 800980c:	4801      	ldr	r0, [pc, #4]	; (8009814 <__malloc_unlock+0x8>)
 800980e:	f7fe b961 	b.w	8007ad4 <__retarget_lock_release_recursive>
 8009812:	bf00      	nop
 8009814:	20001a74 	.word	0x20001a74

08009818 <_Balloc>:
 8009818:	b570      	push	{r4, r5, r6, lr}
 800981a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800981c:	4604      	mov	r4, r0
 800981e:	460d      	mov	r5, r1
 8009820:	b976      	cbnz	r6, 8009840 <_Balloc+0x28>
 8009822:	2010      	movs	r0, #16
 8009824:	f7fa f820 	bl	8003868 <__wrap_malloc>
 8009828:	4602      	mov	r2, r0
 800982a:	6260      	str	r0, [r4, #36]	; 0x24
 800982c:	b920      	cbnz	r0, 8009838 <_Balloc+0x20>
 800982e:	4b18      	ldr	r3, [pc, #96]	; (8009890 <_Balloc+0x78>)
 8009830:	4818      	ldr	r0, [pc, #96]	; (8009894 <_Balloc+0x7c>)
 8009832:	2166      	movs	r1, #102	; 0x66
 8009834:	f7ff f8ae 	bl	8008994 <__assert_func>
 8009838:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800983c:	6006      	str	r6, [r0, #0]
 800983e:	60c6      	str	r6, [r0, #12]
 8009840:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009842:	68f3      	ldr	r3, [r6, #12]
 8009844:	b183      	cbz	r3, 8009868 <_Balloc+0x50>
 8009846:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800984e:	b9b8      	cbnz	r0, 8009880 <_Balloc+0x68>
 8009850:	2101      	movs	r1, #1
 8009852:	fa01 f605 	lsl.w	r6, r1, r5
 8009856:	1d72      	adds	r2, r6, #5
 8009858:	0092      	lsls	r2, r2, #2
 800985a:	4620      	mov	r0, r4
 800985c:	f000 fb60 	bl	8009f20 <_calloc_r>
 8009860:	b160      	cbz	r0, 800987c <_Balloc+0x64>
 8009862:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009866:	e00e      	b.n	8009886 <_Balloc+0x6e>
 8009868:	2221      	movs	r2, #33	; 0x21
 800986a:	2104      	movs	r1, #4
 800986c:	4620      	mov	r0, r4
 800986e:	f000 fb57 	bl	8009f20 <_calloc_r>
 8009872:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009874:	60f0      	str	r0, [r6, #12]
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d1e4      	bne.n	8009846 <_Balloc+0x2e>
 800987c:	2000      	movs	r0, #0
 800987e:	bd70      	pop	{r4, r5, r6, pc}
 8009880:	6802      	ldr	r2, [r0, #0]
 8009882:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009886:	2300      	movs	r3, #0
 8009888:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800988c:	e7f7      	b.n	800987e <_Balloc+0x66>
 800988e:	bf00      	nop
 8009890:	0800e0ce 	.word	0x0800e0ce
 8009894:	0800e1f5 	.word	0x0800e1f5

08009898 <_Bfree>:
 8009898:	b570      	push	{r4, r5, r6, lr}
 800989a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800989c:	4605      	mov	r5, r0
 800989e:	460c      	mov	r4, r1
 80098a0:	b976      	cbnz	r6, 80098c0 <_Bfree+0x28>
 80098a2:	2010      	movs	r0, #16
 80098a4:	f7f9 ffe0 	bl	8003868 <__wrap_malloc>
 80098a8:	4602      	mov	r2, r0
 80098aa:	6268      	str	r0, [r5, #36]	; 0x24
 80098ac:	b920      	cbnz	r0, 80098b8 <_Bfree+0x20>
 80098ae:	4b09      	ldr	r3, [pc, #36]	; (80098d4 <_Bfree+0x3c>)
 80098b0:	4809      	ldr	r0, [pc, #36]	; (80098d8 <_Bfree+0x40>)
 80098b2:	218a      	movs	r1, #138	; 0x8a
 80098b4:	f7ff f86e 	bl	8008994 <__assert_func>
 80098b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098bc:	6006      	str	r6, [r0, #0]
 80098be:	60c6      	str	r6, [r0, #12]
 80098c0:	b13c      	cbz	r4, 80098d2 <_Bfree+0x3a>
 80098c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80098c4:	6862      	ldr	r2, [r4, #4]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80098cc:	6021      	str	r1, [r4, #0]
 80098ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80098d2:	bd70      	pop	{r4, r5, r6, pc}
 80098d4:	0800e0ce 	.word	0x0800e0ce
 80098d8:	0800e1f5 	.word	0x0800e1f5

080098dc <__multadd>:
 80098dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098e0:	690d      	ldr	r5, [r1, #16]
 80098e2:	4607      	mov	r7, r0
 80098e4:	460c      	mov	r4, r1
 80098e6:	461e      	mov	r6, r3
 80098e8:	f101 0c14 	add.w	ip, r1, #20
 80098ec:	2000      	movs	r0, #0
 80098ee:	f8dc 3000 	ldr.w	r3, [ip]
 80098f2:	b299      	uxth	r1, r3
 80098f4:	fb02 6101 	mla	r1, r2, r1, r6
 80098f8:	0c1e      	lsrs	r6, r3, #16
 80098fa:	0c0b      	lsrs	r3, r1, #16
 80098fc:	fb02 3306 	mla	r3, r2, r6, r3
 8009900:	b289      	uxth	r1, r1
 8009902:	3001      	adds	r0, #1
 8009904:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009908:	4285      	cmp	r5, r0
 800990a:	f84c 1b04 	str.w	r1, [ip], #4
 800990e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009912:	dcec      	bgt.n	80098ee <__multadd+0x12>
 8009914:	b30e      	cbz	r6, 800995a <__multadd+0x7e>
 8009916:	68a3      	ldr	r3, [r4, #8]
 8009918:	42ab      	cmp	r3, r5
 800991a:	dc19      	bgt.n	8009950 <__multadd+0x74>
 800991c:	6861      	ldr	r1, [r4, #4]
 800991e:	4638      	mov	r0, r7
 8009920:	3101      	adds	r1, #1
 8009922:	f7ff ff79 	bl	8009818 <_Balloc>
 8009926:	4680      	mov	r8, r0
 8009928:	b928      	cbnz	r0, 8009936 <__multadd+0x5a>
 800992a:	4602      	mov	r2, r0
 800992c:	4b0c      	ldr	r3, [pc, #48]	; (8009960 <__multadd+0x84>)
 800992e:	480d      	ldr	r0, [pc, #52]	; (8009964 <__multadd+0x88>)
 8009930:	21b5      	movs	r1, #181	; 0xb5
 8009932:	f7ff f82f 	bl	8008994 <__assert_func>
 8009936:	6922      	ldr	r2, [r4, #16]
 8009938:	3202      	adds	r2, #2
 800993a:	f104 010c 	add.w	r1, r4, #12
 800993e:	0092      	lsls	r2, r2, #2
 8009940:	300c      	adds	r0, #12
 8009942:	f7fe f8d1 	bl	8007ae8 <memcpy>
 8009946:	4621      	mov	r1, r4
 8009948:	4638      	mov	r0, r7
 800994a:	f7ff ffa5 	bl	8009898 <_Bfree>
 800994e:	4644      	mov	r4, r8
 8009950:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009954:	3501      	adds	r5, #1
 8009956:	615e      	str	r6, [r3, #20]
 8009958:	6125      	str	r5, [r4, #16]
 800995a:	4620      	mov	r0, r4
 800995c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009960:	0800e1e4 	.word	0x0800e1e4
 8009964:	0800e1f5 	.word	0x0800e1f5

08009968 <__hi0bits>:
 8009968:	0c03      	lsrs	r3, r0, #16
 800996a:	041b      	lsls	r3, r3, #16
 800996c:	b9d3      	cbnz	r3, 80099a4 <__hi0bits+0x3c>
 800996e:	0400      	lsls	r0, r0, #16
 8009970:	2310      	movs	r3, #16
 8009972:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009976:	bf04      	itt	eq
 8009978:	0200      	lsleq	r0, r0, #8
 800997a:	3308      	addeq	r3, #8
 800997c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009980:	bf04      	itt	eq
 8009982:	0100      	lsleq	r0, r0, #4
 8009984:	3304      	addeq	r3, #4
 8009986:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800998a:	bf04      	itt	eq
 800998c:	0080      	lsleq	r0, r0, #2
 800998e:	3302      	addeq	r3, #2
 8009990:	2800      	cmp	r0, #0
 8009992:	db05      	blt.n	80099a0 <__hi0bits+0x38>
 8009994:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009998:	f103 0301 	add.w	r3, r3, #1
 800999c:	bf08      	it	eq
 800999e:	2320      	moveq	r3, #32
 80099a0:	4618      	mov	r0, r3
 80099a2:	4770      	bx	lr
 80099a4:	2300      	movs	r3, #0
 80099a6:	e7e4      	b.n	8009972 <__hi0bits+0xa>

080099a8 <__lo0bits>:
 80099a8:	6803      	ldr	r3, [r0, #0]
 80099aa:	f013 0207 	ands.w	r2, r3, #7
 80099ae:	4601      	mov	r1, r0
 80099b0:	d00b      	beq.n	80099ca <__lo0bits+0x22>
 80099b2:	07da      	lsls	r2, r3, #31
 80099b4:	d423      	bmi.n	80099fe <__lo0bits+0x56>
 80099b6:	0798      	lsls	r0, r3, #30
 80099b8:	bf49      	itett	mi
 80099ba:	085b      	lsrmi	r3, r3, #1
 80099bc:	089b      	lsrpl	r3, r3, #2
 80099be:	2001      	movmi	r0, #1
 80099c0:	600b      	strmi	r3, [r1, #0]
 80099c2:	bf5c      	itt	pl
 80099c4:	600b      	strpl	r3, [r1, #0]
 80099c6:	2002      	movpl	r0, #2
 80099c8:	4770      	bx	lr
 80099ca:	b298      	uxth	r0, r3
 80099cc:	b9a8      	cbnz	r0, 80099fa <__lo0bits+0x52>
 80099ce:	0c1b      	lsrs	r3, r3, #16
 80099d0:	2010      	movs	r0, #16
 80099d2:	b2da      	uxtb	r2, r3
 80099d4:	b90a      	cbnz	r2, 80099da <__lo0bits+0x32>
 80099d6:	3008      	adds	r0, #8
 80099d8:	0a1b      	lsrs	r3, r3, #8
 80099da:	071a      	lsls	r2, r3, #28
 80099dc:	bf04      	itt	eq
 80099de:	091b      	lsreq	r3, r3, #4
 80099e0:	3004      	addeq	r0, #4
 80099e2:	079a      	lsls	r2, r3, #30
 80099e4:	bf04      	itt	eq
 80099e6:	089b      	lsreq	r3, r3, #2
 80099e8:	3002      	addeq	r0, #2
 80099ea:	07da      	lsls	r2, r3, #31
 80099ec:	d403      	bmi.n	80099f6 <__lo0bits+0x4e>
 80099ee:	085b      	lsrs	r3, r3, #1
 80099f0:	f100 0001 	add.w	r0, r0, #1
 80099f4:	d005      	beq.n	8009a02 <__lo0bits+0x5a>
 80099f6:	600b      	str	r3, [r1, #0]
 80099f8:	4770      	bx	lr
 80099fa:	4610      	mov	r0, r2
 80099fc:	e7e9      	b.n	80099d2 <__lo0bits+0x2a>
 80099fe:	2000      	movs	r0, #0
 8009a00:	4770      	bx	lr
 8009a02:	2020      	movs	r0, #32
 8009a04:	4770      	bx	lr
	...

08009a08 <__i2b>:
 8009a08:	b510      	push	{r4, lr}
 8009a0a:	460c      	mov	r4, r1
 8009a0c:	2101      	movs	r1, #1
 8009a0e:	f7ff ff03 	bl	8009818 <_Balloc>
 8009a12:	4602      	mov	r2, r0
 8009a14:	b928      	cbnz	r0, 8009a22 <__i2b+0x1a>
 8009a16:	4b05      	ldr	r3, [pc, #20]	; (8009a2c <__i2b+0x24>)
 8009a18:	4805      	ldr	r0, [pc, #20]	; (8009a30 <__i2b+0x28>)
 8009a1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009a1e:	f7fe ffb9 	bl	8008994 <__assert_func>
 8009a22:	2301      	movs	r3, #1
 8009a24:	6144      	str	r4, [r0, #20]
 8009a26:	6103      	str	r3, [r0, #16]
 8009a28:	bd10      	pop	{r4, pc}
 8009a2a:	bf00      	nop
 8009a2c:	0800e1e4 	.word	0x0800e1e4
 8009a30:	0800e1f5 	.word	0x0800e1f5

08009a34 <__multiply>:
 8009a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a38:	4691      	mov	r9, r2
 8009a3a:	690a      	ldr	r2, [r1, #16]
 8009a3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	bfb8      	it	lt
 8009a44:	460b      	movlt	r3, r1
 8009a46:	460c      	mov	r4, r1
 8009a48:	bfbc      	itt	lt
 8009a4a:	464c      	movlt	r4, r9
 8009a4c:	4699      	movlt	r9, r3
 8009a4e:	6927      	ldr	r7, [r4, #16]
 8009a50:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009a54:	68a3      	ldr	r3, [r4, #8]
 8009a56:	6861      	ldr	r1, [r4, #4]
 8009a58:	eb07 060a 	add.w	r6, r7, sl
 8009a5c:	42b3      	cmp	r3, r6
 8009a5e:	b085      	sub	sp, #20
 8009a60:	bfb8      	it	lt
 8009a62:	3101      	addlt	r1, #1
 8009a64:	f7ff fed8 	bl	8009818 <_Balloc>
 8009a68:	b930      	cbnz	r0, 8009a78 <__multiply+0x44>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	4b44      	ldr	r3, [pc, #272]	; (8009b80 <__multiply+0x14c>)
 8009a6e:	4845      	ldr	r0, [pc, #276]	; (8009b84 <__multiply+0x150>)
 8009a70:	f240 115d 	movw	r1, #349	; 0x15d
 8009a74:	f7fe ff8e 	bl	8008994 <__assert_func>
 8009a78:	f100 0514 	add.w	r5, r0, #20
 8009a7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009a80:	462b      	mov	r3, r5
 8009a82:	2200      	movs	r2, #0
 8009a84:	4543      	cmp	r3, r8
 8009a86:	d321      	bcc.n	8009acc <__multiply+0x98>
 8009a88:	f104 0314 	add.w	r3, r4, #20
 8009a8c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009a90:	f109 0314 	add.w	r3, r9, #20
 8009a94:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009a98:	9202      	str	r2, [sp, #8]
 8009a9a:	1b3a      	subs	r2, r7, r4
 8009a9c:	3a15      	subs	r2, #21
 8009a9e:	f022 0203 	bic.w	r2, r2, #3
 8009aa2:	3204      	adds	r2, #4
 8009aa4:	f104 0115 	add.w	r1, r4, #21
 8009aa8:	428f      	cmp	r7, r1
 8009aaa:	bf38      	it	cc
 8009aac:	2204      	movcc	r2, #4
 8009aae:	9201      	str	r2, [sp, #4]
 8009ab0:	9a02      	ldr	r2, [sp, #8]
 8009ab2:	9303      	str	r3, [sp, #12]
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d80c      	bhi.n	8009ad2 <__multiply+0x9e>
 8009ab8:	2e00      	cmp	r6, #0
 8009aba:	dd03      	ble.n	8009ac4 <__multiply+0x90>
 8009abc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d05a      	beq.n	8009b7a <__multiply+0x146>
 8009ac4:	6106      	str	r6, [r0, #16]
 8009ac6:	b005      	add	sp, #20
 8009ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009acc:	f843 2b04 	str.w	r2, [r3], #4
 8009ad0:	e7d8      	b.n	8009a84 <__multiply+0x50>
 8009ad2:	f8b3 a000 	ldrh.w	sl, [r3]
 8009ad6:	f1ba 0f00 	cmp.w	sl, #0
 8009ada:	d024      	beq.n	8009b26 <__multiply+0xf2>
 8009adc:	f104 0e14 	add.w	lr, r4, #20
 8009ae0:	46a9      	mov	r9, r5
 8009ae2:	f04f 0c00 	mov.w	ip, #0
 8009ae6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009aea:	f8d9 1000 	ldr.w	r1, [r9]
 8009aee:	fa1f fb82 	uxth.w	fp, r2
 8009af2:	b289      	uxth	r1, r1
 8009af4:	fb0a 110b 	mla	r1, sl, fp, r1
 8009af8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009afc:	f8d9 2000 	ldr.w	r2, [r9]
 8009b00:	4461      	add	r1, ip
 8009b02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b06:	fb0a c20b 	mla	r2, sl, fp, ip
 8009b0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009b0e:	b289      	uxth	r1, r1
 8009b10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009b14:	4577      	cmp	r7, lr
 8009b16:	f849 1b04 	str.w	r1, [r9], #4
 8009b1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b1e:	d8e2      	bhi.n	8009ae6 <__multiply+0xb2>
 8009b20:	9a01      	ldr	r2, [sp, #4]
 8009b22:	f845 c002 	str.w	ip, [r5, r2]
 8009b26:	9a03      	ldr	r2, [sp, #12]
 8009b28:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b2c:	3304      	adds	r3, #4
 8009b2e:	f1b9 0f00 	cmp.w	r9, #0
 8009b32:	d020      	beq.n	8009b76 <__multiply+0x142>
 8009b34:	6829      	ldr	r1, [r5, #0]
 8009b36:	f104 0c14 	add.w	ip, r4, #20
 8009b3a:	46ae      	mov	lr, r5
 8009b3c:	f04f 0a00 	mov.w	sl, #0
 8009b40:	f8bc b000 	ldrh.w	fp, [ip]
 8009b44:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009b48:	fb09 220b 	mla	r2, r9, fp, r2
 8009b4c:	4492      	add	sl, r2
 8009b4e:	b289      	uxth	r1, r1
 8009b50:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009b54:	f84e 1b04 	str.w	r1, [lr], #4
 8009b58:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009b5c:	f8be 1000 	ldrh.w	r1, [lr]
 8009b60:	0c12      	lsrs	r2, r2, #16
 8009b62:	fb09 1102 	mla	r1, r9, r2, r1
 8009b66:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009b6a:	4567      	cmp	r7, ip
 8009b6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009b70:	d8e6      	bhi.n	8009b40 <__multiply+0x10c>
 8009b72:	9a01      	ldr	r2, [sp, #4]
 8009b74:	50a9      	str	r1, [r5, r2]
 8009b76:	3504      	adds	r5, #4
 8009b78:	e79a      	b.n	8009ab0 <__multiply+0x7c>
 8009b7a:	3e01      	subs	r6, #1
 8009b7c:	e79c      	b.n	8009ab8 <__multiply+0x84>
 8009b7e:	bf00      	nop
 8009b80:	0800e1e4 	.word	0x0800e1e4
 8009b84:	0800e1f5 	.word	0x0800e1f5

08009b88 <__pow5mult>:
 8009b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b8c:	4615      	mov	r5, r2
 8009b8e:	f012 0203 	ands.w	r2, r2, #3
 8009b92:	4606      	mov	r6, r0
 8009b94:	460f      	mov	r7, r1
 8009b96:	d007      	beq.n	8009ba8 <__pow5mult+0x20>
 8009b98:	4c25      	ldr	r4, [pc, #148]	; (8009c30 <__pow5mult+0xa8>)
 8009b9a:	3a01      	subs	r2, #1
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ba2:	f7ff fe9b 	bl	80098dc <__multadd>
 8009ba6:	4607      	mov	r7, r0
 8009ba8:	10ad      	asrs	r5, r5, #2
 8009baa:	d03d      	beq.n	8009c28 <__pow5mult+0xa0>
 8009bac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009bae:	b97c      	cbnz	r4, 8009bd0 <__pow5mult+0x48>
 8009bb0:	2010      	movs	r0, #16
 8009bb2:	f7f9 fe59 	bl	8003868 <__wrap_malloc>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	6270      	str	r0, [r6, #36]	; 0x24
 8009bba:	b928      	cbnz	r0, 8009bc8 <__pow5mult+0x40>
 8009bbc:	4b1d      	ldr	r3, [pc, #116]	; (8009c34 <__pow5mult+0xac>)
 8009bbe:	481e      	ldr	r0, [pc, #120]	; (8009c38 <__pow5mult+0xb0>)
 8009bc0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009bc4:	f7fe fee6 	bl	8008994 <__assert_func>
 8009bc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009bcc:	6004      	str	r4, [r0, #0]
 8009bce:	60c4      	str	r4, [r0, #12]
 8009bd0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009bd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009bd8:	b94c      	cbnz	r4, 8009bee <__pow5mult+0x66>
 8009bda:	f240 2171 	movw	r1, #625	; 0x271
 8009bde:	4630      	mov	r0, r6
 8009be0:	f7ff ff12 	bl	8009a08 <__i2b>
 8009be4:	2300      	movs	r3, #0
 8009be6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009bea:	4604      	mov	r4, r0
 8009bec:	6003      	str	r3, [r0, #0]
 8009bee:	f04f 0900 	mov.w	r9, #0
 8009bf2:	07eb      	lsls	r3, r5, #31
 8009bf4:	d50a      	bpl.n	8009c0c <__pow5mult+0x84>
 8009bf6:	4639      	mov	r1, r7
 8009bf8:	4622      	mov	r2, r4
 8009bfa:	4630      	mov	r0, r6
 8009bfc:	f7ff ff1a 	bl	8009a34 <__multiply>
 8009c00:	4639      	mov	r1, r7
 8009c02:	4680      	mov	r8, r0
 8009c04:	4630      	mov	r0, r6
 8009c06:	f7ff fe47 	bl	8009898 <_Bfree>
 8009c0a:	4647      	mov	r7, r8
 8009c0c:	106d      	asrs	r5, r5, #1
 8009c0e:	d00b      	beq.n	8009c28 <__pow5mult+0xa0>
 8009c10:	6820      	ldr	r0, [r4, #0]
 8009c12:	b938      	cbnz	r0, 8009c24 <__pow5mult+0x9c>
 8009c14:	4622      	mov	r2, r4
 8009c16:	4621      	mov	r1, r4
 8009c18:	4630      	mov	r0, r6
 8009c1a:	f7ff ff0b 	bl	8009a34 <__multiply>
 8009c1e:	6020      	str	r0, [r4, #0]
 8009c20:	f8c0 9000 	str.w	r9, [r0]
 8009c24:	4604      	mov	r4, r0
 8009c26:	e7e4      	b.n	8009bf2 <__pow5mult+0x6a>
 8009c28:	4638      	mov	r0, r7
 8009c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c2e:	bf00      	nop
 8009c30:	0800e348 	.word	0x0800e348
 8009c34:	0800e0ce 	.word	0x0800e0ce
 8009c38:	0800e1f5 	.word	0x0800e1f5

08009c3c <__lshift>:
 8009c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c40:	460c      	mov	r4, r1
 8009c42:	6849      	ldr	r1, [r1, #4]
 8009c44:	6923      	ldr	r3, [r4, #16]
 8009c46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c4a:	68a3      	ldr	r3, [r4, #8]
 8009c4c:	4607      	mov	r7, r0
 8009c4e:	4691      	mov	r9, r2
 8009c50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c54:	f108 0601 	add.w	r6, r8, #1
 8009c58:	42b3      	cmp	r3, r6
 8009c5a:	db0b      	blt.n	8009c74 <__lshift+0x38>
 8009c5c:	4638      	mov	r0, r7
 8009c5e:	f7ff fddb 	bl	8009818 <_Balloc>
 8009c62:	4605      	mov	r5, r0
 8009c64:	b948      	cbnz	r0, 8009c7a <__lshift+0x3e>
 8009c66:	4602      	mov	r2, r0
 8009c68:	4b2a      	ldr	r3, [pc, #168]	; (8009d14 <__lshift+0xd8>)
 8009c6a:	482b      	ldr	r0, [pc, #172]	; (8009d18 <__lshift+0xdc>)
 8009c6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009c70:	f7fe fe90 	bl	8008994 <__assert_func>
 8009c74:	3101      	adds	r1, #1
 8009c76:	005b      	lsls	r3, r3, #1
 8009c78:	e7ee      	b.n	8009c58 <__lshift+0x1c>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	f100 0114 	add.w	r1, r0, #20
 8009c80:	f100 0210 	add.w	r2, r0, #16
 8009c84:	4618      	mov	r0, r3
 8009c86:	4553      	cmp	r3, sl
 8009c88:	db37      	blt.n	8009cfa <__lshift+0xbe>
 8009c8a:	6920      	ldr	r0, [r4, #16]
 8009c8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c90:	f104 0314 	add.w	r3, r4, #20
 8009c94:	f019 091f 	ands.w	r9, r9, #31
 8009c98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ca0:	d02f      	beq.n	8009d02 <__lshift+0xc6>
 8009ca2:	f1c9 0e20 	rsb	lr, r9, #32
 8009ca6:	468a      	mov	sl, r1
 8009ca8:	f04f 0c00 	mov.w	ip, #0
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	fa02 f209 	lsl.w	r2, r2, r9
 8009cb2:	ea42 020c 	orr.w	r2, r2, ip
 8009cb6:	f84a 2b04 	str.w	r2, [sl], #4
 8009cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cbe:	4298      	cmp	r0, r3
 8009cc0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009cc4:	d8f2      	bhi.n	8009cac <__lshift+0x70>
 8009cc6:	1b03      	subs	r3, r0, r4
 8009cc8:	3b15      	subs	r3, #21
 8009cca:	f023 0303 	bic.w	r3, r3, #3
 8009cce:	3304      	adds	r3, #4
 8009cd0:	f104 0215 	add.w	r2, r4, #21
 8009cd4:	4290      	cmp	r0, r2
 8009cd6:	bf38      	it	cc
 8009cd8:	2304      	movcc	r3, #4
 8009cda:	f841 c003 	str.w	ip, [r1, r3]
 8009cde:	f1bc 0f00 	cmp.w	ip, #0
 8009ce2:	d001      	beq.n	8009ce8 <__lshift+0xac>
 8009ce4:	f108 0602 	add.w	r6, r8, #2
 8009ce8:	3e01      	subs	r6, #1
 8009cea:	4638      	mov	r0, r7
 8009cec:	612e      	str	r6, [r5, #16]
 8009cee:	4621      	mov	r1, r4
 8009cf0:	f7ff fdd2 	bl	8009898 <_Bfree>
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cfa:	f842 0f04 	str.w	r0, [r2, #4]!
 8009cfe:	3301      	adds	r3, #1
 8009d00:	e7c1      	b.n	8009c86 <__lshift+0x4a>
 8009d02:	3904      	subs	r1, #4
 8009d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d08:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d0c:	4298      	cmp	r0, r3
 8009d0e:	d8f9      	bhi.n	8009d04 <__lshift+0xc8>
 8009d10:	e7ea      	b.n	8009ce8 <__lshift+0xac>
 8009d12:	bf00      	nop
 8009d14:	0800e1e4 	.word	0x0800e1e4
 8009d18:	0800e1f5 	.word	0x0800e1f5

08009d1c <__mcmp>:
 8009d1c:	b530      	push	{r4, r5, lr}
 8009d1e:	6902      	ldr	r2, [r0, #16]
 8009d20:	690c      	ldr	r4, [r1, #16]
 8009d22:	1b12      	subs	r2, r2, r4
 8009d24:	d10e      	bne.n	8009d44 <__mcmp+0x28>
 8009d26:	f100 0314 	add.w	r3, r0, #20
 8009d2a:	3114      	adds	r1, #20
 8009d2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009d30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009d34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009d38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009d3c:	42a5      	cmp	r5, r4
 8009d3e:	d003      	beq.n	8009d48 <__mcmp+0x2c>
 8009d40:	d305      	bcc.n	8009d4e <__mcmp+0x32>
 8009d42:	2201      	movs	r2, #1
 8009d44:	4610      	mov	r0, r2
 8009d46:	bd30      	pop	{r4, r5, pc}
 8009d48:	4283      	cmp	r3, r0
 8009d4a:	d3f3      	bcc.n	8009d34 <__mcmp+0x18>
 8009d4c:	e7fa      	b.n	8009d44 <__mcmp+0x28>
 8009d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d52:	e7f7      	b.n	8009d44 <__mcmp+0x28>

08009d54 <__mdiff>:
 8009d54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d58:	460c      	mov	r4, r1
 8009d5a:	4606      	mov	r6, r0
 8009d5c:	4611      	mov	r1, r2
 8009d5e:	4620      	mov	r0, r4
 8009d60:	4690      	mov	r8, r2
 8009d62:	f7ff ffdb 	bl	8009d1c <__mcmp>
 8009d66:	1e05      	subs	r5, r0, #0
 8009d68:	d110      	bne.n	8009d8c <__mdiff+0x38>
 8009d6a:	4629      	mov	r1, r5
 8009d6c:	4630      	mov	r0, r6
 8009d6e:	f7ff fd53 	bl	8009818 <_Balloc>
 8009d72:	b930      	cbnz	r0, 8009d82 <__mdiff+0x2e>
 8009d74:	4b3a      	ldr	r3, [pc, #232]	; (8009e60 <__mdiff+0x10c>)
 8009d76:	4602      	mov	r2, r0
 8009d78:	f240 2132 	movw	r1, #562	; 0x232
 8009d7c:	4839      	ldr	r0, [pc, #228]	; (8009e64 <__mdiff+0x110>)
 8009d7e:	f7fe fe09 	bl	8008994 <__assert_func>
 8009d82:	2301      	movs	r3, #1
 8009d84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8c:	bfa4      	itt	ge
 8009d8e:	4643      	movge	r3, r8
 8009d90:	46a0      	movge	r8, r4
 8009d92:	4630      	mov	r0, r6
 8009d94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009d98:	bfa6      	itte	ge
 8009d9a:	461c      	movge	r4, r3
 8009d9c:	2500      	movge	r5, #0
 8009d9e:	2501      	movlt	r5, #1
 8009da0:	f7ff fd3a 	bl	8009818 <_Balloc>
 8009da4:	b920      	cbnz	r0, 8009db0 <__mdiff+0x5c>
 8009da6:	4b2e      	ldr	r3, [pc, #184]	; (8009e60 <__mdiff+0x10c>)
 8009da8:	4602      	mov	r2, r0
 8009daa:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009dae:	e7e5      	b.n	8009d7c <__mdiff+0x28>
 8009db0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009db4:	6926      	ldr	r6, [r4, #16]
 8009db6:	60c5      	str	r5, [r0, #12]
 8009db8:	f104 0914 	add.w	r9, r4, #20
 8009dbc:	f108 0514 	add.w	r5, r8, #20
 8009dc0:	f100 0e14 	add.w	lr, r0, #20
 8009dc4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009dc8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009dcc:	f108 0210 	add.w	r2, r8, #16
 8009dd0:	46f2      	mov	sl, lr
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009dd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009ddc:	fa1f f883 	uxth.w	r8, r3
 8009de0:	fa11 f18b 	uxtah	r1, r1, fp
 8009de4:	0c1b      	lsrs	r3, r3, #16
 8009de6:	eba1 0808 	sub.w	r8, r1, r8
 8009dea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009dee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009df2:	fa1f f888 	uxth.w	r8, r8
 8009df6:	1419      	asrs	r1, r3, #16
 8009df8:	454e      	cmp	r6, r9
 8009dfa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009dfe:	f84a 3b04 	str.w	r3, [sl], #4
 8009e02:	d8e7      	bhi.n	8009dd4 <__mdiff+0x80>
 8009e04:	1b33      	subs	r3, r6, r4
 8009e06:	3b15      	subs	r3, #21
 8009e08:	f023 0303 	bic.w	r3, r3, #3
 8009e0c:	3304      	adds	r3, #4
 8009e0e:	3415      	adds	r4, #21
 8009e10:	42a6      	cmp	r6, r4
 8009e12:	bf38      	it	cc
 8009e14:	2304      	movcc	r3, #4
 8009e16:	441d      	add	r5, r3
 8009e18:	4473      	add	r3, lr
 8009e1a:	469e      	mov	lr, r3
 8009e1c:	462e      	mov	r6, r5
 8009e1e:	4566      	cmp	r6, ip
 8009e20:	d30e      	bcc.n	8009e40 <__mdiff+0xec>
 8009e22:	f10c 0203 	add.w	r2, ip, #3
 8009e26:	1b52      	subs	r2, r2, r5
 8009e28:	f022 0203 	bic.w	r2, r2, #3
 8009e2c:	3d03      	subs	r5, #3
 8009e2e:	45ac      	cmp	ip, r5
 8009e30:	bf38      	it	cc
 8009e32:	2200      	movcc	r2, #0
 8009e34:	441a      	add	r2, r3
 8009e36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009e3a:	b17b      	cbz	r3, 8009e5c <__mdiff+0x108>
 8009e3c:	6107      	str	r7, [r0, #16]
 8009e3e:	e7a3      	b.n	8009d88 <__mdiff+0x34>
 8009e40:	f856 8b04 	ldr.w	r8, [r6], #4
 8009e44:	fa11 f288 	uxtah	r2, r1, r8
 8009e48:	1414      	asrs	r4, r2, #16
 8009e4a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009e4e:	b292      	uxth	r2, r2
 8009e50:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009e54:	f84e 2b04 	str.w	r2, [lr], #4
 8009e58:	1421      	asrs	r1, r4, #16
 8009e5a:	e7e0      	b.n	8009e1e <__mdiff+0xca>
 8009e5c:	3f01      	subs	r7, #1
 8009e5e:	e7ea      	b.n	8009e36 <__mdiff+0xe2>
 8009e60:	0800e1e4 	.word	0x0800e1e4
 8009e64:	0800e1f5 	.word	0x0800e1f5

08009e68 <__d2b>:
 8009e68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e6c:	4689      	mov	r9, r1
 8009e6e:	2101      	movs	r1, #1
 8009e70:	ec57 6b10 	vmov	r6, r7, d0
 8009e74:	4690      	mov	r8, r2
 8009e76:	f7ff fccf 	bl	8009818 <_Balloc>
 8009e7a:	4604      	mov	r4, r0
 8009e7c:	b930      	cbnz	r0, 8009e8c <__d2b+0x24>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	4b25      	ldr	r3, [pc, #148]	; (8009f18 <__d2b+0xb0>)
 8009e82:	4826      	ldr	r0, [pc, #152]	; (8009f1c <__d2b+0xb4>)
 8009e84:	f240 310a 	movw	r1, #778	; 0x30a
 8009e88:	f7fe fd84 	bl	8008994 <__assert_func>
 8009e8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009e90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e94:	bb35      	cbnz	r5, 8009ee4 <__d2b+0x7c>
 8009e96:	2e00      	cmp	r6, #0
 8009e98:	9301      	str	r3, [sp, #4]
 8009e9a:	d028      	beq.n	8009eee <__d2b+0x86>
 8009e9c:	4668      	mov	r0, sp
 8009e9e:	9600      	str	r6, [sp, #0]
 8009ea0:	f7ff fd82 	bl	80099a8 <__lo0bits>
 8009ea4:	9900      	ldr	r1, [sp, #0]
 8009ea6:	b300      	cbz	r0, 8009eea <__d2b+0x82>
 8009ea8:	9a01      	ldr	r2, [sp, #4]
 8009eaa:	f1c0 0320 	rsb	r3, r0, #32
 8009eae:	fa02 f303 	lsl.w	r3, r2, r3
 8009eb2:	430b      	orrs	r3, r1
 8009eb4:	40c2      	lsrs	r2, r0
 8009eb6:	6163      	str	r3, [r4, #20]
 8009eb8:	9201      	str	r2, [sp, #4]
 8009eba:	9b01      	ldr	r3, [sp, #4]
 8009ebc:	61a3      	str	r3, [r4, #24]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	bf14      	ite	ne
 8009ec2:	2202      	movne	r2, #2
 8009ec4:	2201      	moveq	r2, #1
 8009ec6:	6122      	str	r2, [r4, #16]
 8009ec8:	b1d5      	cbz	r5, 8009f00 <__d2b+0x98>
 8009eca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009ece:	4405      	add	r5, r0
 8009ed0:	f8c9 5000 	str.w	r5, [r9]
 8009ed4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ed8:	f8c8 0000 	str.w	r0, [r8]
 8009edc:	4620      	mov	r0, r4
 8009ede:	b003      	add	sp, #12
 8009ee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ee4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ee8:	e7d5      	b.n	8009e96 <__d2b+0x2e>
 8009eea:	6161      	str	r1, [r4, #20]
 8009eec:	e7e5      	b.n	8009eba <__d2b+0x52>
 8009eee:	a801      	add	r0, sp, #4
 8009ef0:	f7ff fd5a 	bl	80099a8 <__lo0bits>
 8009ef4:	9b01      	ldr	r3, [sp, #4]
 8009ef6:	6163      	str	r3, [r4, #20]
 8009ef8:	2201      	movs	r2, #1
 8009efa:	6122      	str	r2, [r4, #16]
 8009efc:	3020      	adds	r0, #32
 8009efe:	e7e3      	b.n	8009ec8 <__d2b+0x60>
 8009f00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f08:	f8c9 0000 	str.w	r0, [r9]
 8009f0c:	6918      	ldr	r0, [r3, #16]
 8009f0e:	f7ff fd2b 	bl	8009968 <__hi0bits>
 8009f12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f16:	e7df      	b.n	8009ed8 <__d2b+0x70>
 8009f18:	0800e1e4 	.word	0x0800e1e4
 8009f1c:	0800e1f5 	.word	0x0800e1f5

08009f20 <_calloc_r>:
 8009f20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f22:	fba1 2402 	umull	r2, r4, r1, r2
 8009f26:	b94c      	cbnz	r4, 8009f3c <_calloc_r+0x1c>
 8009f28:	4611      	mov	r1, r2
 8009f2a:	9201      	str	r2, [sp, #4]
 8009f2c:	f7fd fe5e 	bl	8007bec <_malloc_r>
 8009f30:	9a01      	ldr	r2, [sp, #4]
 8009f32:	4605      	mov	r5, r0
 8009f34:	b930      	cbnz	r0, 8009f44 <_calloc_r+0x24>
 8009f36:	4628      	mov	r0, r5
 8009f38:	b003      	add	sp, #12
 8009f3a:	bd30      	pop	{r4, r5, pc}
 8009f3c:	220c      	movs	r2, #12
 8009f3e:	6002      	str	r2, [r0, #0]
 8009f40:	2500      	movs	r5, #0
 8009f42:	e7f8      	b.n	8009f36 <_calloc_r+0x16>
 8009f44:	4621      	mov	r1, r4
 8009f46:	f7fd fddd 	bl	8007b04 <memset>
 8009f4a:	e7f4      	b.n	8009f36 <_calloc_r+0x16>

08009f4c <__sfputc_r>:
 8009f4c:	6893      	ldr	r3, [r2, #8]
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	b410      	push	{r4}
 8009f54:	6093      	str	r3, [r2, #8]
 8009f56:	da08      	bge.n	8009f6a <__sfputc_r+0x1e>
 8009f58:	6994      	ldr	r4, [r2, #24]
 8009f5a:	42a3      	cmp	r3, r4
 8009f5c:	db01      	blt.n	8009f62 <__sfputc_r+0x16>
 8009f5e:	290a      	cmp	r1, #10
 8009f60:	d103      	bne.n	8009f6a <__sfputc_r+0x1e>
 8009f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f66:	f7fe bc43 	b.w	80087f0 <__swbuf_r>
 8009f6a:	6813      	ldr	r3, [r2, #0]
 8009f6c:	1c58      	adds	r0, r3, #1
 8009f6e:	6010      	str	r0, [r2, #0]
 8009f70:	7019      	strb	r1, [r3, #0]
 8009f72:	4608      	mov	r0, r1
 8009f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f78:	4770      	bx	lr

08009f7a <__sfputs_r>:
 8009f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7c:	4606      	mov	r6, r0
 8009f7e:	460f      	mov	r7, r1
 8009f80:	4614      	mov	r4, r2
 8009f82:	18d5      	adds	r5, r2, r3
 8009f84:	42ac      	cmp	r4, r5
 8009f86:	d101      	bne.n	8009f8c <__sfputs_r+0x12>
 8009f88:	2000      	movs	r0, #0
 8009f8a:	e007      	b.n	8009f9c <__sfputs_r+0x22>
 8009f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f90:	463a      	mov	r2, r7
 8009f92:	4630      	mov	r0, r6
 8009f94:	f7ff ffda 	bl	8009f4c <__sfputc_r>
 8009f98:	1c43      	adds	r3, r0, #1
 8009f9a:	d1f3      	bne.n	8009f84 <__sfputs_r+0xa>
 8009f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009fa0 <_vfiprintf_r>:
 8009fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa4:	460d      	mov	r5, r1
 8009fa6:	b09d      	sub	sp, #116	; 0x74
 8009fa8:	4614      	mov	r4, r2
 8009faa:	4698      	mov	r8, r3
 8009fac:	4606      	mov	r6, r0
 8009fae:	b118      	cbz	r0, 8009fb8 <_vfiprintf_r+0x18>
 8009fb0:	6983      	ldr	r3, [r0, #24]
 8009fb2:	b90b      	cbnz	r3, 8009fb8 <_vfiprintf_r+0x18>
 8009fb4:	f7fd fcca 	bl	800794c <__sinit>
 8009fb8:	4b89      	ldr	r3, [pc, #548]	; (800a1e0 <_vfiprintf_r+0x240>)
 8009fba:	429d      	cmp	r5, r3
 8009fbc:	d11b      	bne.n	8009ff6 <_vfiprintf_r+0x56>
 8009fbe:	6875      	ldr	r5, [r6, #4]
 8009fc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fc2:	07d9      	lsls	r1, r3, #31
 8009fc4:	d405      	bmi.n	8009fd2 <_vfiprintf_r+0x32>
 8009fc6:	89ab      	ldrh	r3, [r5, #12]
 8009fc8:	059a      	lsls	r2, r3, #22
 8009fca:	d402      	bmi.n	8009fd2 <_vfiprintf_r+0x32>
 8009fcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fce:	f7fd fd80 	bl	8007ad2 <__retarget_lock_acquire_recursive>
 8009fd2:	89ab      	ldrh	r3, [r5, #12]
 8009fd4:	071b      	lsls	r3, r3, #28
 8009fd6:	d501      	bpl.n	8009fdc <_vfiprintf_r+0x3c>
 8009fd8:	692b      	ldr	r3, [r5, #16]
 8009fda:	b9eb      	cbnz	r3, 800a018 <_vfiprintf_r+0x78>
 8009fdc:	4629      	mov	r1, r5
 8009fde:	4630      	mov	r0, r6
 8009fe0:	f7fe fc6a 	bl	80088b8 <__swsetup_r>
 8009fe4:	b1c0      	cbz	r0, 800a018 <_vfiprintf_r+0x78>
 8009fe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fe8:	07dc      	lsls	r4, r3, #31
 8009fea:	d50e      	bpl.n	800a00a <_vfiprintf_r+0x6a>
 8009fec:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff0:	b01d      	add	sp, #116	; 0x74
 8009ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff6:	4b7b      	ldr	r3, [pc, #492]	; (800a1e4 <_vfiprintf_r+0x244>)
 8009ff8:	429d      	cmp	r5, r3
 8009ffa:	d101      	bne.n	800a000 <_vfiprintf_r+0x60>
 8009ffc:	68b5      	ldr	r5, [r6, #8]
 8009ffe:	e7df      	b.n	8009fc0 <_vfiprintf_r+0x20>
 800a000:	4b79      	ldr	r3, [pc, #484]	; (800a1e8 <_vfiprintf_r+0x248>)
 800a002:	429d      	cmp	r5, r3
 800a004:	bf08      	it	eq
 800a006:	68f5      	ldreq	r5, [r6, #12]
 800a008:	e7da      	b.n	8009fc0 <_vfiprintf_r+0x20>
 800a00a:	89ab      	ldrh	r3, [r5, #12]
 800a00c:	0598      	lsls	r0, r3, #22
 800a00e:	d4ed      	bmi.n	8009fec <_vfiprintf_r+0x4c>
 800a010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a012:	f7fd fd5f 	bl	8007ad4 <__retarget_lock_release_recursive>
 800a016:	e7e9      	b.n	8009fec <_vfiprintf_r+0x4c>
 800a018:	2300      	movs	r3, #0
 800a01a:	9309      	str	r3, [sp, #36]	; 0x24
 800a01c:	2320      	movs	r3, #32
 800a01e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a022:	f8cd 800c 	str.w	r8, [sp, #12]
 800a026:	2330      	movs	r3, #48	; 0x30
 800a028:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a1ec <_vfiprintf_r+0x24c>
 800a02c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a030:	f04f 0901 	mov.w	r9, #1
 800a034:	4623      	mov	r3, r4
 800a036:	469a      	mov	sl, r3
 800a038:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a03c:	b10a      	cbz	r2, 800a042 <_vfiprintf_r+0xa2>
 800a03e:	2a25      	cmp	r2, #37	; 0x25
 800a040:	d1f9      	bne.n	800a036 <_vfiprintf_r+0x96>
 800a042:	ebba 0b04 	subs.w	fp, sl, r4
 800a046:	d00b      	beq.n	800a060 <_vfiprintf_r+0xc0>
 800a048:	465b      	mov	r3, fp
 800a04a:	4622      	mov	r2, r4
 800a04c:	4629      	mov	r1, r5
 800a04e:	4630      	mov	r0, r6
 800a050:	f7ff ff93 	bl	8009f7a <__sfputs_r>
 800a054:	3001      	adds	r0, #1
 800a056:	f000 80aa 	beq.w	800a1ae <_vfiprintf_r+0x20e>
 800a05a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a05c:	445a      	add	r2, fp
 800a05e:	9209      	str	r2, [sp, #36]	; 0x24
 800a060:	f89a 3000 	ldrb.w	r3, [sl]
 800a064:	2b00      	cmp	r3, #0
 800a066:	f000 80a2 	beq.w	800a1ae <_vfiprintf_r+0x20e>
 800a06a:	2300      	movs	r3, #0
 800a06c:	f04f 32ff 	mov.w	r2, #4294967295
 800a070:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a074:	f10a 0a01 	add.w	sl, sl, #1
 800a078:	9304      	str	r3, [sp, #16]
 800a07a:	9307      	str	r3, [sp, #28]
 800a07c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a080:	931a      	str	r3, [sp, #104]	; 0x68
 800a082:	4654      	mov	r4, sl
 800a084:	2205      	movs	r2, #5
 800a086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a08a:	4858      	ldr	r0, [pc, #352]	; (800a1ec <_vfiprintf_r+0x24c>)
 800a08c:	f7f6 f8a8 	bl	80001e0 <memchr>
 800a090:	9a04      	ldr	r2, [sp, #16]
 800a092:	b9d8      	cbnz	r0, 800a0cc <_vfiprintf_r+0x12c>
 800a094:	06d1      	lsls	r1, r2, #27
 800a096:	bf44      	itt	mi
 800a098:	2320      	movmi	r3, #32
 800a09a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a09e:	0713      	lsls	r3, r2, #28
 800a0a0:	bf44      	itt	mi
 800a0a2:	232b      	movmi	r3, #43	; 0x2b
 800a0a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a0ac:	2b2a      	cmp	r3, #42	; 0x2a
 800a0ae:	d015      	beq.n	800a0dc <_vfiprintf_r+0x13c>
 800a0b0:	9a07      	ldr	r2, [sp, #28]
 800a0b2:	4654      	mov	r4, sl
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	f04f 0c0a 	mov.w	ip, #10
 800a0ba:	4621      	mov	r1, r4
 800a0bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0c0:	3b30      	subs	r3, #48	; 0x30
 800a0c2:	2b09      	cmp	r3, #9
 800a0c4:	d94e      	bls.n	800a164 <_vfiprintf_r+0x1c4>
 800a0c6:	b1b0      	cbz	r0, 800a0f6 <_vfiprintf_r+0x156>
 800a0c8:	9207      	str	r2, [sp, #28]
 800a0ca:	e014      	b.n	800a0f6 <_vfiprintf_r+0x156>
 800a0cc:	eba0 0308 	sub.w	r3, r0, r8
 800a0d0:	fa09 f303 	lsl.w	r3, r9, r3
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	9304      	str	r3, [sp, #16]
 800a0d8:	46a2      	mov	sl, r4
 800a0da:	e7d2      	b.n	800a082 <_vfiprintf_r+0xe2>
 800a0dc:	9b03      	ldr	r3, [sp, #12]
 800a0de:	1d19      	adds	r1, r3, #4
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	9103      	str	r1, [sp, #12]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	bfbb      	ittet	lt
 800a0e8:	425b      	neglt	r3, r3
 800a0ea:	f042 0202 	orrlt.w	r2, r2, #2
 800a0ee:	9307      	strge	r3, [sp, #28]
 800a0f0:	9307      	strlt	r3, [sp, #28]
 800a0f2:	bfb8      	it	lt
 800a0f4:	9204      	strlt	r2, [sp, #16]
 800a0f6:	7823      	ldrb	r3, [r4, #0]
 800a0f8:	2b2e      	cmp	r3, #46	; 0x2e
 800a0fa:	d10c      	bne.n	800a116 <_vfiprintf_r+0x176>
 800a0fc:	7863      	ldrb	r3, [r4, #1]
 800a0fe:	2b2a      	cmp	r3, #42	; 0x2a
 800a100:	d135      	bne.n	800a16e <_vfiprintf_r+0x1ce>
 800a102:	9b03      	ldr	r3, [sp, #12]
 800a104:	1d1a      	adds	r2, r3, #4
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	9203      	str	r2, [sp, #12]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	bfb8      	it	lt
 800a10e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a112:	3402      	adds	r4, #2
 800a114:	9305      	str	r3, [sp, #20]
 800a116:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a1fc <_vfiprintf_r+0x25c>
 800a11a:	7821      	ldrb	r1, [r4, #0]
 800a11c:	2203      	movs	r2, #3
 800a11e:	4650      	mov	r0, sl
 800a120:	f7f6 f85e 	bl	80001e0 <memchr>
 800a124:	b140      	cbz	r0, 800a138 <_vfiprintf_r+0x198>
 800a126:	2340      	movs	r3, #64	; 0x40
 800a128:	eba0 000a 	sub.w	r0, r0, sl
 800a12c:	fa03 f000 	lsl.w	r0, r3, r0
 800a130:	9b04      	ldr	r3, [sp, #16]
 800a132:	4303      	orrs	r3, r0
 800a134:	3401      	adds	r4, #1
 800a136:	9304      	str	r3, [sp, #16]
 800a138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a13c:	482c      	ldr	r0, [pc, #176]	; (800a1f0 <_vfiprintf_r+0x250>)
 800a13e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a142:	2206      	movs	r2, #6
 800a144:	f7f6 f84c 	bl	80001e0 <memchr>
 800a148:	2800      	cmp	r0, #0
 800a14a:	d03f      	beq.n	800a1cc <_vfiprintf_r+0x22c>
 800a14c:	4b29      	ldr	r3, [pc, #164]	; (800a1f4 <_vfiprintf_r+0x254>)
 800a14e:	bb1b      	cbnz	r3, 800a198 <_vfiprintf_r+0x1f8>
 800a150:	9b03      	ldr	r3, [sp, #12]
 800a152:	3307      	adds	r3, #7
 800a154:	f023 0307 	bic.w	r3, r3, #7
 800a158:	3308      	adds	r3, #8
 800a15a:	9303      	str	r3, [sp, #12]
 800a15c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a15e:	443b      	add	r3, r7
 800a160:	9309      	str	r3, [sp, #36]	; 0x24
 800a162:	e767      	b.n	800a034 <_vfiprintf_r+0x94>
 800a164:	fb0c 3202 	mla	r2, ip, r2, r3
 800a168:	460c      	mov	r4, r1
 800a16a:	2001      	movs	r0, #1
 800a16c:	e7a5      	b.n	800a0ba <_vfiprintf_r+0x11a>
 800a16e:	2300      	movs	r3, #0
 800a170:	3401      	adds	r4, #1
 800a172:	9305      	str	r3, [sp, #20]
 800a174:	4619      	mov	r1, r3
 800a176:	f04f 0c0a 	mov.w	ip, #10
 800a17a:	4620      	mov	r0, r4
 800a17c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a180:	3a30      	subs	r2, #48	; 0x30
 800a182:	2a09      	cmp	r2, #9
 800a184:	d903      	bls.n	800a18e <_vfiprintf_r+0x1ee>
 800a186:	2b00      	cmp	r3, #0
 800a188:	d0c5      	beq.n	800a116 <_vfiprintf_r+0x176>
 800a18a:	9105      	str	r1, [sp, #20]
 800a18c:	e7c3      	b.n	800a116 <_vfiprintf_r+0x176>
 800a18e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a192:	4604      	mov	r4, r0
 800a194:	2301      	movs	r3, #1
 800a196:	e7f0      	b.n	800a17a <_vfiprintf_r+0x1da>
 800a198:	ab03      	add	r3, sp, #12
 800a19a:	9300      	str	r3, [sp, #0]
 800a19c:	462a      	mov	r2, r5
 800a19e:	4b16      	ldr	r3, [pc, #88]	; (800a1f8 <_vfiprintf_r+0x258>)
 800a1a0:	a904      	add	r1, sp, #16
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	f7fd fe36 	bl	8007e14 <_printf_float>
 800a1a8:	4607      	mov	r7, r0
 800a1aa:	1c78      	adds	r0, r7, #1
 800a1ac:	d1d6      	bne.n	800a15c <_vfiprintf_r+0x1bc>
 800a1ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1b0:	07d9      	lsls	r1, r3, #31
 800a1b2:	d405      	bmi.n	800a1c0 <_vfiprintf_r+0x220>
 800a1b4:	89ab      	ldrh	r3, [r5, #12]
 800a1b6:	059a      	lsls	r2, r3, #22
 800a1b8:	d402      	bmi.n	800a1c0 <_vfiprintf_r+0x220>
 800a1ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1bc:	f7fd fc8a 	bl	8007ad4 <__retarget_lock_release_recursive>
 800a1c0:	89ab      	ldrh	r3, [r5, #12]
 800a1c2:	065b      	lsls	r3, r3, #25
 800a1c4:	f53f af12 	bmi.w	8009fec <_vfiprintf_r+0x4c>
 800a1c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1ca:	e711      	b.n	8009ff0 <_vfiprintf_r+0x50>
 800a1cc:	ab03      	add	r3, sp, #12
 800a1ce:	9300      	str	r3, [sp, #0]
 800a1d0:	462a      	mov	r2, r5
 800a1d2:	4b09      	ldr	r3, [pc, #36]	; (800a1f8 <_vfiprintf_r+0x258>)
 800a1d4:	a904      	add	r1, sp, #16
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	f7fe f8c0 	bl	800835c <_printf_i>
 800a1dc:	e7e4      	b.n	800a1a8 <_vfiprintf_r+0x208>
 800a1de:	bf00      	nop
 800a1e0:	0800e058 	.word	0x0800e058
 800a1e4:	0800e078 	.word	0x0800e078
 800a1e8:	0800e038 	.word	0x0800e038
 800a1ec:	0800e354 	.word	0x0800e354
 800a1f0:	0800e35e 	.word	0x0800e35e
 800a1f4:	08007e15 	.word	0x08007e15
 800a1f8:	08009f7b 	.word	0x08009f7b
 800a1fc:	0800e35a 	.word	0x0800e35a

0800a200 <_read_r>:
 800a200:	b538      	push	{r3, r4, r5, lr}
 800a202:	4d07      	ldr	r5, [pc, #28]	; (800a220 <_read_r+0x20>)
 800a204:	4604      	mov	r4, r0
 800a206:	4608      	mov	r0, r1
 800a208:	4611      	mov	r1, r2
 800a20a:	2200      	movs	r2, #0
 800a20c:	602a      	str	r2, [r5, #0]
 800a20e:	461a      	mov	r2, r3
 800a210:	f000 f9fa 	bl	800a608 <_read>
 800a214:	1c43      	adds	r3, r0, #1
 800a216:	d102      	bne.n	800a21e <_read_r+0x1e>
 800a218:	682b      	ldr	r3, [r5, #0]
 800a21a:	b103      	cbz	r3, 800a21e <_read_r+0x1e>
 800a21c:	6023      	str	r3, [r4, #0]
 800a21e:	bd38      	pop	{r3, r4, r5, pc}
 800a220:	20001a80 	.word	0x20001a80

0800a224 <abort>:
 800a224:	b508      	push	{r3, lr}
 800a226:	2006      	movs	r0, #6
 800a228:	f000 f860 	bl	800a2ec <raise>
 800a22c:	2001      	movs	r0, #1
 800a22e:	f000 f9f3 	bl	800a618 <_exit>
	...

0800a234 <_fstat_r>:
 800a234:	b538      	push	{r3, r4, r5, lr}
 800a236:	4d07      	ldr	r5, [pc, #28]	; (800a254 <_fstat_r+0x20>)
 800a238:	2300      	movs	r3, #0
 800a23a:	4604      	mov	r4, r0
 800a23c:	4608      	mov	r0, r1
 800a23e:	4611      	mov	r1, r2
 800a240:	602b      	str	r3, [r5, #0]
 800a242:	f000 f9b9 	bl	800a5b8 <_fstat>
 800a246:	1c43      	adds	r3, r0, #1
 800a248:	d102      	bne.n	800a250 <_fstat_r+0x1c>
 800a24a:	682b      	ldr	r3, [r5, #0]
 800a24c:	b103      	cbz	r3, 800a250 <_fstat_r+0x1c>
 800a24e:	6023      	str	r3, [r4, #0]
 800a250:	bd38      	pop	{r3, r4, r5, pc}
 800a252:	bf00      	nop
 800a254:	20001a80 	.word	0x20001a80

0800a258 <_isatty_r>:
 800a258:	b538      	push	{r3, r4, r5, lr}
 800a25a:	4d06      	ldr	r5, [pc, #24]	; (800a274 <_isatty_r+0x1c>)
 800a25c:	2300      	movs	r3, #0
 800a25e:	4604      	mov	r4, r0
 800a260:	4608      	mov	r0, r1
 800a262:	602b      	str	r3, [r5, #0]
 800a264:	f000 f9b8 	bl	800a5d8 <_isatty>
 800a268:	1c43      	adds	r3, r0, #1
 800a26a:	d102      	bne.n	800a272 <_isatty_r+0x1a>
 800a26c:	682b      	ldr	r3, [r5, #0]
 800a26e:	b103      	cbz	r3, 800a272 <_isatty_r+0x1a>
 800a270:	6023      	str	r3, [r4, #0]
 800a272:	bd38      	pop	{r3, r4, r5, pc}
 800a274:	20001a80 	.word	0x20001a80

0800a278 <__ascii_mbtowc>:
 800a278:	b082      	sub	sp, #8
 800a27a:	b901      	cbnz	r1, 800a27e <__ascii_mbtowc+0x6>
 800a27c:	a901      	add	r1, sp, #4
 800a27e:	b142      	cbz	r2, 800a292 <__ascii_mbtowc+0x1a>
 800a280:	b14b      	cbz	r3, 800a296 <__ascii_mbtowc+0x1e>
 800a282:	7813      	ldrb	r3, [r2, #0]
 800a284:	600b      	str	r3, [r1, #0]
 800a286:	7812      	ldrb	r2, [r2, #0]
 800a288:	1e10      	subs	r0, r2, #0
 800a28a:	bf18      	it	ne
 800a28c:	2001      	movne	r0, #1
 800a28e:	b002      	add	sp, #8
 800a290:	4770      	bx	lr
 800a292:	4610      	mov	r0, r2
 800a294:	e7fb      	b.n	800a28e <__ascii_mbtowc+0x16>
 800a296:	f06f 0001 	mvn.w	r0, #1
 800a29a:	e7f8      	b.n	800a28e <__ascii_mbtowc+0x16>

0800a29c <_raise_r>:
 800a29c:	291f      	cmp	r1, #31
 800a29e:	b538      	push	{r3, r4, r5, lr}
 800a2a0:	4604      	mov	r4, r0
 800a2a2:	460d      	mov	r5, r1
 800a2a4:	d904      	bls.n	800a2b0 <_raise_r+0x14>
 800a2a6:	2316      	movs	r3, #22
 800a2a8:	6003      	str	r3, [r0, #0]
 800a2aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ae:	bd38      	pop	{r3, r4, r5, pc}
 800a2b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a2b2:	b112      	cbz	r2, 800a2ba <_raise_r+0x1e>
 800a2b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2b8:	b94b      	cbnz	r3, 800a2ce <_raise_r+0x32>
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	f000 f830 	bl	800a320 <_getpid_r>
 800a2c0:	462a      	mov	r2, r5
 800a2c2:	4601      	mov	r1, r0
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2ca:	f000 b817 	b.w	800a2fc <_kill_r>
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d00a      	beq.n	800a2e8 <_raise_r+0x4c>
 800a2d2:	1c59      	adds	r1, r3, #1
 800a2d4:	d103      	bne.n	800a2de <_raise_r+0x42>
 800a2d6:	2316      	movs	r3, #22
 800a2d8:	6003      	str	r3, [r0, #0]
 800a2da:	2001      	movs	r0, #1
 800a2dc:	e7e7      	b.n	800a2ae <_raise_r+0x12>
 800a2de:	2400      	movs	r4, #0
 800a2e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	4798      	blx	r3
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	e7e0      	b.n	800a2ae <_raise_r+0x12>

0800a2ec <raise>:
 800a2ec:	4b02      	ldr	r3, [pc, #8]	; (800a2f8 <raise+0xc>)
 800a2ee:	4601      	mov	r1, r0
 800a2f0:	6818      	ldr	r0, [r3, #0]
 800a2f2:	f7ff bfd3 	b.w	800a29c <_raise_r>
 800a2f6:	bf00      	nop
 800a2f8:	20000724 	.word	0x20000724

0800a2fc <_kill_r>:
 800a2fc:	b538      	push	{r3, r4, r5, lr}
 800a2fe:	4d07      	ldr	r5, [pc, #28]	; (800a31c <_kill_r+0x20>)
 800a300:	2300      	movs	r3, #0
 800a302:	4604      	mov	r4, r0
 800a304:	4608      	mov	r0, r1
 800a306:	4611      	mov	r1, r2
 800a308:	602b      	str	r3, [r5, #0]
 800a30a:	f000 f96d 	bl	800a5e8 <_kill>
 800a30e:	1c43      	adds	r3, r0, #1
 800a310:	d102      	bne.n	800a318 <_kill_r+0x1c>
 800a312:	682b      	ldr	r3, [r5, #0]
 800a314:	b103      	cbz	r3, 800a318 <_kill_r+0x1c>
 800a316:	6023      	str	r3, [r4, #0]
 800a318:	bd38      	pop	{r3, r4, r5, pc}
 800a31a:	bf00      	nop
 800a31c:	20001a80 	.word	0x20001a80

0800a320 <_getpid_r>:
 800a320:	f000 b952 	b.w	800a5c8 <_getpid>

0800a324 <__ascii_wctomb>:
 800a324:	b149      	cbz	r1, 800a33a <__ascii_wctomb+0x16>
 800a326:	2aff      	cmp	r2, #255	; 0xff
 800a328:	bf85      	ittet	hi
 800a32a:	238a      	movhi	r3, #138	; 0x8a
 800a32c:	6003      	strhi	r3, [r0, #0]
 800a32e:	700a      	strbls	r2, [r1, #0]
 800a330:	f04f 30ff 	movhi.w	r0, #4294967295
 800a334:	bf98      	it	ls
 800a336:	2001      	movls	r0, #1
 800a338:	4770      	bx	lr
 800a33a:	4608      	mov	r0, r1
 800a33c:	4770      	bx	lr
	...

0800a340 <expf>:
 800a340:	b508      	push	{r3, lr}
 800a342:	ed2d 8b02 	vpush	{d8}
 800a346:	eef0 8a40 	vmov.f32	s17, s0
 800a34a:	f000 f82f 	bl	800a3ac <__ieee754_expf>
 800a34e:	eeb0 8a40 	vmov.f32	s16, s0
 800a352:	eeb0 0a68 	vmov.f32	s0, s17
 800a356:	f000 f919 	bl	800a58c <finitef>
 800a35a:	b160      	cbz	r0, 800a376 <expf+0x36>
 800a35c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800a39c <expf+0x5c>
 800a360:	eef4 8ae7 	vcmpe.f32	s17, s15
 800a364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a368:	dd0a      	ble.n	800a380 <expf+0x40>
 800a36a:	f7fd f9cf 	bl	800770c <__errno>
 800a36e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800a3a0 <expf+0x60>
 800a372:	2322      	movs	r3, #34	; 0x22
 800a374:	6003      	str	r3, [r0, #0]
 800a376:	eeb0 0a48 	vmov.f32	s0, s16
 800a37a:	ecbd 8b02 	vpop	{d8}
 800a37e:	bd08      	pop	{r3, pc}
 800a380:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a3a4 <expf+0x64>
 800a384:	eef4 8ae7 	vcmpe.f32	s17, s15
 800a388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a38c:	d5f3      	bpl.n	800a376 <expf+0x36>
 800a38e:	f7fd f9bd 	bl	800770c <__errno>
 800a392:	2322      	movs	r3, #34	; 0x22
 800a394:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800a3a8 <expf+0x68>
 800a398:	6003      	str	r3, [r0, #0]
 800a39a:	e7ec      	b.n	800a376 <expf+0x36>
 800a39c:	42b17180 	.word	0x42b17180
 800a3a0:	7f800000 	.word	0x7f800000
 800a3a4:	c2cff1b5 	.word	0xc2cff1b5
 800a3a8:	00000000 	.word	0x00000000

0800a3ac <__ieee754_expf>:
 800a3ac:	ee10 2a10 	vmov	r2, s0
 800a3b0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a3b4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a3b8:	d902      	bls.n	800a3c0 <__ieee754_expf+0x14>
 800a3ba:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a3be:	4770      	bx	lr
 800a3c0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800a3c4:	d106      	bne.n	800a3d4 <__ieee754_expf+0x28>
 800a3c6:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800a500 <__ieee754_expf+0x154>
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	bf18      	it	ne
 800a3ce:	eeb0 0a67 	vmovne.f32	s0, s15
 800a3d2:	4770      	bx	lr
 800a3d4:	484b      	ldr	r0, [pc, #300]	; (800a504 <__ieee754_expf+0x158>)
 800a3d6:	4282      	cmp	r2, r0
 800a3d8:	dd02      	ble.n	800a3e0 <__ieee754_expf+0x34>
 800a3da:	2000      	movs	r0, #0
 800a3dc:	f000 b8d0 	b.w	800a580 <__math_oflowf>
 800a3e0:	2a00      	cmp	r2, #0
 800a3e2:	da05      	bge.n	800a3f0 <__ieee754_expf+0x44>
 800a3e4:	4a48      	ldr	r2, [pc, #288]	; (800a508 <__ieee754_expf+0x15c>)
 800a3e6:	4291      	cmp	r1, r2
 800a3e8:	d902      	bls.n	800a3f0 <__ieee754_expf+0x44>
 800a3ea:	2000      	movs	r0, #0
 800a3ec:	f000 b8c2 	b.w	800a574 <__math_uflowf>
 800a3f0:	4a46      	ldr	r2, [pc, #280]	; (800a50c <__ieee754_expf+0x160>)
 800a3f2:	4291      	cmp	r1, r2
 800a3f4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a3f8:	d952      	bls.n	800a4a0 <__ieee754_expf+0xf4>
 800a3fa:	4a45      	ldr	r2, [pc, #276]	; (800a510 <__ieee754_expf+0x164>)
 800a3fc:	4291      	cmp	r1, r2
 800a3fe:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800a402:	d834      	bhi.n	800a46e <__ieee754_expf+0xc2>
 800a404:	4943      	ldr	r1, [pc, #268]	; (800a514 <__ieee754_expf+0x168>)
 800a406:	4411      	add	r1, r2
 800a408:	ed91 7a00 	vldr	s14, [r1]
 800a40c:	4942      	ldr	r1, [pc, #264]	; (800a518 <__ieee754_expf+0x16c>)
 800a40e:	440a      	add	r2, r1
 800a410:	edd2 7a00 	vldr	s15, [r2]
 800a414:	ee30 7a47 	vsub.f32	s14, s0, s14
 800a418:	f1c3 0201 	rsb	r2, r3, #1
 800a41c:	1ad2      	subs	r2, r2, r3
 800a41e:	ee37 0a67 	vsub.f32	s0, s14, s15
 800a422:	ee20 6a00 	vmul.f32	s12, s0, s0
 800a426:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800a51c <__ieee754_expf+0x170>
 800a42a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a520 <__ieee754_expf+0x174>
 800a42e:	eee6 6a05 	vfma.f32	s13, s12, s10
 800a432:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800a524 <__ieee754_expf+0x178>
 800a436:	eea6 5a86 	vfma.f32	s10, s13, s12
 800a43a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a528 <__ieee754_expf+0x17c>
 800a43e:	eee5 6a06 	vfma.f32	s13, s10, s12
 800a442:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800a52c <__ieee754_expf+0x180>
 800a446:	eea6 5a86 	vfma.f32	s10, s13, s12
 800a44a:	eef0 6a40 	vmov.f32	s13, s0
 800a44e:	eee5 6a46 	vfms.f32	s13, s10, s12
 800a452:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800a456:	ee20 5a26 	vmul.f32	s10, s0, s13
 800a45a:	bb92      	cbnz	r2, 800a4c2 <__ieee754_expf+0x116>
 800a45c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800a460:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800a464:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a468:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800a46c:	4770      	bx	lr
 800a46e:	4b30      	ldr	r3, [pc, #192]	; (800a530 <__ieee754_expf+0x184>)
 800a470:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800a534 <__ieee754_expf+0x188>
 800a474:	eddf 6a30 	vldr	s13, [pc, #192]	; 800a538 <__ieee754_expf+0x18c>
 800a478:	4413      	add	r3, r2
 800a47a:	edd3 7a00 	vldr	s15, [r3]
 800a47e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a482:	eeb0 7a40 	vmov.f32	s14, s0
 800a486:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a48a:	ee17 2a90 	vmov	r2, s15
 800a48e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a492:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800a496:	eddf 6a29 	vldr	s13, [pc, #164]	; 800a53c <__ieee754_expf+0x190>
 800a49a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a49e:	e7be      	b.n	800a41e <__ieee754_expf+0x72>
 800a4a0:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800a4a4:	d20b      	bcs.n	800a4be <__ieee754_expf+0x112>
 800a4a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a540 <__ieee754_expf+0x194>
 800a4aa:	ee70 6a26 	vadd.f32	s13, s0, s13
 800a4ae:	eef4 6ae5 	vcmpe.f32	s13, s11
 800a4b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4b6:	dd02      	ble.n	800a4be <__ieee754_expf+0x112>
 800a4b8:	ee30 0a25 	vadd.f32	s0, s0, s11
 800a4bc:	4770      	bx	lr
 800a4be:	2200      	movs	r2, #0
 800a4c0:	e7af      	b.n	800a422 <__ieee754_expf+0x76>
 800a4c2:	ee76 6a66 	vsub.f32	s13, s12, s13
 800a4c6:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800a4ca:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800a4ce:	bfb8      	it	lt
 800a4d0:	3264      	addlt	r2, #100	; 0x64
 800a4d2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a4d6:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800a4da:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800a4de:	ee17 3a90 	vmov	r3, s15
 800a4e2:	bfab      	itete	ge
 800a4e4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800a4e8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800a4ec:	ee00 3a10 	vmovge	s0, r3
 800a4f0:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800a544 <__ieee754_expf+0x198>
 800a4f4:	bfbc      	itt	lt
 800a4f6:	ee00 3a10 	vmovlt	s0, r3
 800a4fa:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800a4fe:	4770      	bx	lr
 800a500:	00000000 	.word	0x00000000
 800a504:	42b17217 	.word	0x42b17217
 800a508:	42cff1b5 	.word	0x42cff1b5
 800a50c:	3eb17218 	.word	0x3eb17218
 800a510:	3f851591 	.word	0x3f851591
 800a514:	0800e478 	.word	0x0800e478
 800a518:	0800e480 	.word	0x0800e480
 800a51c:	3331bb4c 	.word	0x3331bb4c
 800a520:	b5ddea0e 	.word	0xb5ddea0e
 800a524:	388ab355 	.word	0x388ab355
 800a528:	bb360b61 	.word	0xbb360b61
 800a52c:	3e2aaaab 	.word	0x3e2aaaab
 800a530:	0800e470 	.word	0x0800e470
 800a534:	3fb8aa3b 	.word	0x3fb8aa3b
 800a538:	3f317180 	.word	0x3f317180
 800a53c:	3717f7d1 	.word	0x3717f7d1
 800a540:	7149f2ca 	.word	0x7149f2ca
 800a544:	0d800000 	.word	0x0d800000

0800a548 <with_errnof>:
 800a548:	b513      	push	{r0, r1, r4, lr}
 800a54a:	4604      	mov	r4, r0
 800a54c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a550:	f7fd f8dc 	bl	800770c <__errno>
 800a554:	ed9d 0a01 	vldr	s0, [sp, #4]
 800a558:	6004      	str	r4, [r0, #0]
 800a55a:	b002      	add	sp, #8
 800a55c:	bd10      	pop	{r4, pc}

0800a55e <xflowf>:
 800a55e:	b130      	cbz	r0, 800a56e <xflowf+0x10>
 800a560:	eef1 7a40 	vneg.f32	s15, s0
 800a564:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a568:	2022      	movs	r0, #34	; 0x22
 800a56a:	f7ff bfed 	b.w	800a548 <with_errnof>
 800a56e:	eef0 7a40 	vmov.f32	s15, s0
 800a572:	e7f7      	b.n	800a564 <xflowf+0x6>

0800a574 <__math_uflowf>:
 800a574:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a57c <__math_uflowf+0x8>
 800a578:	f7ff bff1 	b.w	800a55e <xflowf>
 800a57c:	10000000 	.word	0x10000000

0800a580 <__math_oflowf>:
 800a580:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a588 <__math_oflowf+0x8>
 800a584:	f7ff bfeb 	b.w	800a55e <xflowf>
 800a588:	70000000 	.word	0x70000000

0800a58c <finitef>:
 800a58c:	b082      	sub	sp, #8
 800a58e:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a592:	9801      	ldr	r0, [sp, #4]
 800a594:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a598:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800a59c:	bfac      	ite	ge
 800a59e:	2000      	movge	r0, #0
 800a5a0:	2001      	movlt	r0, #1
 800a5a2:	b002      	add	sp, #8
 800a5a4:	4770      	bx	lr
	...

0800a5a8 <_close>:
 800a5a8:	4b02      	ldr	r3, [pc, #8]	; (800a5b4 <_close+0xc>)
 800a5aa:	2258      	movs	r2, #88	; 0x58
 800a5ac:	601a      	str	r2, [r3, #0]
 800a5ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b2:	4770      	bx	lr
 800a5b4:	20001a80 	.word	0x20001a80

0800a5b8 <_fstat>:
 800a5b8:	4b02      	ldr	r3, [pc, #8]	; (800a5c4 <_fstat+0xc>)
 800a5ba:	2258      	movs	r2, #88	; 0x58
 800a5bc:	601a      	str	r2, [r3, #0]
 800a5be:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c2:	4770      	bx	lr
 800a5c4:	20001a80 	.word	0x20001a80

0800a5c8 <_getpid>:
 800a5c8:	4b02      	ldr	r3, [pc, #8]	; (800a5d4 <_getpid+0xc>)
 800a5ca:	2258      	movs	r2, #88	; 0x58
 800a5cc:	601a      	str	r2, [r3, #0]
 800a5ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a5d2:	4770      	bx	lr
 800a5d4:	20001a80 	.word	0x20001a80

0800a5d8 <_isatty>:
 800a5d8:	4b02      	ldr	r3, [pc, #8]	; (800a5e4 <_isatty+0xc>)
 800a5da:	2258      	movs	r2, #88	; 0x58
 800a5dc:	601a      	str	r2, [r3, #0]
 800a5de:	2000      	movs	r0, #0
 800a5e0:	4770      	bx	lr
 800a5e2:	bf00      	nop
 800a5e4:	20001a80 	.word	0x20001a80

0800a5e8 <_kill>:
 800a5e8:	4b02      	ldr	r3, [pc, #8]	; (800a5f4 <_kill+0xc>)
 800a5ea:	2258      	movs	r2, #88	; 0x58
 800a5ec:	601a      	str	r2, [r3, #0]
 800a5ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f2:	4770      	bx	lr
 800a5f4:	20001a80 	.word	0x20001a80

0800a5f8 <_lseek>:
 800a5f8:	4b02      	ldr	r3, [pc, #8]	; (800a604 <_lseek+0xc>)
 800a5fa:	2258      	movs	r2, #88	; 0x58
 800a5fc:	601a      	str	r2, [r3, #0]
 800a5fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a602:	4770      	bx	lr
 800a604:	20001a80 	.word	0x20001a80

0800a608 <_read>:
 800a608:	4b02      	ldr	r3, [pc, #8]	; (800a614 <_read+0xc>)
 800a60a:	2258      	movs	r2, #88	; 0x58
 800a60c:	601a      	str	r2, [r3, #0]
 800a60e:	f04f 30ff 	mov.w	r0, #4294967295
 800a612:	4770      	bx	lr
 800a614:	20001a80 	.word	0x20001a80

0800a618 <_exit>:
 800a618:	e7fe      	b.n	800a618 <_exit>
	...

0800a61c <_init>:
 800a61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a61e:	bf00      	nop
 800a620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a622:	bc08      	pop	{r3}
 800a624:	469e      	mov	lr, r3
 800a626:	4770      	bx	lr

0800a628 <_fini>:
 800a628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a62a:	bf00      	nop
 800a62c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a62e:	bc08      	pop	{r3}
 800a630:	469e      	mov	lr, r3
 800a632:	4770      	bx	lr
