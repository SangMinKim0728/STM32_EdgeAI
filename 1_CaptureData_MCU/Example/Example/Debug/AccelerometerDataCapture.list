
AccelerometerDataCapture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025cc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002790  08002790  00012790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080027a8  080027a8  000127a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080027b0  080027b0  000127b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080027b4  080027b4  000127b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080027b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000d0  2000000c  080027c4  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200000dc  080027c4  000200dc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c116  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001b7e  00000000  00000000  0002c152  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000756f  00000000  00000000  0002dcd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000009b0  00000000  00000000  00035240  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000980  00000000  00000000  00035bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000205c0  00000000  00000000  00036570  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000781b  00000000  00000000  00056b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000c50a8  00000000  00000000  0005e34b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  001233f3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001a84  00000000  00000000  00123470  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002778 	.word	0x08002778

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002778 	.word	0x08002778

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b510      	push	{r4, lr}
 8000516:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_InitTick+0x40>)
 800051a:	7818      	ldrb	r0, [r3, #0]
 800051c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000520:	fbb3 f3f0 	udiv	r3, r3, r0
 8000524:	4a0c      	ldr	r2, [pc, #48]	; (8000558 <HAL_InitTick+0x44>)
 8000526:	6810      	ldr	r0, [r2, #0]
 8000528:	fbb0 f0f3 	udiv	r0, r0, r3
 800052c:	f000 f8aa 	bl	8000684 <HAL_SYSTICK_Config>
 8000530:	b968      	cbnz	r0, 800054e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000532:	2c0f      	cmp	r4, #15
 8000534:	d901      	bls.n	800053a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000536:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000538:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800053a:	2200      	movs	r2, #0
 800053c:	4621      	mov	r1, r4
 800053e:	f04f 30ff 	mov.w	r0, #4294967295
 8000542:	f000 f85f 	bl	8000604 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000546:	4b03      	ldr	r3, [pc, #12]	; (8000554 <HAL_InitTick+0x40>)
 8000548:	605c      	str	r4, [r3, #4]
  return HAL_OK;
 800054a:	2000      	movs	r0, #0
 800054c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800054e:	2001      	movs	r0, #1
 8000550:	bd10      	pop	{r4, pc}
 8000552:	bf00      	nop
 8000554:	20000000 	.word	0x20000000
 8000558:	20000008 	.word	0x20000008

0800055c <HAL_Init>:
{
 800055c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <HAL_Init+0x30>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000566:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800056e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000576:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000578:	2003      	movs	r0, #3
 800057a:	f000 f831 	bl	80005e0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800057e:	2000      	movs	r0, #0
 8000580:	f7ff ffc8 	bl	8000514 <HAL_InitTick>
  HAL_MspInit();
 8000584:	f001 ffce 	bl	8002524 <HAL_MspInit>
}
 8000588:	2000      	movs	r0, #0
 800058a:	bd08      	pop	{r3, pc}
 800058c:	40023c00 	.word	0x40023c00

08000590 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
extern void IncrementTimer(void);
__weak void HAL_IncTick(void)
{
 8000590:	b508      	push	{r3, lr}
  uwTick += uwTickFreq;
 8000592:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <HAL_IncTick+0x14>)
 8000594:	6811      	ldr	r1, [r2, #0]
 8000596:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <HAL_IncTick+0x18>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	440b      	add	r3, r1
 800059c:	6013      	str	r3, [r2, #0]

  IncrementTimer();
 800059e:	f001 fef5 	bl	800238c <IncrementTimer>
 80005a2:	bd08      	pop	{r3, pc}
 80005a4:	20000034 	.word	0x20000034
 80005a8:	20000000 	.word	0x20000000

080005ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005ac:	4b01      	ldr	r3, [pc, #4]	; (80005b4 <HAL_GetTick+0x8>)
 80005ae:	6818      	ldr	r0, [r3, #0]
}
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000034 	.word	0x20000034

080005b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b8:	b538      	push	{r3, r4, r5, lr}
 80005ba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005bc:	f7ff fff6 	bl	80005ac <HAL_GetTick>
 80005c0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005c2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80005c6:	d002      	beq.n	80005ce <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <HAL_Delay+0x24>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005ce:	f7ff ffed 	bl	80005ac <HAL_GetTick>
 80005d2:	1b40      	subs	r0, r0, r5
 80005d4:	4284      	cmp	r4, r0
 80005d6:	d8fa      	bhi.n	80005ce <HAL_Delay+0x16>
  {
  }
}
 80005d8:	bd38      	pop	{r3, r4, r5, pc}
 80005da:	bf00      	nop
 80005dc:	20000000 	.word	0x20000000

080005e0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005e0:	4a07      	ldr	r2, [pc, #28]	; (8000600 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005e2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005ec:	0200      	lsls	r0, r0, #8
 80005ee:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f2:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80005f4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80005f8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80005fc:	60d0      	str	r0, [r2, #12]
 80005fe:	4770      	bx	lr
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000604:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000606:	4b16      	ldr	r3, [pc, #88]	; (8000660 <HAL_NVIC_SetPriority+0x5c>)
 8000608:	68db      	ldr	r3, [r3, #12]
 800060a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800060e:	f1c3 0407 	rsb	r4, r3, #7
 8000612:	2c04      	cmp	r4, #4
 8000614:	bf28      	it	cs
 8000616:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000618:	1d1d      	adds	r5, r3, #4
 800061a:	2d06      	cmp	r5, #6
 800061c:	d917      	bls.n	800064e <HAL_NVIC_SetPriority+0x4a>
 800061e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000620:	2501      	movs	r5, #1
 8000622:	fa05 f404 	lsl.w	r4, r5, r4
 8000626:	3c01      	subs	r4, #1
 8000628:	4021      	ands	r1, r4
 800062a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800062c:	fa05 f303 	lsl.w	r3, r5, r3
 8000630:	3b01      	subs	r3, #1
 8000632:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000634:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000636:	2800      	cmp	r0, #0
 8000638:	db0b      	blt.n	8000652 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063a:	0109      	lsls	r1, r1, #4
 800063c:	b2c9      	uxtb	r1, r1
 800063e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000642:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000646:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800064a:	bc30      	pop	{r4, r5}
 800064c:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800064e:	2300      	movs	r3, #0
 8000650:	e7e6      	b.n	8000620 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	f000 000f 	and.w	r0, r0, #15
 8000656:	0109      	lsls	r1, r1, #4
 8000658:	b2c9      	uxtb	r1, r1
 800065a:	4b02      	ldr	r3, [pc, #8]	; (8000664 <HAL_NVIC_SetPriority+0x60>)
 800065c:	5419      	strb	r1, [r3, r0]
 800065e:	e7f4      	b.n	800064a <HAL_NVIC_SetPriority+0x46>
 8000660:	e000ed00 	.word	0xe000ed00
 8000664:	e000ed14 	.word	0xe000ed14

08000668 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000668:	2800      	cmp	r0, #0
 800066a:	db08      	blt.n	800067e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066c:	0942      	lsrs	r2, r0, #5
 800066e:	f000 001f 	and.w	r0, r0, #31
 8000672:	2301      	movs	r3, #1
 8000674:	fa03 f000 	lsl.w	r0, r3, r0
 8000678:	4b01      	ldr	r3, [pc, #4]	; (8000680 <HAL_NVIC_EnableIRQ+0x18>)
 800067a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800067e:	4770      	bx	lr
 8000680:	e000e100 	.word	0xe000e100

08000684 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000684:	3801      	subs	r0, #1
 8000686:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800068a:	d20a      	bcs.n	80006a2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_SYSTICK_Config+0x24>)
 800068e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000690:	21f0      	movs	r1, #240	; 0xf0
 8000692:	4a06      	ldr	r2, [pc, #24]	; (80006ac <HAL_SYSTICK_Config+0x28>)
 8000694:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000698:	2000      	movs	r0, #0
 800069a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069c:	2207      	movs	r2, #7
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006a2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000e010 	.word	0xe000e010
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80006b0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d003      	beq.n	80006c2 <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80006ba:	2380      	movs	r3, #128	; 0x80
 80006bc:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80006be:	2001      	movs	r0, #1
 80006c0:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80006c2:	2305      	movs	r3, #5
 80006c4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80006c8:	6802      	ldr	r2, [r0, #0]
 80006ca:	6813      	ldr	r3, [r2, #0]
 80006cc:	f023 0301 	bic.w	r3, r3, #1
 80006d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80006d2:	2000      	movs	r0, #0
}
 80006d4:	4770      	bx	lr
	...

080006d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006da:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006dc:	2400      	movs	r4, #0
 80006de:	e098      	b.n	8000812 <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80006e0:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 80006e4:	f10e 0e08 	add.w	lr, lr, #8
 80006e8:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006ec:	f004 0607 	and.w	r6, r4, #7
 80006f0:	00b6      	lsls	r6, r6, #2
 80006f2:	270f      	movs	r7, #15
 80006f4:	40b7      	lsls	r7, r6
 80006f6:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006fa:	690f      	ldr	r7, [r1, #16]
 80006fc:	fa07 f606 	lsl.w	r6, r7, r6
 8000700:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 8000702:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 8000706:	e094      	b.n	8000832 <HAL_GPIO_Init+0x15a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000708:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800070a:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800070c:	68cf      	ldr	r7, [r1, #12]
 800070e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000712:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000714:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000716:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000718:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800071c:	684e      	ldr	r6, [r1, #4]
 800071e:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8000722:	40a6      	lsls	r6, r4
 8000724:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8000726:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000728:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800072a:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800072c:	688b      	ldr	r3, [r1, #8]
 800072e:	fa03 f30e 	lsl.w	r3, r3, lr
 8000732:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 8000734:	60c2      	str	r2, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000736:	684b      	ldr	r3, [r1, #4]
 8000738:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800073c:	d068      	beq.n	8000810 <HAL_GPIO_Init+0x138>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	4b51      	ldr	r3, [pc, #324]	; (8000888 <HAL_GPIO_Init+0x1b0>)
 8000744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000746:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800074a:	645a      	str	r2, [r3, #68]	; 0x44
 800074c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000752:	9301      	str	r3, [sp, #4]
 8000754:	9b01      	ldr	r3, [sp, #4]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000756:	08a3      	lsrs	r3, r4, #2
 8000758:	1c9e      	adds	r6, r3, #2
 800075a:	4a4c      	ldr	r2, [pc, #304]	; (800088c <HAL_GPIO_Init+0x1b4>)
 800075c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000760:	f004 0603 	and.w	r6, r4, #3
 8000764:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8000768:	260f      	movs	r6, #15
 800076a:	fa06 f60e 	lsl.w	r6, r6, lr
 800076e:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000772:	4f47      	ldr	r7, [pc, #284]	; (8000890 <HAL_GPIO_Init+0x1b8>)
 8000774:	42b8      	cmp	r0, r7
 8000776:	d079      	beq.n	800086c <HAL_GPIO_Init+0x194>
 8000778:	4e46      	ldr	r6, [pc, #280]	; (8000894 <HAL_GPIO_Init+0x1bc>)
 800077a:	42b0      	cmp	r0, r6
 800077c:	d078      	beq.n	8000870 <HAL_GPIO_Init+0x198>
 800077e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000782:	42b0      	cmp	r0, r6
 8000784:	d076      	beq.n	8000874 <HAL_GPIO_Init+0x19c>
 8000786:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800078a:	42b0      	cmp	r0, r6
 800078c:	d074      	beq.n	8000878 <HAL_GPIO_Init+0x1a0>
 800078e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000792:	42b0      	cmp	r0, r6
 8000794:	d072      	beq.n	800087c <HAL_GPIO_Init+0x1a4>
 8000796:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800079a:	42b0      	cmp	r0, r6
 800079c:	d070      	beq.n	8000880 <HAL_GPIO_Init+0x1a8>
 800079e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007a2:	42b0      	cmp	r0, r6
 80007a4:	d060      	beq.n	8000868 <HAL_GPIO_Init+0x190>
 80007a6:	2607      	movs	r6, #7
 80007a8:	fa06 f60e 	lsl.w	r6, r6, lr
 80007ac:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007ae:	3302      	adds	r3, #2
 80007b0:	4e36      	ldr	r6, [pc, #216]	; (800088c <HAL_GPIO_Init+0x1b4>)
 80007b2:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007b6:	4b38      	ldr	r3, [pc, #224]	; (8000898 <HAL_GPIO_Init+0x1c0>)
 80007b8:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 80007ba:	43eb      	mvns	r3, r5
 80007bc:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007c0:	684f      	ldr	r7, [r1, #4]
 80007c2:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80007c6:	d001      	beq.n	80007cc <HAL_GPIO_Init+0xf4>
        {
          temp |= iocurrent;
 80007c8:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 80007cc:	4a32      	ldr	r2, [pc, #200]	; (8000898 <HAL_GPIO_Init+0x1c0>)
 80007ce:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80007d0:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80007d2:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007d6:	684f      	ldr	r7, [r1, #4]
 80007d8:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80007dc:	d001      	beq.n	80007e2 <HAL_GPIO_Init+0x10a>
        {
          temp |= iocurrent;
 80007de:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 80007e2:	4a2d      	ldr	r2, [pc, #180]	; (8000898 <HAL_GPIO_Init+0x1c0>)
 80007e4:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007e6:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80007e8:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007ec:	684f      	ldr	r7, [r1, #4]
 80007ee:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80007f2:	d001      	beq.n	80007f8 <HAL_GPIO_Init+0x120>
        {
          temp |= iocurrent;
 80007f4:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 80007f8:	4a27      	ldr	r2, [pc, #156]	; (8000898 <HAL_GPIO_Init+0x1c0>)
 80007fa:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80007fc:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80007fe:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000800:	684e      	ldr	r6, [r1, #4]
 8000802:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000806:	d001      	beq.n	800080c <HAL_GPIO_Init+0x134>
        {
          temp |= iocurrent;
 8000808:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 800080c:	4a22      	ldr	r2, [pc, #136]	; (8000898 <HAL_GPIO_Init+0x1c0>)
 800080e:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000810:	3401      	adds	r4, #1
 8000812:	2c0f      	cmp	r4, #15
 8000814:	d836      	bhi.n	8000884 <HAL_GPIO_Init+0x1ac>
    ioposition = 0x01U << position;
 8000816:	2301      	movs	r3, #1
 8000818:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800081a:	680a      	ldr	r2, [r1, #0]
 800081c:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8000820:	42ab      	cmp	r3, r5
 8000822:	d1f5      	bne.n	8000810 <HAL_GPIO_Init+0x138>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000824:	684a      	ldr	r2, [r1, #4]
 8000826:	2a02      	cmp	r2, #2
 8000828:	f43f af5a 	beq.w	80006e0 <HAL_GPIO_Init+0x8>
 800082c:	2a12      	cmp	r2, #18
 800082e:	f43f af57 	beq.w	80006e0 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 8000832:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000834:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8000838:	2203      	movs	r2, #3
 800083a:	fa02 f20e 	lsl.w	r2, r2, lr
 800083e:	43d2      	mvns	r2, r2
 8000840:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000842:	684f      	ldr	r7, [r1, #4]
 8000844:	f007 0703 	and.w	r7, r7, #3
 8000848:	fa07 f70e 	lsl.w	r7, r7, lr
 800084c:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 800084e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000850:	684e      	ldr	r6, [r1, #4]
 8000852:	1e77      	subs	r7, r6, #1
 8000854:	2f01      	cmp	r7, #1
 8000856:	f67f af57 	bls.w	8000708 <HAL_GPIO_Init+0x30>
 800085a:	2e11      	cmp	r6, #17
 800085c:	f43f af54 	beq.w	8000708 <HAL_GPIO_Init+0x30>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000860:	2e12      	cmp	r6, #18
 8000862:	f47f af61 	bne.w	8000728 <HAL_GPIO_Init+0x50>
 8000866:	e74f      	b.n	8000708 <HAL_GPIO_Init+0x30>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000868:	2606      	movs	r6, #6
 800086a:	e79d      	b.n	80007a8 <HAL_GPIO_Init+0xd0>
 800086c:	2600      	movs	r6, #0
 800086e:	e79b      	b.n	80007a8 <HAL_GPIO_Init+0xd0>
 8000870:	2601      	movs	r6, #1
 8000872:	e799      	b.n	80007a8 <HAL_GPIO_Init+0xd0>
 8000874:	2602      	movs	r6, #2
 8000876:	e797      	b.n	80007a8 <HAL_GPIO_Init+0xd0>
 8000878:	2603      	movs	r6, #3
 800087a:	e795      	b.n	80007a8 <HAL_GPIO_Init+0xd0>
 800087c:	2604      	movs	r6, #4
 800087e:	e793      	b.n	80007a8 <HAL_GPIO_Init+0xd0>
 8000880:	2605      	movs	r6, #5
 8000882:	e791      	b.n	80007a8 <HAL_GPIO_Init+0xd0>
      }
    }
  }
}
 8000884:	b003      	add	sp, #12
 8000886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000888:	40023800 	.word	0x40023800
 800088c:	40013800 	.word	0x40013800
 8000890:	40020000 	.word	0x40020000
 8000894:	40020400 	.word	0x40020400
 8000898:	40013c00 	.word	0x40013c00

0800089c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800089c:	6803      	ldr	r3, [r0, #0]
 800089e:	695a      	ldr	r2, [r3, #20]
 80008a0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80008a4:	d011      	beq.n	80008ca <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80008a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80008aa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80008b0:	2220      	movs	r2, #32
 80008b2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80008b6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80008ba:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80008bc:	f042 0204 	orr.w	r2, r2, #4
 80008c0:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80008c2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 80008c6:	2001      	movs	r0, #1
 80008c8:	4770      	bx	lr
  }
  return HAL_OK;
 80008ca:	2000      	movs	r0, #0
}
 80008cc:	4770      	bx	lr

080008ce <I2C_WaitOnFlagUntilTimeout>:
{
 80008ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008d0:	4606      	mov	r6, r0
 80008d2:	460c      	mov	r4, r1
 80008d4:	4617      	mov	r7, r2
 80008d6:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80008d8:	e022      	b.n	8000920 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80008da:	f7ff fe67 	bl	80005ac <HAL_GetTick>
 80008de:	9b06      	ldr	r3, [sp, #24]
 80008e0:	1ac0      	subs	r0, r0, r3
 80008e2:	4285      	cmp	r5, r0
 80008e4:	d300      	bcc.n	80008e8 <I2C_WaitOnFlagUntilTimeout+0x1a>
 80008e6:	b9dd      	cbnz	r5, 8000920 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80008ec:	2220      	movs	r2, #32
 80008ee:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80008f2:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80008f6:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80008f8:	f042 0220 	orr.w	r2, r2, #32
 80008fc:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80008fe:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8000902:	2001      	movs	r0, #1
 8000904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000906:	6833      	ldr	r3, [r6, #0]
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	ea24 0303 	bic.w	r3, r4, r3
 800090e:	b29b      	uxth	r3, r3
 8000910:	fab3 f383 	clz	r3, r3
 8000914:	095b      	lsrs	r3, r3, #5
 8000916:	42bb      	cmp	r3, r7
 8000918:	d10f      	bne.n	800093a <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 800091a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800091e:	d1dc      	bne.n	80008da <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000920:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8000924:	2b01      	cmp	r3, #1
 8000926:	d0ee      	beq.n	8000906 <I2C_WaitOnFlagUntilTimeout+0x38>
 8000928:	6833      	ldr	r3, [r6, #0]
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	ea24 0303 	bic.w	r3, r4, r3
 8000930:	b29b      	uxth	r3, r3
 8000932:	fab3 f383 	clz	r3, r3
 8000936:	095b      	lsrs	r3, r3, #5
 8000938:	e7ed      	b.n	8000916 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 800093a:	2000      	movs	r0, #0
}
 800093c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800093e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800093e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000940:	4604      	mov	r4, r0
 8000942:	460d      	mov	r5, r1
 8000944:	4616      	mov	r6, r2
 8000946:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000948:	e03c      	b.n	80009c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000950:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000952:	6823      	ldr	r3, [r4, #0]
 8000954:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000958:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800095a:	2300      	movs	r3, #0
 800095c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800095e:	2220      	movs	r2, #32
 8000960:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000964:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000968:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800096a:	f042 0204 	orr.w	r2, r2, #4
 800096e:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000970:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8000974:	2001      	movs	r0, #1
 8000976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000978:	f7ff fe18 	bl	80005ac <HAL_GetTick>
 800097c:	1bc0      	subs	r0, r0, r7
 800097e:	4286      	cmp	r6, r0
 8000980:	d300      	bcc.n	8000984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8000982:	b9fe      	cbnz	r6, 80009c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000984:	2300      	movs	r3, #0
 8000986:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000988:	2220      	movs	r2, #32
 800098a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800098e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000992:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000994:	f042 0220 	orr.w	r2, r2, #32
 8000998:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800099a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800099e:	2001      	movs	r0, #1
 80009a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80009a2:	6823      	ldr	r3, [r4, #0]
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	ea25 0303 	bic.w	r3, r5, r3
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	3300      	adds	r3, #0
 80009ae:	bf18      	it	ne
 80009b0:	2301      	movne	r3, #1
 80009b2:	b1a3      	cbz	r3, 80009de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80009b4:	6823      	ldr	r3, [r4, #0]
 80009b6:	695a      	ldr	r2, [r3, #20]
 80009b8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80009bc:	d1c5      	bne.n	800094a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 80009be:	f1b6 3fff 	cmp.w	r6, #4294967295
 80009c2:	d1d9      	bne.n	8000978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80009c4:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d0ea      	beq.n	80009a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 80009cc:	6823      	ldr	r3, [r4, #0]
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	ea25 0303 	bic.w	r3, r5, r3
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	3300      	adds	r3, #0
 80009d8:	bf18      	it	ne
 80009da:	2301      	movne	r3, #1
 80009dc:	e7e9      	b.n	80009b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 80009de:	2000      	movs	r0, #0
}
 80009e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080009e4 <I2C_MasterRequestWrite>:
{
 80009e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009e6:	b083      	sub	sp, #12
 80009e8:	4604      	mov	r4, r0
 80009ea:	460f      	mov	r7, r1
 80009ec:	4615      	mov	r5, r2
 80009ee:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80009f0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80009f2:	2b08      	cmp	r3, #8
 80009f4:	d00d      	beq.n	8000a12 <I2C_MasterRequestWrite+0x2e>
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d00b      	beq.n	8000a12 <I2C_MasterRequestWrite+0x2e>
 80009fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80009fe:	d008      	beq.n	8000a12 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000a00:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000a02:	2b12      	cmp	r3, #18
 8000a04:	d10a      	bne.n	8000a1c <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000a06:	6802      	ldr	r2, [r0, #0]
 8000a08:	6813      	ldr	r3, [r2, #0]
 8000a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	e004      	b.n	8000a1c <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000a12:	6822      	ldr	r2, [r4, #0]
 8000a14:	6813      	ldr	r3, [r2, #0]
 8000a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a1a:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000a1c:	9600      	str	r6, [sp, #0]
 8000a1e:	462b      	mov	r3, r5
 8000a20:	2200      	movs	r2, #0
 8000a22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000a26:	4620      	mov	r0, r4
 8000a28:	f7ff ff51 	bl	80008ce <I2C_WaitOnFlagUntilTimeout>
 8000a2c:	bb18      	cbnz	r0, 8000a76 <I2C_MasterRequestWrite+0x92>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a2e:	6923      	ldr	r3, [r4, #16]
 8000a30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a34:	d011      	beq.n	8000a5a <I2C_MasterRequestWrite+0x76>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000a36:	6822      	ldr	r2, [r4, #0]
 8000a38:	11fb      	asrs	r3, r7, #7
 8000a3a:	f003 0306 	and.w	r3, r3, #6
 8000a3e:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000a42:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000a44:	4633      	mov	r3, r6
 8000a46:	462a      	mov	r2, r5
 8000a48:	490e      	ldr	r1, [pc, #56]	; (8000a84 <I2C_MasterRequestWrite+0xa0>)
 8000a4a:	4620      	mov	r0, r4
 8000a4c:	f7ff ff77 	bl	800093e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000a50:	b9a8      	cbnz	r0, 8000a7e <I2C_MasterRequestWrite+0x9a>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000a52:	6823      	ldr	r3, [r4, #0]
 8000a54:	b2ff      	uxtb	r7, r7
 8000a56:	611f      	str	r7, [r3, #16]
 8000a58:	e003      	b.n	8000a62 <I2C_MasterRequestWrite+0x7e>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000a5a:	6823      	ldr	r3, [r4, #0]
 8000a5c:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8000a60:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000a62:	4633      	mov	r3, r6
 8000a64:	462a      	mov	r2, r5
 8000a66:	4908      	ldr	r1, [pc, #32]	; (8000a88 <I2C_MasterRequestWrite+0xa4>)
 8000a68:	4620      	mov	r0, r4
 8000a6a:	f7ff ff68 	bl	800093e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	b110      	cbz	r0, 8000a78 <I2C_MasterRequestWrite+0x94>
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e000      	b.n	8000a78 <I2C_MasterRequestWrite+0x94>
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	b003      	add	sp, #12
 8000a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e7fa      	b.n	8000a78 <I2C_MasterRequestWrite+0x94>
 8000a82:	bf00      	nop
 8000a84:	00010008 	.word	0x00010008
 8000a88:	00010002 	.word	0x00010002

08000a8c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8000a8c:	b570      	push	{r4, r5, r6, lr}
 8000a8e:	4604      	mov	r4, r0
 8000a90:	460d      	mov	r5, r1
 8000a92:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000a94:	6823      	ldr	r3, [r4, #0]
 8000a96:	695b      	ldr	r3, [r3, #20]
 8000a98:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000a9c:	d11c      	bne.n	8000ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000a9e:	4620      	mov	r0, r4
 8000aa0:	f7ff fefc 	bl	800089c <I2C_IsAcknowledgeFailed>
 8000aa4:	b9d0      	cbnz	r0, 8000adc <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000aa6:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000aaa:	d0f3      	beq.n	8000a94 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000aac:	f7ff fd7e 	bl	80005ac <HAL_GetTick>
 8000ab0:	1b80      	subs	r0, r0, r6
 8000ab2:	4285      	cmp	r5, r0
 8000ab4:	d301      	bcc.n	8000aba <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8000ab6:	2d00      	cmp	r5, #0
 8000ab8:	d1ec      	bne.n	8000a94 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000abe:	2220      	movs	r2, #32
 8000ac0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000ac4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000ac8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000aca:	f042 0220 	orr.w	r2, r2, #32
 8000ace:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000ad0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8000ad8:	2000      	movs	r0, #0
 8000ada:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000adc:	2001      	movs	r0, #1
}
 8000ade:	bd70      	pop	{r4, r5, r6, pc}

08000ae0 <I2C_RequestMemoryRead>:
{
 8000ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ae4:	b084      	sub	sp, #16
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	460e      	mov	r6, r1
 8000aea:	4617      	mov	r7, r2
 8000aec:	4698      	mov	r8, r3
 8000aee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000af0:	6802      	ldr	r2, [r0, #0]
 8000af2:	6813      	ldr	r3, [r2, #0]
 8000af4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000af8:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000afa:	6802      	ldr	r2, [r0, #0]
 8000afc:	6813      	ldr	r3, [r2, #0]
 8000afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b02:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000b04:	9500      	str	r5, [sp, #0]
 8000b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000b0e:	f7ff fede 	bl	80008ce <I2C_WaitOnFlagUntilTimeout>
 8000b12:	b120      	cbz	r0, 8000b1e <I2C_RequestMemoryRead+0x3e>
    return HAL_ERROR;
 8000b14:	2301      	movs	r3, #1
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	b004      	add	sp, #16
 8000b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000b1e:	6823      	ldr	r3, [r4, #0]
 8000b20:	b2f6      	uxtb	r6, r6
 8000b22:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
 8000b26:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000b28:	462b      	mov	r3, r5
 8000b2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000b2c:	4938      	ldr	r1, [pc, #224]	; (8000c10 <I2C_RequestMemoryRead+0x130>)
 8000b2e:	4620      	mov	r0, r4
 8000b30:	f7ff ff05 	bl	800093e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000b34:	b108      	cbz	r0, 8000b3a <I2C_RequestMemoryRead+0x5a>
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e7ed      	b.n	8000b16 <I2C_RequestMemoryRead+0x36>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	9303      	str	r3, [sp, #12]
 8000b3e:	6823      	ldr	r3, [r4, #0]
 8000b40:	695a      	ldr	r2, [r3, #20]
 8000b42:	9203      	str	r2, [sp, #12]
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	9303      	str	r3, [sp, #12]
 8000b48:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b4a:	462a      	mov	r2, r5
 8000b4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000b4e:	4620      	mov	r0, r4
 8000b50:	f7ff ff9c 	bl	8000a8c <I2C_WaitOnTXEFlagUntilTimeout>
 8000b54:	b158      	cbz	r0, 8000b6e <I2C_RequestMemoryRead+0x8e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b58:	2b04      	cmp	r3, #4
 8000b5a:	d001      	beq.n	8000b60 <I2C_RequestMemoryRead+0x80>
    return HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e7da      	b.n	8000b16 <I2C_RequestMemoryRead+0x36>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b60:	6822      	ldr	r2, [r4, #0]
 8000b62:	6813      	ldr	r3, [r2, #0]
 8000b64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b68:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e7d3      	b.n	8000b16 <I2C_RequestMemoryRead+0x36>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000b6e:	f1b8 0f01 	cmp.w	r8, #1
 8000b72:	d00d      	beq.n	8000b90 <I2C_RequestMemoryRead+0xb0>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000b74:	6823      	ldr	r3, [r4, #0]
 8000b76:	0a3a      	lsrs	r2, r7, #8
 8000b78:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b7a:	462a      	mov	r2, r5
 8000b7c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000b7e:	4620      	mov	r0, r4
 8000b80:	f7ff ff84 	bl	8000a8c <I2C_WaitOnTXEFlagUntilTimeout>
 8000b84:	b1c8      	cbz	r0, 8000bba <I2C_RequestMemoryRead+0xda>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b88:	2b04      	cmp	r3, #4
 8000b8a:	d00f      	beq.n	8000bac <I2C_RequestMemoryRead+0xcc>
      return HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e7c2      	b.n	8000b16 <I2C_RequestMemoryRead+0x36>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000b90:	6823      	ldr	r3, [r4, #0]
 8000b92:	b2ff      	uxtb	r7, r7
 8000b94:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000b96:	462a      	mov	r2, r5
 8000b98:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000b9a:	4620      	mov	r0, r4
 8000b9c:	f7ff ff76 	bl	8000a8c <I2C_WaitOnTXEFlagUntilTimeout>
 8000ba0:	b1b0      	cbz	r0, 8000bd0 <I2C_RequestMemoryRead+0xf0>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ba2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ba4:	2b04      	cmp	r3, #4
 8000ba6:	d00c      	beq.n	8000bc2 <I2C_RequestMemoryRead+0xe2>
    return HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e7b4      	b.n	8000b16 <I2C_RequestMemoryRead+0x36>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000bac:	6822      	ldr	r2, [r4, #0]
 8000bae:	6813      	ldr	r3, [r2, #0]
 8000bb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bb4:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e7ad      	b.n	8000b16 <I2C_RequestMemoryRead+0x36>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000bba:	6823      	ldr	r3, [r4, #0]
 8000bbc:	b2ff      	uxtb	r7, r7
 8000bbe:	611f      	str	r7, [r3, #16]
 8000bc0:	e7e9      	b.n	8000b96 <I2C_RequestMemoryRead+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000bc2:	6822      	ldr	r2, [r4, #0]
 8000bc4:	6813      	ldr	r3, [r2, #0]
 8000bc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bca:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e7a2      	b.n	8000b16 <I2C_RequestMemoryRead+0x36>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000bd0:	6822      	ldr	r2, [r4, #0]
 8000bd2:	6813      	ldr	r3, [r2, #0]
 8000bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd8:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000bda:	9500      	str	r5, [sp, #0]
 8000bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000bde:	2200      	movs	r2, #0
 8000be0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000be4:	4620      	mov	r0, r4
 8000be6:	f7ff fe72 	bl	80008ce <I2C_WaitOnFlagUntilTimeout>
 8000bea:	b108      	cbz	r0, 8000bf0 <I2C_RequestMemoryRead+0x110>
    return HAL_ERROR;
 8000bec:	2301      	movs	r3, #1
 8000bee:	e792      	b.n	8000b16 <I2C_RequestMemoryRead+0x36>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000bf0:	6823      	ldr	r3, [r4, #0]
 8000bf2:	f046 0601 	orr.w	r6, r6, #1
 8000bf6:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000bf8:	462b      	mov	r3, r5
 8000bfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000bfc:	4904      	ldr	r1, [pc, #16]	; (8000c10 <I2C_RequestMemoryRead+0x130>)
 8000bfe:	4620      	mov	r0, r4
 8000c00:	f7ff fe9d 	bl	800093e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2800      	cmp	r0, #0
 8000c08:	d085      	beq.n	8000b16 <I2C_RequestMemoryRead+0x36>
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e783      	b.n	8000b16 <I2C_RequestMemoryRead+0x36>
 8000c0e:	bf00      	nop
 8000c10:	00010002 	.word	0x00010002

08000c14 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8000c14:	b570      	push	{r4, r5, r6, lr}
 8000c16:	4604      	mov	r4, r0
 8000c18:	460d      	mov	r5, r1
 8000c1a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000c1c:	6823      	ldr	r3, [r4, #0]
 8000c1e:	695b      	ldr	r3, [r3, #20]
 8000c20:	f013 0f04 	tst.w	r3, #4
 8000c24:	d11c      	bne.n	8000c60 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000c26:	4620      	mov	r0, r4
 8000c28:	f7ff fe38 	bl	800089c <I2C_IsAcknowledgeFailed>
 8000c2c:	b9d0      	cbnz	r0, 8000c64 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8000c2e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000c32:	d0f3      	beq.n	8000c1c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000c34:	f7ff fcba 	bl	80005ac <HAL_GetTick>
 8000c38:	1b80      	subs	r0, r0, r6
 8000c3a:	4285      	cmp	r5, r0
 8000c3c:	d301      	bcc.n	8000c42 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8000c3e:	2d00      	cmp	r5, #0
 8000c40:	d1ec      	bne.n	8000c1c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000c46:	2220      	movs	r2, #32
 8000c48:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000c4c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000c50:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000c52:	f042 0220 	orr.w	r2, r2, #32
 8000c56:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000c58:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8000c60:	2000      	movs	r0, #0
 8000c62:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000c64:	2001      	movs	r0, #1
}
 8000c66:	bd70      	pop	{r4, r5, r6, pc}

08000c68 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8000c68:	b570      	push	{r4, r5, r6, lr}
 8000c6a:	4605      	mov	r5, r0
 8000c6c:	460c      	mov	r4, r1
 8000c6e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000c70:	682b      	ldr	r3, [r5, #0]
 8000c72:	695a      	ldr	r2, [r3, #20]
 8000c74:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000c78:	d129      	bne.n	8000cce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000c7a:	695a      	ldr	r2, [r3, #20]
 8000c7c:	f012 0f10 	tst.w	r2, #16
 8000c80:	d115      	bne.n	8000cae <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000c82:	f7ff fc93 	bl	80005ac <HAL_GetTick>
 8000c86:	1b80      	subs	r0, r0, r6
 8000c88:	42a0      	cmp	r0, r4
 8000c8a:	d801      	bhi.n	8000c90 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8000c8c:	2c00      	cmp	r4, #0
 8000c8e:	d1ef      	bne.n	8000c70 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000c94:	2220      	movs	r2, #32
 8000c96:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000c9a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000c9e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000ca0:	f042 0220 	orr.w	r2, r2, #32
 8000ca4:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000ca6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8000caa:	2001      	movs	r0, #1
 8000cac:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000cae:	f06f 0210 	mvn.w	r2, #16
 8000cb2:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000cb8:	2220      	movs	r2, #32
 8000cba:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000cbe:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8000cc2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000cc4:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000cc6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8000cca:	2001      	movs	r0, #1
 8000ccc:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8000cce:	2000      	movs	r0, #0
}
 8000cd0:	bd70      	pop	{r4, r5, r6, pc}
	...

08000cd4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	f000 80be 	beq.w	8000e56 <HAL_I2C_Init+0x182>
{
 8000cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cdc:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cde:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d06b      	beq.n	8000dbe <HAL_I2C_Init+0xea>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ce6:	2324      	movs	r3, #36	; 0x24
 8000ce8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000cec:	6822      	ldr	r2, [r4, #0]
 8000cee:	6813      	ldr	r3, [r2, #0]
 8000cf0:	f023 0301 	bic.w	r3, r3, #1
 8000cf4:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000cf6:	f000 fbd7 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000cfa:	6862      	ldr	r2, [r4, #4]
 8000cfc:	4b58      	ldr	r3, [pc, #352]	; (8000e60 <HAL_I2C_Init+0x18c>)
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d862      	bhi.n	8000dc8 <HAL_I2C_Init+0xf4>
 8000d02:	4b58      	ldr	r3, [pc, #352]	; (8000e64 <HAL_I2C_Init+0x190>)
 8000d04:	4298      	cmp	r0, r3
 8000d06:	bf8c      	ite	hi
 8000d08:	2300      	movhi	r3, #0
 8000d0a:	2301      	movls	r3, #1
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	f040 80a4 	bne.w	8000e5a <HAL_I2C_Init+0x186>
  freqrange = I2C_FREQRANGE(pclk1);
 8000d12:	4b55      	ldr	r3, [pc, #340]	; (8000e68 <HAL_I2C_Init+0x194>)
 8000d14:	fba3 2300 	umull	r2, r3, r3, r0
 8000d18:	0c9a      	lsrs	r2, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d1a:	6821      	ldr	r1, [r4, #0]
 8000d1c:	684b      	ldr	r3, [r1, #4]
 8000d1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000d22:	4313      	orrs	r3, r2
 8000d24:	604b      	str	r3, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d26:	6825      	ldr	r5, [r4, #0]
 8000d28:	6a29      	ldr	r1, [r5, #32]
 8000d2a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8000d2e:	6866      	ldr	r6, [r4, #4]
 8000d30:	4b4b      	ldr	r3, [pc, #300]	; (8000e60 <HAL_I2C_Init+0x18c>)
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d84e      	bhi.n	8000dd4 <HAL_I2C_Init+0x100>
 8000d36:	1c53      	adds	r3, r2, #1
 8000d38:	430b      	orrs	r3, r1
 8000d3a:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d3c:	6822      	ldr	r2, [r4, #0]
 8000d3e:	69d1      	ldr	r1, [r2, #28]
 8000d40:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000d44:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000d48:	6863      	ldr	r3, [r4, #4]
 8000d4a:	4d45      	ldr	r5, [pc, #276]	; (8000e60 <HAL_I2C_Init+0x18c>)
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d84b      	bhi.n	8000de8 <HAL_I2C_Init+0x114>
 8000d50:	3801      	subs	r0, #1
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d58:	3301      	adds	r3, #1
 8000d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	bf38      	it	cc
 8000d62:	2304      	movcc	r3, #4
 8000d64:	430b      	orrs	r3, r1
 8000d66:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000d68:	6821      	ldr	r1, [r4, #0]
 8000d6a:	680b      	ldr	r3, [r1, #0]
 8000d6c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000d70:	69e2      	ldr	r2, [r4, #28]
 8000d72:	6a20      	ldr	r0, [r4, #32]
 8000d74:	4302      	orrs	r2, r0
 8000d76:	4313      	orrs	r3, r2
 8000d78:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000d7a:	6821      	ldr	r1, [r4, #0]
 8000d7c:	688b      	ldr	r3, [r1, #8]
 8000d7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000d82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000d86:	6922      	ldr	r2, [r4, #16]
 8000d88:	68e0      	ldr	r0, [r4, #12]
 8000d8a:	4302      	orrs	r2, r0
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000d90:	6821      	ldr	r1, [r4, #0]
 8000d92:	68cb      	ldr	r3, [r1, #12]
 8000d94:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000d98:	6962      	ldr	r2, [r4, #20]
 8000d9a:	69a0      	ldr	r0, [r4, #24]
 8000d9c:	4302      	orrs	r2, r0
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000da2:	6822      	ldr	r2, [r4, #0]
 8000da4:	6813      	ldr	r3, [r2, #0]
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dac:	2000      	movs	r0, #0
 8000dae:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000db0:	2320      	movs	r3, #32
 8000db2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000db6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000db8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8000dbe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000dc2:	f001 fbcf 	bl	8002564 <HAL_I2C_MspInit>
 8000dc6:	e78e      	b.n	8000ce6 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000dc8:	4b28      	ldr	r3, [pc, #160]	; (8000e6c <HAL_I2C_Init+0x198>)
 8000dca:	4298      	cmp	r0, r3
 8000dcc:	bf8c      	ite	hi
 8000dce:	2300      	movhi	r3, #0
 8000dd0:	2301      	movls	r3, #1
 8000dd2:	e79b      	b.n	8000d0c <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000dd4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000dd8:	fb03 f302 	mul.w	r3, r3, r2
 8000ddc:	4a24      	ldr	r2, [pc, #144]	; (8000e70 <HAL_I2C_Init+0x19c>)
 8000dde:	fba2 2303 	umull	r2, r3, r2, r3
 8000de2:	099b      	lsrs	r3, r3, #6
 8000de4:	3301      	adds	r3, #1
 8000de6:	e7a7      	b.n	8000d38 <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000de8:	68a6      	ldr	r6, [r4, #8]
 8000dea:	b9be      	cbnz	r6, 8000e1c <HAL_I2C_Init+0x148>
 8000dec:	1e45      	subs	r5, r0, #1
 8000dee:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8000df2:	fbb5 f5f7 	udiv	r5, r5, r7
 8000df6:	3501      	adds	r5, #1
 8000df8:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8000dfc:	fab5 f585 	clz	r5, r5
 8000e00:	096d      	lsrs	r5, r5, #5
 8000e02:	bb35      	cbnz	r5, 8000e52 <HAL_I2C_Init+0x17e>
 8000e04:	b9c6      	cbnz	r6, 8000e38 <HAL_I2C_Init+0x164>
 8000e06:	3801      	subs	r0, #1
 8000e08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000e0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e10:	3301      	adds	r3, #1
 8000e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e1a:	e7a3      	b.n	8000d64 <HAL_I2C_Init+0x90>
 8000e1c:	1e45      	subs	r5, r0, #1
 8000e1e:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8000e22:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8000e26:	fbb5 f5f7 	udiv	r5, r5, r7
 8000e2a:	3501      	adds	r5, #1
 8000e2c:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8000e30:	fab5 f585 	clz	r5, r5
 8000e34:	096d      	lsrs	r5, r5, #5
 8000e36:	e7e4      	b.n	8000e02 <HAL_I2C_Init+0x12e>
 8000e38:	3801      	subs	r0, #1
 8000e3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e3e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e46:	3301      	adds	r3, #1
 8000e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e50:	e788      	b.n	8000d64 <HAL_I2C_Init+0x90>
 8000e52:	2301      	movs	r3, #1
 8000e54:	e786      	b.n	8000d64 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8000e56:	2001      	movs	r0, #1
 8000e58:	4770      	bx	lr
    return HAL_ERROR;
 8000e5a:	2001      	movs	r0, #1
}
 8000e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	000186a0 	.word	0x000186a0
 8000e64:	001e847f 	.word	0x001e847f
 8000e68:	431bde83 	.word	0x431bde83
 8000e6c:	003d08ff 	.word	0x003d08ff
 8000e70:	10624dd3 	.word	0x10624dd3

08000e74 <HAL_I2C_Master_Transmit>:
{
 8000e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e78:	b084      	sub	sp, #16
 8000e7a:	4604      	mov	r4, r0
 8000e7c:	460d      	mov	r5, r1
 8000e7e:	4690      	mov	r8, r2
 8000e80:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8000e82:	f7ff fb93 	bl	80005ac <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e86:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b20      	cmp	r3, #32
 8000e8e:	d004      	beq.n	8000e9a <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 8000e90:	2502      	movs	r5, #2
}
 8000e92:	4628      	mov	r0, r5
 8000e94:	b004      	add	sp, #16
 8000e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e9a:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000e9c:	9000      	str	r0, [sp, #0]
 8000e9e:	2319      	movs	r3, #25
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	494f      	ldr	r1, [pc, #316]	; (8000fe0 <HAL_I2C_Master_Transmit+0x16c>)
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	f7ff fd12 	bl	80008ce <I2C_WaitOnFlagUntilTimeout>
 8000eaa:	b108      	cbz	r0, 8000eb0 <HAL_I2C_Master_Transmit+0x3c>
      return HAL_BUSY;
 8000eac:	2502      	movs	r5, #2
 8000eae:	e7f0      	b.n	8000e92 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8000eb0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	f000 808e 	beq.w	8000fd6 <HAL_I2C_Master_Transmit+0x162>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000ec0:	6823      	ldr	r3, [r4, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	f012 0f01 	tst.w	r2, #1
 8000ec8:	d103      	bne.n	8000ed2 <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	f042 0201 	orr.w	r2, r2, #1
 8000ed0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000ed2:	6822      	ldr	r2, [r4, #0]
 8000ed4:	6813      	ldr	r3, [r2, #0]
 8000ed6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000eda:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000edc:	2321      	movs	r3, #33	; 0x21
 8000ede:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000ee2:	2310      	movs	r3, #16
 8000ee4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8000eec:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000ef0:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000ef2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000ef4:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000ef6:	4b3b      	ldr	r3, [pc, #236]	; (8000fe4 <HAL_I2C_Master_Transmit+0x170>)
 8000ef8:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000efa:	4633      	mov	r3, r6
 8000efc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000efe:	4629      	mov	r1, r5
 8000f00:	4620      	mov	r0, r4
 8000f02:	f7ff fd6f 	bl	80009e4 <I2C_MasterRequestWrite>
 8000f06:	4605      	mov	r5, r0
 8000f08:	2800      	cmp	r0, #0
 8000f0a:	d166      	bne.n	8000fda <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	9303      	str	r3, [sp, #12]
 8000f10:	6823      	ldr	r3, [r4, #0]
 8000f12:	695a      	ldr	r2, [r3, #20]
 8000f14:	9203      	str	r2, [sp, #12]
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	9303      	str	r3, [sp, #12]
 8000f1a:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8000f1c:	e012      	b.n	8000f44 <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d001      	beq.n	8000f28 <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 8000f24:	2501      	movs	r5, #1
 8000f26:	e7b4      	b.n	8000e92 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f28:	6822      	ldr	r2, [r4, #0]
 8000f2a:	6813      	ldr	r3, [r2, #0]
 8000f2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f30:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8000f32:	2501      	movs	r5, #1
 8000f34:	e7ad      	b.n	8000e92 <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f36:	4632      	mov	r2, r6
 8000f38:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	f7ff fe6a 	bl	8000c14 <I2C_WaitOnBTFFlagUntilTimeout>
 8000f40:	2800      	cmp	r0, #0
 8000f42:	d12e      	bne.n	8000fa2 <HAL_I2C_Master_Transmit+0x12e>
    while (hi2c->XferSize > 0U)
 8000f44:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d037      	beq.n	8000fba <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f4a:	4632      	mov	r2, r6
 8000f4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000f4e:	4620      	mov	r0, r4
 8000f50:	f7ff fd9c 	bl	8000a8c <I2C_WaitOnTXEFlagUntilTimeout>
 8000f54:	2800      	cmp	r0, #0
 8000f56:	d1e2      	bne.n	8000f1e <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f58:	6823      	ldr	r3, [r4, #0]
 8000f5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f5c:	7812      	ldrb	r2, [r2, #0]
 8000f5e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8000f60:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000f62:	1c4b      	adds	r3, r1, #1
 8000f64:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8000f66:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8000f70:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000f72:	3b01      	subs	r3, #1
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000f78:	6822      	ldr	r2, [r4, #0]
 8000f7a:	6950      	ldr	r0, [r2, #20]
 8000f7c:	f010 0f04 	tst.w	r0, #4
 8000f80:	d0d9      	beq.n	8000f36 <HAL_I2C_Master_Transmit+0xc2>
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d0d7      	beq.n	8000f36 <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000f86:	784b      	ldrb	r3, [r1, #1]
 8000f88:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8000f8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8000f90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	3b01      	subs	r3, #1
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8000f9a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	8523      	strh	r3, [r4, #40]	; 0x28
 8000fa0:	e7c9      	b.n	8000f36 <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fa4:	2b04      	cmp	r3, #4
 8000fa6:	d001      	beq.n	8000fac <HAL_I2C_Master_Transmit+0x138>
        return HAL_ERROR;
 8000fa8:	2501      	movs	r5, #1
 8000faa:	e772      	b.n	8000e92 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fac:	6822      	ldr	r2, [r4, #0]
 8000fae:	6813      	ldr	r3, [r2, #0]
 8000fb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb4:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8000fb6:	2501      	movs	r5, #1
 8000fb8:	e76b      	b.n	8000e92 <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fba:	6822      	ldr	r2, [r4, #0]
 8000fbc:	6813      	ldr	r3, [r2, #0]
 8000fbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fc2:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000fc4:	2320      	movs	r3, #32
 8000fc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8000fd0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8000fd4:	e75d      	b.n	8000e92 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8000fd6:	2502      	movs	r5, #2
 8000fd8:	e75b      	b.n	8000e92 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 8000fda:	2501      	movs	r5, #1
 8000fdc:	e759      	b.n	8000e92 <HAL_I2C_Master_Transmit+0x1e>
 8000fde:	bf00      	nop
 8000fe0:	00100002 	.word	0x00100002
 8000fe4:	ffff0000 	.word	0xffff0000

08000fe8 <HAL_I2C_Mem_Read>:
{
 8000fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	4604      	mov	r4, r0
 8000ff0:	460d      	mov	r5, r1
 8000ff2:	4617      	mov	r7, r2
 8000ff4:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 8000ff6:	f7ff fad9 	bl	80005ac <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ffa:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b20      	cmp	r3, #32
 8001002:	d004      	beq.n	800100e <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 8001004:	2502      	movs	r5, #2
}
 8001006:	4628      	mov	r0, r5
 8001008:	b006      	add	sp, #24
 800100a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800100e:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001010:	9000      	str	r0, [sp, #0]
 8001012:	2319      	movs	r3, #25
 8001014:	2201      	movs	r2, #1
 8001016:	4988      	ldr	r1, [pc, #544]	; (8001238 <HAL_I2C_Mem_Read+0x250>)
 8001018:	4620      	mov	r0, r4
 800101a:	f7ff fc58 	bl	80008ce <I2C_WaitOnFlagUntilTimeout>
 800101e:	b108      	cbz	r0, 8001024 <HAL_I2C_Mem_Read+0x3c>
      return HAL_BUSY;
 8001020:	2502      	movs	r5, #2
 8001022:	e7f0      	b.n	8001006 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8001024:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001028:	2b01      	cmp	r3, #1
 800102a:	f000 813d 	beq.w	80012a8 <HAL_I2C_Mem_Read+0x2c0>
 800102e:	2301      	movs	r3, #1
 8001030:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001034:	6823      	ldr	r3, [r4, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	f012 0f01 	tst.w	r2, #1
 800103c:	d103      	bne.n	8001046 <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	f042 0201 	orr.w	r2, r2, #1
 8001044:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001046:	6822      	ldr	r2, [r4, #0]
 8001048:	6813      	ldr	r3, [r2, #0]
 800104a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800104e:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001050:	2322      	movs	r3, #34	; 0x22
 8001052:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001056:	2340      	movs	r3, #64	; 0x40
 8001058:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800105c:	2300      	movs	r3, #0
 800105e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001062:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001064:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8001068:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800106a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800106c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800106e:	4b73      	ldr	r3, [pc, #460]	; (800123c <HAL_I2C_Mem_Read+0x254>)
 8001070:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001072:	9601      	str	r6, [sp, #4]
 8001074:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	4643      	mov	r3, r8
 800107a:	463a      	mov	r2, r7
 800107c:	4629      	mov	r1, r5
 800107e:	4620      	mov	r0, r4
 8001080:	f7ff fd2e 	bl	8000ae0 <I2C_RequestMemoryRead>
 8001084:	4605      	mov	r5, r0
 8001086:	2800      	cmp	r0, #0
 8001088:	f040 8110 	bne.w	80012ac <HAL_I2C_Mem_Read+0x2c4>
    if (hi2c->XferSize == 0U)
 800108c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800108e:	b95b      	cbnz	r3, 80010a8 <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001090:	9302      	str	r3, [sp, #8]
 8001092:	6823      	ldr	r3, [r4, #0]
 8001094:	695a      	ldr	r2, [r3, #20]
 8001096:	9202      	str	r2, [sp, #8]
 8001098:	699a      	ldr	r2, [r3, #24]
 800109a:	9202      	str	r2, [sp, #8]
 800109c:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	e075      	b.n	8001194 <HAL_I2C_Mem_Read+0x1ac>
    else if (hi2c->XferSize == 1U)
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d00a      	beq.n	80010c2 <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d01a      	beq.n	80010e6 <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010b0:	2300      	movs	r3, #0
 80010b2:	9305      	str	r3, [sp, #20]
 80010b4:	6823      	ldr	r3, [r4, #0]
 80010b6:	695a      	ldr	r2, [r3, #20]
 80010b8:	9205      	str	r2, [sp, #20]
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	9305      	str	r3, [sp, #20]
 80010be:	9b05      	ldr	r3, [sp, #20]
 80010c0:	e068      	b.n	8001194 <HAL_I2C_Mem_Read+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010c2:	6822      	ldr	r2, [r4, #0]
 80010c4:	6813      	ldr	r3, [r2, #0]
 80010c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010ca:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010cc:	2300      	movs	r3, #0
 80010ce:	9303      	str	r3, [sp, #12]
 80010d0:	6823      	ldr	r3, [r4, #0]
 80010d2:	695a      	ldr	r2, [r3, #20]
 80010d4:	9203      	str	r2, [sp, #12]
 80010d6:	699a      	ldr	r2, [r3, #24]
 80010d8:	9203      	str	r2, [sp, #12]
 80010da:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	e056      	b.n	8001194 <HAL_I2C_Mem_Read+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010e6:	6822      	ldr	r2, [r4, #0]
 80010e8:	6813      	ldr	r3, [r2, #0]
 80010ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010ee:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010f0:	6822      	ldr	r2, [r4, #0]
 80010f2:	6813      	ldr	r3, [r2, #0]
 80010f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010f8:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010fa:	2300      	movs	r3, #0
 80010fc:	9304      	str	r3, [sp, #16]
 80010fe:	6823      	ldr	r3, [r4, #0]
 8001100:	695a      	ldr	r2, [r3, #20]
 8001102:	9204      	str	r2, [sp, #16]
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	9304      	str	r3, [sp, #16]
 8001108:	9b04      	ldr	r3, [sp, #16]
 800110a:	e043      	b.n	8001194 <HAL_I2C_Mem_Read+0x1ac>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800110c:	4632      	mov	r2, r6
 800110e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001110:	4620      	mov	r0, r4
 8001112:	f7ff fda9 	bl	8000c68 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001116:	2800      	cmp	r0, #0
 8001118:	f040 80ca 	bne.w	80012b0 <HAL_I2C_Mem_Read+0x2c8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800111c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800111e:	6822      	ldr	r2, [r4, #0]
 8001120:	6912      	ldr	r2, [r2, #16]
 8001122:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001124:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001126:	3301      	adds	r3, #1
 8001128:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800112a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800112c:	3b01      	subs	r3, #1
 800112e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001130:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001132:	b29b      	uxth	r3, r3
 8001134:	3b01      	subs	r3, #1
 8001136:	b29b      	uxth	r3, r3
 8001138:	8563      	strh	r3, [r4, #42]	; 0x2a
 800113a:	e02b      	b.n	8001194 <HAL_I2C_Mem_Read+0x1ac>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800113c:	9600      	str	r6, [sp, #0]
 800113e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001140:	2200      	movs	r2, #0
 8001142:	493f      	ldr	r1, [pc, #252]	; (8001240 <HAL_I2C_Mem_Read+0x258>)
 8001144:	4620      	mov	r0, r4
 8001146:	f7ff fbc2 	bl	80008ce <I2C_WaitOnFlagUntilTimeout>
 800114a:	2800      	cmp	r0, #0
 800114c:	f040 80b2 	bne.w	80012b4 <HAL_I2C_Mem_Read+0x2cc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001150:	6822      	ldr	r2, [r4, #0]
 8001152:	6813      	ldr	r3, [r2, #0]
 8001154:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001158:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800115a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800115c:	6822      	ldr	r2, [r4, #0]
 800115e:	6912      	ldr	r2, [r2, #16]
 8001160:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001162:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001164:	1c53      	adds	r3, r2, #1
 8001166:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001168:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800116a:	3b01      	subs	r3, #1
 800116c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800116e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001170:	b29b      	uxth	r3, r3
 8001172:	3b01      	subs	r3, #1
 8001174:	b29b      	uxth	r3, r3
 8001176:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001178:	6823      	ldr	r3, [r4, #0]
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800117e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001180:	3301      	adds	r3, #1
 8001182:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001184:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001186:	3b01      	subs	r3, #1
 8001188:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800118a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800118c:	b29b      	uxth	r3, r3
 800118e:	3b01      	subs	r3, #1
 8001190:	b29b      	uxth	r3, r3
 8001192:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001194:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001196:	2b00      	cmp	r3, #0
 8001198:	d07d      	beq.n	8001296 <HAL_I2C_Mem_Read+0x2ae>
      if (hi2c->XferSize <= 3U)
 800119a:	2b03      	cmp	r3, #3
 800119c:	d852      	bhi.n	8001244 <HAL_I2C_Mem_Read+0x25c>
        if (hi2c->XferSize == 1U)
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d0b4      	beq.n	800110c <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d0ca      	beq.n	800113c <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80011a6:	9600      	str	r6, [sp, #0]
 80011a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80011aa:	2200      	movs	r2, #0
 80011ac:	4924      	ldr	r1, [pc, #144]	; (8001240 <HAL_I2C_Mem_Read+0x258>)
 80011ae:	4620      	mov	r0, r4
 80011b0:	f7ff fb8d 	bl	80008ce <I2C_WaitOnFlagUntilTimeout>
 80011b4:	2800      	cmp	r0, #0
 80011b6:	d17f      	bne.n	80012b8 <HAL_I2C_Mem_Read+0x2d0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80011b8:	6822      	ldr	r2, [r4, #0]
 80011ba:	6813      	ldr	r3, [r2, #0]
 80011bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011c0:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80011c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011c4:	6822      	ldr	r2, [r4, #0]
 80011c6:	6912      	ldr	r2, [r2, #16]
 80011c8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80011ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011cc:	3301      	adds	r3, #1
 80011ce:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80011d0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80011d2:	3b01      	subs	r3, #1
 80011d4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80011d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80011d8:	b29b      	uxth	r3, r3
 80011da:	3b01      	subs	r3, #1
 80011dc:	b29b      	uxth	r3, r3
 80011de:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80011e0:	9600      	str	r6, [sp, #0]
 80011e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80011e4:	2200      	movs	r2, #0
 80011e6:	4916      	ldr	r1, [pc, #88]	; (8001240 <HAL_I2C_Mem_Read+0x258>)
 80011e8:	4620      	mov	r0, r4
 80011ea:	f7ff fb70 	bl	80008ce <I2C_WaitOnFlagUntilTimeout>
 80011ee:	2800      	cmp	r0, #0
 80011f0:	d164      	bne.n	80012bc <HAL_I2C_Mem_Read+0x2d4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011f2:	6822      	ldr	r2, [r4, #0]
 80011f4:	6813      	ldr	r3, [r2, #0]
 80011f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011fa:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80011fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011fe:	6822      	ldr	r2, [r4, #0]
 8001200:	6912      	ldr	r2, [r2, #16]
 8001202:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8001204:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001206:	1c53      	adds	r3, r2, #1
 8001208:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800120a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800120c:	3b01      	subs	r3, #1
 800120e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001210:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001212:	b29b      	uxth	r3, r3
 8001214:	3b01      	subs	r3, #1
 8001216:	b29b      	uxth	r3, r3
 8001218:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800121a:	6823      	ldr	r3, [r4, #0]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8001220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001222:	3301      	adds	r3, #1
 8001224:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001226:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001228:	3b01      	subs	r3, #1
 800122a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800122c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800122e:	b29b      	uxth	r3, r3
 8001230:	3b01      	subs	r3, #1
 8001232:	b29b      	uxth	r3, r3
 8001234:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001236:	e7ad      	b.n	8001194 <HAL_I2C_Mem_Read+0x1ac>
 8001238:	00100002 	.word	0x00100002
 800123c:	ffff0000 	.word	0xffff0000
 8001240:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001244:	4632      	mov	r2, r6
 8001246:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001248:	4620      	mov	r0, r4
 800124a:	f7ff fd0d 	bl	8000c68 <I2C_WaitOnRXNEFlagUntilTimeout>
 800124e:	2800      	cmp	r0, #0
 8001250:	d136      	bne.n	80012c0 <HAL_I2C_Mem_Read+0x2d8>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001252:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001254:	6822      	ldr	r2, [r4, #0]
 8001256:	6912      	ldr	r2, [r2, #16]
 8001258:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800125a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800125c:	1c53      	adds	r3, r2, #1
 800125e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8001260:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001262:	3b01      	subs	r3, #1
 8001264:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001266:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001268:	b29b      	uxth	r3, r3
 800126a:	3b01      	subs	r3, #1
 800126c:	b29b      	uxth	r3, r3
 800126e:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001270:	6823      	ldr	r3, [r4, #0]
 8001272:	6959      	ldr	r1, [r3, #20]
 8001274:	f011 0f04 	tst.w	r1, #4
 8001278:	d08c      	beq.n	8001194 <HAL_I2C_Mem_Read+0x1ac>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800127e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001280:	3301      	adds	r3, #1
 8001282:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001284:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001286:	3b01      	subs	r3, #1
 8001288:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800128a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800128c:	b29b      	uxth	r3, r3
 800128e:	3b01      	subs	r3, #1
 8001290:	b29b      	uxth	r3, r3
 8001292:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001294:	e77e      	b.n	8001194 <HAL_I2C_Mem_Read+0x1ac>
    hi2c->State = HAL_I2C_STATE_READY;
 8001296:	2320      	movs	r3, #32
 8001298:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800129c:	2300      	movs	r3, #0
 800129e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 80012a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80012a6:	e6ae      	b.n	8001006 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 80012a8:	2502      	movs	r5, #2
 80012aa:	e6ac      	b.n	8001006 <HAL_I2C_Mem_Read+0x1e>
      return HAL_ERROR;
 80012ac:	2501      	movs	r5, #1
 80012ae:	e6aa      	b.n	8001006 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80012b0:	2501      	movs	r5, #1
 80012b2:	e6a8      	b.n	8001006 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80012b4:	2501      	movs	r5, #1
 80012b6:	e6a6      	b.n	8001006 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80012b8:	2501      	movs	r5, #1
 80012ba:	e6a4      	b.n	8001006 <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 80012bc:	2501      	movs	r5, #1
 80012be:	e6a2      	b.n	8001006 <HAL_I2C_Mem_Read+0x1e>
          return HAL_ERROR;
 80012c0:	2501      	movs	r5, #1
 80012c2:	e6a0      	b.n	8001006 <HAL_I2C_Mem_Read+0x1e>

080012c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80012c4:	b510      	push	{r4, lr}
 80012c6:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 80012c8:	2300      	movs	r3, #0
 80012ca:	9301      	str	r3, [sp, #4]
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <HAL_PWREx_EnableOverDrive+0x70>)
 80012ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012d4:	641a      	str	r2, [r3, #64]	; 0x40
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80012e0:	2201      	movs	r2, #1
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <HAL_PWREx_EnableOverDrive+0x74>)
 80012e4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012e6:	f7ff f961 	bl	80005ac <HAL_GetTick>
 80012ea:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <HAL_PWREx_EnableOverDrive+0x78>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80012f4:	d108      	bne.n	8001308 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012f6:	f7ff f959 	bl	80005ac <HAL_GetTick>
 80012fa:	1b00      	subs	r0, r0, r4
 80012fc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001300:	d9f4      	bls.n	80012ec <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8001302:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8001304:	b002      	add	sp, #8
 8001306:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001308:	2201      	movs	r2, #1
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <HAL_PWREx_EnableOverDrive+0x7c>)
 800130c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800130e:	f7ff f94d 	bl	80005ac <HAL_GetTick>
 8001312:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_PWREx_EnableOverDrive+0x78>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800131c:	d107      	bne.n	800132e <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800131e:	f7ff f945 	bl	80005ac <HAL_GetTick>
 8001322:	1b00      	subs	r0, r0, r4
 8001324:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001328:	d9f4      	bls.n	8001314 <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 800132a:	2003      	movs	r0, #3
 800132c:	e7ea      	b.n	8001304 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 800132e:	2000      	movs	r0, #0
 8001330:	e7e8      	b.n	8001304 <HAL_PWREx_EnableOverDrive+0x40>
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800
 8001338:	420e0040 	.word	0x420e0040
 800133c:	40007000 	.word	0x40007000
 8001340:	420e0044 	.word	0x420e0044

08001344 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001344:	2800      	cmp	r0, #0
 8001346:	f000 809d 	beq.w	8001484 <HAL_RCC_ClockConfig+0x140>
{
 800134a:	b570      	push	{r4, r5, r6, lr}
 800134c:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800134e:	4b4f      	ldr	r3, [pc, #316]	; (800148c <HAL_RCC_ClockConfig+0x148>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	428b      	cmp	r3, r1
 8001358:	d209      	bcs.n	800136e <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800135a:	b2cb      	uxtb	r3, r1
 800135c:	4a4b      	ldr	r2, [pc, #300]	; (800148c <HAL_RCC_ClockConfig+0x148>)
 800135e:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001360:	6813      	ldr	r3, [r2, #0]
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	4299      	cmp	r1, r3
 8001368:	d001      	beq.n	800136e <HAL_RCC_ClockConfig+0x2a>
    {
      return HAL_ERROR;
 800136a:	2001      	movs	r0, #1
 800136c:	bd70      	pop	{r4, r5, r6, pc}
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800136e:	6823      	ldr	r3, [r4, #0]
 8001370:	f013 0f02 	tst.w	r3, #2
 8001374:	d017      	beq.n	80013a6 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001376:	f013 0f04 	tst.w	r3, #4
 800137a:	d004      	beq.n	8001386 <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800137c:	4a44      	ldr	r2, [pc, #272]	; (8001490 <HAL_RCC_ClockConfig+0x14c>)
 800137e:	6893      	ldr	r3, [r2, #8]
 8001380:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001384:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001386:	6823      	ldr	r3, [r4, #0]
 8001388:	f013 0f08 	tst.w	r3, #8
 800138c:	d004      	beq.n	8001398 <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800138e:	4a40      	ldr	r2, [pc, #256]	; (8001490 <HAL_RCC_ClockConfig+0x14c>)
 8001390:	6893      	ldr	r3, [r2, #8]
 8001392:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001396:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001398:	4a3d      	ldr	r2, [pc, #244]	; (8001490 <HAL_RCC_ClockConfig+0x14c>)
 800139a:	6893      	ldr	r3, [r2, #8]
 800139c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013a0:	68a0      	ldr	r0, [r4, #8]
 80013a2:	4303      	orrs	r3, r0
 80013a4:	6093      	str	r3, [r2, #8]
 80013a6:	460d      	mov	r5, r1
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	f013 0f01 	tst.w	r3, #1
 80013ae:	d032      	beq.n	8001416 <HAL_RCC_ClockConfig+0xd2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013b0:	6863      	ldr	r3, [r4, #4]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d021      	beq.n	80013fa <HAL_RCC_ClockConfig+0xb6>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013b6:	1e9a      	subs	r2, r3, #2
 80013b8:	2a01      	cmp	r2, #1
 80013ba:	d925      	bls.n	8001408 <HAL_RCC_ClockConfig+0xc4>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013bc:	4a34      	ldr	r2, [pc, #208]	; (8001490 <HAL_RCC_ClockConfig+0x14c>)
 80013be:	6812      	ldr	r2, [r2, #0]
 80013c0:	f012 0f02 	tst.w	r2, #2
 80013c4:	d060      	beq.n	8001488 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013c6:	4932      	ldr	r1, [pc, #200]	; (8001490 <HAL_RCC_ClockConfig+0x14c>)
 80013c8:	688a      	ldr	r2, [r1, #8]
 80013ca:	f022 0203 	bic.w	r2, r2, #3
 80013ce:	4313      	orrs	r3, r2
 80013d0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013d2:	f7ff f8eb 	bl	80005ac <HAL_GetTick>
 80013d6:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013d8:	4b2d      	ldr	r3, [pc, #180]	; (8001490 <HAL_RCC_ClockConfig+0x14c>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 030c 	and.w	r3, r3, #12
 80013e0:	6862      	ldr	r2, [r4, #4]
 80013e2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80013e6:	d016      	beq.n	8001416 <HAL_RCC_ClockConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013e8:	f7ff f8e0 	bl	80005ac <HAL_GetTick>
 80013ec:	1b80      	subs	r0, r0, r6
 80013ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80013f2:	4298      	cmp	r0, r3
 80013f4:	d9f0      	bls.n	80013d8 <HAL_RCC_ClockConfig+0x94>
      {
        return HAL_TIMEOUT;
 80013f6:	2003      	movs	r0, #3
 80013f8:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fa:	4a25      	ldr	r2, [pc, #148]	; (8001490 <HAL_RCC_ClockConfig+0x14c>)
 80013fc:	6812      	ldr	r2, [r2, #0]
 80013fe:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001402:	d1e0      	bne.n	80013c6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001404:	2001      	movs	r0, #1
 8001406:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001408:	4a21      	ldr	r2, [pc, #132]	; (8001490 <HAL_RCC_ClockConfig+0x14c>)
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001410:	d1d9      	bne.n	80013c6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001412:	2001      	movs	r0, #1
 8001414:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001416:	4b1d      	ldr	r3, [pc, #116]	; (800148c <HAL_RCC_ClockConfig+0x148>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	429d      	cmp	r5, r3
 8001420:	d209      	bcs.n	8001436 <HAL_RCC_ClockConfig+0xf2>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001422:	b2ea      	uxtb	r2, r5
 8001424:	4b19      	ldr	r3, [pc, #100]	; (800148c <HAL_RCC_ClockConfig+0x148>)
 8001426:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	429d      	cmp	r5, r3
 8001430:	d001      	beq.n	8001436 <HAL_RCC_ClockConfig+0xf2>
    {
      return HAL_ERROR;
 8001432:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8001434:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001436:	6823      	ldr	r3, [r4, #0]
 8001438:	f013 0f04 	tst.w	r3, #4
 800143c:	d006      	beq.n	800144c <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800143e:	4a14      	ldr	r2, [pc, #80]	; (8001490 <HAL_RCC_ClockConfig+0x14c>)
 8001440:	6893      	ldr	r3, [r2, #8]
 8001442:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001446:	68e1      	ldr	r1, [r4, #12]
 8001448:	430b      	orrs	r3, r1
 800144a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800144c:	6823      	ldr	r3, [r4, #0]
 800144e:	f013 0f08 	tst.w	r3, #8
 8001452:	d007      	beq.n	8001464 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001454:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <HAL_RCC_ClockConfig+0x14c>)
 8001456:	6893      	ldr	r3, [r2, #8]
 8001458:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800145c:	6921      	ldr	r1, [r4, #16]
 800145e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001462:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001464:	f000 f840 	bl	80014e8 <HAL_RCC_GetSysClockFreq>
 8001468:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_RCC_ClockConfig+0x14c>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001470:	4a08      	ldr	r2, [pc, #32]	; (8001494 <HAL_RCC_ClockConfig+0x150>)
 8001472:	5cd3      	ldrb	r3, [r2, r3]
 8001474:	40d8      	lsrs	r0, r3
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <HAL_RCC_ClockConfig+0x154>)
 8001478:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800147a:	2000      	movs	r0, #0
 800147c:	f7ff f84a 	bl	8000514 <HAL_InitTick>
  return HAL_OK;
 8001480:	2000      	movs	r0, #0
 8001482:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001484:	2001      	movs	r0, #1
 8001486:	4770      	bx	lr
        return HAL_ERROR;
 8001488:	2001      	movs	r0, #1
 800148a:	bd70      	pop	{r4, r5, r6, pc}
 800148c:	40023c00 	.word	0x40023c00
 8001490:	40023800 	.word	0x40023800
 8001494:	08002790 	.word	0x08002790
 8001498:	20000008 	.word	0x20000008

0800149c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800149c:	4b01      	ldr	r3, [pc, #4]	; (80014a4 <HAL_RCC_GetHCLKFreq+0x8>)
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000008 	.word	0x20000008

080014a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014a8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014aa:	f7ff fff7 	bl	800149c <HAL_RCC_GetHCLKFreq>
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80014b6:	4a03      	ldr	r2, [pc, #12]	; (80014c4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80014b8:	5cd3      	ldrb	r3, [r2, r3]
}
 80014ba:	40d8      	lsrs	r0, r3
 80014bc:	bd08      	pop	{r3, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	080027a0 	.word	0x080027a0

080014c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014c8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80014ca:	f7ff ffe7 	bl	800149c <HAL_RCC_GetHCLKFreq>
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80014d6:	4a03      	ldr	r2, [pc, #12]	; (80014e4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80014d8:	5cd3      	ldrb	r3, [r2, r3]
}
 80014da:	40d8      	lsrs	r0, r3
 80014dc:	bd08      	pop	{r3, pc}
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	080027a0 	.word	0x080027a0

080014e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014ea:	4b5c      	ldr	r3, [pc, #368]	; (800165c <HAL_RCC_GetSysClockFreq+0x174>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 030c 	and.w	r3, r3, #12
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	d006      	beq.n	8001504 <HAL_RCC_GetSysClockFreq+0x1c>
 80014f6:	2b0c      	cmp	r3, #12
 80014f8:	d05a      	beq.n	80015b0 <HAL_RCC_GetSysClockFreq+0xc8>
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	f000 80ac 	beq.w	8001658 <HAL_RCC_GetSysClockFreq+0x170>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001500:	4857      	ldr	r0, [pc, #348]	; (8001660 <HAL_RCC_GetSysClockFreq+0x178>)
 8001502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001504:	4b55      	ldr	r3, [pc, #340]	; (800165c <HAL_RCC_GetSysClockFreq+0x174>)
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001512:	d02a      	beq.n	800156a <HAL_RCC_GetSysClockFreq+0x82>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001514:	4b51      	ldr	r3, [pc, #324]	; (800165c <HAL_RCC_GetSysClockFreq+0x174>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800151c:	461e      	mov	r6, r3
 800151e:	2700      	movs	r7, #0
 8001520:	015c      	lsls	r4, r3, #5
 8001522:	2500      	movs	r5, #0
 8001524:	1ae4      	subs	r4, r4, r3
 8001526:	eb65 0507 	sbc.w	r5, r5, r7
 800152a:	01a9      	lsls	r1, r5, #6
 800152c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001530:	01a0      	lsls	r0, r4, #6
 8001532:	1b00      	subs	r0, r0, r4
 8001534:	eb61 0105 	sbc.w	r1, r1, r5
 8001538:	00cb      	lsls	r3, r1, #3
 800153a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800153e:	00c4      	lsls	r4, r0, #3
 8001540:	19a0      	adds	r0, r4, r6
 8001542:	eb43 0107 	adc.w	r1, r3, r7
 8001546:	024b      	lsls	r3, r1, #9
 8001548:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800154c:	0244      	lsls	r4, r0, #9
 800154e:	4620      	mov	r0, r4
 8001550:	4619      	mov	r1, r3
 8001552:	2300      	movs	r3, #0
 8001554:	f7fe fe56 	bl	8000204 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001558:	4b40      	ldr	r3, [pc, #256]	; (800165c <HAL_RCC_GetSysClockFreq+0x174>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001560:	3301      	adds	r3, #1
 8001562:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001564:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800156a:	4b3c      	ldr	r3, [pc, #240]	; (800165c <HAL_RCC_GetSysClockFreq+0x174>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001572:	461e      	mov	r6, r3
 8001574:	2700      	movs	r7, #0
 8001576:	015c      	lsls	r4, r3, #5
 8001578:	2500      	movs	r5, #0
 800157a:	1ae4      	subs	r4, r4, r3
 800157c:	eb65 0507 	sbc.w	r5, r5, r7
 8001580:	01a9      	lsls	r1, r5, #6
 8001582:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001586:	01a0      	lsls	r0, r4, #6
 8001588:	1b00      	subs	r0, r0, r4
 800158a:	eb61 0105 	sbc.w	r1, r1, r5
 800158e:	00cb      	lsls	r3, r1, #3
 8001590:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001594:	00c4      	lsls	r4, r0, #3
 8001596:	19a0      	adds	r0, r4, r6
 8001598:	eb43 0107 	adc.w	r1, r3, r7
 800159c:	028b      	lsls	r3, r1, #10
 800159e:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80015a2:	0284      	lsls	r4, r0, #10
 80015a4:	4620      	mov	r0, r4
 80015a6:	4619      	mov	r1, r3
 80015a8:	2300      	movs	r3, #0
 80015aa:	f7fe fe2b 	bl	8000204 <__aeabi_uldivmod>
 80015ae:	e7d3      	b.n	8001558 <HAL_RCC_GetSysClockFreq+0x70>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015b0:	4b2a      	ldr	r3, [pc, #168]	; (800165c <HAL_RCC_GetSysClockFreq+0x174>)
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80015be:	d028      	beq.n	8001612 <HAL_RCC_GetSysClockFreq+0x12a>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c0:	4b26      	ldr	r3, [pc, #152]	; (800165c <HAL_RCC_GetSysClockFreq+0x174>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80015c8:	461e      	mov	r6, r3
 80015ca:	2700      	movs	r7, #0
 80015cc:	015c      	lsls	r4, r3, #5
 80015ce:	2500      	movs	r5, #0
 80015d0:	1ae4      	subs	r4, r4, r3
 80015d2:	eb65 0507 	sbc.w	r5, r5, r7
 80015d6:	01a9      	lsls	r1, r5, #6
 80015d8:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80015dc:	01a0      	lsls	r0, r4, #6
 80015de:	1b00      	subs	r0, r0, r4
 80015e0:	eb61 0105 	sbc.w	r1, r1, r5
 80015e4:	00cb      	lsls	r3, r1, #3
 80015e6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80015ea:	00c4      	lsls	r4, r0, #3
 80015ec:	19a0      	adds	r0, r4, r6
 80015ee:	eb43 0107 	adc.w	r1, r3, r7
 80015f2:	024b      	lsls	r3, r1, #9
 80015f4:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80015f8:	0244      	lsls	r4, r0, #9
 80015fa:	4620      	mov	r0, r4
 80015fc:	4619      	mov	r1, r3
 80015fe:	2300      	movs	r3, #0
 8001600:	f7fe fe00 	bl	8000204 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_RCC_GetSysClockFreq+0x174>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f3c3 7302 	ubfx	r3, r3, #28, #3

      sysclockfreq = pllvco/pllr;
 800160c:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_RCC_GetSysClockFreq+0x174>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800161a:	461e      	mov	r6, r3
 800161c:	2700      	movs	r7, #0
 800161e:	015c      	lsls	r4, r3, #5
 8001620:	2500      	movs	r5, #0
 8001622:	1ae4      	subs	r4, r4, r3
 8001624:	eb65 0507 	sbc.w	r5, r5, r7
 8001628:	01a9      	lsls	r1, r5, #6
 800162a:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 800162e:	01a0      	lsls	r0, r4, #6
 8001630:	1b00      	subs	r0, r0, r4
 8001632:	eb61 0105 	sbc.w	r1, r1, r5
 8001636:	00cb      	lsls	r3, r1, #3
 8001638:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800163c:	00c4      	lsls	r4, r0, #3
 800163e:	19a0      	adds	r0, r4, r6
 8001640:	eb43 0107 	adc.w	r1, r3, r7
 8001644:	028b      	lsls	r3, r1, #10
 8001646:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800164a:	0284      	lsls	r4, r0, #10
 800164c:	4620      	mov	r0, r4
 800164e:	4619      	mov	r1, r3
 8001650:	2300      	movs	r3, #0
 8001652:	f7fe fdd7 	bl	8000204 <__aeabi_uldivmod>
 8001656:	e7d5      	b.n	8001604 <HAL_RCC_GetSysClockFreq+0x11c>
      sysclockfreq = HSE_VALUE;
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <HAL_RCC_GetSysClockFreq+0x17c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800165a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800165c:	40023800 	.word	0x40023800
 8001660:	00f42400 	.word	0x00f42400
 8001664:	007a1200 	.word	0x007a1200

08001668 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800166e:	6803      	ldr	r3, [r0, #0]
 8001670:	f013 0f01 	tst.w	r3, #1
 8001674:	d041      	beq.n	80016fa <HAL_RCC_OscConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001676:	4ba6      	ldr	r3, [pc, #664]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b04      	cmp	r3, #4
 8001680:	d032      	beq.n	80016e8 <HAL_RCC_OscConfig+0x80>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001682:	4ba3      	ldr	r3, [pc, #652]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800168a:	2b08      	cmp	r3, #8
 800168c:	d027      	beq.n	80016de <HAL_RCC_OscConfig+0x76>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800168e:	4ba0      	ldr	r3, [pc, #640]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001696:	2b0c      	cmp	r3, #12
 8001698:	d059      	beq.n	800174e <HAL_RCC_OscConfig+0xe6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800169a:	6863      	ldr	r3, [r4, #4]
 800169c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a0:	d05b      	beq.n	800175a <HAL_RCC_OscConfig+0xf2>
 80016a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016a6:	d05e      	beq.n	8001766 <HAL_RCC_OscConfig+0xfe>
 80016a8:	4b99      	ldr	r3, [pc, #612]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016b8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016ba:	6863      	ldr	r3, [r4, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d05c      	beq.n	800177a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c0:	f7fe ff74 	bl	80005ac <HAL_GetTick>
 80016c4:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c6:	4b92      	ldr	r3, [pc, #584]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80016ce:	d114      	bne.n	80016fa <HAL_RCC_OscConfig+0x92>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016d0:	f7fe ff6c 	bl	80005ac <HAL_GetTick>
 80016d4:	1b40      	subs	r0, r0, r5
 80016d6:	2864      	cmp	r0, #100	; 0x64
 80016d8:	d9f5      	bls.n	80016c6 <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 80016da:	2003      	movs	r0, #3
 80016dc:	e19d      	b.n	8001a1a <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016de:	4b8c      	ldr	r3, [pc, #560]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80016e6:	d0d2      	beq.n	800168e <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e8:	4b89      	ldr	r3, [pc, #548]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80016f0:	d003      	beq.n	80016fa <HAL_RCC_OscConfig+0x92>
 80016f2:	6863      	ldr	r3, [r4, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 818d 	beq.w	8001a14 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016fa:	6823      	ldr	r3, [r4, #0]
 80016fc:	f013 0f02 	tst.w	r3, #2
 8001700:	d067      	beq.n	80017d2 <HAL_RCC_OscConfig+0x16a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001702:	4b83      	ldr	r3, [pc, #524]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f013 0f0c 	tst.w	r3, #12
 800170a:	d04a      	beq.n	80017a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800170c:	4b80      	ldr	r3, [pc, #512]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001714:	2b08      	cmp	r3, #8
 8001716:	d03f      	beq.n	8001798 <HAL_RCC_OscConfig+0x130>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001718:	4b7d      	ldr	r3, [pc, #500]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001720:	2b0c      	cmp	r3, #12
 8001722:	d048      	beq.n	80017b6 <HAL_RCC_OscConfig+0x14e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001724:	68e3      	ldr	r3, [r4, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d074      	beq.n	8001814 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800172a:	2201      	movs	r2, #1
 800172c:	4b79      	ldr	r3, [pc, #484]	; (8001914 <HAL_RCC_OscConfig+0x2ac>)
 800172e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001730:	f7fe ff3c 	bl	80005ac <HAL_GetTick>
 8001734:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001736:	4b76      	ldr	r3, [pc, #472]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f013 0f02 	tst.w	r3, #2
 800173e:	d160      	bne.n	8001802 <HAL_RCC_OscConfig+0x19a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001740:	f7fe ff34 	bl	80005ac <HAL_GetTick>
 8001744:	1b40      	subs	r0, r0, r5
 8001746:	2802      	cmp	r0, #2
 8001748:	d9f5      	bls.n	8001736 <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 800174a:	2003      	movs	r0, #3
 800174c:	e165      	b.n	8001a1a <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800174e:	4b70      	ldr	r3, [pc, #448]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001756:	d0a0      	beq.n	800169a <HAL_RCC_OscConfig+0x32>
 8001758:	e7c6      	b.n	80016e8 <HAL_RCC_OscConfig+0x80>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175a:	4a6d      	ldr	r2, [pc, #436]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 800175c:	6813      	ldr	r3, [r2, #0]
 800175e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	e7a9      	b.n	80016ba <HAL_RCC_OscConfig+0x52>
 8001766:	4b6a      	ldr	r3, [pc, #424]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	e79f      	b.n	80016ba <HAL_RCC_OscConfig+0x52>
        tickstart = HAL_GetTick();
 800177a:	f7fe ff17 	bl	80005ac <HAL_GetTick>
 800177e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001780:	4b63      	ldr	r3, [pc, #396]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001788:	d0b7      	beq.n	80016fa <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800178a:	f7fe ff0f 	bl	80005ac <HAL_GetTick>
 800178e:	1b40      	subs	r0, r0, r5
 8001790:	2864      	cmp	r0, #100	; 0x64
 8001792:	d9f5      	bls.n	8001780 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8001794:	2003      	movs	r0, #3
 8001796:	e140      	b.n	8001a1a <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001798:	4b5d      	ldr	r3, [pc, #372]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80017a0:	d1ba      	bne.n	8001718 <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a2:	4b5b      	ldr	r3, [pc, #364]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f013 0f02 	tst.w	r3, #2
 80017aa:	d00a      	beq.n	80017c2 <HAL_RCC_OscConfig+0x15a>
 80017ac:	68e3      	ldr	r3, [r4, #12]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d007      	beq.n	80017c2 <HAL_RCC_OscConfig+0x15a>
        return HAL_ERROR;
 80017b2:	2001      	movs	r0, #1
 80017b4:	e131      	b.n	8001a1a <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017b6:	4b56      	ldr	r3, [pc, #344]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80017be:	d1b1      	bne.n	8001724 <HAL_RCC_OscConfig+0xbc>
 80017c0:	e7ef      	b.n	80017a2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c2:	4a53      	ldr	r2, [pc, #332]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 80017c4:	6813      	ldr	r3, [r2, #0]
 80017c6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017ca:	6921      	ldr	r1, [r4, #16]
 80017cc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80017d0:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d2:	6823      	ldr	r3, [r4, #0]
 80017d4:	f013 0f08 	tst.w	r3, #8
 80017d8:	d040      	beq.n	800185c <HAL_RCC_OscConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017da:	6963      	ldr	r3, [r4, #20]
 80017dc:	b363      	cbz	r3, 8001838 <HAL_RCC_OscConfig+0x1d0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017de:	2201      	movs	r2, #1
 80017e0:	4b4d      	ldr	r3, [pc, #308]	; (8001918 <HAL_RCC_OscConfig+0x2b0>)
 80017e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e4:	f7fe fee2 	bl	80005ac <HAL_GetTick>
 80017e8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ea:	4b49      	ldr	r3, [pc, #292]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 80017ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ee:	f013 0f02 	tst.w	r3, #2
 80017f2:	d133      	bne.n	800185c <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f4:	f7fe feda 	bl	80005ac <HAL_GetTick>
 80017f8:	1b40      	subs	r0, r0, r5
 80017fa:	2802      	cmp	r0, #2
 80017fc:	d9f5      	bls.n	80017ea <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 80017fe:	2003      	movs	r0, #3
 8001800:	e10b      	b.n	8001a1a <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001802:	4a43      	ldr	r2, [pc, #268]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 8001804:	6813      	ldr	r3, [r2, #0]
 8001806:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800180a:	6921      	ldr	r1, [r4, #16]
 800180c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	e7de      	b.n	80017d2 <HAL_RCC_OscConfig+0x16a>
        __HAL_RCC_HSI_DISABLE();
 8001814:	2200      	movs	r2, #0
 8001816:	4b3f      	ldr	r3, [pc, #252]	; (8001914 <HAL_RCC_OscConfig+0x2ac>)
 8001818:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800181a:	f7fe fec7 	bl	80005ac <HAL_GetTick>
 800181e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001820:	4b3b      	ldr	r3, [pc, #236]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f013 0f02 	tst.w	r3, #2
 8001828:	d0d3      	beq.n	80017d2 <HAL_RCC_OscConfig+0x16a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800182a:	f7fe febf 	bl	80005ac <HAL_GetTick>
 800182e:	1b40      	subs	r0, r0, r5
 8001830:	2802      	cmp	r0, #2
 8001832:	d9f5      	bls.n	8001820 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8001834:	2003      	movs	r0, #3
 8001836:	e0f0      	b.n	8001a1a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001838:	2200      	movs	r2, #0
 800183a:	4b37      	ldr	r3, [pc, #220]	; (8001918 <HAL_RCC_OscConfig+0x2b0>)
 800183c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183e:	f7fe feb5 	bl	80005ac <HAL_GetTick>
 8001842:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001844:	4b32      	ldr	r3, [pc, #200]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 8001846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001848:	f013 0f02 	tst.w	r3, #2
 800184c:	d006      	beq.n	800185c <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800184e:	f7fe fead 	bl	80005ac <HAL_GetTick>
 8001852:	1b40      	subs	r0, r0, r5
 8001854:	2802      	cmp	r0, #2
 8001856:	d9f5      	bls.n	8001844 <HAL_RCC_OscConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 8001858:	2003      	movs	r0, #3
 800185a:	e0de      	b.n	8001a1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800185c:	6823      	ldr	r3, [r4, #0]
 800185e:	f013 0f04 	tst.w	r3, #4
 8001862:	d079      	beq.n	8001958 <HAL_RCC_OscConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001864:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800186c:	d133      	bne.n	80018d6 <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	9301      	str	r3, [sp, #4]
 8001872:	4b27      	ldr	r3, [pc, #156]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 8001874:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001876:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800187a:	641a      	str	r2, [r3, #64]	; 0x40
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001886:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001888:	4b24      	ldr	r3, [pc, #144]	; (800191c <HAL_RCC_OscConfig+0x2b4>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001890:	d023      	beq.n	80018da <HAL_RCC_OscConfig+0x272>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001892:	68a3      	ldr	r3, [r4, #8]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d034      	beq.n	8001902 <HAL_RCC_OscConfig+0x29a>
 8001898:	2b05      	cmp	r3, #5
 800189a:	d041      	beq.n	8001920 <HAL_RCC_OscConfig+0x2b8>
 800189c:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 800189e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018a0:	f022 0201 	bic.w	r2, r2, #1
 80018a4:	671a      	str	r2, [r3, #112]	; 0x70
 80018a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018a8:	f022 0204 	bic.w	r2, r2, #4
 80018ac:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018ae:	68a3      	ldr	r3, [r4, #8]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d03f      	beq.n	8001934 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b4:	f7fe fe7a 	bl	80005ac <HAL_GetTick>
 80018b8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 80018bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018be:	f013 0f02 	tst.w	r3, #2
 80018c2:	d148      	bne.n	8001956 <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c4:	f7fe fe72 	bl	80005ac <HAL_GetTick>
 80018c8:	1b80      	subs	r0, r0, r6
 80018ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80018ce:	4298      	cmp	r0, r3
 80018d0:	d9f3      	bls.n	80018ba <HAL_RCC_OscConfig+0x252>
        {
          return HAL_TIMEOUT;
 80018d2:	2003      	movs	r0, #3
 80018d4:	e0a1      	b.n	8001a1a <HAL_RCC_OscConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 80018d6:	2500      	movs	r5, #0
 80018d8:	e7d6      	b.n	8001888 <HAL_RCC_OscConfig+0x220>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018da:	4a10      	ldr	r2, [pc, #64]	; (800191c <HAL_RCC_OscConfig+0x2b4>)
 80018dc:	6813      	ldr	r3, [r2, #0]
 80018de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80018e4:	f7fe fe62 	bl	80005ac <HAL_GetTick>
 80018e8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <HAL_RCC_OscConfig+0x2b4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f413 7f80 	tst.w	r3, #256	; 0x100
 80018f2:	d1ce      	bne.n	8001892 <HAL_RCC_OscConfig+0x22a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f4:	f7fe fe5a 	bl	80005ac <HAL_GetTick>
 80018f8:	1b80      	subs	r0, r0, r6
 80018fa:	2802      	cmp	r0, #2
 80018fc:	d9f5      	bls.n	80018ea <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 80018fe:	2003      	movs	r0, #3
 8001900:	e08b      	b.n	8001a1a <HAL_RCC_OscConfig+0x3b2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001902:	4a03      	ldr	r2, [pc, #12]	; (8001910 <HAL_RCC_OscConfig+0x2a8>)
 8001904:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6713      	str	r3, [r2, #112]	; 0x70
 800190c:	e7cf      	b.n	80018ae <HAL_RCC_OscConfig+0x246>
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800
 8001914:	42470000 	.word	0x42470000
 8001918:	42470e80 	.word	0x42470e80
 800191c:	40007000 	.word	0x40007000
 8001920:	4b40      	ldr	r3, [pc, #256]	; (8001a24 <HAL_RCC_OscConfig+0x3bc>)
 8001922:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001924:	f042 0204 	orr.w	r2, r2, #4
 8001928:	671a      	str	r2, [r3, #112]	; 0x70
 800192a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800192c:	f042 0201 	orr.w	r2, r2, #1
 8001930:	671a      	str	r2, [r3, #112]	; 0x70
 8001932:	e7bc      	b.n	80018ae <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001934:	f7fe fe3a 	bl	80005ac <HAL_GetTick>
 8001938:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193a:	4b3a      	ldr	r3, [pc, #232]	; (8001a24 <HAL_RCC_OscConfig+0x3bc>)
 800193c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193e:	f013 0f02 	tst.w	r3, #2
 8001942:	d008      	beq.n	8001956 <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001944:	f7fe fe32 	bl	80005ac <HAL_GetTick>
 8001948:	1b80      	subs	r0, r0, r6
 800194a:	f241 3388 	movw	r3, #5000	; 0x1388
 800194e:	4298      	cmp	r0, r3
 8001950:	d9f3      	bls.n	800193a <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 8001952:	2003      	movs	r0, #3
 8001954:	e061      	b.n	8001a1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001956:	b9e5      	cbnz	r5, 8001992 <HAL_RCC_OscConfig+0x32a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001958:	69a3      	ldr	r3, [r4, #24]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d05c      	beq.n	8001a18 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800195e:	4a31      	ldr	r2, [pc, #196]	; (8001a24 <HAL_RCC_OscConfig+0x3bc>)
 8001960:	6892      	ldr	r2, [r2, #8]
 8001962:	f002 020c 	and.w	r2, r2, #12
 8001966:	2a08      	cmp	r2, #8
 8001968:	d059      	beq.n	8001a1e <HAL_RCC_OscConfig+0x3b6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800196a:	2b02      	cmp	r3, #2
 800196c:	d017      	beq.n	800199e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196e:	2200      	movs	r2, #0
 8001970:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <HAL_RCC_OscConfig+0x3c0>)
 8001972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001974:	f7fe fe1a 	bl	80005ac <HAL_GetTick>
 8001978:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197a:	4b2a      	ldr	r3, [pc, #168]	; (8001a24 <HAL_RCC_OscConfig+0x3bc>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001982:	d045      	beq.n	8001a10 <HAL_RCC_OscConfig+0x3a8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001984:	f7fe fe12 	bl	80005ac <HAL_GetTick>
 8001988:	1b00      	subs	r0, r0, r4
 800198a:	2802      	cmp	r0, #2
 800198c:	d9f5      	bls.n	800197a <HAL_RCC_OscConfig+0x312>
          {
            return HAL_TIMEOUT;
 800198e:	2003      	movs	r0, #3
 8001990:	e043      	b.n	8001a1a <HAL_RCC_OscConfig+0x3b2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001992:	4a24      	ldr	r2, [pc, #144]	; (8001a24 <HAL_RCC_OscConfig+0x3bc>)
 8001994:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001996:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800199a:	6413      	str	r3, [r2, #64]	; 0x40
 800199c:	e7dc      	b.n	8001958 <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_DISABLE();
 800199e:	2200      	movs	r2, #0
 80019a0:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <HAL_RCC_OscConfig+0x3c0>)
 80019a2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019a4:	f7fe fe02 	bl	80005ac <HAL_GetTick>
 80019a8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019aa:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <HAL_RCC_OscConfig+0x3bc>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80019b2:	d006      	beq.n	80019c2 <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b4:	f7fe fdfa 	bl	80005ac <HAL_GetTick>
 80019b8:	1b40      	subs	r0, r0, r5
 80019ba:	2802      	cmp	r0, #2
 80019bc:	d9f5      	bls.n	80019aa <HAL_RCC_OscConfig+0x342>
            return HAL_TIMEOUT;
 80019be:	2003      	movs	r0, #3
 80019c0:	e02b      	b.n	8001a1a <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c2:	69e3      	ldr	r3, [r4, #28]
 80019c4:	6a22      	ldr	r2, [r4, #32]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019ca:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80019ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80019d0:	0852      	lsrs	r2, r2, #1
 80019d2:	3a01      	subs	r2, #1
 80019d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80019d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80019da:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80019de:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80019e0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80019e4:	4a0f      	ldr	r2, [pc, #60]	; (8001a24 <HAL_RCC_OscConfig+0x3bc>)
 80019e6:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80019e8:	2201      	movs	r2, #1
 80019ea:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <HAL_RCC_OscConfig+0x3c0>)
 80019ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80019ee:	f7fe fddd 	bl	80005ac <HAL_GetTick>
 80019f2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_RCC_OscConfig+0x3bc>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80019fc:	d106      	bne.n	8001a0c <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fe:	f7fe fdd5 	bl	80005ac <HAL_GetTick>
 8001a02:	1b00      	subs	r0, r0, r4
 8001a04:	2802      	cmp	r0, #2
 8001a06:	d9f5      	bls.n	80019f4 <HAL_RCC_OscConfig+0x38c>
            return HAL_TIMEOUT;
 8001a08:	2003      	movs	r0, #3
 8001a0a:	e006      	b.n	8001a1a <HAL_RCC_OscConfig+0x3b2>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	e004      	b.n	8001a1a <HAL_RCC_OscConfig+0x3b2>
 8001a10:	2000      	movs	r0, #0
 8001a12:	e002      	b.n	8001a1a <HAL_RCC_OscConfig+0x3b2>
        return HAL_ERROR;
 8001a14:	2001      	movs	r0, #1
 8001a16:	e000      	b.n	8001a1a <HAL_RCC_OscConfig+0x3b2>
  return HAL_OK;
 8001a18:	2000      	movs	r0, #0
}
 8001a1a:	b002      	add	sp, #8
 8001a1c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001a1e:	2001      	movs	r0, #1
 8001a20:	e7fb      	b.n	8001a1a <HAL_RCC_OscConfig+0x3b2>
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800
 8001a28:	42470060 	.word	0x42470060

08001a2c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a2c:	6802      	ldr	r2, [r0, #0]
 8001a2e:	68d3      	ldr	r3, [r2, #12]
 8001a30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001a34:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a36:	6802      	ldr	r2, [r0, #0]
 8001a38:	6953      	ldr	r3, [r2, #20]
 8001a3a:	f023 0301 	bic.w	r3, r3, #1
 8001a3e:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001a40:	2320      	movs	r3, #32
 8001a42:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001a46:	4770      	bx	lr

08001a48 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001a48:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b21      	cmp	r3, #33	; 0x21
 8001a50:	d001      	beq.n	8001a56 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001a52:	2002      	movs	r0, #2
 8001a54:	4770      	bx	lr
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a56:	6883      	ldr	r3, [r0, #8]
 8001a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a5c:	d017      	beq.n	8001a8e <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001a5e:	6802      	ldr	r2, [r0, #0]
 8001a60:	6a03      	ldr	r3, [r0, #32]
 8001a62:	1c59      	adds	r1, r3, #1
 8001a64:	6201      	str	r1, [r0, #32]
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8001a6a:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	84c3      	strh	r3, [r0, #38]	; 0x26
 8001a74:	b9db      	cbnz	r3, 8001aae <UART_Transmit_IT+0x66>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001a76:	6802      	ldr	r2, [r0, #0]
 8001a78:	68d3      	ldr	r3, [r2, #12]
 8001a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a7e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001a80:	6802      	ldr	r2, [r0, #0]
 8001a82:	68d3      	ldr	r3, [r2, #12]
 8001a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a88:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001a8e:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001a90:	6802      	ldr	r2, [r0, #0]
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a98:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001a9a:	6903      	ldr	r3, [r0, #16]
 8001a9c:	b91b      	cbnz	r3, 8001aa6 <UART_Transmit_IT+0x5e>
        huart->pTxBuffPtr += 2U;
 8001a9e:	6a03      	ldr	r3, [r0, #32]
 8001aa0:	3302      	adds	r3, #2
 8001aa2:	6203      	str	r3, [r0, #32]
 8001aa4:	e7e1      	b.n	8001a6a <UART_Transmit_IT+0x22>
        huart->pTxBuffPtr += 1U;
 8001aa6:	6a03      	ldr	r3, [r0, #32]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	6203      	str	r3, [r0, #32]
 8001aac:	e7dd      	b.n	8001a6a <UART_Transmit_IT+0x22>
    return HAL_OK;
 8001aae:	2000      	movs	r0, #0
  }
}
 8001ab0:	4770      	bx	lr
	...

08001ab4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ab8:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001aba:	6802      	ldr	r2, [r0, #0]
 8001abc:	6913      	ldr	r3, [r2, #16]
 8001abe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ac2:	68c1      	ldr	r1, [r0, #12]
 8001ac4:	430b      	orrs	r3, r1
 8001ac6:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ac8:	6883      	ldr	r3, [r0, #8]
 8001aca:	6902      	ldr	r2, [r0, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	6942      	ldr	r2, [r0, #20]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	69c2      	ldr	r2, [r0, #28]
 8001ad4:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1,
 8001ad6:	6801      	ldr	r1, [r0, #0]
 8001ad8:	68ca      	ldr	r2, [r1, #12]
 8001ada:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8001ade:	f022 020c 	bic.w	r2, r2, #12
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ae6:	6802      	ldr	r2, [r0, #0]
 8001ae8:	6953      	ldr	r3, [r2, #20]
 8001aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aee:	6981      	ldr	r1, [r0, #24]
 8001af0:	430b      	orrs	r3, r1
 8001af2:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001af4:	69c3      	ldr	r3, [r0, #28]
 8001af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001afa:	d062      	beq.n	8001bc2 <UART_SetConfig+0x10e>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001afc:	f8d0 8000 	ldr.w	r8, [r0]
 8001b00:	4bbb      	ldr	r3, [pc, #748]	; (8001df0 <UART_SetConfig+0x33c>)
 8001b02:	4598      	cmp	r8, r3
 8001b04:	f000 811b 	beq.w	8001d3e <UART_SetConfig+0x28a>
 8001b08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b0c:	4598      	cmp	r8, r3
 8001b0e:	f000 8116 	beq.w	8001d3e <UART_SetConfig+0x28a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b12:	f7ff fcc9 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001b16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b1e:	6865      	ldr	r5, [r4, #4]
 8001b20:	00ad      	lsls	r5, r5, #2
 8001b22:	fbb0 f5f5 	udiv	r5, r0, r5
 8001b26:	4fb3      	ldr	r7, [pc, #716]	; (8001df4 <UART_SetConfig+0x340>)
 8001b28:	fba7 3505 	umull	r3, r5, r7, r5
 8001b2c:	096d      	lsrs	r5, r5, #5
 8001b2e:	012e      	lsls	r6, r5, #4
 8001b30:	f7ff fcba 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001b34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b3c:	6865      	ldr	r5, [r4, #4]
 8001b3e:	00ad      	lsls	r5, r5, #2
 8001b40:	fbb0 faf5 	udiv	sl, r0, r5
 8001b44:	f7ff fcb0 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001b48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b4c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b50:	6865      	ldr	r5, [r4, #4]
 8001b52:	00ad      	lsls	r5, r5, #2
 8001b54:	fbb0 f5f5 	udiv	r5, r0, r5
 8001b58:	fba7 3505 	umull	r3, r5, r7, r5
 8001b5c:	096d      	lsrs	r5, r5, #5
 8001b5e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001b62:	fb09 a515 	mls	r5, r9, r5, sl
 8001b66:	012d      	lsls	r5, r5, #4
 8001b68:	3532      	adds	r5, #50	; 0x32
 8001b6a:	fba7 3505 	umull	r3, r5, r7, r5
 8001b6e:	096d      	lsrs	r5, r5, #5
 8001b70:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8001b74:	4435      	add	r5, r6
 8001b76:	f7ff fc97 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001b7a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b82:	6866      	ldr	r6, [r4, #4]
 8001b84:	00b6      	lsls	r6, r6, #2
 8001b86:	fbb0 f6f6 	udiv	r6, r0, r6
 8001b8a:	f7ff fc8d 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001b8e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b92:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001b96:	6863      	ldr	r3, [r4, #4]
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b9e:	fba7 3000 	umull	r3, r0, r7, r0
 8001ba2:	0940      	lsrs	r0, r0, #5
 8001ba4:	fb09 6910 	mls	r9, r9, r0, r6
 8001ba8:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001bac:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001bb0:	fba7 3709 	umull	r3, r7, r7, r9
 8001bb4:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8001bb8:	442f      	add	r7, r5
 8001bba:	f8c8 7008 	str.w	r7, [r8, #8]
 8001bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001bc2:	f8d0 8000 	ldr.w	r8, [r0]
 8001bc6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001bca:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8001bce:	4598      	cmp	r8, r3
 8001bd0:	d05c      	beq.n	8001c8c <UART_SetConfig+0x1d8>
 8001bd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bd6:	4598      	cmp	r8, r3
 8001bd8:	d058      	beq.n	8001c8c <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001bda:	f7ff fc65 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001bde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001be2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001be6:	6865      	ldr	r5, [r4, #4]
 8001be8:	006d      	lsls	r5, r5, #1
 8001bea:	fbb0 f5f5 	udiv	r5, r0, r5
 8001bee:	4f81      	ldr	r7, [pc, #516]	; (8001df4 <UART_SetConfig+0x340>)
 8001bf0:	fba7 3505 	umull	r3, r5, r7, r5
 8001bf4:	096d      	lsrs	r5, r5, #5
 8001bf6:	012e      	lsls	r6, r5, #4
 8001bf8:	f7ff fc56 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001bfc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c00:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c04:	6865      	ldr	r5, [r4, #4]
 8001c06:	006d      	lsls	r5, r5, #1
 8001c08:	fbb0 faf5 	udiv	sl, r0, r5
 8001c0c:	f7ff fc4c 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001c10:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c18:	6865      	ldr	r5, [r4, #4]
 8001c1a:	006d      	lsls	r5, r5, #1
 8001c1c:	fbb0 f5f5 	udiv	r5, r0, r5
 8001c20:	fba7 3505 	umull	r3, r5, r7, r5
 8001c24:	096d      	lsrs	r5, r5, #5
 8001c26:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001c2a:	fb09 a515 	mls	r5, r9, r5, sl
 8001c2e:	00ed      	lsls	r5, r5, #3
 8001c30:	3532      	adds	r5, #50	; 0x32
 8001c32:	fba7 3505 	umull	r3, r5, r7, r5
 8001c36:	096d      	lsrs	r5, r5, #5
 8001c38:	006d      	lsls	r5, r5, #1
 8001c3a:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8001c3e:	4435      	add	r5, r6
 8001c40:	f7ff fc32 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001c44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c4c:	6866      	ldr	r6, [r4, #4]
 8001c4e:	0076      	lsls	r6, r6, #1
 8001c50:	fbb0 f6f6 	udiv	r6, r0, r6
 8001c54:	f7ff fc28 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001c58:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c60:	6863      	ldr	r3, [r4, #4]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c68:	fba7 2303 	umull	r2, r3, r7, r3
 8001c6c:	095b      	lsrs	r3, r3, #5
 8001c6e:	fb09 6913 	mls	r9, r9, r3, r6
 8001c72:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001c76:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001c7a:	fba7 3709 	umull	r3, r7, r7, r9
 8001c7e:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8001c82:	442f      	add	r7, r5
 8001c84:	f8c8 7008 	str.w	r7, [r8, #8]
 8001c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001c8c:	f7ff fc1c 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 8001c90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c94:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001c98:	6865      	ldr	r5, [r4, #4]
 8001c9a:	006d      	lsls	r5, r5, #1
 8001c9c:	fbb0 f5f5 	udiv	r5, r0, r5
 8001ca0:	4f54      	ldr	r7, [pc, #336]	; (8001df4 <UART_SetConfig+0x340>)
 8001ca2:	fba7 3505 	umull	r3, r5, r7, r5
 8001ca6:	096d      	lsrs	r5, r5, #5
 8001ca8:	012e      	lsls	r6, r5, #4
 8001caa:	f7ff fc0d 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 8001cae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cb2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cb6:	6865      	ldr	r5, [r4, #4]
 8001cb8:	006d      	lsls	r5, r5, #1
 8001cba:	fbb0 faf5 	udiv	sl, r0, r5
 8001cbe:	f7ff fc03 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 8001cc2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cc6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cca:	6865      	ldr	r5, [r4, #4]
 8001ccc:	006d      	lsls	r5, r5, #1
 8001cce:	fbb0 f5f5 	udiv	r5, r0, r5
 8001cd2:	fba7 3505 	umull	r3, r5, r7, r5
 8001cd6:	096d      	lsrs	r5, r5, #5
 8001cd8:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001cdc:	fb09 a515 	mls	r5, r9, r5, sl
 8001ce0:	00ed      	lsls	r5, r5, #3
 8001ce2:	3532      	adds	r5, #50	; 0x32
 8001ce4:	fba7 3505 	umull	r3, r5, r7, r5
 8001ce8:	096d      	lsrs	r5, r5, #5
 8001cea:	006d      	lsls	r5, r5, #1
 8001cec:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8001cf0:	4435      	add	r5, r6
 8001cf2:	f7ff fbe9 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 8001cf6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cfa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001cfe:	6866      	ldr	r6, [r4, #4]
 8001d00:	0076      	lsls	r6, r6, #1
 8001d02:	fbb0 f6f6 	udiv	r6, r0, r6
 8001d06:	f7ff fbdf 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 8001d0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d0e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d12:	6863      	ldr	r3, [r4, #4]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d1a:	fba7 2303 	umull	r2, r3, r7, r3
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	fb09 6913 	mls	r9, r9, r3, r6
 8001d24:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001d28:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001d2c:	fba7 3709 	umull	r3, r7, r7, r9
 8001d30:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8001d34:	442f      	add	r7, r5
 8001d36:	f8c8 7008 	str.w	r7, [r8, #8]
 8001d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001d3e:	f7ff fbc3 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 8001d42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d46:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d4a:	6865      	ldr	r5, [r4, #4]
 8001d4c:	00ad      	lsls	r5, r5, #2
 8001d4e:	fbb0 f5f5 	udiv	r5, r0, r5
 8001d52:	4f28      	ldr	r7, [pc, #160]	; (8001df4 <UART_SetConfig+0x340>)
 8001d54:	fba7 3505 	umull	r3, r5, r7, r5
 8001d58:	096d      	lsrs	r5, r5, #5
 8001d5a:	012e      	lsls	r6, r5, #4
 8001d5c:	f7ff fbb4 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 8001d60:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d68:	6865      	ldr	r5, [r4, #4]
 8001d6a:	00ad      	lsls	r5, r5, #2
 8001d6c:	fbb0 faf5 	udiv	sl, r0, r5
 8001d70:	f7ff fbaa 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 8001d74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001d7c:	6865      	ldr	r5, [r4, #4]
 8001d7e:	00ad      	lsls	r5, r5, #2
 8001d80:	fbb0 f5f5 	udiv	r5, r0, r5
 8001d84:	fba7 3505 	umull	r3, r5, r7, r5
 8001d88:	096d      	lsrs	r5, r5, #5
 8001d8a:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001d8e:	fb09 a515 	mls	r5, r9, r5, sl
 8001d92:	012d      	lsls	r5, r5, #4
 8001d94:	3532      	adds	r5, #50	; 0x32
 8001d96:	fba7 3505 	umull	r3, r5, r7, r5
 8001d9a:	096d      	lsrs	r5, r5, #5
 8001d9c:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8001da0:	4435      	add	r5, r6
 8001da2:	f7ff fb91 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 8001da6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001daa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001dae:	6866      	ldr	r6, [r4, #4]
 8001db0:	00b6      	lsls	r6, r6, #2
 8001db2:	fbb0 f6f6 	udiv	r6, r0, r6
 8001db6:	f7ff fb87 	bl	80014c8 <HAL_RCC_GetPCLK2Freq>
 8001dba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001dbe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001dc2:	6863      	ldr	r3, [r4, #4]
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dca:	fba7 2303 	umull	r2, r3, r7, r3
 8001dce:	095b      	lsrs	r3, r3, #5
 8001dd0:	fb09 6913 	mls	r9, r9, r3, r6
 8001dd4:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001dd8:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001ddc:	fba7 3709 	umull	r3, r7, r7, r9
 8001de0:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8001de4:	442f      	add	r7, r5
 8001de6:	f8c8 7008 	str.w	r7, [r8, #8]
 8001dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dee:	bf00      	nop
 8001df0:	40011000 	.word	0x40011000
 8001df4:	51eb851f 	.word	0x51eb851f

08001df8 <UART_WaitOnFlagUntilTimeout>:
{
 8001df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dfc:	4605      	mov	r5, r0
 8001dfe:	460f      	mov	r7, r1
 8001e00:	4616      	mov	r6, r2
 8001e02:	4698      	mov	r8, r3
 8001e04:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e06:	682b      	ldr	r3, [r5, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	ea37 0303 	bics.w	r3, r7, r3
 8001e0e:	bf0c      	ite	eq
 8001e10:	2301      	moveq	r3, #1
 8001e12:	2300      	movne	r3, #0
 8001e14:	42b3      	cmp	r3, r6
 8001e16:	d11e      	bne.n	8001e56 <UART_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 8001e18:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001e1c:	d0f3      	beq.n	8001e06 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e1e:	b12c      	cbz	r4, 8001e2c <UART_WaitOnFlagUntilTimeout+0x34>
 8001e20:	f7fe fbc4 	bl	80005ac <HAL_GetTick>
 8001e24:	eba0 0008 	sub.w	r0, r0, r8
 8001e28:	4284      	cmp	r4, r0
 8001e2a:	d2ec      	bcs.n	8001e06 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e2c:	682a      	ldr	r2, [r5, #0]
 8001e2e:	68d3      	ldr	r3, [r2, #12]
 8001e30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001e34:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e36:	682a      	ldr	r2, [r5, #0]
 8001e38:	6953      	ldr	r3, [r2, #20]
 8001e3a:	f023 0301 	bic.w	r3, r3, #1
 8001e3e:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001e40:	2320      	movs	r3, #32
 8001e42:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001e46:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8001e50:	2003      	movs	r0, #3
 8001e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 8001e56:	2000      	movs	r0, #0
}
 8001e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001e5c <HAL_UART_Init>:
  if (huart == NULL)
 8001e5c:	b358      	cbz	r0, 8001eb6 <HAL_UART_Init+0x5a>
{
 8001e5e:	b510      	push	{r4, lr}
 8001e60:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001e62:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001e66:	b30b      	cbz	r3, 8001eac <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001e68:	2324      	movs	r3, #36	; 0x24
 8001e6a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001e6e:	6822      	ldr	r2, [r4, #0]
 8001e70:	68d3      	ldr	r3, [r2, #12]
 8001e72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e76:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001e78:	4620      	mov	r0, r4
 8001e7a:	f7ff fe1b 	bl	8001ab4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e7e:	6822      	ldr	r2, [r4, #0]
 8001e80:	6913      	ldr	r3, [r2, #16]
 8001e82:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001e86:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e88:	6822      	ldr	r2, [r4, #0]
 8001e8a:	6953      	ldr	r3, [r2, #20]
 8001e8c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001e90:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001e92:	6822      	ldr	r2, [r4, #0]
 8001e94:	68d3      	ldr	r3, [r2, #12]
 8001e96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e9a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001ea0:	2320      	movs	r3, #32
 8001ea2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ea6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001eaa:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001eac:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001eb0:	f000 fb92 	bl	80025d8 <HAL_UART_MspInit>
 8001eb4:	e7d8      	b.n	8001e68 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	4770      	bx	lr

08001eba <HAL_UART_Transmit>:
{
 8001eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001ec2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b20      	cmp	r3, #32
 8001eca:	d004      	beq.n	8001ed6 <HAL_UART_Transmit+0x1c>
    return HAL_BUSY;
 8001ecc:	2302      	movs	r3, #2
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	b002      	add	sp, #8
 8001ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	460d      	mov	r5, r1
 8001eda:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001edc:	2900      	cmp	r1, #0
 8001ede:	d055      	beq.n	8001f8c <HAL_UART_Transmit+0xd2>
 8001ee0:	2a00      	cmp	r2, #0
 8001ee2:	d055      	beq.n	8001f90 <HAL_UART_Transmit+0xd6>
    __HAL_LOCK(huart);
 8001ee4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_UART_Transmit+0x36>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e7ee      	b.n	8001ece <HAL_UART_Transmit+0x14>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001efa:	2321      	movs	r3, #33	; 0x21
 8001efc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001f00:	f7fe fb54 	bl	80005ac <HAL_GetTick>
 8001f04:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001f06:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f0a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f0e:	e010      	b.n	8001f32 <HAL_UART_Transmit+0x78>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f10:	9600      	str	r6, [sp, #0]
 8001f12:	463b      	mov	r3, r7
 8001f14:	2200      	movs	r2, #0
 8001f16:	2180      	movs	r1, #128	; 0x80
 8001f18:	4620      	mov	r0, r4
 8001f1a:	f7ff ff6d 	bl	8001df8 <UART_WaitOnFlagUntilTimeout>
 8001f1e:	2800      	cmp	r0, #0
 8001f20:	d138      	bne.n	8001f94 <HAL_UART_Transmit+0xda>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001f22:	6822      	ldr	r2, [r4, #0]
 8001f24:	882b      	ldrh	r3, [r5, #0]
 8001f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f2a:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001f2c:	6923      	ldr	r3, [r4, #16]
 8001f2e:	b9cb      	cbnz	r3, 8001f64 <HAL_UART_Transmit+0xaa>
          pData += 2U;
 8001f30:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 8001f32:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	b1bb      	cbz	r3, 8001f68 <HAL_UART_Transmit+0xae>
      huart->TxXferCount--;
 8001f38:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f42:	68a3      	ldr	r3, [r4, #8]
 8001f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f48:	d0e2      	beq.n	8001f10 <HAL_UART_Transmit+0x56>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f4a:	9600      	str	r6, [sp, #0]
 8001f4c:	463b      	mov	r3, r7
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2180      	movs	r1, #128	; 0x80
 8001f52:	4620      	mov	r0, r4
 8001f54:	f7ff ff50 	bl	8001df8 <UART_WaitOnFlagUntilTimeout>
 8001f58:	b9f0      	cbnz	r0, 8001f98 <HAL_UART_Transmit+0xde>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001f5a:	6823      	ldr	r3, [r4, #0]
 8001f5c:	782a      	ldrb	r2, [r5, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	3501      	adds	r5, #1
 8001f62:	e7e6      	b.n	8001f32 <HAL_UART_Transmit+0x78>
          pData += 1U;
 8001f64:	3501      	adds	r5, #1
 8001f66:	e7e4      	b.n	8001f32 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f68:	9600      	str	r6, [sp, #0]
 8001f6a:	463b      	mov	r3, r7
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2140      	movs	r1, #64	; 0x40
 8001f70:	4620      	mov	r0, r4
 8001f72:	f7ff ff41 	bl	8001df8 <UART_WaitOnFlagUntilTimeout>
 8001f76:	4603      	mov	r3, r0
 8001f78:	b108      	cbz	r0, 8001f7e <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e7a7      	b.n	8001ece <HAL_UART_Transmit+0x14>
    huart->gState = HAL_UART_STATE_READY;
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001f84:	2200      	movs	r2, #0
 8001f86:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8001f8a:	e7a0      	b.n	8001ece <HAL_UART_Transmit+0x14>
      return  HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e79e      	b.n	8001ece <HAL_UART_Transmit+0x14>
 8001f90:	2301      	movs	r3, #1
 8001f92:	e79c      	b.n	8001ece <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e79a      	b.n	8001ece <HAL_UART_Transmit+0x14>
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e798      	b.n	8001ece <HAL_UART_Transmit+0x14>

08001f9c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f9c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b20      	cmp	r3, #32
 8001fa4:	d001      	beq.n	8001faa <HAL_UART_Receive_IT+0xe>
    return HAL_BUSY;
 8001fa6:	2002      	movs	r0, #2
 8001fa8:	4770      	bx	lr
    if ((pData == NULL) || (Size == 0U))
 8001faa:	b1f9      	cbz	r1, 8001fec <HAL_UART_Receive_IT+0x50>
 8001fac:	b302      	cbz	r2, 8001ff0 <HAL_UART_Receive_IT+0x54>
    __HAL_LOCK(huart);
 8001fae:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d01e      	beq.n	8001ff4 <HAL_UART_Receive_IT+0x58>
    huart->pRxBuffPtr = pData;
 8001fb6:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8001fb8:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001fba:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001fc0:	2222      	movs	r2, #34	; 0x22
 8001fc2:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 8001fc6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001fca:	6801      	ldr	r1, [r0, #0]
 8001fcc:	68ca      	ldr	r2, [r1, #12]
 8001fce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fd2:	60ca      	str	r2, [r1, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001fd4:	6801      	ldr	r1, [r0, #0]
 8001fd6:	694a      	ldr	r2, [r1, #20]
 8001fd8:	f042 0201 	orr.w	r2, r2, #1
 8001fdc:	614a      	str	r2, [r1, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001fde:	6801      	ldr	r1, [r0, #0]
 8001fe0:	68ca      	ldr	r2, [r1, #12]
 8001fe2:	f042 0220 	orr.w	r2, r2, #32
 8001fe6:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8001fe8:	4618      	mov	r0, r3
 8001fea:	4770      	bx	lr
      return HAL_ERROR;
 8001fec:	2001      	movs	r0, #1
 8001fee:	4770      	bx	lr
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	4770      	bx	lr
    __HAL_LOCK(huart);
 8001ff4:	2002      	movs	r0, #2
}
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_UART_TxCpltCallback>:
{
 8001ff8:	4770      	bx	lr

08001ffa <UART_EndTransmit_IT>:
{
 8001ffa:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001ffc:	6801      	ldr	r1, [r0, #0]
 8001ffe:	68cb      	ldr	r3, [r1, #12]
 8002000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002004:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002006:	2320      	movs	r3, #32
 8002008:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800200c:	f7ff fff4 	bl	8001ff8 <HAL_UART_TxCpltCallback>
}
 8002010:	2000      	movs	r0, #0
 8002012:	bd08      	pop	{r3, pc}

08002014 <UART_Receive_IT>:
{
 8002014:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002016:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b22      	cmp	r3, #34	; 0x22
 800201e:	d001      	beq.n	8002024 <UART_Receive_IT+0x10>
    return HAL_BUSY;
 8002020:	2002      	movs	r0, #2
 8002022:	bd08      	pop	{r3, pc}
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002024:	6883      	ldr	r3, [r0, #8]
 8002026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800202a:	d00f      	beq.n	800204c <UART_Receive_IT+0x38>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800202c:	6903      	ldr	r3, [r0, #16]
 800202e:	bb0b      	cbnz	r3, 8002074 <UART_Receive_IT+0x60>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002030:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	6282      	str	r2, [r0, #40]	; 0x28
 8002036:	6802      	ldr	r2, [r0, #0]
 8002038:	6852      	ldr	r2, [r2, #4]
 800203a:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 800203c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800203e:	b29b      	uxth	r3, r3
 8002040:	3b01      	subs	r3, #1
 8002042:	b29b      	uxth	r3, r3
 8002044:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002046:	b1f3      	cbz	r3, 8002086 <UART_Receive_IT+0x72>
    return HAL_OK;
 8002048:	2000      	movs	r0, #0
}
 800204a:	bd08      	pop	{r3, pc}
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800204c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 800204e:	6903      	ldr	r3, [r0, #16]
 8002050:	b943      	cbnz	r3, 8002064 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002052:	6803      	ldr	r3, [r0, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800205a:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 800205c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800205e:	3302      	adds	r3, #2
 8002060:	6283      	str	r3, [r0, #40]	; 0x28
 8002062:	e7eb      	b.n	800203c <UART_Receive_IT+0x28>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002064:	6803      	ldr	r3, [r0, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 800206c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800206e:	3301      	adds	r3, #1
 8002070:	6283      	str	r3, [r0, #40]	; 0x28
 8002072:	e7e3      	b.n	800203c <UART_Receive_IT+0x28>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002074:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002076:	1c53      	adds	r3, r2, #1
 8002078:	6283      	str	r3, [r0, #40]	; 0x28
 800207a:	6803      	ldr	r3, [r0, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002082:	7013      	strb	r3, [r2, #0]
 8002084:	e7da      	b.n	800203c <UART_Receive_IT+0x28>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002086:	6802      	ldr	r2, [r0, #0]
 8002088:	68d3      	ldr	r3, [r2, #12]
 800208a:	f023 0320 	bic.w	r3, r3, #32
 800208e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002090:	6802      	ldr	r2, [r0, #0]
 8002092:	68d3      	ldr	r3, [r2, #12]
 8002094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002098:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800209a:	6802      	ldr	r2, [r0, #0]
 800209c:	6953      	ldr	r3, [r2, #20]
 800209e:	f023 0301 	bic.w	r3, r3, #1
 80020a2:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80020a4:	2320      	movs	r3, #32
 80020a6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80020aa:	f000 f92b 	bl	8002304 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80020ae:	2000      	movs	r0, #0
 80020b0:	bd08      	pop	{r3, pc}

080020b2 <HAL_UART_ErrorCallback>:
{
 80020b2:	4770      	bx	lr

080020b4 <HAL_UART_IRQHandler>:
{
 80020b4:	b510      	push	{r4, lr}
 80020b6:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80020b8:	6802      	ldr	r2, [r0, #0]
 80020ba:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80020bc:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80020be:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 80020c0:	f013 000f 	ands.w	r0, r3, #15
 80020c4:	d105      	bne.n	80020d2 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020c6:	f013 0f20 	tst.w	r3, #32
 80020ca:	d002      	beq.n	80020d2 <HAL_UART_IRQHandler+0x1e>
 80020cc:	f011 0f20 	tst.w	r1, #32
 80020d0:	d153      	bne.n	800217a <HAL_UART_IRQHandler+0xc6>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80020d2:	2800      	cmp	r0, #0
 80020d4:	d067      	beq.n	80021a6 <HAL_UART_IRQHandler+0xf2>
 80020d6:	f012 0201 	ands.w	r2, r2, #1
 80020da:	d102      	bne.n	80020e2 <HAL_UART_IRQHandler+0x2e>
 80020dc:	f411 7f90 	tst.w	r1, #288	; 0x120
 80020e0:	d061      	beq.n	80021a6 <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80020e2:	f013 0f01 	tst.w	r3, #1
 80020e6:	d006      	beq.n	80020f6 <HAL_UART_IRQHandler+0x42>
 80020e8:	f411 7f80 	tst.w	r1, #256	; 0x100
 80020ec:	d003      	beq.n	80020f6 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80020ee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80020f0:	f040 0001 	orr.w	r0, r0, #1
 80020f4:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020f6:	f013 0f04 	tst.w	r3, #4
 80020fa:	d004      	beq.n	8002106 <HAL_UART_IRQHandler+0x52>
 80020fc:	b11a      	cbz	r2, 8002106 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020fe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002100:	f040 0002 	orr.w	r0, r0, #2
 8002104:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002106:	f013 0f02 	tst.w	r3, #2
 800210a:	d004      	beq.n	8002116 <HAL_UART_IRQHandler+0x62>
 800210c:	b11a      	cbz	r2, 8002116 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800210e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002110:	f040 0004 	orr.w	r0, r0, #4
 8002114:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002116:	f013 0f08 	tst.w	r3, #8
 800211a:	d004      	beq.n	8002126 <HAL_UART_IRQHandler+0x72>
 800211c:	b11a      	cbz	r2, 8002126 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800211e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002120:	f042 0208 	orr.w	r2, r2, #8
 8002124:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002126:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002128:	2a00      	cmp	r2, #0
 800212a:	d048      	beq.n	80021be <HAL_UART_IRQHandler+0x10a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800212c:	f013 0f20 	tst.w	r3, #32
 8002130:	d002      	beq.n	8002138 <HAL_UART_IRQHandler+0x84>
 8002132:	f011 0f20 	tst.w	r1, #32
 8002136:	d124      	bne.n	8002182 <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002138:	6823      	ldr	r3, [r4, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002140:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002142:	f012 0f08 	tst.w	r2, #8
 8002146:	d100      	bne.n	800214a <HAL_UART_IRQHandler+0x96>
 8002148:	b33b      	cbz	r3, 800219a <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 800214a:	4620      	mov	r0, r4
 800214c:	f7ff fc6e 	bl	8001a2c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002150:	6823      	ldr	r3, [r4, #0]
 8002152:	695a      	ldr	r2, [r3, #20]
 8002154:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002158:	d01b      	beq.n	8002192 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002160:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002162:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002164:	b18b      	cbz	r3, 800218a <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002166:	4a1a      	ldr	r2, [pc, #104]	; (80021d0 <HAL_UART_IRQHandler+0x11c>)
 8002168:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800216a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800216c:	f7fe faa0 	bl	80006b0 <HAL_DMA_Abort_IT>
 8002170:	b328      	cbz	r0, 80021be <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002172:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002174:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002176:	4798      	blx	r3
 8002178:	bd10      	pop	{r4, pc}
      UART_Receive_IT(huart);
 800217a:	4620      	mov	r0, r4
 800217c:	f7ff ff4a 	bl	8002014 <UART_Receive_IT>
      return;
 8002180:	bd10      	pop	{r4, pc}
        UART_Receive_IT(huart);
 8002182:	4620      	mov	r0, r4
 8002184:	f7ff ff46 	bl	8002014 <UART_Receive_IT>
 8002188:	e7d6      	b.n	8002138 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 800218a:	4620      	mov	r0, r4
 800218c:	f7ff ff91 	bl	80020b2 <HAL_UART_ErrorCallback>
 8002190:	bd10      	pop	{r4, pc}
          HAL_UART_ErrorCallback(huart);
 8002192:	4620      	mov	r0, r4
 8002194:	f7ff ff8d 	bl	80020b2 <HAL_UART_ErrorCallback>
 8002198:	bd10      	pop	{r4, pc}
        HAL_UART_ErrorCallback(huart);
 800219a:	4620      	mov	r0, r4
 800219c:	f7ff ff89 	bl	80020b2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80021a4:	bd10      	pop	{r4, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80021a6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80021aa:	d002      	beq.n	80021b2 <HAL_UART_IRQHandler+0xfe>
 80021ac:	f011 0f80 	tst.w	r1, #128	; 0x80
 80021b0:	d106      	bne.n	80021c0 <HAL_UART_IRQHandler+0x10c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80021b2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80021b6:	d002      	beq.n	80021be <HAL_UART_IRQHandler+0x10a>
 80021b8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80021bc:	d104      	bne.n	80021c8 <HAL_UART_IRQHandler+0x114>
 80021be:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 80021c0:	4620      	mov	r0, r4
 80021c2:	f7ff fc41 	bl	8001a48 <UART_Transmit_IT>
    return;
 80021c6:	bd10      	pop	{r4, pc}
    UART_EndTransmit_IT(huart);
 80021c8:	4620      	mov	r0, r4
 80021ca:	f7ff ff16 	bl	8001ffa <UART_EndTransmit_IT>
    return;
 80021ce:	e7f6      	b.n	80021be <HAL_UART_IRQHandler+0x10a>
 80021d0:	080021d5 	.word	0x080021d5

080021d4 <UART_DMAAbortOnError>:
{
 80021d4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021d6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80021d8:	2300      	movs	r3, #0
 80021da:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80021dc:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80021de:	f7ff ff68 	bl	80020b2 <HAL_UART_ErrorCallback>
 80021e2:	bd08      	pop	{r3, pc}

080021e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021e4:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021e6:	2200      	movs	r2, #0
 80021e8:	9201      	str	r2, [sp, #4]
 80021ea:	4b10      	ldr	r3, [pc, #64]	; (800222c <MX_GPIO_Init+0x48>)
 80021ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021ee:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80021f2:	6319      	str	r1, [r3, #48]	; 0x30
 80021f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021f6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80021fa:	9101      	str	r1, [sp, #4]
 80021fc:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fe:	9202      	str	r2, [sp, #8]
 8002200:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002202:	f041 0101 	orr.w	r1, r1, #1
 8002206:	6319      	str	r1, [r3, #48]	; 0x30
 8002208:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800220a:	f001 0101 	and.w	r1, r1, #1
 800220e:	9102      	str	r1, [sp, #8]
 8002210:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002212:	9203      	str	r2, [sp, #12]
 8002214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002216:	f042 0202 	orr.w	r2, r2, #2
 800221a:	631a      	str	r2, [r3, #48]	; 0x30
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	9303      	str	r3, [sp, #12]
 8002224:	9b03      	ldr	r3, [sp, #12]

}
 8002226:	b004      	add	sp, #16
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40023800 	.word	0x40023800

08002230 <MX_I2C1_Init>:
{
 8002230:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8002232:	4809      	ldr	r0, [pc, #36]	; (8002258 <MX_I2C1_Init+0x28>)
 8002234:	4b09      	ldr	r3, [pc, #36]	; (800225c <MX_I2C1_Init+0x2c>)
 8002236:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002238:	4b09      	ldr	r3, [pc, #36]	; (8002260 <MX_I2C1_Init+0x30>)
 800223a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800223c:	2300      	movs	r3, #0
 800223e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002240:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002242:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002246:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002248:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800224a:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800224c:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800224e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002250:	f7fe fd40 	bl	8000cd4 <HAL_I2C_Init>
 8002254:	bd08      	pop	{r3, pc}
 8002256:	bf00      	nop
 8002258:	20000038 	.word	0x20000038
 800225c:	40005400 	.word	0x40005400
 8002260:	00061a80 	.word	0x00061a80

08002264 <MX_USART2_UART_Init>:
{
 8002264:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8002266:	4808      	ldr	r0, [pc, #32]	; (8002288 <MX_USART2_UART_Init+0x24>)
 8002268:	4b08      	ldr	r3, [pc, #32]	; (800228c <MX_USART2_UART_Init+0x28>)
 800226a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 9600;
 800226c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002270:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002272:	2300      	movs	r3, #0
 8002274:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002276:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002278:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800227a:	220c      	movs	r2, #12
 800227c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800227e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002280:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002282:	f7ff fdeb 	bl	8001e5c <HAL_UART_Init>
 8002286:	bd08      	pop	{r3, pc}
 8002288:	20000098 	.word	0x20000098
 800228c:	40004400 	.word	0x40004400

08002290 <AccelWrite>:
{
 8002290:	b500      	push	{lr}
 8002292:	b085      	sub	sp, #20
	data[0] = reg;
 8002294:	f88d 000c 	strb.w	r0, [sp, #12]
	data[1] = value;
 8002298:	f88d 100d 	strb.w	r1, [sp, #13]
	HAL_I2C_Master_Transmit (&hi2c1, AccelAddress, data, 2, 100);
 800229c:	2364      	movs	r3, #100	; 0x64
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	2302      	movs	r3, #2
 80022a2:	aa03      	add	r2, sp, #12
 80022a4:	21a6      	movs	r1, #166	; 0xa6
 80022a6:	4803      	ldr	r0, [pc, #12]	; (80022b4 <AccelWrite+0x24>)
 80022a8:	f7fe fde4 	bl	8000e74 <HAL_I2C_Master_Transmit>
}
 80022ac:	b005      	add	sp, #20
 80022ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80022b2:	bf00      	nop
 80022b4:	20000038 	.word	0x20000038

080022b8 <AccelReadValues>:
{
 80022b8:	b500      	push	{lr}
 80022ba:	b085      	sub	sp, #20
	HAL_I2C_Mem_Read (&hi2c1, AccelAddress, reg, 1, (uint8_t *)AccelData, numberofbytes, 100);
 80022bc:	2364      	movs	r3, #100	; 0x64
 80022be:	9302      	str	r3, [sp, #8]
 80022c0:	9101      	str	r1, [sp, #4]
 80022c2:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <AccelReadValues+0x20>)
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	2301      	movs	r3, #1
 80022c8:	4602      	mov	r2, r0
 80022ca:	21a6      	movs	r1, #166	; 0xa6
 80022cc:	4803      	ldr	r0, [pc, #12]	; (80022dc <AccelReadValues+0x24>)
 80022ce:	f7fe fe8b 	bl	8000fe8 <HAL_I2C_Mem_Read>
}
 80022d2:	b005      	add	sp, #20
 80022d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80022d8:	20000090 	.word	0x20000090
 80022dc:	20000038 	.word	0x20000038

080022e0 <AccelInit>:
{
 80022e0:	b508      	push	{r3, lr}
	AccelReadValues(0x00 ,1);
 80022e2:	2101      	movs	r1, #1
 80022e4:	2000      	movs	r0, #0
 80022e6:	f7ff ffe7 	bl	80022b8 <AccelReadValues>
	AccelWrite (0x2d, 0x00);  // reset all bits
 80022ea:	2100      	movs	r1, #0
 80022ec:	202d      	movs	r0, #45	; 0x2d
 80022ee:	f7ff ffcf 	bl	8002290 <AccelWrite>
	AccelWrite (0x2d, 0x08);  // power_cntl measure and wake up 8hz*/
 80022f2:	2108      	movs	r1, #8
 80022f4:	202d      	movs	r0, #45	; 0x2d
 80022f6:	f7ff ffcb 	bl	8002290 <AccelWrite>
	AccelWrite (0x31, 0x00);  // data_format range= +- 2g
 80022fa:	2100      	movs	r1, #0
 80022fc:	2031      	movs	r0, #49	; 0x31
 80022fe:	f7ff ffc7 	bl	8002290 <AccelWrite>
 8002302:	bd08      	pop	{r3, pc}

08002304 <HAL_UART_RxCpltCallback>:
{
 8002304:	b510      	push	{r4, lr}
		if (huart->Instance == USART2)             //is current uart?
 8002306:	6802      	ldr	r2, [r0, #0]
 8002308:	4b1b      	ldr	r3, [pc, #108]	; (8002378 <HAL_UART_RxCpltCallback+0x74>)
 800230a:	429a      	cmp	r2, r3
 800230c:	d00a      	beq.n	8002324 <HAL_UART_RxCpltCallback+0x20>
		__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800230e:	481b      	ldr	r0, [pc, #108]	; (800237c <HAL_UART_RxCpltCallback+0x78>)
 8002310:	6802      	ldr	r2, [r0, #0]
 8002312:	68d3      	ldr	r3, [r2, #12]
 8002314:	f043 0320 	orr.w	r3, r3, #32
 8002318:	60d3      	str	r3, [r2, #12]
		HAL_UART_Receive_IT (&huart2, Rx_buffer, 4);
 800231a:	2204      	movs	r2, #4
 800231c:	4918      	ldr	r1, [pc, #96]	; (8002380 <HAL_UART_RxCpltCallback+0x7c>)
 800231e:	f7ff fe3d 	bl	8001f9c <HAL_UART_Receive_IT>
 8002322:	bd10      	pop	{r4, pc}
			if((Rx_buffer[0] == 0xFF) && (Rx_buffer[1] == 0x00) && (Rx_buffer[2] == 0xFF) && (Rx_buffer[3] == 0x00))
 8002324:	4b16      	ldr	r3, [pc, #88]	; (8002380 <HAL_UART_RxCpltCallback+0x7c>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2bff      	cmp	r3, #255	; 0xff
 800232a:	d015      	beq.n	8002358 <HAL_UART_RxCpltCallback+0x54>
			HAL_UART_Transmit(&huart2 ,Rx_buffer ,4 ,20);
 800232c:	4c14      	ldr	r4, [pc, #80]	; (8002380 <HAL_UART_RxCpltCallback+0x7c>)
 800232e:	2314      	movs	r3, #20
 8002330:	2204      	movs	r2, #4
 8002332:	4621      	mov	r1, r4
 8002334:	4811      	ldr	r0, [pc, #68]	; (800237c <HAL_UART_RxCpltCallback+0x78>)
 8002336:	f7ff fdc0 	bl	8001eba <HAL_UART_Transmit>
			TimeStamp |= (Rx_buffer[0]);
 800233a:	7822      	ldrb	r2, [r4, #0]
 800233c:	4911      	ldr	r1, [pc, #68]	; (8002384 <HAL_UART_RxCpltCallback+0x80>)
 800233e:	680b      	ldr	r3, [r1, #0]
 8002340:	4313      	orrs	r3, r2
			TimeStamp |= (Rx_buffer[1]);
 8002342:	7862      	ldrb	r2, [r4, #1]
 8002344:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
			TimeStamp |= (Rx_buffer[2]);
 8002348:	78a3      	ldrb	r3, [r4, #2]
 800234a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
			TimeStamp |= (Rx_buffer[3]);
 800234e:	78e3      	ldrb	r3, [r4, #3]
 8002350:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002354:	600b      	str	r3, [r1, #0]
 8002356:	e7da      	b.n	800230e <HAL_UART_RxCpltCallback+0xa>
			if((Rx_buffer[0] == 0xFF) && (Rx_buffer[1] == 0x00) && (Rx_buffer[2] == 0xFF) && (Rx_buffer[3] == 0x00))
 8002358:	4b09      	ldr	r3, [pc, #36]	; (8002380 <HAL_UART_RxCpltCallback+0x7c>)
 800235a:	785b      	ldrb	r3, [r3, #1]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1e5      	bne.n	800232c <HAL_UART_RxCpltCallback+0x28>
 8002360:	4b07      	ldr	r3, [pc, #28]	; (8002380 <HAL_UART_RxCpltCallback+0x7c>)
 8002362:	789b      	ldrb	r3, [r3, #2]
 8002364:	2bff      	cmp	r3, #255	; 0xff
 8002366:	d1e1      	bne.n	800232c <HAL_UART_RxCpltCallback+0x28>
 8002368:	4b05      	ldr	r3, [pc, #20]	; (8002380 <HAL_UART_RxCpltCallback+0x7c>)
 800236a:	78db      	ldrb	r3, [r3, #3]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1dd      	bne.n	800232c <HAL_UART_RxCpltCallback+0x28>
				SendFlag = 1;
 8002370:	2201      	movs	r2, #1
 8002372:	4b05      	ldr	r3, [pc, #20]	; (8002388 <HAL_UART_RxCpltCallback+0x84>)
 8002374:	705a      	strb	r2, [r3, #1]
 8002376:	e7ca      	b.n	800230e <HAL_UART_RxCpltCallback+0xa>
 8002378:	40004400 	.word	0x40004400
 800237c:	20000098 	.word	0x20000098
 8002380:	200000d8 	.word	0x200000d8
 8002384:	2000008c 	.word	0x2000008c
 8002388:	20000028 	.word	0x20000028

0800238c <IncrementTimer>:
	if(SendFlag == 1)
 800238c:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <IncrementTimer+0x14>)
 800238e:	785b      	ldrb	r3, [r3, #1]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d000      	beq.n	8002396 <IncrementTimer+0xa>
 8002394:	4770      	bx	lr
	TimeStamp = TimeStamp+1;
 8002396:	4a03      	ldr	r2, [pc, #12]	; (80023a4 <IncrementTimer+0x18>)
 8002398:	6813      	ldr	r3, [r2, #0]
 800239a:	3301      	adds	r3, #1
 800239c:	6013      	str	r3, [r2, #0]
}
 800239e:	e7f9      	b.n	8002394 <IncrementTimer+0x8>
 80023a0:	20000028 	.word	0x20000028
 80023a4:	2000008c 	.word	0x2000008c

080023a8 <SystemClock_Config>:
{
 80023a8:	b530      	push	{r4, r5, lr}
 80023aa:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ac:	2234      	movs	r2, #52	; 0x34
 80023ae:	2100      	movs	r1, #0
 80023b0:	a807      	add	r0, sp, #28
 80023b2:	f000 f9d9 	bl	8002768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023b6:	2400      	movs	r4, #0
 80023b8:	9402      	str	r4, [sp, #8]
 80023ba:	9403      	str	r4, [sp, #12]
 80023bc:	9404      	str	r4, [sp, #16]
 80023be:	9405      	str	r4, [sp, #20]
 80023c0:	9406      	str	r4, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023c2:	9400      	str	r4, [sp, #0]
 80023c4:	4b1d      	ldr	r3, [pc, #116]	; (800243c <SystemClock_Config+0x94>)
 80023c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023d8:	9401      	str	r4, [sp, #4]
 80023da:	4b19      	ldr	r3, [pc, #100]	; (8002440 <SystemClock_Config+0x98>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80023ea:	9301      	str	r3, [sp, #4]
 80023ec:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023ee:	2301      	movs	r3, #1
 80023f0:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023f6:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023f8:	2502      	movs	r5, #2
 80023fa:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002400:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002402:	2304      	movs	r3, #4
 8002404:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002406:	23b4      	movs	r3, #180	; 0xb4
 8002408:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800240a:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800240c:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800240e:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002410:	a807      	add	r0, sp, #28
 8002412:	f7ff f929 	bl	8001668 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002416:	f7fe ff55 	bl	80012c4 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800241a:	230f      	movs	r3, #15
 800241c:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800241e:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002420:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002422:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002426:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800242c:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800242e:	2105      	movs	r1, #5
 8002430:	a802      	add	r0, sp, #8
 8002432:	f7fe ff87 	bl	8001344 <HAL_RCC_ClockConfig>
}
 8002436:	b015      	add	sp, #84	; 0x54
 8002438:	bd30      	pop	{r4, r5, pc}
 800243a:	bf00      	nop
 800243c:	40023800 	.word	0x40023800
 8002440:	40007000 	.word	0x40007000

08002444 <main>:
{
 8002444:	b508      	push	{r3, lr}
  HAL_Init();
 8002446:	f7fe f889 	bl	800055c <HAL_Init>
  SystemClock_Config();
 800244a:	f7ff ffad 	bl	80023a8 <SystemClock_Config>
  MX_GPIO_Init();
 800244e:	f7ff fec9 	bl	80021e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002452:	f7ff feed 	bl	8002230 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002456:	f7ff ff05 	bl	8002264 <MX_USART2_UART_Init>
  AccelInit ();
 800245a:	f7ff ff41 	bl	80022e0 <AccelInit>
   __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800245e:	482c      	ldr	r0, [pc, #176]	; (8002510 <main+0xcc>)
 8002460:	6802      	ldr	r2, [r0, #0]
 8002462:	68d3      	ldr	r3, [r2, #12]
 8002464:	f043 0320 	orr.w	r3, r3, #32
 8002468:	60d3      	str	r3, [r2, #12]
   HAL_UART_Receive_IT (&huart2, Rx_buffer, 4);
 800246a:	2204      	movs	r2, #4
 800246c:	4929      	ldr	r1, [pc, #164]	; (8002514 <main+0xd0>)
 800246e:	f7ff fd95 	bl	8001f9c <HAL_UART_Receive_IT>
 8002472:	e004      	b.n	800247e <main+0x3a>
  		  HAL_UART_Receive_IT (&huart2, Rx_buffer, 4);
 8002474:	2204      	movs	r2, #4
 8002476:	4927      	ldr	r1, [pc, #156]	; (8002514 <main+0xd0>)
 8002478:	4825      	ldr	r0, [pc, #148]	; (8002510 <main+0xcc>)
 800247a:	f7ff fd8f 	bl	8001f9c <HAL_UART_Receive_IT>
      if(SendFlag == 0)
 800247e:	4b26      	ldr	r3, [pc, #152]	; (8002518 <main+0xd4>)
 8002480:	785b      	ldrb	r3, [r3, #1]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f6      	beq.n	8002474 <main+0x30>
  	  else if(SendFlag == 1)
 8002486:	2b01      	cmp	r3, #1
 8002488:	d1f9      	bne.n	800247e <main+0x3a>
  		    AccelReadValues (0x32 , 6);
 800248a:	2106      	movs	r1, #6
 800248c:	2032      	movs	r0, #50	; 0x32
 800248e:	f7ff ff13 	bl	80022b8 <AccelReadValues>
            TS_buffer[3] = (uint8_t) ((TimeStamp >> 0)  & 0x000000FF);
 8002492:	4b22      	ldr	r3, [pc, #136]	; (800251c <main+0xd8>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	b2d1      	uxtb	r1, r2
 8002498:	4c1f      	ldr	r4, [pc, #124]	; (8002518 <main+0xd4>)
 800249a:	71e1      	strb	r1, [r4, #7]
  		    TS_buffer[2] = (uint8_t) ((TimeStamp >> 8)  & 0x000000FF);
 800249c:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80024a0:	71a0      	strb	r0, [r4, #6]
  		    TS_buffer[1] = (uint8_t) ((TimeStamp >> 16) & 0x000000FF);
 80024a2:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80024a6:	7163      	strb	r3, [r4, #5]
  		    TS_buffer[0] = (uint8_t) ((TimeStamp >> 24) & 0x000000FF);
 80024a8:	0e12      	lsrs	r2, r2, #24
 80024aa:	7122      	strb	r2, [r4, #4]
            CheckSum = TS_buffer[0] + TS_buffer[1] + TS_buffer[2] + TS_buffer[3] + AccelData[0]
 80024ac:	4413      	add	r3, r2
 80024ae:	fa50 f383 	uxtab	r3, r0, r3
 80024b2:	fa51 f383 	uxtab	r3, r1, r3
 80024b6:	4d1a      	ldr	r5, [pc, #104]	; (8002520 <main+0xdc>)
 80024b8:	782a      	ldrb	r2, [r5, #0]
 80024ba:	fa52 f383 	uxtab	r3, r2, r3
				   + AccelData[1]+ AccelData[2]+ AccelData[3]+ AccelData[4]+ AccelData[5];
 80024be:	786a      	ldrb	r2, [r5, #1]
 80024c0:	fa52 f383 	uxtab	r3, r2, r3
 80024c4:	78aa      	ldrb	r2, [r5, #2]
 80024c6:	fa52 f383 	uxtab	r3, r2, r3
 80024ca:	78ea      	ldrb	r2, [r5, #3]
 80024cc:	fa52 f383 	uxtab	r3, r2, r3
 80024d0:	792a      	ldrb	r2, [r5, #4]
 80024d2:	fa52 f383 	uxtab	r3, r2, r3
 80024d6:	796a      	ldrb	r2, [r5, #5]
 80024d8:	fa52 f383 	uxtab	r3, r2, r3
            CheckSum = TS_buffer[0] + TS_buffer[1] + TS_buffer[2] + TS_buffer[3] + AccelData[0]
 80024dc:	7223      	strb	r3, [r4, #8]
            HAL_Delay(20);
 80024de:	2014      	movs	r0, #20
 80024e0:	f7fe f86a 	bl	80005b8 <HAL_Delay>
            HAL_UART_Transmit(&huart2 ,TS_buffer ,4 ,10);
 80024e4:	4e0a      	ldr	r6, [pc, #40]	; (8002510 <main+0xcc>)
 80024e6:	230a      	movs	r3, #10
 80024e8:	2204      	movs	r2, #4
 80024ea:	18a1      	adds	r1, r4, r2
 80024ec:	4630      	mov	r0, r6
 80024ee:	f7ff fce4 	bl	8001eba <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2 ,AccelData ,6 ,10);
 80024f2:	230a      	movs	r3, #10
 80024f4:	2206      	movs	r2, #6
 80024f6:	4629      	mov	r1, r5
 80024f8:	4630      	mov	r0, r6
 80024fa:	f7ff fcde 	bl	8001eba <HAL_UART_Transmit>
  		    HAL_UART_Transmit(&huart2 ,&CheckSum ,1 ,10);
 80024fe:	230a      	movs	r3, #10
 8002500:	2201      	movs	r2, #1
 8002502:	f104 0108 	add.w	r1, r4, #8
 8002506:	4630      	mov	r0, r6
 8002508:	f7ff fcd7 	bl	8001eba <HAL_UART_Transmit>
 800250c:	e7b7      	b.n	800247e <main+0x3a>
 800250e:	bf00      	nop
 8002510:	20000098 	.word	0x20000098
 8002514:	200000d8 	.word	0x200000d8
 8002518:	20000028 	.word	0x20000028
 800251c:	2000008c 	.word	0x2000008c
 8002520:	20000090 	.word	0x20000090

08002524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002524:	b500      	push	{lr}
 8002526:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002528:	2100      	movs	r1, #0
 800252a:	9100      	str	r1, [sp, #0]
 800252c:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <HAL_MspInit+0x3c>)
 800252e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002530:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002534:	645a      	str	r2, [r3, #68]	; 0x44
 8002536:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002538:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800253c:	9200      	str	r2, [sp, #0]
 800253e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002540:	9101      	str	r1, [sp, #4]
 8002542:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002544:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002548:	641a      	str	r2, [r3, #64]	; 0x40
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002550:	9301      	str	r3, [sp, #4]
 8002552:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002554:	2007      	movs	r0, #7
 8002556:	f7fe f843 	bl	80005e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800255a:	b003      	add	sp, #12
 800255c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002560:	40023800 	.word	0x40023800

08002564 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002564:	b530      	push	{r4, r5, lr}
 8002566:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	2300      	movs	r3, #0
 800256a:	9303      	str	r3, [sp, #12]
 800256c:	9304      	str	r3, [sp, #16]
 800256e:	9305      	str	r3, [sp, #20]
 8002570:	9306      	str	r3, [sp, #24]
 8002572:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8002574:	6802      	ldr	r2, [r0, #0]
 8002576:	4b15      	ldr	r3, [pc, #84]	; (80025cc <HAL_I2C_MspInit+0x68>)
 8002578:	429a      	cmp	r2, r3
 800257a:	d001      	beq.n	8002580 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800257c:	b009      	add	sp, #36	; 0x24
 800257e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002580:	2500      	movs	r5, #0
 8002582:	9501      	str	r5, [sp, #4]
 8002584:	4c12      	ldr	r4, [pc, #72]	; (80025d0 <HAL_I2C_MspInit+0x6c>)
 8002586:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002588:	f043 0302 	orr.w	r3, r3, #2
 800258c:	6323      	str	r3, [r4, #48]	; 0x30
 800258e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002598:	f44f 7340 	mov.w	r3, #768	; 0x300
 800259c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800259e:	2312      	movs	r3, #18
 80025a0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025a2:	2301      	movs	r3, #1
 80025a4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a6:	2303      	movs	r3, #3
 80025a8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025aa:	2304      	movs	r3, #4
 80025ac:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ae:	a903      	add	r1, sp, #12
 80025b0:	4808      	ldr	r0, [pc, #32]	; (80025d4 <HAL_I2C_MspInit+0x70>)
 80025b2:	f7fe f891 	bl	80006d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025b6:	9502      	str	r5, [sp, #8]
 80025b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025be:	6423      	str	r3, [r4, #64]	; 0x40
 80025c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c6:	9302      	str	r3, [sp, #8]
 80025c8:	9b02      	ldr	r3, [sp, #8]
}
 80025ca:	e7d7      	b.n	800257c <HAL_I2C_MspInit+0x18>
 80025cc:	40005400 	.word	0x40005400
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40020400 	.word	0x40020400

080025d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025d8:	b510      	push	{r4, lr}
 80025da:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	2300      	movs	r3, #0
 80025de:	9303      	str	r3, [sp, #12]
 80025e0:	9304      	str	r3, [sp, #16]
 80025e2:	9305      	str	r3, [sp, #20]
 80025e4:	9306      	str	r3, [sp, #24]
 80025e6:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 80025e8:	6802      	ldr	r2, [r0, #0]
 80025ea:	4b19      	ldr	r3, [pc, #100]	; (8002650 <HAL_UART_MspInit+0x78>)
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025f0:	b008      	add	sp, #32
 80025f2:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80025f4:	2400      	movs	r4, #0
 80025f6:	9401      	str	r4, [sp, #4]
 80025f8:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80025fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025fe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002602:	641a      	str	r2, [r3, #64]	; 0x40
 8002604:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002606:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800260a:	9201      	str	r2, [sp, #4]
 800260c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260e:	9402      	str	r4, [sp, #8]
 8002610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	631a      	str	r2, [r3, #48]	; 0x30
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	9302      	str	r3, [sp, #8]
 8002620:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002622:	230c      	movs	r3, #12
 8002624:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	2302      	movs	r3, #2
 8002628:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800262a:	2301      	movs	r3, #1
 800262c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262e:	2303      	movs	r3, #3
 8002630:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002632:	2307      	movs	r3, #7
 8002634:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002636:	a903      	add	r1, sp, #12
 8002638:	4806      	ldr	r0, [pc, #24]	; (8002654 <HAL_UART_MspInit+0x7c>)
 800263a:	f7fe f84d 	bl	80006d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800263e:	4622      	mov	r2, r4
 8002640:	4621      	mov	r1, r4
 8002642:	2026      	movs	r0, #38	; 0x26
 8002644:	f7fd ffde 	bl	8000604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002648:	2026      	movs	r0, #38	; 0x26
 800264a:	f7fe f80d 	bl	8000668 <HAL_NVIC_EnableIRQ>
}
 800264e:	e7cf      	b.n	80025f0 <HAL_UART_MspInit+0x18>
 8002650:	40004400 	.word	0x40004400
 8002654:	40020000 	.word	0x40020000

08002658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002658:	4770      	bx	lr

0800265a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800265a:	e7fe      	b.n	800265a <HardFault_Handler>

0800265c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800265c:	e7fe      	b.n	800265c <MemManage_Handler>

0800265e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800265e:	e7fe      	b.n	800265e <BusFault_Handler>

08002660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002660:	e7fe      	b.n	8002660 <UsageFault_Handler>

08002662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002662:	4770      	bx	lr

08002664 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002664:	4770      	bx	lr

08002666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002666:	4770      	bx	lr

08002668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002668:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800266a:	f7fd ff91 	bl	8000590 <HAL_IncTick>
 800266e:	bd08      	pop	{r3, pc}

08002670 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002670:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002672:	4802      	ldr	r0, [pc, #8]	; (800267c <USART2_IRQHandler+0xc>)
 8002674:	f7ff fd1e 	bl	80020b4 <HAL_UART_IRQHandler>
 8002678:	bd08      	pop	{r3, pc}
 800267a:	bf00      	nop
 800267c:	20000098 	.word	0x20000098

08002680 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002680:	490f      	ldr	r1, [pc, #60]	; (80026c0 <SystemInit+0x40>)
 8002682:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002686:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800268a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800268e:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <SystemInit+0x44>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002698:	2000      	movs	r0, #0
 800269a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80026a2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80026a8:	4a07      	ldr	r2, [pc, #28]	; (80026c8 <SystemInit+0x48>)
 80026aa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026b2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80026b4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80026ba:	608b      	str	r3, [r1, #8]
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	e000ed00 	.word	0xe000ed00
 80026c4:	40023800 	.word	0x40023800
 80026c8:	24003010 	.word	0x24003010

080026cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002704 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026d2:	e003      	b.n	80026dc <LoopCopyDataInit>

080026d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026da:	3104      	adds	r1, #4

080026dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026dc:	480b      	ldr	r0, [pc, #44]	; (800270c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026de:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80026e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026e4:	d3f6      	bcc.n	80026d4 <CopyDataInit>
  ldr  r2, =_sbss
 80026e6:	4a0b      	ldr	r2, [pc, #44]	; (8002714 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80026e8:	e002      	b.n	80026f0 <LoopFillZerobss>

080026ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80026ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80026ec:	f842 3b04 	str.w	r3, [r2], #4

080026f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80026f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80026f4:	d3f9      	bcc.n	80026ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026f6:	f7ff ffc3 	bl	8002680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026fa:	f000 f811 	bl	8002720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026fe:	f7ff fea1 	bl	8002444 <main>
  bx  lr    
 8002702:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002704:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002708:	080027b8 	.word	0x080027b8
  ldr  r0, =_sdata
 800270c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002710:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002714:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002718:	200000dc 	.word	0x200000dc

0800271c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800271c:	e7fe      	b.n	800271c <ADC_IRQHandler>
	...

08002720 <__libc_init_array>:
 8002720:	b570      	push	{r4, r5, r6, lr}
 8002722:	4e0d      	ldr	r6, [pc, #52]	; (8002758 <__libc_init_array+0x38>)
 8002724:	4c0d      	ldr	r4, [pc, #52]	; (800275c <__libc_init_array+0x3c>)
 8002726:	1ba4      	subs	r4, r4, r6
 8002728:	10a4      	asrs	r4, r4, #2
 800272a:	2500      	movs	r5, #0
 800272c:	42a5      	cmp	r5, r4
 800272e:	d109      	bne.n	8002744 <__libc_init_array+0x24>
 8002730:	4e0b      	ldr	r6, [pc, #44]	; (8002760 <__libc_init_array+0x40>)
 8002732:	4c0c      	ldr	r4, [pc, #48]	; (8002764 <__libc_init_array+0x44>)
 8002734:	f000 f820 	bl	8002778 <_init>
 8002738:	1ba4      	subs	r4, r4, r6
 800273a:	10a4      	asrs	r4, r4, #2
 800273c:	2500      	movs	r5, #0
 800273e:	42a5      	cmp	r5, r4
 8002740:	d105      	bne.n	800274e <__libc_init_array+0x2e>
 8002742:	bd70      	pop	{r4, r5, r6, pc}
 8002744:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002748:	4798      	blx	r3
 800274a:	3501      	adds	r5, #1
 800274c:	e7ee      	b.n	800272c <__libc_init_array+0xc>
 800274e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002752:	4798      	blx	r3
 8002754:	3501      	adds	r5, #1
 8002756:	e7f2      	b.n	800273e <__libc_init_array+0x1e>
 8002758:	080027b0 	.word	0x080027b0
 800275c:	080027b0 	.word	0x080027b0
 8002760:	080027b0 	.word	0x080027b0
 8002764:	080027b4 	.word	0x080027b4

08002768 <memset>:
 8002768:	4402      	add	r2, r0
 800276a:	4603      	mov	r3, r0
 800276c:	4293      	cmp	r3, r2
 800276e:	d100      	bne.n	8002772 <memset+0xa>
 8002770:	4770      	bx	lr
 8002772:	f803 1b01 	strb.w	r1, [r3], #1
 8002776:	e7f9      	b.n	800276c <memset+0x4>

08002778 <_init>:
 8002778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277a:	bf00      	nop
 800277c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277e:	bc08      	pop	{r3}
 8002780:	469e      	mov	lr, r3
 8002782:	4770      	bx	lr

08002784 <_fini>:
 8002784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002786:	bf00      	nop
 8002788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800278a:	bc08      	pop	{r3}
 800278c:	469e      	mov	lr, r3
 800278e:	4770      	bx	lr
